finalColor <- c(0, 0, 0)
for(i in 0:3) {
uv <- fract(uv * 1.5) - 0.5
d <- sqrt(c(crossprod(uv))) * exp(-sqrt(c(crossprod(uv0))))
col <- palette(sqrt(c(crossprod(uv0))) + i*0.4 + 200*0.4)
d <- abs(sin(d*8 + 200)) / 8
d <- (0.01/d)^1.2
finalColor <- finalColor + col * d
}
finalColor <- pmin(finalColor, 255)
M[j+1, k+1] <- rgb(finalColor[1], finalColor[2], finalColor[3], maxColorValue = 255)
}
}
plot(c(-1024,1024), c(-1024,1024))
rasterImage(M, -1024, -1024, 1024, 1024)
#  This animation is the material of my first youtube tutorial about creative
# coding, which is a video in which I try to introduce programmers to GLSL
# and to the wonderful world of shaders, while also trying to share my recent
# passion for this community.
# Video URL: https://youtu.be/f4s1h2YETNY
#  //https://iquilezles.org/articles/palettes/
palette <- function(t) {
a <- c(0.5, 0.5, 0.5)
b <- c(0.5, 0.5, 0.5)
c <- c(1.0, 1.0, 1.0)
d <- c(0.263,0.416,0.557)
a + b*cos( 6.28318*(c*t+d) )
}
# #//https://www.shadertoy.com/view/mtyGWy
# void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
#   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
#   vec2 uv0 = uv;
#   vec3 finalColor = vec3(0.0);
#
#   for (float i = 0.0; i < 4.0; i++) {
#     uv = fract(uv * 1.5) - 0.5;
#
#     float d = length(uv) * exp(-length(uv0));
#
#     vec3 col = palette(length(uv0) + i*.4 + iTime*.4);
#
#     d = sin(d*8. + iTime)/8.;
#     d = abs(d);
#
#     d = pow(0.01 / d, 1.2);
#
#     finalColor += col * d;
#   }
#
#   fragColor = vec4(finalColor, 1.0);
# }
fract <- function(x) {
x - floor(x)
}
m <- 1024
n <- 1024
M <- matrix(NA_character_, nrow = m, ncol = n)
for(j in 0:(m-1)) {
for(k in 0:(n-1)) {
uv <- (2*c(j,k,1024) - c(1024,1024,1024))/1024
#print(uv)
uv0 <- uv
finalColor <- c(0, 0, 0)
for(i in 0:3) {
uv <- fract(uv * 1.5) - 0.5
d <- sqrt(c(crossprod(uv))) * exp(-sqrt(c(crossprod(uv0))))
col <- palette(sqrt(c(crossprod(uv0))) + i*0.4 + 2*0.4)
d <- abs(sin(d*8 + 2)) / 8
d <- (0.01/d)^1.2
finalColor <- finalColor + col * d
}
finalColor <- pmin(finalColor, 255)
M[j+1, k+1] <- rgb(finalColor[1], finalColor[2], finalColor[3], maxColorValue = 255)
}
}
plot(c(-1024,1024), c(-1024,1024))
rasterImage(M, -1024, -1024, 1024, 1024)
table(c(M))
#  This animation is the material of my first youtube tutorial about creative
# coding, which is a video in which I try to introduce programmers to GLSL
# and to the wonderful world of shaders, while also trying to share my recent
# passion for this community.
# Video URL: https://youtu.be/f4s1h2YETNY
#  //https://iquilezles.org/articles/palettes/
palette <- function(t) {
a <- c(0.5, 0.5, 0.5)
b <- c(0.5, 0.5, 0.5)
c <- c(1.0, 1.0, 1.0)
d <- c(0.263,0.416,0.557)
a + b*cos( 6.28318*(c*t+d) )
}
# #//https://www.shadertoy.com/view/mtyGWy
# void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
#   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
#   vec2 uv0 = uv;
#   vec3 finalColor = vec3(0.0);
#
#   for (float i = 0.0; i < 4.0; i++) {
#     uv = fract(uv * 1.5) - 0.5;
#
#     float d = length(uv) * exp(-length(uv0));
#
#     vec3 col = palette(length(uv0) + i*.4 + iTime*.4);
#
#     d = sin(d*8. + iTime)/8.;
#     d = abs(d);
#
#     d = pow(0.01 / d, 1.2);
#
#     finalColor += col * d;
#   }
#
#   fragColor = vec4(finalColor, 1.0);
# }
fract <- function(x) {
x - floor(x)
}
m <- 512
n <- 512
M <- matrix(NA_character_, nrow = m, ncol = n)
for(j in 0:(m-1)) {
for(k in 0:(n-1)) {
uv = (c(j, k, 512) * 2.0 - c(512, 512,512)) / 512
uv0 = uv
finalColor <- c(0, 0, 0)
for(i in 0:1) {
uv <- fract(uv * 2) - 0.5
d <- sqrt(c(crossprod(uv)))
col <- palette(sqrt(c(crossprod(uv0))) + 20*0.4)
d <- abs(sin(d*8 + 20)) / 8
d <- (0.01/d)^1.2
finalColor <- finalColor + col * d
finalColor <- pmin(finalColor, 255)
}
M[j+1, k+1] <-
rgb(255*rbind(finalColor), maxColorValue = 255)
}
}
#  This animation is the material of my first youtube tutorial about creative
# coding, which is a video in which I try to introduce programmers to GLSL
# and to the wonderful world of shaders, while also trying to share my recent
# passion for this community.
# Video URL: https://youtu.be/f4s1h2YETNY
#  //https://iquilezles.org/articles/palettes/
palette <- function(t) {
a <- c(0.5, 0.5, 0.5)
b <- c(0.5, 0.5, 0.5)
c <- c(1.0, 1.0, 1.0)
d <- c(0.263,0.416,0.557)
a + b*cos( 6.28318*(c*t+d) )
}
# #//https://www.shadertoy.com/view/mtyGWy
# void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
#   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
#   vec2 uv0 = uv;
#   vec3 finalColor = vec3(0.0);
#
#   for (float i = 0.0; i < 4.0; i++) {
#     uv = fract(uv * 1.5) - 0.5;
#
#     float d = length(uv) * exp(-length(uv0));
#
#     vec3 col = palette(length(uv0) + i*.4 + iTime*.4);
#
#     d = sin(d*8. + iTime)/8.;
#     d = abs(d);
#
#     d = pow(0.01 / d, 1.2);
#
#     finalColor += col * d;
#   }
#
#   fragColor = vec4(finalColor, 1.0);
# }
fract <- function(x) {
x - floor(x)
}
m <- 512
n <- 512
M <- matrix(NA_character_, nrow = m, ncol = n)
for(j in 0:(m-1)) {
for(k in 0:(n-1)) {
uv = (c(j, k, 512) * 2.0 - c(512, 512,512)) / 512
uv0 = uv
finalColor <- c(0, 0, 0)
for(i in 0:1) {
uv <- fract(uv * 2) - 0.5
d <- sqrt(c(crossprod(uv)))
col <- palette(sqrt(c(crossprod(uv0))) + 20*0.4)
d <- abs(sin(d*8 + 20)) / 8
d <- (0.01/d)^1.2
finalColor <- finalColor + col * d
}
finalColor <- pmin(finalColor, 255)
M[j+1, k+1] <-
rgb(255*rbind(finalColor), maxColorValue = 255)
}
}
#  This animation is the material of my first youtube tutorial about creative
# coding, which is a video in which I try to introduce programmers to GLSL
# and to the wonderful world of shaders, while also trying to share my recent
# passion for this community.
# Video URL: https://youtu.be/f4s1h2YETNY
#  //https://iquilezles.org/articles/palettes/
palette <- function(t) {
a <- c(0.5, 0.5, 0.5)
b <- c(0.5, 0.5, 0.5)
c <- c(1.0, 1.0, 1.0)
d <- c(0.263,0.416,0.557)
a + b*cos( 6.28318*(c*t+d) )
}
# #//https://www.shadertoy.com/view/mtyGWy
# void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
#   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
#   vec2 uv0 = uv;
#   vec3 finalColor = vec3(0.0);
#
#   for (float i = 0.0; i < 4.0; i++) {
#     uv = fract(uv * 1.5) - 0.5;
#
#     float d = length(uv) * exp(-length(uv0));
#
#     vec3 col = palette(length(uv0) + i*.4 + iTime*.4);
#
#     d = sin(d*8. + iTime)/8.;
#     d = abs(d);
#
#     d = pow(0.01 / d, 1.2);
#
#     finalColor += col * d;
#   }
#
#   fragColor = vec4(finalColor, 1.0);
# }
fract <- function(x) {
x - floor(x)
}
m <- 512
n <- 512
M <- matrix(NA_character_, nrow = m, ncol = n)
for(j in 0:(m-1)) {
for(k in 0:(n-1)) {
uv = (c(j, k, 512) * 2.0 - c(512, 512,512)) / 512
uv0 = uv
finalColor <- c(0, 0, 0)
for(i in 0:1) {
uv <- fract(uv * 2) - 0.5
d <- sqrt(c(crossprod(uv)))
col <- palette(sqrt(c(crossprod(uv0))) + 20*0.4)
d <- abs(sin(d*8 + 20)) / 8
d <- (0.01/d)^1.2
finalColor <- finalColor + col * d
}
finalColor <- pmin(finalColor, 255)
M[j+1, k+1] <- rgb(finalColor[1], finalColor[2], finalColor[3], maxColorValue = 255)
}
}
plot(NULL, type="n", xlim=c(0,512), ylim = c(0,512))
rasterImage(t(M), 0, 0, 512, 512, interpolate = FALSE)
#  This animation is the material of my first youtube tutorial about creative
# coding, which is a video in which I try to introduce programmers to GLSL
# and to the wonderful world of shaders, while also trying to share my recent
# passion for this community.
# Video URL: https://youtu.be/f4s1h2YETNY
#  //https://iquilezles.org/articles/palettes/
palette <- function(t) {
a <- c(0.5, 0.5, 0.5)
b <- c(0.5, 0.5, 0.5)
c <- c(1.0, 1.0, 1.0)
d <- c(0.263,0.416,0.557)
a + b*cos( 6.28318*(c*t+d) )
}
# #//https://www.shadertoy.com/view/mtyGWy
# void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
#   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
#   vec2 uv0 = uv;
#   vec3 finalColor = vec3(0.0);
#
#   for (float i = 0.0; i < 4.0; i++) {
#     uv = fract(uv * 1.5) - 0.5;
#
#     float d = length(uv) * exp(-length(uv0));
#
#     vec3 col = palette(length(uv0) + i*.4 + iTime*.4);
#
#     d = sin(d*8. + iTime)/8.;
#     d = abs(d);
#
#     d = pow(0.01 / d, 1.2);
#
#     finalColor += col * d;
#   }
#
#   fragColor = vec4(finalColor, 1.0);
# }
fract <- function(x) {
x - floor(x)
}
m <- 512
n <- 512
M <- matrix(NA_character_, nrow = m, ncol = n)
for(j in 0:(m-1)) {
for(k in 0:(n-1)) {
uv = (c(j, k, 512) * 2.0 - c(512, 512,512)) / 512
uv0 = uv
finalColor <- c(0, 0, 0)
for(i in 0:1) {
uv <- fract(uv * 2) - 0.5
d <- sqrt(c(crossprod(uv)))
col <- palette(sqrt(c(crossprod(uv0))) + 20*0.4)
d <- abs(sin(d*8 + 20)) / 8
d <- (0.01/d)^1.2
finalColor <- finalColor + col * d
}
finalColor <- pmin(finalColor, 1)
M[j+1, k+1] <- rgb(finalColor[1], finalColor[2], finalColor[3], maxColorValue = 1)
}
}
plot(NULL, type="n", xlim=c(0,512), ylim = c(0,512))
rasterImage(t(M), 0, 0, 512, 512, interpolate = FALSE)
#  This animation is the material of my first youtube tutorial about creative
# coding, which is a video in which I try to introduce programmers to GLSL
# and to the wonderful world of shaders, while also trying to share my recent
# passion for this community.
# Video URL: https://youtu.be/f4s1h2YETNY
#  //https://iquilezles.org/articles/palettes/
palette <- function(t) {
a <- c(0.5, 0.5, 0.5)
b <- c(0.5, 0.5, 0.5)
c <- c(1.0, 1.0, 1.0)
d <- c(0.263,0.416,0.557)
a + b*cos( 6.28318*(c*t+d) )
}
# #//https://www.shadertoy.com/view/mtyGWy
# void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
#   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
#   vec2 uv0 = uv;
#   vec3 finalColor = vec3(0.0);
#
#   for (float i = 0.0; i < 4.0; i++) {
#     uv = fract(uv * 1.5) - 0.5;
#
#     float d = length(uv) * exp(-length(uv0));
#
#     vec3 col = palette(length(uv0) + i*.4 + iTime*.4);
#
#     d = sin(d*8. + iTime)/8.;
#     d = abs(d);
#
#     d = pow(0.01 / d, 1.2);
#
#     finalColor += col * d;
#   }
#
#   fragColor = vec4(finalColor, 1.0);
# }
fract <- function(x) {
x - floor(x)
}
m <- 1024
n <- 1024
M <- matrix(NA_character_, nrow = m, ncol = n)
for(j in 0:(m-1)) {
for(k in 0:(n-1)) {
uv <- (2*c(j,k,1024) - c(1024,1024,1024))/1024
#print(uv)
uv0 <- uv
finalColor <- c(0, 0, 0)
for(i in 0:3) {
uv <- fract(uv * 1.5) - 0.5
d <- sqrt(c(crossprod(uv))) * exp(-sqrt(c(crossprod(uv0))))
col <- palette(sqrt(c(crossprod(uv0))) + i*0.4 + 2*0.4)
d <- abs(sin(d*8 + 2)) / 8
d <- (0.01/d)^1.2
finalColor <- finalColor + col * d
}
finalColor <- pmin(finalColor, 1)
M[j+1, k+1] <- rgb(finalColor[1], finalColor[2], finalColor[3], maxColorValue = 1)
}
}
plot(c(-1024,1024), c(-1024,1024))
rasterImage(M, -1024, -1024, 1024, 1024)
#  This animation is the material of my first youtube tutorial about creative
# coding, which is a video in which I try to introduce programmers to GLSL
# and to the wonderful world of shaders, while also trying to share my recent
# passion for this community.
# Video URL: https://youtu.be/f4s1h2YETNY
#  //https://iquilezles.org/articles/palettes/
palette <- function(t) {
a <- c(0.5, 0.5, 0.5)
b <- c(0.5, 0.5, 0.5)
c <- c(1.0, 1.0, 1.0)
d <- c(0.263,0.416,0.557)
a + b*cos( 6.28318*(c*t+d) )
}
# #//https://www.shadertoy.com/view/mtyGWy
# void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
#   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
#   vec2 uv0 = uv;
#   vec3 finalColor = vec3(0.0);
#
#   for (float i = 0.0; i < 4.0; i++) {
#     uv = fract(uv * 1.5) - 0.5;
#
#     float d = length(uv) * exp(-length(uv0));
#
#     vec3 col = palette(length(uv0) + i*.4 + iTime*.4);
#
#     d = sin(d*8. + iTime)/8.;
#     d = abs(d);
#
#     d = pow(0.01 / d, 1.2);
#
#     finalColor += col * d;
#   }
#
#   fragColor = vec4(finalColor, 1.0);
# }
fract <- function(x) {
x - floor(x)
}
m <- 512
n <- 512
M <- matrix(NA_character_, nrow = m, ncol = n)
for(j in 0:(m-1)) {
for(k in 0:(n-1)) {
uv = (c(j, k, 512) * 2.0 - c(512, 512,512)) / 512
uv0 = uv
finalColor <- c(0, 0, 0)
for(i in 0:1) {
uv <- fract(uv * 2) - 0.5
d <- sqrt(c(crossprod(uv)))
col <- palette(sqrt(c(crossprod(uv0))) + 200*0.4)
d <- abs(sin(d*8 + 200)) / 8
d <- (0.01/d)^1.2
finalColor <- finalColor + col * d
}
finalColor <- pmin(finalColor, 1)
M[j+1, k+1] <- rgb(finalColor[1], finalColor[2], finalColor[3], maxColorValue = 1)
}
}
plot(NULL, type="n", xlim=c(0,512), ylim = c(0,512))
rasterImage(t(M), 0, 0, 512, 512, interpolate = FALSE)
#  This animation is the material of my first youtube tutorial about creative
# coding, which is a video in which I try to introduce programmers to GLSL
# and to the wonderful world of shaders, while also trying to share my recent
# passion for this community.
# Video URL: https://youtu.be/f4s1h2YETNY
#  //https://iquilezles.org/articles/palettes/
palette <- function(t) {
a <- c(0.5, 0.5, 0.5)
b <- c(0.5, 0.5, 0.5)
c <- c(1.0, 1.0, 1.0)
d <- c(0.263,0.416,0.557)
a + b*cos( 6.28318*(c*t+d) )
}
# #//https://www.shadertoy.com/view/mtyGWy
# void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
#   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;
#   vec2 uv0 = uv;
#   vec3 finalColor = vec3(0.0);
#
#   for (float i = 0.0; i < 4.0; i++) {
#     uv = fract(uv * 1.5) - 0.5;
#
#     float d = length(uv) * exp(-length(uv0));
#
#     vec3 col = palette(length(uv0) + i*.4 + iTime*.4);
#
#     d = sin(d*8. + iTime)/8.;
#     d = abs(d);
#
#     d = pow(0.01 / d, 1.2);
#
#     finalColor += col * d;
#   }
#
#   fragColor = vec4(finalColor, 1.0);
# }
fract <- function(x) {
x - floor(x)
}
m <- 1024
n <- 1024
M <- matrix(NA_character_, nrow = m, ncol = n)
for(j in 0:(m-1)) {
for(k in 0:(n-1)) {
uv <- (2*c(j,k,1024) - c(1024,1024,1024))/1024
#print(uv)
uv0 <- uv
finalColor <- c(0, 0, 0)
for(i in 0:3) {
uv <- fract(uv * 1.5) - 0.5
d <- sqrt(c(crossprod(uv))) * exp(-sqrt(c(crossprod(uv0))))
col <- palette(sqrt(c(crossprod(uv0))) + i*0.4 + 200*0.4)
d <- abs(sin(d*8 + 200)) / 8
d <- (0.01/d)^1.2
finalColor <- finalColor + col * d
}
finalColor <- pmin(finalColor, 1)
M[j+1, k+1] <- rgb(finalColor[1], finalColor[2], finalColor[3], maxColorValue = 1)
}
}
plot(c(-1024,1024), c(-1024,1024))
rasterImage(M, -1024, -1024, 1024, 1024)
setwd("C:/SL/SaturnElephant/stlahblog/frames")
findInFiles("html", "inverse")
findInFiles::findInFiles("html", "inverse")
findInFiles::findInFiles("html", "inverse")
findInFiles::findInFiles("html", "mobius")
findInFiles::findInFiles("html", "mobius")
findInFiles::findInFiles("html", "mobius")

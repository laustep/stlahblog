<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>Saturn Elephant</title>
    <link>https://laustep.github.io/stlahblog</link>
    <description><![CDATA[A blog about R and more.]]></description>
    <atom:link href="https://laustep.github.io/stlahblog/feed.xml" rel="self" type="application/rss+xml"/>
    <lastBuildDate>Thu, 10 Aug 2023 00:00:00 UT</lastBuildDate>
    <item>
      <title>Drawing a tennis ball</title>
      <link>https://laustep.github.io/stlahblog/posts/TennisBall.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Short post today. Did you know that the intersection of the Enneper
        surface with a sphere looks like the seam of a tennis ball? That’s what
        we shall see.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">f &lt;-<span class="st"> </span><span class="cf">function</span>(x, y, z) { <span class="co"># Enneper surface: f=0</span></span>
<span id="cb1-2">  <span class="dv">64</span><span class="op">*</span>z<span class="op">^</span><span class="dv">9</span> <span class="op">-</span><span class="st"> </span><span class="dv">128</span><span class="op">*</span>z<span class="op">^</span><span class="dv">7</span> <span class="op">+</span><span class="st"> </span><span class="dv">64</span><span class="op">*</span>z<span class="op">^</span><span class="dv">5</span> <span class="op">-</span><span class="st"> </span><span class="dv">702</span><span class="op">*</span>x<span class="op">^</span><span class="dv">2</span><span class="op">*</span>y<span class="op">^</span><span class="dv">2</span><span class="op">*</span>z<span class="op">^</span><span class="dv">3</span> <span class="op">-</span><span class="st"> </span><span class="dv">18</span><span class="op">*</span>x<span class="op">^</span><span class="dv">2</span><span class="op">*</span>y<span class="op">^</span><span class="dv">2</span><span class="op">*</span>z <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-3"><span class="st">    </span><span class="dv">144</span><span class="op">*</span>(y<span class="op">^</span><span class="dv">2</span><span class="op">*</span>z<span class="op">^</span><span class="dv">6</span><span class="op">-</span>x<span class="op">^</span><span class="dv">2</span><span class="op">*</span>z<span class="op">^</span><span class="dv">6</span>) <span class="op">+</span><span class="st"> </span><span class="dv">162</span><span class="op">*</span>(y<span class="op">^</span><span class="dv">4</span><span class="op">*</span>z<span class="op">^</span><span class="dv">2</span><span class="op">-</span>x<span class="op">^</span><span class="dv">4</span><span class="op">*</span>z<span class="op">^</span><span class="dv">2</span>) <span class="op">+</span><span class="st"> </span><span class="dv">27</span><span class="op">*</span>(y<span class="op">^</span><span class="dv">6</span><span class="op">-</span>x<span class="op">^</span><span class="dv">6</span>) <span class="op">+</span></span>
<span id="cb1-4"><span class="st">    </span><span class="dv">9</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">4</span><span class="op">*</span>z<span class="op">+</span>y<span class="op">^</span><span class="dv">4</span><span class="op">*</span>z) <span class="op">+</span><span class="st"> </span><span class="dv">48</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">*</span>z<span class="op">^</span><span class="dv">3</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span><span class="op">*</span>z<span class="op">^</span><span class="dv">3</span>) <span class="op">-</span><span class="st"> </span><span class="dv">432</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">*</span>z<span class="op">^</span><span class="dv">5</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span><span class="op">*</span>z<span class="op">^</span><span class="dv">5</span>) <span class="op">+</span></span>
<span id="cb1-5"><span class="st">    </span><span class="dv">81</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">4</span><span class="op">*</span>y<span class="op">^</span><span class="dv">2</span><span class="op">-</span>x<span class="op">^</span><span class="dv">2</span><span class="op">*</span>y<span class="op">^</span><span class="dv">4</span>) <span class="op">+</span><span class="st"> </span><span class="dv">240</span><span class="op">*</span>(y<span class="op">^</span><span class="dv">2</span><span class="op">*</span>z<span class="op">^</span><span class="dv">4</span><span class="op">-</span>x<span class="op">^</span><span class="dv">2</span><span class="op">*</span>z<span class="op">^</span><span class="dv">4</span>) <span class="op">-</span><span class="st"> </span><span class="dv">135</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">4</span><span class="op">*</span>z<span class="op">^</span><span class="dv">3</span><span class="op">+</span>y<span class="op">^</span><span class="dv">4</span><span class="op">*</span>z<span class="op">^</span><span class="dv">3</span>)</span>
<span id="cb1-6">}</span></code></pre>
      </div>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(rgl)</span>
<span id="cb2-2">smesh &lt;-<span class="st"> </span>cgalMeshes<span class="op">::</span><span class="kw">sphereMesh</span>(<span class="dt">r =</span> <span class="fl">0.5</span>, <span class="dt">iterations =</span> 5L)</span>
<span id="cb2-3">mesh1 &lt;-<span class="st"> </span><span class="kw">clipMesh3d</span>(smesh, f, <span class="dt">greater =</span> <span class="ot">TRUE</span>, <span class="dt">minVertices =</span> 20000L)</span>
<span id="cb2-4">mesh2 &lt;-<span class="st"> </span><span class="kw">clipMesh3d</span>(smesh, f, <span class="dt">greater =</span> <span class="ot">FALSE</span>, <span class="dt">minVertices =</span> 20000L)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb3-2"><span class="kw">shade3d</span>(mesh1, <span class="dt">col =</span> <span class="st">"yellow"</span>, <span class="dt">polygon_offset =</span> <span class="dv">1</span>)</span>
<span id="cb3-3"><span class="kw">shade3d</span>(mesh2, <span class="dt">col =</span> <span class="st">"orangered"</span>, <span class="dt">polygon_offset =</span> <span class="dv">1</span>)</span>
<span id="cb3-4">b &lt;-<span class="st"> </span><span class="kw">getBoundary3d</span>(mesh1, <span class="dt">sorted =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"lightgray"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span>
<span id="cb3-5"><span class="kw">shade3d</span>(b)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/TennisBall.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 10 Aug 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/TennisBall.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Drawing a tubular path with Julia</title>
      <link>https://laustep.github.io/stlahblog/posts/juliaTube.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I implemented the framed closed curves exposed in
        <a
          href="http://wordpress.discretization.de/ddg2016/2016/05/10/tutorial-3-framed-closed-curves/"
          >this blog post</a
        >, in Julia and R. In fact it is useless with R, because the
        <strong>rgl</strong> function <code>cylinder3d</code> is faster and
        better.
      </p>
      <p>Here is the Julia implementation:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb1-1"><span class="kw">using</span> LinearAlgebra</span>
<span id="cb1-2"><span class="kw">using</span> Quaternions</span>
<span id="cb1-3"><span class="kw">using</span> Meshes</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co"># quaternion corresponding to "the" rotation mapping u to v</span></span>
<span id="cb1-6"><span class="kw">function</span> quaternionFromTo(u<span class="op">,</span> v)</span>
<span id="cb1-7">  re <span class="op">=</span> √((<span class="fl">1.0</span> <span class="op">+</span> u ⋅ v) <span class="op">/</span> <span class="fl">2.0</span>)</span>
<span id="cb1-8">  w <span class="op">=</span> (u × v) <span class="op">/</span> <span class="fl">2.0</span> <span class="op">/</span> re</span>
<span id="cb1-9">  <span class="kw">return</span> QuaternionF64(re<span class="op">,</span> w<span class="op">...</span>)</span>
<span id="cb1-10"><span class="kw">end</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co"># pts: points forming the path</span></span>
<span id="cb1-13"><span class="co"># sides: number of sides of the tube</span></span>
<span id="cb1-14"><span class="co"># radius: tube radius</span></span>
<span id="cb1-15"><span class="co"># twists: number of twists</span></span>
<span id="cb1-16"><span class="kw">function</span> closedTube(pts<span class="op">,</span> sides<span class="op">,</span> radius<span class="op">,</span> twists)</span>
<span id="cb1-17">  n<span class="op">,</span> _ <span class="op">=</span> size(pts)</span>
<span id="cb1-18">  <span class="cn">e</span> <span class="op">=</span> [pts[i<span class="op">+</span><span class="fl">1</span><span class="op">,</span> <span class="op">:</span>] <span class="op">-</span> pts[i<span class="op">,</span> <span class="op">:</span>] <span class="kw">for</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>(n<span class="op">-</span><span class="fl">1</span>)]</span>
<span id="cb1-19">  push<span class="op">!</span>(<span class="cn">e</span><span class="op">,</span> pts[<span class="fl">1</span><span class="op">,</span> <span class="op">:</span>] <span class="op">-</span> pts[n<span class="op">,</span> <span class="op">:</span>])</span>
<span id="cb1-20">  tangents <span class="op">=</span> map(normalize<span class="op">,</span> <span class="cn">e</span>)</span>
<span id="cb1-21">  qtangents <span class="op">=</span> map(tgt <span class="op">-&gt;</span> QuaternionF64(<span class="fl">0.0</span><span class="op">,</span> tgt<span class="op">...</span>)<span class="op">,</span> tangents)</span>
<span id="cb1-22">  dotproducts <span class="op">=</span> [tangents[i<span class="op">+</span><span class="fl">1</span><span class="op">,</span> <span class="op">:</span>] ⋅ tangents[i<span class="op">,</span> <span class="op">:</span>] <span class="kw">for</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>(n<span class="op">-</span><span class="fl">1</span>)]</span>
<span id="cb1-23">  a <span class="op">=</span> sqrt.((<span class="fl">1</span> .<span class="op">+</span> dotproducts) <span class="op">/</span> <span class="fl">2.0</span>)</span>
<span id="cb1-24">  V <span class="op">=</span> <span class="dt">Vector</span>{<span class="dt">Vector</span>{<span class="dt">Float64</span>}}(<span class="cn">undef</span><span class="op">,</span> n<span class="op">-</span><span class="fl">1</span>)</span>
<span id="cb1-25">  <span class="kw">for</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>(n<span class="op">-</span><span class="fl">1</span>)</span>
<span id="cb1-26">    V[i] <span class="op">=</span> <span class="op">-</span> [imag_part(qtangents[i<span class="op">+</span><span class="fl">1</span>] <span class="op">*</span> qtangents[i])<span class="op">...</span>] <span class="op">/</span> </span>
<span id="cb1-27">      sqrt(<span class="fl">2.0</span> <span class="op">+</span> <span class="fl">2.0</span><span class="op">*</span>dotproducts[i])</span>
<span id="cb1-28">  <span class="kw">end</span></span>
<span id="cb1-29">  Qs <span class="op">=</span> [QuaternionF64(a[i]<span class="op">,</span> V[i]<span class="op">...</span>) <span class="kw">for</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>(n<span class="op">-</span><span class="fl">1</span>)]</span>
<span id="cb1-30">  <span class="co"># the quaternions psi_k</span></span>
<span id="cb1-31">  Qprodcuts <span class="op">=</span> <span class="dt">Vector</span>{QuaternionF64}(<span class="cn">undef</span><span class="op">,</span> n<span class="op">-</span><span class="fl">1</span>)</span>
<span id="cb1-32">  Qprodcuts[<span class="fl">1</span>] <span class="op">=</span> Qs[<span class="fl">1</span>]</span>
<span id="cb1-33">  <span class="kw">for</span> i <span class="kw">in</span> <span class="fl">2</span><span class="op">:</span>(n<span class="op">-</span><span class="fl">1</span>)</span>
<span id="cb1-34">    Qprodcuts[i] <span class="op">=</span> Qs[i] <span class="op">*</span> Qprodcuts[i<span class="op">-</span><span class="fl">1</span>]</span>
<span id="cb1-35">  <span class="kw">end</span></span>
<span id="cb1-36">  Psi <span class="op">=</span> <span class="dt">Vector</span>{QuaternionF64}(<span class="cn">undef</span><span class="op">,</span> n)</span>
<span id="cb1-37">  psi0 <span class="op">=</span> quaternionFromTo([<span class="fl">1</span><span class="op">;</span> <span class="fl">0</span><span class="op">;</span> <span class="fl">0</span>]<span class="op">,</span> tangents[<span class="fl">1</span>])</span>
<span id="cb1-38">  Psi[<span class="fl">1</span>] <span class="op">=</span> psi0</span>
<span id="cb1-39">  <span class="kw">for</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>(n<span class="op">-</span><span class="fl">1</span>)</span>
<span id="cb1-40">    Psi[i<span class="op">+</span><span class="fl">1</span>] <span class="op">=</span> Qs[i] <span class="op">*</span> Psi[i]</span>
<span id="cb1-41">  <span class="kw">end</span></span>
<span id="cb1-42">  <span class="co"># angle defect omega </span></span>
<span id="cb1-43">  init <span class="op">=</span> zeros(<span class="dt">Float64</span><span class="op">,</span> <span class="fl">3</span>)</span>
<span id="cb1-44">  init[argmin(tangents[<span class="fl">1</span>])] <span class="op">=</span> <span class="fl">1</span></span>
<span id="cb1-45">  N0 <span class="op">=</span> normalize(tangents[<span class="fl">1</span>] × init)</span>
<span id="cb1-46">  qN0 <span class="op">=</span> QuaternionF64(<span class="fl">0.0</span><span class="op">,</span> N0<span class="op">...</span>)</span>
<span id="cb1-47">  qlast <span class="op">=</span> Qprodcuts[n<span class="op">-</span><span class="fl">1</span>]</span>
<span id="cb1-48">  qNN <span class="op">=</span> qlast <span class="op">*</span> qN0 <span class="op">*</span> conj(qlast)</span>
<span id="cb1-49">  NN <span class="op">=</span> [imag_part(qNN)<span class="op">...</span>]</span>
<span id="cb1-50">  x <span class="op">=</span> NN ⋅ N0</span>
<span id="cb1-51">  T0 <span class="op">=</span> normalize(NN × N0)</span>
<span id="cb1-52">  B0 <span class="op">=</span> T0 × N0</span>
<span id="cb1-53">  y <span class="op">=</span> NN ⋅ B0</span>
<span id="cb1-54">  omega <span class="op">=</span> atan(y<span class="op">,</span> x) <span class="op">+</span> twists <span class="op">*</span> <span class="fl">2.0</span> <span class="op">*</span> <span class="cn">pi</span></span>
<span id="cb1-55">  <span class="co"># the quaternions psiTilde_k</span></span>
<span id="cb1-56">  norms <span class="op">=</span> map(v <span class="op">-&gt;</span> sqrt(v ⋅ v)<span class="op">,</span> <span class="cn">e</span>[<span class="fl">1</span><span class="op">:</span>(n<span class="op">-</span><span class="fl">1</span>)])</span>
<span id="cb1-57">  s <span class="op">=</span> cumsum([<span class="fl">0.0</span><span class="op">,</span> norms<span class="op">...</span>])</span>
<span id="cb1-58">  angles <span class="op">=</span> <span class="op">-</span>omega <span class="op">*</span> s <span class="op">/</span> (<span class="fl">2</span><span class="op">*</span>s[n])</span>
<span id="cb1-59">  PsiTilde <span class="op">=</span> <span class="dt">Vector</span>{QuaternionF64}(<span class="cn">undef</span><span class="op">,</span> n)</span>
<span id="cb1-60">  PsiTilde[<span class="fl">1</span>] <span class="op">=</span> Psi[<span class="fl">1</span>]</span>
<span id="cb1-61">  <span class="kw">for</span> i <span class="kw">in</span> <span class="fl">2</span><span class="op">:</span>n</span>
<span id="cb1-62">    angle <span class="op">=</span> angles[i]</span>
<span id="cb1-63">    PsiTilde[i] <span class="op">=</span> Psi[i] <span class="op">*</span> </span>
<span id="cb1-64">      QuaternionF64(cos(angle)<span class="op">,</span> sin(angle)<span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span>)</span>
<span id="cb1-65">  <span class="kw">end</span></span>
<span id="cb1-66">  <span class="co"># mesh </span></span>
<span id="cb1-67">  R <span class="op">=</span> zeros(<span class="dt">Float64</span><span class="op">,</span> <span class="fl">3</span><span class="op">,</span> sides<span class="op">,</span> n<span class="op">-</span><span class="fl">1</span>)</span>
<span id="cb1-68">  Hj <span class="op">=</span> QuaternionF64(<span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">1.0</span><span class="op">,</span> <span class="fl">0.0</span>)</span>
<span id="cb1-69">  <span class="kw">for</span> k <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>sides</span>
<span id="cb1-70">    α <span class="op">=</span> (k <span class="op">-</span> <span class="fl">1.0</span>) <span class="op">/</span> sides</span>
<span id="cb1-71">    r0 <span class="op">=</span> QuaternionF64(cospi(α)<span class="op">,</span> sinpi(α)<span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span>)</span>
<span id="cb1-72">    r1 <span class="op">=</span> r0 <span class="op">*</span> Hj <span class="op">*</span> conj(r0)</span>
<span id="cb1-73">    <span class="kw">for</span> j <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>(n<span class="op">-</span><span class="fl">1</span>)</span>
<span id="cb1-74">      psi <span class="op">=</span> PsiTilde[j]</span>
<span id="cb1-75">      R[<span class="op">:,</span> k<span class="op">,</span> j] <span class="op">=</span> pts[j<span class="op">,</span> <span class="op">:</span>] <span class="op">+</span> </span>
<span id="cb1-76">        radius <span class="op">*</span> [imag_part(psi <span class="op">*</span> r1 <span class="op">*</span> conj(psi))<span class="op">...</span>]</span>
<span id="cb1-77">    <span class="kw">end</span></span>
<span id="cb1-78">  <span class="kw">end</span></span>
<span id="cb1-79">  verts <span class="op">=</span> hcat([R[<span class="op">:,</span> <span class="op">:,</span> i] <span class="kw">for</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>(n<span class="op">-</span><span class="fl">1</span>)]<span class="op">...</span>)</span>
<span id="cb1-80">  points <span class="op">=</span> [verts[<span class="op">:,</span> i] <span class="kw">for</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>((n<span class="op">-</span><span class="fl">1</span>)<span class="op">*</span>sides)] </span>
<span id="cb1-81">  quads <span class="op">=</span> GridTopology((sides<span class="op">,</span> n<span class="op">-</span><span class="fl">1</span>)<span class="op">,</span> (<span class="ex">true</span><span class="op">,</span> <span class="ex">true</span>))</span>
<span id="cb1-82">  <span class="kw">return</span> SimpleMesh([Meshes.Point(pt<span class="op">...</span>) <span class="kw">for</span> pt <span class="kw">in</span> points]<span class="op">,</span> quads)</span>
<span id="cb1-83"><span class="kw">end</span></span></code></pre>
      </div>
      <p>Here is an example, a knot:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb2-1"><span class="kw">using</span> MeshViz</span>
<span id="cb2-2"><span class="kw">using</span> GLMakie</span>
<span id="cb2-3"></span>
<span id="cb2-4">theta <span class="op">=</span> collect(<span class="dt">LinRange</span>(<span class="fl">0</span><span class="op">,</span> <span class="fl">2</span><span class="op">*</span><span class="cn">pi</span><span class="op">,</span> <span class="fl">151</span>)[<span class="fl">1</span><span class="op">:</span><span class="fl">150</span>])</span>
<span id="cb2-5">knot <span class="op">=</span> </span>
<span id="cb2-6">  [</span>
<span id="cb2-7">      [sin.(theta) <span class="op">+</span> <span class="fl">2</span><span class="op">*</span>sin.(<span class="fl">2</span><span class="op">*</span>theta)]</span>
<span id="cb2-8">    <span class="op">,</span> [<span class="fl">2</span><span class="op">*</span>sin.(<span class="fl">3</span><span class="op">*</span>theta)]</span>
<span id="cb2-9">    <span class="op">,</span> [cos.(theta) <span class="op">-</span> <span class="fl">2</span><span class="op">*</span>cos.(<span class="fl">2</span><span class="op">*</span>theta)]</span>
<span id="cb2-10">  ]</span>
<span id="cb2-11"></span>
<span id="cb2-12">mesh <span class="op">=</span> closedTube(knot<span class="op">,</span> <span class="fl">60</span><span class="op">,</span> <span class="fl">0.35</span><span class="op">,</span> <span class="fl">0</span>)</span>
<span id="cb2-13">viz(mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/juliaKnot.png"
        />
      </p>
      <p>
        The current version of <strong>MeshViz</strong> always adds normals to
        the meshes, so we can’t correctly see what happens if we only set a
        couple of sides and if we use some twists. So let’s see what this gives
        with the R version, with four sides and two twists:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/RtwistedKnot.gif"
        />
      </p>
      <p>
        Below is the R code. But again, don’t use it, use
        <code>rgl::cylinder3d</code> instead.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(onion)</span>
<span id="cb3-2"><span class="kw">library</span>(rgl)</span>
<span id="cb3-3"></span>
<span id="cb3-4">closedTubeMesh &lt;-<span class="st"> </span><span class="cf">function</span>(pts, nsides, epsilon, <span class="dt">twist =</span> <span class="dv">0</span>) {</span>
<span id="cb3-5">  n &lt;-<span class="st"> </span><span class="kw">nrow</span>(pts)</span>
<span id="cb3-6">  <span class="co"># tangents</span></span>
<span id="cb3-7">  e &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb3-8">    <span class="kw">t</span>(<span class="kw">vapply</span>(1L<span class="op">:</span>(n<span class="op">-</span>1L), <span class="cf">function</span>(i) pts[i<span class="op">+</span>1L, ]<span class="op">-</span>pts[i, ], <span class="kw">numeric</span>(3L))),</span>
<span id="cb3-9">    pts[1L, ]<span class="op">-</span>pts[n, ]</span>
<span id="cb3-10">  )</span>
<span id="cb3-11">  nrms &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">apply</span>(e, 1L, crossprod))</span>
<span id="cb3-12">  Tgs &lt;-<span class="st"> </span>e <span class="op">/</span><span class="st"> </span>nrms</span>
<span id="cb3-13">  Tgs_quat &lt;-<span class="st"> </span><span class="kw">as.quaternion</span>(<span class="kw">rbind</span>(<span class="dv">0</span>, <span class="kw">t</span>(Tgs)))</span>
<span id="cb3-14">  <span class="co"># the quaternions q</span></span>
<span id="cb3-15">  sprods &lt;-<span class="st"> </span><span class="kw">vapply</span>(</span>
<span id="cb3-16">    1L<span class="op">:</span>(n<span class="op">-</span>1L), <span class="cf">function</span>(i) <span class="kw">c</span>(<span class="kw">crossprod</span>(Tgs[i<span class="op">+</span>1L, ], Tgs[i, ])), <span class="kw">numeric</span>(1L)</span>
<span id="cb3-17">  )</span>
<span id="cb3-18">  a &lt;-<span class="st"> </span><span class="kw">sqrt</span>((<span class="dv">1</span> <span class="op">+</span><span class="st"> </span>sprods) <span class="op">/</span><span class="st"> </span><span class="dv">2</span>)</span>
<span id="cb3-19">  v &lt;-<span class="st"> </span><span class="kw">quaternion</span>(<span class="dt">length.out =</span> n<span class="op">-</span>1L)</span>
<span id="cb3-20">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(n<span class="op">-</span>1L)) {</span>
<span id="cb3-21">    v[i] &lt;-<span class="st"> </span><span class="dv">-1</span> <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>sprods[i]) <span class="op">*</span><span class="st"> </span><span class="kw">Im</span>(Tgs_quat[i<span class="op">+</span>1L] <span class="op">*</span><span class="st"> </span>Tgs_quat[i])</span>
<span id="cb3-22">  }</span>
<span id="cb3-23">  q &lt;-<span class="st"> </span>a <span class="op">+</span><span class="st"> </span>v</span>
<span id="cb3-24">  <span class="co"># the psi_k</span></span>
<span id="cb3-25">  qpr &lt;-<span class="st"> </span><span class="kw">Conj</span>(<span class="kw">onion_cumprod</span>(<span class="kw">Conj</span>(q))) </span>
<span id="cb3-26">  Psi &lt;-<span class="st"> </span><span class="kw">quaternion</span>(<span class="dt">length.out =</span> n)</span>
<span id="cb3-27">  psi0 &lt;-<span class="st"> </span>cgalMeshes<span class="op">:::</span><span class="kw">quaternionFromTo</span>(<span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">0</span>), Tgs[1L, ])</span>
<span id="cb3-28">  Psi[1L] &lt;-<span class="st"> </span>psi0</span>
<span id="cb3-29">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(n<span class="op">-</span>1L)) {</span>
<span id="cb3-30">    Psi[i<span class="op">+</span>1L] &lt;-<span class="st"> </span>qpr[i] <span class="op">*</span><span class="st"> </span>psi0</span>
<span id="cb3-31">  }</span>
<span id="cb3-32">  <span class="co"># omega (angle defect)</span></span>
<span id="cb3-33">  init &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>)</span>
<span id="cb3-34">  init[<span class="kw">which.min</span>(<span class="kw">abs</span>(Tgs[1L, ]))] &lt;-<span class="st"> </span><span class="dv">1</span></span>
<span id="cb3-35">  N0 &lt;-<span class="st"> </span>cgalMeshes<span class="op">::</span><span class="kw">crossProduct</span>(Tgs[1L, ], init)</span>
<span id="cb3-36">  N0 &lt;-<span class="st"> </span>N0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(N0)))</span>
<span id="cb3-37">  N0_quat &lt;-<span class="st"> </span><span class="kw">as.quaternion</span>(<span class="kw">c</span>(<span class="dv">0</span>, N0), <span class="dt">single =</span> <span class="ot">TRUE</span>)</span>
<span id="cb3-38">  qN &lt;-<span class="st"> </span>qpr[n<span class="op">-</span>1L]</span>
<span id="cb3-39">  NN_quat &lt;-<span class="st"> </span>qN <span class="op">*</span><span class="st"> </span>N0_quat <span class="op">*</span><span class="st"> </span><span class="kw">Conj</span>(qN)</span>
<span id="cb3-40">  NN &lt;-<span class="st"> </span><span class="kw">as.numeric</span>(NN_quat)[<span class="op">-</span>1L]</span>
<span id="cb3-41">  x &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">crossprod</span>(NN, N0))</span>
<span id="cb3-42">  T0 &lt;-<span class="st"> </span>cgalMeshes<span class="op">::</span><span class="kw">crossProduct</span>(NN, N0)</span>
<span id="cb3-43">  T0 &lt;-<span class="st"> </span>T0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(T0)))</span>
<span id="cb3-44">  B0 &lt;-<span class="st"> </span>cgalMeshes<span class="op">::</span><span class="kw">crossProduct</span>(T0, N0) </span>
<span id="cb3-45">  y &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">crossprod</span>(NN, B0)) <span class="co"># x^2+y^2=1</span></span>
<span id="cb3-46">  omega &lt;-<span class="st"> </span><span class="kw">atan2</span>(y, x) <span class="op">+</span><span class="st"> </span>twist<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi</span>
<span id="cb3-47">  <span class="co"># the quaternions psiTilde_k</span></span>
<span id="cb3-48">  s &lt;-<span class="st"> </span><span class="kw">cumsum</span>(<span class="kw">c</span>(<span class="dv">0</span>, <span class="kw">apply</span>(e[<span class="op">-</span>n, ], 1L, crossprod)))</span>
<span id="cb3-49">  L &lt;-<span class="st"> </span>s[n]</span>
<span id="cb3-50">  angles &lt;-<span class="st"> </span><span class="op">-</span>omega <span class="op">*</span><span class="st"> </span>s <span class="op">/</span><span class="st"> </span>(<span class="dv">2</span><span class="op">*</span>L)</span>
<span id="cb3-51">  PsiTilde &lt;-<span class="st"> </span><span class="kw">quaternion</span>(<span class="dt">length.out =</span> n)</span>
<span id="cb3-52">  PsiTilde[1L] &lt;-<span class="st"> </span>Psi[1L]</span>
<span id="cb3-53">  <span class="cf">for</span>(i <span class="cf">in</span> 2L<span class="op">:</span>n) {</span>
<span id="cb3-54">    a &lt;-<span class="st"> </span>angles[i]</span>
<span id="cb3-55">    PsiTilde[i] &lt;-<span class="st"> </span></span>
<span id="cb3-56"><span class="st">      </span>Psi[i] <span class="op">*</span><span class="st"> </span><span class="kw">as.quaternion</span>(<span class="kw">c</span>(<span class="kw">cos</span>(a), <span class="kw">sin</span>(a), <span class="dv">0</span>, <span class="dv">0</span>), <span class="dt">single =</span> <span class="ot">TRUE</span>)</span>
<span id="cb3-57">  }</span>
<span id="cb3-58">  <span class="co"># the mesh</span></span>
<span id="cb3-59">  nu &lt;-<span class="st"> </span>n</span>
<span id="cb3-60">  uperiodic &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb3-61">  u_ &lt;-<span class="st"> </span>1L<span class="op">:</span>nu</span>
<span id="cb3-62">  vperiodic &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb3-63">  nv &lt;-<span class="st"> </span><span class="kw">as.integer</span>(nsides)</span>
<span id="cb3-64">  v_ &lt;-<span class="st"> </span>1L<span class="op">:</span>nv</span>
<span id="cb3-65">  R &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="ot">NA_real_</span>, <span class="dt">dim =</span> <span class="kw">c</span>(3L, nv, nu))</span>
<span id="cb3-66">  <span class="cf">for</span>(k <span class="cf">in</span> 1L<span class="op">:</span>nv) {</span>
<span id="cb3-67">    a &lt;-<span class="st"> </span>(k <span class="op">-</span><span class="st"> </span>1L) <span class="op">/</span><span class="st"> </span>nv</span>
<span id="cb3-68">    r0 &lt;-<span class="st"> </span><span class="kw">as.quaternion</span>(<span class="kw">c</span>(<span class="kw">cospi</span>(a), <span class="kw">sinpi</span>(a), <span class="dv">0</span>, <span class="dv">0</span>), <span class="dt">single =</span> <span class="ot">TRUE</span>)</span>
<span id="cb3-69">    r1 &lt;-<span class="st"> </span>r0 <span class="op">*</span><span class="st"> </span>Hj <span class="op">*</span><span class="st"> </span><span class="kw">Conj</span>(r0)</span>
<span id="cb3-70">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nu) {</span>
<span id="cb3-71">      psi &lt;-<span class="st"> </span>PsiTilde[j]</span>
<span id="cb3-72">      R[, k, j] &lt;-<span class="st"> </span></span>
<span id="cb3-73"><span class="st">        </span>pts[j, ] <span class="op">+</span><span class="st"> </span>epsilon <span class="op">*</span><span class="st"> </span><span class="kw">as.numeric</span>(psi <span class="op">*</span><span class="st"> </span>r1 <span class="op">*</span><span class="st"> </span><span class="kw">Conj</span>(psi))[<span class="op">-</span>1L]</span>
<span id="cb3-74">    }</span>
<span id="cb3-75">  }</span>
<span id="cb3-76">  vs &lt;-<span class="st"> </span><span class="kw">matrix</span>(R, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb3-77">  tris &lt;-<span class="st"> </span>cgalMeshes<span class="op">:::</span><span class="kw">meshTopology</span>(nu, nv, uperiodic, vperiodic)</span>
<span id="cb3-78">  <span class="kw">tmesh3d</span>(</span>
<span id="cb3-79">    <span class="dt">vertices    =</span> vs,</span>
<span id="cb3-80">    <span class="dt">indices     =</span> tris,</span>
<span id="cb3-81">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb3-82">  )</span>
<span id="cb3-83">}</span>
<span id="cb3-84"></span>
<span id="cb3-85"><span class="co">################################################################################</span></span>
<span id="cb3-86">theta &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> 751L)[<span class="op">-</span>1L]</span>
<span id="cb3-87">knot &lt;-<span class="st"> </span><span class="kw">cbind</span>(</span>
<span id="cb3-88">  <span class="kw">sin</span>(theta) <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>theta), </span>
<span id="cb3-89">  <span class="dv">2</span><span class="op">*</span><span class="kw">sin</span>(<span class="dv">3</span><span class="op">*</span>theta), </span>
<span id="cb3-90">  <span class="kw">cos</span>(theta) <span class="op">-</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span><span class="kw">cos</span>(<span class="dv">2</span><span class="op">*</span>theta)</span>
<span id="cb3-91">)</span>
<span id="cb3-92">mesh &lt;-<span class="st"> </span><span class="kw">closedTubeMesh</span>(knot, <span class="dt">nsides =</span> <span class="dv">4</span>, <span class="dt">epsilon =</span> <span class="fl">0.55</span>, <span class="dt">twist =</span> <span class="dv">2</span>)</span>
<span id="cb3-93"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"green"</span>)</span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 04 Aug 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/juliaTube.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Using implicitization to split a ball</title>
      <link>https://laustep.github.io/stlahblog/posts/giacR02.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I introduced the Gröbner implicitization and the
        <strong>giacR</strong> package in the
        <a href="https://laustep.github.io/stlahblog/posts/giacR01.html"
          >previous post</a
        >. We will see an application here.
      </p>
      <p>
        Consider this
        <a href="https://mathcurve.com/courbes3d.gb/satellite/satellite.shtml"
          ><em>satellite curve</em></a
        >:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">satelliteCurve &lt;-<span class="st"> </span><span class="cf">function</span>(t, <span class="dt">rho =</span> <span class="dv">3</span><span class="op">/</span><span class="dv">4</span>) {</span>
<span id="cb1-2">  A &lt;-<span class="st"> </span><span class="kw">cospi</span>(rho)</span>
<span id="cb1-3">  B &lt;-<span class="st"> </span><span class="kw">sinpi</span>(rho)</span>
<span id="cb1-4">  cost  &lt;-<span class="st"> </span><span class="kw">cos</span>(t)</span>
<span id="cb1-5">  cos2t &lt;-<span class="st"> </span><span class="kw">cos</span>(<span class="dv">2</span><span class="op">*</span>t)</span>
<span id="cb1-6">  sint  &lt;-<span class="st"> </span><span class="kw">sin</span>(t)</span>
<span id="cb1-7">  sin2t &lt;-<span class="st"> </span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>t)</span>
<span id="cb1-8">  <span class="kw">cbind</span>(</span>
<span id="cb1-9">    A<span class="op">*</span>cost<span class="op">*</span>cos2t <span class="op">-</span><span class="st"> </span>sint<span class="op">*</span>sin2t, </span>
<span id="cb1-10">    A<span class="op">*</span>sint<span class="op">*</span>cos2t <span class="op">+</span><span class="st"> </span>cost<span class="op">*</span>sin2t, </span>
<span id="cb1-11">    B<span class="op">*</span>cos2t</span>
<span id="cb1-12">  )</span>
<span id="cb1-13">}</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw">library</span>(rgl)</span>
<span id="cb1-16">t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> 200L)</span>
<span id="cb1-17">scurve &lt;-<span class="st"> </span><span class="kw">satelliteCurve</span>(t_)</span>
<span id="cb1-18">sphmesh &lt;-<span class="st"> </span>Rvcg<span class="op">::</span><span class="kw">vcgSphere</span>(<span class="dt">subdivision =</span> <span class="dv">5</span>)</span>
<span id="cb1-19"><span class="kw">shade3d</span>(smesh, <span class="dt">color =</span> <span class="st">"black"</span>, <span class="dt">polygon_offset =</span> <span class="dv">1</span>)</span>
<span id="cb1-20"><span class="kw">lines3d</span>(scurve, <span class="dt">color =</span> <span class="st">"deeppink"</span>, <span class="dt">lwd =</span> <span class="dv">3</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/satelliteCurve.gif"
        />
      </p>
      <p>
        We would like to assign two different colors to the two parts of the
        sphere separated by the satellite curve.
      </p>
      <p>
        I know only one solution: find a surface whose intersection with the
        sphere is this satellite curve, then use <code>rgl::clipMesh3d</code>.
        It is possible to find such a surface with the Gröbner implicitization.
        Here is how:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(giacR)</span>
<span id="cb2-2">giac &lt;-<span class="st"> </span>Giac<span class="op">$</span><span class="kw">new</span>()</span>
<span id="cb2-3"></span>
<span id="cb2-4">equations &lt;-</span>
<span id="cb2-5"><span class="st">  "x = A*cost*cos2t - sint*sin2t, y = A*sint*cos2t + cost*sin2t, z = B*cos2t"</span></span>
<span id="cb2-6">relations &lt;-<span class="st"> </span><span class="kw">paste0</span>(</span>
<span id="cb2-7">  <span class="st">"A^2 + B^2 = 1, cost^2 + sint^2 = 1, "</span>,</span>
<span id="cb2-8">  <span class="st">"cos2t = cost^2 - sint^2, sin2t = 2*sint*cost"</span> </span>
<span id="cb2-9">)</span>
<span id="cb2-10">variables &lt;-<span class="st"> "cost, sint, cos2t, sin2t"</span></span>
<span id="cb2-11">constants &lt;-<span class="st"> "A, B"</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">giac<span class="op">$</span><span class="kw">implicitization</span>(equations, relations, variables, constants)</span>
<span id="cb2-14"><span class="co">## [1] "z^3*A-2*y^2*A*B-z^2*A*B+z^3+2*y^2*B+z^2*B-2*z*B^2-z*A+A*B+z-B"</span></span>
<span id="cb2-15"><span class="co">## [2] "x^2+y^2+z^2-1"                                                </span></span>
<span id="cb2-16"><span class="co">## [3] "A^2+B^2-1"</span></span>
<span id="cb2-17">giac<span class="op">$</span><span class="kw">close</span>()</span>
<span id="cb2-18"><span class="co">## [1] TRUE</span></span></code></pre>
      </div>
      <p>
        First, we entered the system of three parametric equations. Giac is not
        aware that <code>cost</code> is
        <span class="math inline">\(\cos t\)</span> and <code>sint</code> is
        <span class="math inline">\(\sin t\)</span>. So we enter the relation
        <code>cost^2 + sint^2 = 1</code>. We also enter the expression of
        <span class="math inline">\(\cos 2t\)</span> in function of
        <span class="math inline">\(\cos t\)</span> and
        <span class="math inline">\(\sin t\)</span>, and the same for
        <span class="math inline">\(\sin 2t\)</span>.
      </p>
      <p>
        As you can see, the Gröbner implicitization returned three polynomials.
        The third one is the relation
        <span class="math inline">\(A^2 + B^2 = 1\)</span> that we provided. The
        second one is <span class="math inline">\(x^2 + y^2 + z^2 = 1\)</span>.
        It means that <span class="math inline">\((x, y, z)\)</span> is on the
        unit sphere. The first one is what we were looking for! Let’s call it
        <span class="math inline">\(f\)</span>, and let’s plot the implicit
        surface <span class="math inline">\(f(x,y,z) = 0\)</span>:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">A &lt;-<span class="st"> </span><span class="kw">cospi</span>(<span class="dv">3</span><span class="op">/</span><span class="dv">4</span>); B &lt;-<span class="st"> </span><span class="kw">sinpi</span>(<span class="dv">3</span><span class="op">/</span><span class="dv">4</span>)</span>
<span id="cb3-2">f &lt;-<span class="st"> </span><span class="cf">function</span>(x, y, z) {</span>
<span id="cb3-3">  z<span class="op">^</span><span class="dv">3</span><span class="op">*</span>A <span class="op">-</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>y<span class="op">^</span><span class="dv">2</span><span class="op">*</span>A<span class="op">*</span>B <span class="op">-</span><span class="st"> </span>z<span class="op">^</span><span class="dv">2</span><span class="op">*</span>A<span class="op">*</span>B <span class="op">+</span><span class="st"> </span>z<span class="op">^</span><span class="dv">3</span> <span class="op">+</span><span class="st"> </span></span>
<span id="cb3-4"><span class="st">    </span><span class="dv">2</span><span class="op">*</span>y<span class="op">^</span><span class="dv">2</span><span class="op">*</span>B <span class="op">+</span><span class="st"> </span>z<span class="op">^</span><span class="dv">2</span><span class="op">*</span>B <span class="op">-</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>z<span class="op">*</span>B<span class="op">^</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>z<span class="op">*</span>A <span class="op">+</span><span class="st"> </span>A<span class="op">*</span>B <span class="op">+</span><span class="st"> </span>z <span class="op">-</span><span class="st"> </span>B</span>
<span id="cb3-5">}</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw">library</span>(rmarchingcubes)</span>
<span id="cb3-8"><span class="kw">library</span>(rgl)</span>
<span id="cb3-9">n &lt;-<span class="st"> </span>100L</span>
<span id="cb3-10">x_ &lt;-<span class="st"> </span>y_ &lt;-<span class="st"> </span>z_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">1.05</span>, <span class="fl">1.05</span>, <span class="dt">length.out =</span> n)</span>
<span id="cb3-11">Grid &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">X =</span> x_, <span class="dt">Y =</span> y_, <span class="dt">Z =</span> z_)</span>
<span id="cb3-12">voxel &lt;-<span class="st"> </span><span class="kw">with</span>(Grid, <span class="kw">array</span>(<span class="kw">f</span>(X, Y, Z), <span class="dt">dim =</span> <span class="kw">c</span>(n, n, n)))</span>
<span id="cb3-13">surf &lt;-<span class="st"> </span><span class="kw">contour3d</span>(voxel, <span class="dt">level =</span> <span class="dv">0</span>, x_, y_, z_)</span>
<span id="cb3-14">mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb3-15">  <span class="dt">vertices =</span> <span class="kw">t</span>(surf<span class="op">$</span>vertices),</span>
<span id="cb3-16">  <span class="dt">indices  =</span> <span class="kw">t</span>(surf<span class="op">$</span>triangles),</span>
<span id="cb3-17">  <span class="dt">normals  =</span> surf<span class="op">$</span>normals</span>
<span id="cb3-18">)</span>
<span id="cb3-19"></span>
<span id="cb3-20">sphmesh &lt;-<span class="st"> </span>Rvcg<span class="op">::</span><span class="kw">vcgSphere</span>(<span class="dt">subdivision =</span> <span class="dv">5</span>)</span>
<span id="cb3-21"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"deeppink"</span>)</span>
<span id="cb3-22"><span class="kw">shade3d</span>(sphmesh, <span class="dt">color =</span> <span class="st">"black"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/satelliteSurface.gif"
        />
      </p>
      <p>
        You see, the intersection of the surface with the sphere is the
        satellite curve.
      </p>
      <p>
        Remember we wanted to play with colors. So let’s clip now. We clip the
        sphere mesh to the volumes defined by
        <span class="math inline">\(f &gt; 0\)</span> and
        <span class="math inline">\(f &lt; 0\)</span>.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">mesh1 &lt;-<span class="st"> </span><span class="kw">clipMesh3d</span>(sphmesh, f, <span class="dt">greater =</span> <span class="ot">TRUE</span>, <span class="dt">minVertices =</span> 20000L)</span>
<span id="cb4-2">mesh2 &lt;-<span class="st"> </span><span class="kw">clipMesh3d</span>(sphmesh, f, <span class="dt">greater =</span> <span class="ot">FALSE</span>, <span class="dt">minVertices =</span> 20000L)</span>
<span id="cb4-3"><span class="kw">shade3d</span>(mesh1, <span class="dt">color =</span> <span class="st">"magenta4"</span>)</span>
<span id="cb4-4"><span class="kw">shade3d</span>(mesh2, <span class="dt">color =</span> <span class="st">"yellow"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/satelliteBall.gif"
        />
      </p>
      <p>
        Of course, our construction was possible because we had polynomial
        expressions. Otherwise we cannot use this method.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 20 Jul 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/giacR02.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Gröbner implicitization and the 'giacR' package</title>
      <link>https://laustep.github.io/stlahblog/posts/giacR01.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I considerably improved the computation of the Gröbner bases in the
        <a href="https://laustep.github.io/stlahblog/posts/Groebner01.html"
          ><strong>qspray</strong></a
        >
        package, and I implemented something new:
        <em>Gröbner implicitization</em>. The Gröbner implicitization is able to
        transform a system of parametric equations to an implicit equation.
        Let’s see the example of the ellipse:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(qspray)</span>
<span id="cb1-2"><span class="co"># variables </span></span>
<span id="cb1-3">cost &lt;-<span class="st"> </span><span class="kw">qlone</span>(<span class="dv">1</span>)</span>
<span id="cb1-4">sint &lt;-<span class="st"> </span><span class="kw">qlone</span>(<span class="dv">2</span>)</span>
<span id="cb1-5"><span class="co"># parameters</span></span>
<span id="cb1-6">a &lt;-<span class="st"> </span><span class="kw">qlone</span>(<span class="dv">3</span>)</span>
<span id="cb1-7">b &lt;-<span class="st"> </span><span class="kw">qlone</span>(<span class="dv">4</span>)</span>
<span id="cb1-8"><span class="co">#</span></span>
<span id="cb1-9">nvariables &lt;-<span class="st"> </span><span class="dv">2</span></span>
<span id="cb1-10">parameters &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="st">"a"</span>, <span class="st">"b"</span>)</span>
<span id="cb1-11">equations &lt;-<span class="st"> </span><span class="kw">list</span>(</span>
<span id="cb1-12">  <span class="st">"x"</span> =<span class="st"> </span>a <span class="op">*</span><span class="st"> </span>cost,</span>
<span id="cb1-13">  <span class="st">"y"</span> =<span class="st"> </span>b <span class="op">*</span><span class="st"> </span>sint</span>
<span id="cb1-14">)</span>
<span id="cb1-15">relations &lt;-<span class="st"> </span><span class="kw">list</span>(</span>
<span id="cb1-16">  cost<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>sint<span class="op">^</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span><span class="dv">1</span> <span class="co"># = 0</span></span>
<span id="cb1-17">)</span>
<span id="cb1-18"><span class="co"># </span></span>
<span id="cb1-19">eqs &lt;-<span class="st"> </span></span>
<span id="cb1-20"><span class="st">  </span><span class="kw">implicitization</span>(nvariables, parameters, equations, relations)</span>
<span id="cb1-21"><span class="co">## a^2*b^2 - b^2*x^2 - a^2*y^2</span></span></code></pre>
      </div>
      <p>
        You see, <code>a^2*b^2 - b^2*x^2 - a^2*y^2 = 0</code> is the implicit
        equation of the ellipse.
      </p>
      <p>
        Gröbner implicitization is based on Gröbner bases. Unfortunately, while
        I considerably improved it, my implementation of the Gröbner bases can
        be slow, very slow. For the ellipse above, it is fast. But I tried for
        example to implicitize the parametric equations of the Enneper surface,
        and the computation was not terminated after 24 hours.
      </p>
      <p>
        No worries. I have a new package coming to the rescue:
        <a href="https://github.com/stla/giacR"><strong>giacR</strong></a
        >. This is an interface to the <em>Giac</em> computer algebra system,
        which powers the graphical interface <em>Xcas</em>. It is extremely
        efficient, and it is able to compute Gröbner bases.
      </p>
      <p>
        Gröbner implicitization is not implemented in Giac. So I implemented it
        myself. Here is the implicit equation of the Enneper surface:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(giacR)</span>
<span id="cb2-2">giac &lt;-<span class="st"> </span>Giac<span class="op">$</span><span class="kw">new</span>()</span>
<span id="cb2-3"></span>
<span id="cb2-4">equations &lt;-</span>
<span id="cb2-5"><span class="st">  "x = 3*u + 3*u*v^2 - u^3, y = 3*v + 3*u^2*v - v^3, z = 3*u^2 - 3*v^2"</span></span>
<span id="cb2-6">variables &lt;-<span class="st"> "u, v"</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">giac<span class="op">$</span><span class="kw">implicitization</span>(<span class="dt">equations =</span> equations, <span class="dt">variables =</span> variables)</span>
<span id="cb2-9"><span class="co">## [1] "-19683*x^6+59049*x^4*y^2-10935*x^4*z^3-118098*x^4*z^2+59049*x^4*z-59049*x^2*y^4-56862*x^2*y^2*z^3-118098*x^2*y^2*z-1296*x^2*z^6-34992*x^2*z^5-174960*x^2*z^4+314928*x^2*z^3+19683*y^6-10935*y^4*z^3+118098*y^4*z^2+59049*y^4*z+1296*y^2*z^6-34992*y^2*z^5+174960*y^2*z^4+314928*y^2*z^3+64*z^9-10368*z^7+419904*z^5"</span></span></code></pre>
      </div>
      <p>Finally we close the Giac session:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">giac<span class="op">$</span><span class="kw">close</span>()</span>
<span id="cb3-2"><span class="co">## [1] TRUE</span></span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 19 Jul 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/giacR01.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Gröbner bases are in 'qspray'</title>
      <link>https://laustep.github.io/stlahblog/posts/Groebner01.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        There is something new in the <strong>qspray</strong> package:
        <em>Gröbner bases</em>. Gröbner bases have many applications, and we
        will see one of them now. My package <strong>qspray</strong> deals with
        multivariate polynomials with rational coefficients.
      </p>
      <p>Consider the following system of three polynomial equations:</p>
      <p>
        <span class="math display"
          >\[\begin{align} x^2 + y + z &amp; = 1 \\ x + y^2 + z &amp; = 1 \\ x +
          y + z^2 &amp; = 1 \end{align}\]</span
        >
      </p>
      <p>
        The goal is to find all solutions of this system, that is to say, the
        simultaneous roots of the three polynomials
        <span class="math inline">\(x^2 + y + z - 1\)</span>,
        <span class="math inline">\(x + y^2 + z - 1\)</span>,
        <span class="math inline">\(x + y + z^2 - 1\)</span>. Not easy, is it?
      </p>
      <p>
        <em>Fact:</em> a Gröbner basis of (the ideal generated by) a list of
        polynomials is a list of polynomials with the same simultaneous roots.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(qspray)</span>
<span id="cb1-2">x &lt;-<span class="st"> </span><span class="kw">qlone</span>(<span class="dv">1</span>); y &lt;-<span class="st"> </span><span class="kw">qlone</span>(<span class="dv">2</span>); z &lt;-<span class="st"> </span><span class="kw">qlone</span>(<span class="dv">3</span>)</span>
<span id="cb1-3">f1 &lt;-<span class="st"> </span>x<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>y <span class="op">+</span><span class="st"> </span>z <span class="op">-</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb1-4">f2 &lt;-<span class="st"> </span>x <span class="op">+</span><span class="st"> </span>y<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>z <span class="op">-</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb1-5">f3 &lt;-<span class="st"> </span>x <span class="op">+</span><span class="st"> </span>y <span class="op">+</span><span class="st"> </span>z<span class="op">^</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb1-6">gb &lt;-<span class="st"> </span><span class="kw">groebner</span>(<span class="kw">list</span>(f1, f2, f3)) <span class="co"># Gröbner basis of f1, f2, f3</span></span>
<span id="cb1-7">( gbstrings &lt;-<span class="st"> </span><span class="kw">lapply</span>(gb, prettyQspray, <span class="dt">vars =</span> <span class="kw">c</span>(<span class="st">"x"</span>, <span class="st">"y"</span>, <span class="st">"z"</span>)) )</span>
<span id="cb1-8"><span class="co">## [[1]]</span></span>
<span id="cb1-9"><span class="co">## [1] "y + x + z^2 - 1"</span></span>
<span id="cb1-10"><span class="co">## </span></span>
<span id="cb1-11"><span class="co">## [[2]]</span></span>
<span id="cb1-12"><span class="co">## [1] "((-9)*z^3)/2 - 2*z^5 - z^6 + 6*z^4 - y + z + z^7/2 + y^2"</span></span>
<span id="cb1-13"><span class="co">## </span></span>
<span id="cb1-14"><span class="co">## [[3]]</span></span>
<span id="cb1-15"><span class="co">## [1] "y*z^2 - z^2/2 + z^4/2"</span></span>
<span id="cb1-16"><span class="co">## </span></span>
<span id="cb1-17"><span class="co">## [[4]]</span></span>
<span id="cb1-18"><span class="co">## [1] "z^6 - z^2 + 4*z^3 - 4*z^4"</span></span></code></pre>
      </div>
      <p>
        Do you see something nice? The fourth polynomial,
        <span class="math inline">\(z^6 - z^2 + 4z^3 - 4z^4\)</span>, is
        univariate: it depends only on the variable
        <span class="math inline">\(z\)</span>. We could numerically solve it
        with the R function <code>polyroot</code>, but we want exact roots. It
        is easy to see that <span class="math inline">\(0\)</span> and
        <span class="math inline">\(1\)</span> are two roots of this polynomial.
        So we can divide this polynomial by
        <span class="math inline">\(z(z-1)\)</span>, and it will remain a factor
        of degree <span class="math inline">\(4\)</span>. But I know, you are
        lazy. Me too. That’s why I prefer to use the
        <strong>Ryacas</strong> package to perform this task:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(Ryacas)</span>
<span id="cb2-2"><span class="kw">yac_str</span>(<span class="st">"Factor(z^6 - z^2 + 4*z^3 - 4*z^4)"</span>)</span>
<span id="cb2-3"><span class="co">## [1] "(2*z+z^2-1)*(z-1)^2*z^2"</span></span></code></pre>
      </div>
      <p>
        So it remains to find the roots of
        <span class="math inline">\(2z + z^2 - 1\)</span>. We use
        <strong>Ryacas</strong> again, as we’re lazy:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">yac_str</span>(<span class="st">"PSolve(2*z + z^2 - 1, z)"</span>)</span>
<span id="cb3-2"><span class="co">## [1] "{(Sqrt(8)-2)/2,(-(Sqrt(8)+2))/2}"</span></span></code></pre>
      </div>
      <p>
        There are two roots:
        <span class="math inline">\(\sqrt{2} - 1\)</span> and
        <span class="math inline">\(-\sqrt{2} - 1\)</span>.
      </p>
      <p>
        But let’s consider the two friendly roots first:
        <span class="math inline">\(0\)</span> and
        <span class="math inline">\(1\)</span>. If you plug
        <span class="math inline">\(z=0\)</span> and
        <span class="math inline">\(z=1\)</span> in the three other polynomials
        of the Gröbner basis, you easily find three simultaneous roots:
        <span class="math inline">\((1, 0, 0)\)</span>,
        <span class="math inline">\((0, 1, 0)\)</span> and
        <span class="math inline">\((0, 0, 1)\)</span>.
      </p>
      <p>
        You should do this exercise, because now we will plug
        <span class="math inline">\(z=\sqrt{2}-1\)</span> and
        <span class="math inline">\(z=-\sqrt{2}-1\)</span>, and this will be
        less easy. In fact I will only treat
        <span class="math inline">\(z=\sqrt{2}-1\)</span>, and leave the other
        root as another exercise for you.
      </p>
      <p>
        Let’s go. We plug <span class="math inline">\(z=\sqrt{2}-1\)</span> in
        the third polynomial. Clearly, we will obtain an univariate polynomial
        in <span class="math inline">\(y\)</span>, and we will solve it. Or
        rather, <strong>Ryacas</strong> will solve it:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">yac_str</span>(<span class="kw">sprintf</span>(<span class="st">"p3 := %s"</span>, gbstrings[[3L]]))</span>
<span id="cb4-2"><span class="co">## [1] "y*z^2-z^2/2+z^4/2"</span></span>
<span id="cb4-3"><span class="kw">yac_str</span>(<span class="st">"PSolve(Eliminate(z, Sqrt(2)-1, p3), y)"</span>)</span>
<span id="cb4-4"><span class="co">## [1] "-((Sqrt(2)-1)^4/2-(Sqrt(2)-1)^2/2)/(Sqrt(2)-1)^2"</span></span></code></pre>
      </div>
      <p>
        Yacas is not always nice. It does not simplify this expression. So let’s
        look at its numerical approximation:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">yac_str</span>(<span class="st">"N(PSolve(Eliminate(z, Sqrt(2)-1, p3), y))"</span>)</span>
<span id="cb5-2"><span class="co">## [1] "0.4142135623"</span></span></code></pre>
      </div>
      <p>
        We recognize <span class="math inline">\(\sqrt{2}-1\)</span>. Now we
        plug <span class="math inline">\(z=\sqrt{2}-1\)</span> into the second
        polynomial and we solve the resulting polynomial of degree
        <span class="math inline">\(2\)</span> in
        <span class="math inline">\(y\)</span>:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">yac_str</span>(<span class="kw">sprintf</span>(<span class="st">"p2 := %s"</span>, gbstrings[[2L]]))</span>
<span id="cb6-2"><span class="co">## [1] "((-9)*z^3)/2-2*z^5-z^6+6*z^4-y+z+z^7/2+y^2"</span></span>
<span id="cb6-3"><span class="kw">yac_str</span>(<span class="st">"N(PSolve(Eliminate(z, Sqrt(2)-1, p2), y))"</span>)</span>
<span id="cb6-4"><span class="co">## [1] "{0.5857864376,0.4142135623}"</span></span></code></pre>
      </div>
      <p>
        There are two roots:
        <span class="math inline">\(y=\sqrt{2}-1\)</span> and the other one has
        no importance, since we didn’t find it before.
      </p>
      <p>
        So finally we just have to plug
        <span class="math inline">\(y=\sqrt{2}-1\)</span> and
        <span class="math inline">\(z=\sqrt{2}-1\)</span> into the first
        polynomial and we solve the resulting univariate polynomial in
        <span class="math inline">\(x\)</span>:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">yac_str</span>(<span class="kw">sprintf</span>(<span class="st">"p1 := %s"</span>, gbstrings[[1L]]))</span>
<span id="cb7-2"><span class="co">## [1] "y+x+z^2-1"</span></span>
<span id="cb7-3"><span class="kw">yac_str</span>(</span>
<span id="cb7-4">  <span class="st">"N(PSolve(Eliminate(y, Sqrt(2)-1, Eliminate(z, Sqrt(2)-1, p1)), x))"</span></span>
<span id="cb7-5">)</span>
<span id="cb7-6"><span class="co">## [1] "0.4142135623"</span></span></code></pre>
      </div>
      <p>
        Again? Well, we find
        <span class="math inline">\(x = \sqrt{2}-1\)</span>. Finally we found
        one simultaneous root:
        <span class="math display"
          >\[(x, y, z) = (\sqrt{2}-1, \sqrt{2}-1, \sqrt{2}-1).\]</span
        >
        Now I leave you with the promised exercise: treat the case
        <span class="math inline">\(z=-\sqrt{2}-1\)</span>. I give you the
        solution, you will find:
        <span class="math display"
          >\[(x, y, z) = (-\sqrt{2}-1, -\sqrt{2}-1, -\sqrt{2}-1).\]</span
        >
      </p>
      <p>
        Isn’t it impressive? I started to learn about Gröbner bases only a few
        days ago, and I still have to learn. I hope some applications will be
        implemented in <strong>qspray</strong> in the future, and/or exposed on
        this blog.
      </p>
      <p>
        The new version of <strong>qspray</strong> is not on CRAN yet. If you
        are in a hurry, you can install the development version hosted
        <a href="https://github.com/stla/qspray">on Github</a>.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 14 Jul 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/Groebner01.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Another Hopf torus</title>
      <link>https://laustep.github.io/stlahblog/posts/HopfTorusCubicalCone.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Recall that a Hopf torus is a two-dimensional object in the 4D space
        defined by a <em>profile curve</em>: a closed curve on the unit sphere.
        When mapping it to the 3D space with the stereographic projection, we
        can obtain a beautiful object, or an ugly one, depending on the choice
        of the profile curve.
      </p>
      <p>Here, we will see the Hopf torus defined by this profile curve:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/IntersectionSphereCubicalCone.png"
        />
      </p>
      <p>
        This is the intersection of the unit sphere with a cubical cone, the
        isosurface of equation
        <span class="math inline">\(x^2 + y^2 + z^2 = 0\)</span>. First, I
        obtained a mesh of this surface thanks to the
        <strong>rmarchingcubes</strong> package:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(rgl)</span>
<span id="cb1-2"><span class="kw">library</span>(rmarchingcubes)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co"># cubical cone ####</span></span>
<span id="cb1-5">f &lt;-<span class="st"> </span><span class="cf">function</span>(x, y, z) {</span>
<span id="cb1-6">  x<span class="op">^</span><span class="dv">3</span> <span class="op">+</span><span class="st"> </span>y<span class="op">^</span><span class="dv">3</span> <span class="op">+</span><span class="st"> </span>z<span class="op">^</span><span class="dv">3</span></span>
<span id="cb1-7">}</span>
<span id="cb1-8">x_ &lt;-<span class="st"> </span>y_ &lt;-<span class="st"> </span>z_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">1.05</span>, <span class="fl">1.05</span>, <span class="dt">length.out =</span> 150L)</span>
<span id="cb1-9">Grid &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">X =</span> x_, <span class="dt">Y =</span> y_, <span class="dt">Z =</span> z_)</span>
<span id="cb1-10">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">with</span>(Grid, <span class="kw">f</span>(X, Y, Z)), <span class="dt">dim =</span> <span class="kw">c</span>(150L, 150L, 150L))</span>
<span id="cb1-11">surf &lt;-<span class="st"> </span><span class="kw">contour3d</span>(voxel, <span class="dt">level =</span> <span class="dv">0</span>, x_, y_, z_)</span>
<span id="cb1-12">coneMesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb1-13">  <span class="dt">vertices =</span> <span class="kw">t</span>(surf[[<span class="st">"vertices"</span>]]),</span>
<span id="cb1-14">  <span class="dt">indices  =</span> <span class="kw">t</span>(surf[[<span class="st">"triangles"</span>]]),</span>
<span id="cb1-15">  <span class="dt">normals  =</span> surf[[<span class="st">"normals"</span>]] </span>
<span id="cb1-16">)</span></code></pre>
      </div>
      <p>
        Then I obtained the intersection with the unit sphere thanks to the
        <code>clipMesh3d</code> and <code>getBoundary3d</code> functions of the
        <strong>rgl</strong> package:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># intersection with unit sphere ####</span></span>
<span id="cb2-2">sphereMesh &lt;-<span class="st"> </span>Rvcg<span class="op">::</span><span class="kw">vcgSphere</span>(<span class="dt">subdivision =</span> 5L)</span>
<span id="cb2-3">mesh &lt;-<span class="st"> </span><span class="kw">clipMesh3d</span>(</span>
<span id="cb2-4">  sphereMesh, <span class="dt">fn =</span> f, <span class="dt">minVertices =</span> 20000L</span>
<span id="cb2-5">)</span>
<span id="cb2-6">boundary &lt;-<span class="st"> </span></span>
<span id="cb2-7"><span class="st">  </span><span class="kw">getBoundary3d</span>(mesh, <span class="dt">sorted =</span> <span class="ot">TRUE</span>, <span class="dt">color =</span> <span class="st">"black"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span>
<span id="cb2-8"><span class="co"># plot ####</span></span>
<span id="cb2-9"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>), <span class="dt">zoom =</span> <span class="fl">0.9</span>)</span>
<span id="cb2-10"><span class="kw">shade3d</span>(coneMesh, <span class="dt">color =</span> <span class="st">"red"</span>, <span class="dt">alpha =</span> <span class="fl">0.5</span>, <span class="dt">polygon_offset =</span> <span class="dv">1</span>)</span>
<span id="cb2-11"><span class="kw">shade3d</span>(sphereMesh, <span class="dt">color =</span> <span class="st">"blue"</span>, <span class="dt">alpha =</span> <span class="fl">0.5</span>, <span class="dt">polygon_offset =</span> <span class="dv">1</span>)</span>
<span id="cb2-12"><span class="kw">shade3d</span>(boundary)</span></code></pre>
      </div>
      <p>
        The curve has not the required orientation of a nice profile curve. Its
        axis of symmetry is directed by
        <span class="math inline">\((1,1,1)\)</span>, and we need
        <span class="math inline">\((0,0,1)\)</span> instead. So one has to
        rotate the curve. To do so, I use an exported function from the
        <strong>cgalMeshes</strong> package, namely
        <code>quaternionFromTo</code>. It will return a unit quaternion
        corresponding to the desired rotation. I already talked about this way
        to obtain a rotation sending a given vector to another given vector,
        <a
          href="https://laustep.github.io/stlahblog/posts/ReorientTransformation2.html"
          >here</a
        >.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="co"># get points at the intersection and rotate them ####</span></span>
<span id="cb3-2">pts &lt;-<span class="st"> </span>boundary[[<span class="st">"vb"</span>]][<span class="op">-</span>4L, boundary[[<span class="st">"is"</span>]][1L, ]]</span>
<span id="cb3-3">q &lt;-<span class="st"> </span>cgalMeshes<span class="op">:::</span><span class="kw">quaternionFromTo</span>(<span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>)<span class="op">/</span><span class="kw">sqrt</span>(<span class="dv">3</span>), <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>))</span>
<span id="cb3-4">R &lt;-<span class="st"> </span>onion<span class="op">::</span><span class="kw">as.orthogonal</span>(q)</span>
<span id="cb3-5">gamma0 &lt;-<span class="st"> </span><span class="kw">t</span>(R <span class="op">%*%</span><span class="st"> </span>pts)[, <span class="kw">c</span>(3L, 2L, 1L)]</span></code></pre>
      </div>
      <p>
        Now let’s introduce a function which creates a mesh of the Hopf torus
        defined by a discretized curve, such as our matrix of points
        <code>gamma0</code>. Again, I use an exported function from
        <strong>cgalMeshes</strong>, namely <code>meshTopology</code>, which
        returns the incidences between the vertices of the mesh.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="co"># Hopf torus mesh from a discrete curve `gamma` ####</span></span>
<span id="cb4-2">hMesh &lt;-<span class="st"> </span><span class="cf">function</span>(gamma, m) {</span>
<span id="cb4-3">  nu &lt;-<span class="st"> </span><span class="kw">nrow</span>(gamma)</span>
<span id="cb4-4">  uperiodic &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb4-5">  u_ &lt;-<span class="st"> </span>1L<span class="op">:</span>nu</span>
<span id="cb4-6">  vperiodic &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb4-7">  nv &lt;-<span class="st"> </span><span class="kw">as.integer</span>(m) </span>
<span id="cb4-8">  v_ &lt;-<span class="st"> </span>1L<span class="op">:</span>nv</span>
<span id="cb4-9">  R &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="ot">NA_real_</span>, <span class="dt">dim =</span> <span class="kw">c</span>(3L, nv, nu))</span>
<span id="cb4-10">  <span class="cf">for</span>(k <span class="cf">in</span> 1L<span class="op">:</span>nv) {</span>
<span id="cb4-11">    K &lt;-<span class="st"> </span>k <span class="op">-</span><span class="st"> </span>1L</span>
<span id="cb4-12">    cosphi &lt;-<span class="st"> </span><span class="kw">cospi</span>(<span class="dv">2</span><span class="op">*</span>K<span class="op">/</span>m)</span>
<span id="cb4-13">    sinphi &lt;-<span class="st"> </span><span class="kw">sinpi</span>(<span class="dv">2</span><span class="op">*</span>K<span class="op">/</span>m)</span>
<span id="cb4-14">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nu) {</span>
<span id="cb4-15">      p1 &lt;-<span class="st"> </span>gamma[j, 1L]</span>
<span id="cb4-16">      p2 &lt;-<span class="st"> </span>gamma[j, 2L]</span>
<span id="cb4-17">      p3 &lt;-<span class="st"> </span>gamma[j, 3L]</span>
<span id="cb4-18">      yden &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span> <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span>p1))</span>
<span id="cb4-19">      y1 &lt;-<span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span>p1) <span class="op">/</span><span class="st"> </span>yden</span>
<span id="cb4-20">      y2 &lt;-<span class="st"> </span>p2 <span class="op">/</span><span class="st"> </span>yden</span>
<span id="cb4-21">      y3 &lt;-<span class="st"> </span>p3 <span class="op">/</span><span class="st"> </span>yden</span>
<span id="cb4-22">      x1 &lt;-<span class="st"> </span>cosphi <span class="op">*</span><span class="st"> </span>y3 <span class="op">+</span><span class="st"> </span>sinphi <span class="op">*</span><span class="st"> </span>y2</span>
<span id="cb4-23">      x2 &lt;-<span class="st"> </span>cosphi <span class="op">*</span><span class="st"> </span>y2 <span class="op">-</span><span class="st"> </span>sinphi <span class="op">*</span><span class="st"> </span>y3</span>
<span id="cb4-24">      x3 &lt;-<span class="st"> </span>sinphi <span class="op">*</span><span class="st"> </span>y1</span>
<span id="cb4-25">      x4 &lt;-<span class="st"> </span>cosphi <span class="op">*</span><span class="st"> </span>y1</span>
<span id="cb4-26">      R[, k, j] &lt;-<span class="st"> </span><span class="kw">c</span>(x1, x2, x3)<span class="op">/</span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>x4)</span>
<span id="cb4-27">    }</span>
<span id="cb4-28">  }</span>
<span id="cb4-29">  vs &lt;-<span class="st"> </span><span class="kw">matrix</span>(R, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb4-30">  tris &lt;-<span class="st"> </span>cgalMeshes<span class="op">:::</span><span class="kw">meshTopology</span>(nu, nv, uperiodic, vperiodic)</span>
<span id="cb4-31">  <span class="kw">tmesh3d</span>(</span>
<span id="cb4-32">    <span class="dt">vertices    =</span> vs,</span>
<span id="cb4-33">    <span class="dt">indices     =</span> tris,</span>
<span id="cb4-34">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb4-35">  )</span>
<span id="cb4-36">}</span></code></pre>
      </div>
      <p>
        If you run <code>hMesh(gamma0, m)</code> with <code>m</code> large
        enough, here is the mesh you will obtain (actually you have to close
        <code>gamma0</code>, that is to say you have to use
        <code>rbind(gamma0, gamma0[1L, ])</code>):
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HopfTorusCubicalCone.gif"
        />
      </p>
      <p>
        Finally I did another animation. The Hopf torus whose profile curve is
        the equator of the unit sphere is nothing but an ordinary torus after
        the stereographic projection. Then, I scaled the
        <span class="math inline">\(x\)</span>-coordinates of
        <code>gamma0</code> continuously from a factor zero to a positive factor
        and I plotted the (stereographic projection of the) Hopf torus
        corresponding to each scaling. In this way the ordinary torus is
        smoothly transformed to the previous Hopf torus:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HopfTorusCubicalConeToTorus.gif"
        />
      </p>
      <p>The code:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">h_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span>, <span class="dt">length.out =</span> 60L) <span class="co"># scaling factors</span></span>
<span id="cb5-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb5-3"><span class="kw">bg3d</span>(<span class="kw">rgb</span>(<span class="dv">54</span>, <span class="dv">57</span>, <span class="dv">64</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>))</span>
<span id="cb5-4"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb5-5"><span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_along</span>(h_)) {</span>
<span id="cb5-6">  gamma &lt;-<span class="st"> </span>gamma0</span>
<span id="cb5-7">  gamma[, 1L] &lt;-<span class="st"> </span>h_[i] <span class="op">*</span><span class="st"> </span>gamma[, 1L]</span>
<span id="cb5-8">  <span class="co"># normalize so that the points are on the sphere</span></span>
<span id="cb5-9">  gamma &lt;-<span class="st"> </span>gamma <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">apply</span>(gamma, 1L, crossprod))</span>
<span id="cb5-10">  gamma &lt;-<span class="st"> </span><span class="kw">rbind</span>(gamma, gamma[1L, ])</span>
<span id="cb5-11">  mesh &lt;-<span class="st"> </span><span class="kw">hMesh</span>(gamma, 500L)</span>
<span id="cb5-12">  mesh &lt;-<span class="st"> </span><span class="kw">addNormals</span>(mesh, <span class="dt">angleWeighted =</span> <span class="ot">FALSE</span>)</span>
<span id="cb5-13">  <span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"firebrick4"</span>)</span>
<span id="cb5-14">  <span class="kw">snapshot3d</span>(<span class="kw">sprintf</span>(<span class="st">"zzpic%03d.png"</span>, i), <span class="dt">webshot =</span> <span class="ot">FALSE</span>)</span>
<span id="cb5-15">  <span class="kw">clear3d</span>()</span>
<span id="cb5-16">}</span>
<span id="cb5-17"><span class="co"># mount the animation ####</span></span>
<span id="cb5-18"><span class="kw">library</span>(gifski)</span>
<span id="cb5-19">pngFiles &lt;-<span class="st"> </span><span class="kw">Sys.glob</span>(<span class="st">"zzpic*.png"</span>)</span>
<span id="cb5-20"><span class="kw">gifski</span>(</span>
<span id="cb5-21">  <span class="dt">png_files =</span> <span class="kw">c</span>(pngFiles, <span class="kw">rev</span>(pngFiles)),</span>
<span id="cb5-22">  <span class="dt">gif_file =</span> <span class="st">"HopfTorusCubicalConeToTorus.gif"</span>,</span>
<span id="cb5-23">  <span class="dt">width  =</span> <span class="dv">512</span>,</span>
<span id="cb5-24">  <span class="dt">height =</span> <span class="dv">512</span>,</span>
<span id="cb5-25">  <span class="dt">delay =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">15</span></span>
<span id="cb5-26">)</span>
<span id="cb5-27"><span class="kw">file.remove</span>(pngFiles)</span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 12 Jul 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HopfTorusCubicalCone.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The Doyle spiral with R</title>
      <link>https://laustep.github.io/stlahblog/posts/DoyleSpiral.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I translated to R the JavaScipt code for the Doyle spiral written by
        Robin Houston and kindly provided in
        <a href="https://gist.github.com/robinhouston/6096562">this gist</a>.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(rootSolve) <span class="co"># for the function multiroot</span></span>
<span id="cb1-2"><span class="kw">library</span>(plotrix)   <span class="co"># for the function draw.circle</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">d_ &lt;-<span class="st"> </span><span class="cf">function</span>(z, t, p, q) {</span>
<span id="cb1-5">  w &lt;-<span class="st"> </span>z<span class="op">^</span>(p<span class="op">/</span>q)</span>
<span id="cb1-6">  s &lt;-<span class="st"> </span>(p<span class="op">*</span>t <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>pi)<span class="op">/</span>q</span>
<span id="cb1-7">  (z<span class="op">*</span><span class="kw">cos</span>(t) <span class="op">-</span><span class="st"> </span>w<span class="op">*</span><span class="kw">cos</span>(s))<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>(z<span class="op">*</span><span class="kw">sin</span>(t) <span class="op">-</span><span class="st"> </span>w<span class="op">*</span><span class="kw">sin</span>(s))<span class="op">^</span><span class="dv">2</span></span>
<span id="cb1-8">}</span>
<span id="cb1-9"></span>
<span id="cb1-10">s_ &lt;-<span class="st"> </span><span class="cf">function</span>(z, p, q) {</span>
<span id="cb1-11">  (z <span class="op">+</span><span class="st"> </span>z<span class="op">^</span>(p<span class="op">/</span>q))<span class="op">^</span><span class="dv">2</span></span>
<span id="cb1-12">}</span>
<span id="cb1-13"></span>
<span id="cb1-14">r_ &lt;-<span class="st"> </span><span class="cf">function</span>(z, t, p, q) {</span>
<span id="cb1-15"> <span class="kw">d_</span>(z, t, p, q) <span class="op">/</span><span class="st"> </span><span class="kw">s_</span>(z, p, q) </span>
<span id="cb1-16">}</span>
<span id="cb1-17"></span>
<span id="cb1-18">Doyle &lt;-<span class="st"> </span><span class="cf">function</span>(p, q) {</span>
<span id="cb1-19">  f_ &lt;-<span class="st"> </span><span class="cf">function</span>(z, t) {</span>
<span id="cb1-20">    <span class="kw">r_</span>(z, t, <span class="dv">0</span>, <span class="dv">1</span>) <span class="op">-</span><span class="st"> </span><span class="kw">r_</span>(z, t, p, q)</span>
<span id="cb1-21">  }</span>
<span id="cb1-22">  g_ &lt;-<span class="st"> </span><span class="cf">function</span>(z, t) {</span>
<span id="cb1-23">    <span class="kw">r_</span>(z, t, <span class="dv">0</span>, <span class="dv">1</span>) <span class="op">-</span><span class="st"> </span><span class="kw">r_</span>(z<span class="op">^</span>(p<span class="op">/</span>q), (p<span class="op">*</span>t <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>pi)<span class="op">/</span>q, <span class="dv">0</span>, <span class="dv">1</span>)</span>
<span id="cb1-24">  }</span>
<span id="cb1-25">  model &lt;-<span class="st"> </span><span class="cf">function</span>(x) <span class="kw">c</span>(<span class="dt">F =</span> <span class="kw">f_</span>(x[<span class="dv">1</span>], x[<span class="dv">2</span>]), </span>
<span id="cb1-26">                         <span class="dt">G =</span> <span class="kw">g_</span>(x[<span class="dv">1</span>], x[<span class="dv">2</span>]))</span>
<span id="cb1-27">  ss &lt;-<span class="st"> </span><span class="kw">multiroot</span>(<span class="dt">f =</span> model, <span class="dt">start =</span> <span class="kw">c</span>(<span class="dv">2</span>, <span class="dv">0</span>), </span>
<span id="cb1-28">                  <span class="dt">maxiter =</span> <span class="dv">1000</span>, <span class="dt">atol =</span> <span class="fl">1e-6</span>, <span class="dt">rtol =</span> <span class="fl">1e-6</span>)</span>
<span id="cb1-29">  z &lt;-<span class="st"> </span>ss<span class="op">$</span>root[1L]</span>
<span id="cb1-30">  t &lt;-<span class="st"> </span>ss<span class="op">$</span>root[2L]</span>
<span id="cb1-31">  r &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">r_</span>(z, t, <span class="dv">0</span>, <span class="dv">1</span>))</span>
<span id="cb1-32">  a &lt;-<span class="st"> </span><span class="kw">complex</span>(<span class="dt">real =</span> z <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(t), <span class="dt">imaginary =</span> z <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(t))</span>
<span id="cb1-33">  coroot &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="st">"z"</span> =<span class="st"> </span>z<span class="op">^</span>(p<span class="op">/</span>q), <span class="st">"t"</span> =<span class="st"> </span>(p<span class="op">*</span>t <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>pi)<span class="op">/</span>q)</span>
<span id="cb1-34">  b &lt;-<span class="st"> </span><span class="kw">complex</span>(</span>
<span id="cb1-35">    <span class="dt">real      =</span> coroot[<span class="st">"z"</span>] <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(coroot[<span class="st">"t"</span>]), </span>
<span id="cb1-36">    <span class="dt">imaginary =</span> coroot[<span class="st">"z"</span>] <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(coroot[<span class="st">"t"</span>])</span>
<span id="cb1-37">  )</span>
<span id="cb1-38">  <span class="kw">list</span>(<span class="st">"a"</span> =<span class="st"> </span>a, <span class="st">"b"</span> =<span class="st"> </span>b, <span class="st">"r"</span> =<span class="st"> </span>r, <span class="st">"mod_a"</span> =<span class="st"> </span>z, <span class="st">"arg_a"</span> =<span class="st"> </span>t, <span class="st">"q"</span> =<span class="st"> </span>q)</span>
<span id="cb1-39">}</span>
<span id="cb1-40"></span>
<span id="cb1-41">spiral &lt;-<span class="st"> </span><span class="cf">function</span>(r, start_point, delta, opts, alpha, scale) {</span>
<span id="cb1-42">  mod_delta &lt;-<span class="st"> </span><span class="kw">Mod</span>(delta)</span>
<span id="cb1-43">  colors &lt;-<span class="st"> </span>opts[[<span class="st">"fill"</span>]]</span>
<span id="cb1-44">  min_d  &lt;-<span class="st"> </span>opts[[<span class="st">"min_d"</span>]]</span>
<span id="cb1-45">  max_d  &lt;-<span class="st"> </span>opts[[<span class="st">"max_d"</span>]]</span>
<span id="cb1-46">  w &lt;-<span class="st"> </span><span class="kw">exp</span>(1i <span class="op">*</span><span class="st"> </span>alpha)</span>
<span id="cb1-47">  </span>
<span id="cb1-48">  out &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="dt">nrow =</span> 0L, <span class="dt">ncol =</span> 4L)</span>
<span id="cb1-49">  </span>
<span id="cb1-50">  <span class="co"># spiral outwards</span></span>
<span id="cb1-51">  color_index &lt;-<span class="st"> </span>opts[[<span class="st">"i"</span>]]</span>
<span id="cb1-52">  q &lt;-<span class="st"> </span>start_point</span>
<span id="cb1-53">  mod_q &lt;-<span class="st"> </span><span class="kw">Mod</span>(q)</span>
<span id="cb1-54">  <span class="cf">while</span>(mod_q <span class="op">&lt;</span><span class="st"> </span>max_d) {</span>
<span id="cb1-55">    col &lt;-<span class="st"> </span>colors[color_index]</span>
<span id="cb1-56">    center &lt;-<span class="st"> </span>scale <span class="op">*</span><span class="st"> </span>q <span class="op">*</span><span class="st"> </span>w</span>
<span id="cb1-57">    out &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-58">      out,</span>
<span id="cb1-59">      <span class="kw">c</span>(<span class="kw">Re</span>(center), <span class="kw">Im</span>(center), r <span class="op">*</span><span class="st"> </span>scale <span class="op">*</span><span class="st"> </span>mod_q, color_index)</span>
<span id="cb1-60">    )</span>
<span id="cb1-61">    <span class="kw">draw.circle</span>(</span>
<span id="cb1-62">      <span class="kw">Re</span>(center), <span class="kw">Im</span>(center), r <span class="op">*</span><span class="st"> </span>scale <span class="op">*</span><span class="st"> </span>mod_q, <span class="dt">col =</span> col, <span class="dt">border =</span> col</span>
<span id="cb1-63">    )</span>
<span id="cb1-64">    color_index &lt;-<span class="st"> </span><span class="kw">ifelse</span>(color_index <span class="op">&lt;</span><span class="st"> </span><span class="kw">length</span>(colors), color_index <span class="op">+</span><span class="st"> </span><span class="dv">1</span>, <span class="dv">1</span>)</span>
<span id="cb1-65">    q &lt;-<span class="st"> </span>q <span class="op">*</span><span class="st"> </span>delta</span>
<span id="cb1-66">    mod_q &lt;-<span class="st"> </span>mod_q <span class="op">*</span><span class="st"> </span>mod_delta</span>
<span id="cb1-67">  }</span>
<span id="cb1-68">  </span>
<span id="cb1-69">  <span class="co"># spiral inwards</span></span>
<span id="cb1-70">  i &lt;-<span class="st"> </span>opts[[<span class="st">"i"</span>]]</span>
<span id="cb1-71">  color_index &lt;-<span class="st"> </span><span class="kw">ifelse</span>(i <span class="op">&gt;</span><span class="st"> </span><span class="dv">1</span>, i<span class="dv">-1</span>, <span class="kw">length</span>(colors))</span>
<span id="cb1-72">  q &lt;-<span class="st"> </span>start_point<span class="op">/</span>delta</span>
<span id="cb1-73">  mod_q &lt;-<span class="st"> </span><span class="kw">Mod</span>(q)</span>
<span id="cb1-74">  <span class="cf">while</span>(mod_q <span class="op">&gt;</span><span class="st"> </span>min_d) {</span>
<span id="cb1-75">    col &lt;-<span class="st"> </span>colors[color_index]</span>
<span id="cb1-76">    center &lt;-<span class="st"> </span>scale <span class="op">*</span><span class="st"> </span>q <span class="op">*</span><span class="st"> </span>w</span>
<span id="cb1-77">    out &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-78">      out,</span>
<span id="cb1-79">      <span class="kw">c</span>(<span class="kw">Re</span>(center), <span class="kw">Im</span>(center), r <span class="op">*</span><span class="st"> </span>scale <span class="op">*</span><span class="st"> </span>mod_q, color_index)</span>
<span id="cb1-80">    )</span>
<span id="cb1-81">    <span class="kw">draw.circle</span>(</span>
<span id="cb1-82">      <span class="kw">Re</span>(center), <span class="kw">Im</span>(center), r <span class="op">*</span><span class="st"> </span>scale <span class="op">*</span><span class="st"> </span>mod_q, <span class="dt">col =</span> col, <span class="dt">border =</span> col</span>
<span id="cb1-83">    )</span>
<span id="cb1-84">    color_index &lt;-<span class="st"> </span><span class="kw">ifelse</span>(color_index <span class="op">&gt;</span><span class="st"> </span><span class="dv">1</span>, color_index<span class="dv">-1</span>, <span class="kw">length</span>(colors))</span>
<span id="cb1-85">    q &lt;-<span class="st"> </span>q <span class="op">/</span><span class="st"> </span>delta</span>
<span id="cb1-86">    mod_q &lt;-<span class="st"> </span>mod_q <span class="op">/</span><span class="st"> </span>mod_delta</span>
<span id="cb1-87">  }</span>
<span id="cb1-88">  </span>
<span id="cb1-89">  out</span>
<span id="cb1-90">}</span>
<span id="cb1-91"></span>
<span id="cb1-92">frame &lt;-<span class="st"> </span><span class="cf">function</span>(t, root, max_d, <span class="dt">limits =</span> <span class="kw">c</span>(<span class="op">-</span>max_d, max_d)) {</span>
<span id="cb1-93">  scale &lt;-<span class="st"> </span>root<span class="op">$</span>mod_a<span class="op">^</span>t</span>
<span id="cb1-94">  alpha &lt;-<span class="st"> </span>root<span class="op">$</span>arg_a <span class="op">*</span><span class="st"> </span>t</span>
<span id="cb1-95">  start &lt;-<span class="st"> </span>root<span class="op">$</span>a</span>
<span id="cb1-96">  min_d &lt;-<span class="st"> </span><span class="dv">1</span><span class="op">/</span>scale</span>
<span id="cb1-97">  out &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="dt">nrow =</span> 0L, <span class="dt">ncol =</span> 4L)</span>
<span id="cb1-98">  <span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>))</span>
<span id="cb1-99">  <span class="kw">plot</span>(<span class="ot">NULL</span>, <span class="dt">asp =</span> <span class="dv">1</span>, <span class="dt">xlim =</span> limits, <span class="dt">ylim =</span> limits,</span>
<span id="cb1-100">       <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>)</span>
<span id="cb1-101">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>root<span class="op">$</span>q) {</span>
<span id="cb1-102">    cc &lt;-<span class="st"> </span><span class="kw">spiral</span>(root<span class="op">$</span>r, start, root<span class="op">$</span>a, </span>
<span id="cb1-103">           <span class="kw">list</span>(</span>
<span id="cb1-104">             <span class="dt">fill =</span> <span class="kw">c</span>(<span class="st">"#49B49B"</span>, <span class="st">"#483352"</span>),</span>
<span id="cb1-105">             <span class="dt">i =</span> <span class="dv">1</span> <span class="op">+</span><span class="st"> </span>i <span class="op">%%</span><span class="st"> </span><span class="dv">2</span>,</span>
<span id="cb1-106">             <span class="dt">min_d =</span> min_d,</span>
<span id="cb1-107">             <span class="dt">max_d =</span> max_d</span>
<span id="cb1-108">           ), alpha, scale)</span>
<span id="cb1-109">    start &lt;-<span class="st"> </span>start <span class="op">*</span><span class="st"> </span>root<span class="op">$</span>b</span>
<span id="cb1-110">    out &lt;-<span class="st"> </span><span class="kw">rbind</span>(out, cc)</span>
<span id="cb1-111">  }</span>
<span id="cb1-112">  <span class="kw">colnames</span>(out) &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="st">"x"</span>, <span class="st">"y"</span>, <span class="st">"r"</span>, <span class="st">"colIndex"</span>)</span>
<span id="cb1-113">  out</span>
<span id="cb1-114">}</span>
<span id="cb1-115"></span>
<span id="cb1-116"><span class="co"># plot a Doyle spiral ####</span></span>
<span id="cb1-117">root &lt;-<span class="st"> </span><span class="kw">Doyle</span>(<span class="dt">p =</span> <span class="dv">8</span>, <span class="dt">q =</span> <span class="dv">16</span>)</span>
<span id="cb1-118">M &lt;-<span class="st"> </span><span class="kw">frame</span>(<span class="dv">0</span>, root, <span class="dv">600</span>)</span></code></pre>
      </div>
      <p>The <code>frame</code> function generates a plot of a Doyle spiral:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Doyle_8-16.png"
        />
      </p>
      <p>
        It also returns a matrix providing the centers and the radii of the
        circles, and the color index of each circle. This allowed me to plot the
        Doyle spiral in 3D with <strong>rgl</strong>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(rgl)</span>
<span id="cb2-2"><span class="kw">library</span>(Rvcg)</span>
<span id="cb2-3"></span>
<span id="cb2-4">unitSphere &lt;-<span class="st"> </span><span class="kw">vcgSphere</span>(<span class="dv">4</span>)</span>
<span id="cb2-5">cols &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="st">"#49B49B"</span>, <span class="st">"#483352"</span>)</span>
<span id="cb2-6"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb2-7"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-55</span>, <span class="dt">zoom =</span> <span class="fl">0.85</span>)</span>
<span id="cb2-8"><span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="kw">nrow</span>(M)) {</span>
<span id="cb2-9">  sph &lt;-<span class="st"> </span><span class="kw">translate3d</span>(</span>
<span id="cb2-10">    <span class="kw">scale3d</span>(unitSphere, M[i,<span class="st">"r"</span>], M[i,<span class="st">"r"</span>], M[i,<span class="st">"r"</span>]),</span>
<span id="cb2-11">    M[i, <span class="st">"x"</span>], M[i,<span class="st">"y"</span>], <span class="dv">0</span></span>
<span id="cb2-12">  )</span>
<span id="cb2-13">  <span class="kw">shade3d</span>(sph, <span class="dt">color =</span> cols[M[i, <span class="st">"colIndex"</span>]])</span>
<span id="cb2-14">}</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co"># animation ####</span></span>
<span id="cb2-17"><span class="kw">movie3d</span>(<span class="kw">spin3d</span>(<span class="dt">axis =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>), <span class="dt">rpm =</span> <span class="dv">10</span>),</span>
<span id="cb2-18">        <span class="dt">duration =</span> <span class="dv">6</span>, <span class="dt">fps =</span> <span class="dv">10</span>,</span>
<span id="cb2-19">        <span class="dt">movie =</span> <span class="st">"zzpic"</span>, <span class="dt">dir =</span> <span class="st">"."</span>,</span>
<span id="cb2-20">        <span class="dt">convert =</span> <span class="ot">FALSE</span>, <span class="dt">webshot =</span> <span class="ot">FALSE</span>,</span>
<span id="cb2-21">        <span class="dt">startTime =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">10</span>)</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="kw">library</span>(gifski)</span>
<span id="cb2-24">pngs &lt;-<span class="st"> </span><span class="kw">Sys.glob</span>(<span class="st">"zzpic*.png"</span>)</span>
<span id="cb2-25"><span class="kw">gifski</span>(</span>
<span id="cb2-26">  <span class="dt">png_files =</span> pngs,</span>
<span id="cb2-27">  <span class="dt">gif_file =</span> <span class="st">"Doyle_8-16.gif"</span>,</span>
<span id="cb2-28">  <span class="dt">width =</span> <span class="dv">512</span>,</span>
<span id="cb2-29">  <span class="dt">height =</span> <span class="dv">512</span>,</span>
<span id="cb2-30">  <span class="dt">delay =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">8</span></span>
<span id="cb2-31">)</span>
<span id="cb2-32"><span class="kw">file.remove</span>(pngs)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Doyle_8-16.gif"
        />
      </p>
      <p>And also with POV-Ray:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Doyle_8-16_POVRay.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 08 Jul 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/DoyleSpiral.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Fast expansion of a polynomial with R - part 2</title>
      <link>https://laustep.github.io/stlahblog/posts/expandPolynomialWithRyacasSpray.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In
        <a
          href="https://laustep.github.io/stlahblog/posts/expandPolynomialWithSpray.html"
          >the previous post</a
        >, I showed how to expand a polynomial with symbolic parameters with the
        help of the <strong>spray</strong> package. As I said, it has one
        problem: it doesn’t preserve the rational numbers in the polynomial
        expression.
      </p>
      <p>
        I’m going to provide a solution here which overcomes this problem, with
        the help of the <strong>Ryacas</strong> package. In fact I provide a
        solution with the packages <strong>Ryacas</strong> and
        <strong>partitions</strong>, and then I improve it with the help of the
        <strong>spray</strong> package.
      </p>
      <p>Here is the polynomial expression I use for the illustration:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">expr &lt;-<span class="st"> "((x*x+y*y+1)*(a*x*x+b*y*y)+z*z*(b*x*x+a*y*y)-2*(a-b)*x*y*z-a*b*(x*x+y*y))^2-4*(x*x+y*y)*(a*x*x+b*y*y-x*y*z*(a-b))^2"</span></span></code></pre>
      </div>
      <p>
        In fact, the equation <code>expr(x,y,z) = 0</code> defines a solid
        Möbius strip. That is why I was interested in this expression, because I
        wanted to draw the solid Möbius strip with POV-Ray. It is nice, in spite
        of a sad artifact (please leave a comment if you know how to get rid of
        it):
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_POV.gif"
        />
      </p>
      <p>
        Let’s assign this expression to Yacas and let’s have a look at the
        degrees of the three variables <code>x</code>, <code>y</code> and
        <code>z</code>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(Ryacas)</span>
<span id="cb2-2"><span class="kw">yac_assign</span>(expr, <span class="st">"POLY"</span>)</span>
<span id="cb2-3"><span class="kw">yac_str</span>(<span class="st">"Degree(POLY, x)"</span>)</span>
<span id="cb2-4"><span class="co">## [1] "8"</span></span>
<span id="cb2-5"><span class="kw">yac_str</span>(<span class="st">"Degree(POLY, y)"</span>)</span>
<span id="cb2-6"><span class="co">## [1] "8"</span></span>
<span id="cb2-7"><span class="kw">yac_str</span>(<span class="st">"Degree(POLY, z)"</span>)</span>
<span id="cb2-8"><span class="co">## [1] "4"</span></span></code></pre>
      </div>
      <p>
        The degrees are 8, 8 and 4 respectively. So we can get all possible
        combinations <span class="math inline">\((i,j,k)\)</span> of
        <span class="math inline">\(x^iy^jz^k\)</span> with the
        <code>blockparts</code> function of the <code>partitions</code> package:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(partitions)</span>
<span id="cb3-2">combins &lt;-<span class="st"> </span><span class="kw">blockparts</span>(<span class="kw">c</span>(8L, 8L, 4L))</span>
<span id="cb3-3"><span class="kw">dim</span>(combins)</span>
<span id="cb3-4"><span class="co">## [1]   3 405</span></span></code></pre>
      </div>
      <p>
        There are <span class="math inline">\(405\)</span> such combinations. Of
        course they don’t all appear in the polynomial, and that is the point we
        will improve later. For the moment we will iterate over all these
        combinations. Here is the function which takes one combination and
        returns the corresponding coefficient of
        <span class="math inline">\(x^iy^jz^k\)</span> in terms of
        <span class="math inline">\(a\)</span> and
        <span class="math inline">\(b\)</span>, written in POV-Ray syntax:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">f &lt;-<span class="st"> </span><span class="cf">function</span>(combin) {</span>
<span id="cb4-2">  xyz &lt;-<span class="st"> </span><span class="kw">sprintf</span>(<span class="st">"xyz(%s): "</span>, <span class="kw">toString</span>(combin))</span>
<span id="cb4-3">  coef &lt;-<span class="st"> </span><span class="kw">yac_str</span>(<span class="kw">sprintf</span>(</span>
<span id="cb4-4">    <span class="st">"ExpandBrackets(Coef(Coef(Coef(POLY, x, %d), y, %d), z, %d))"</span>,</span>
<span id="cb4-5">    combin[1L], combin[2L], combin[3L]</span>
<span id="cb4-6">  ))</span>
<span id="cb4-7">  <span class="cf">if</span>(coef <span class="op">==</span><span class="st"> "0"</span>) <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb4-8">  coef &lt;-<span class="st"> </span><span class="kw">gsub</span>(<span class="st">"([ab])</span><span class="ch">\\</span><span class="st">^(</span><span class="ch">\\</span><span class="st">d+)"</span>, <span class="st">"pow(</span><span class="ch">\\</span><span class="st">1,</span><span class="ch">\\</span><span class="st">2)"</span>, <span class="dt">x =</span> coef)</span>
<span id="cb4-9">  <span class="kw">paste0</span>(xyz, coef, <span class="st">","</span>)</span>
<span id="cb4-10">}</span>
<span id="cb4-11"><span class="co"># for example:</span></span>
<span id="cb4-12"><span class="kw">f</span>(<span class="kw">c</span>(2L, 6L, 0L))</span>
<span id="cb4-13"><span class="co">## [1] "xyz(2, 6, 0): 2*pow(b,2)+2*b*a,"</span></span></code></pre>
      </div>
      <p>Then we get the POV-Ray code as follows:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">povray &lt;-<span class="st"> </span><span class="kw">apply</span>(combins, 2L, f)</span>
<span id="cb5-2"><span class="kw">cat</span>(povray, <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span>, <span class="dt">file =</span> <span class="st">"SolidMobiusStrip.pov"</span>)</span></code></pre>
      </div>
      <p>
        The file <strong><em>SolidMobiusStrip.pov</em></strong
        >:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource povray numberLines"
        ><code class="sourceCode povray"><span id="cb6-1">xyz(<span class="fl">4</span>, <span class="fl">0</span>, <span class="fl">0</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>)*<span class="kw">pow</span>(b,<span class="fl">2</span>)-<span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b+<span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb6-2">xyz(<span class="fl">6</span>, <span class="fl">0</span>, <span class="fl">0</span>): (-<span class="fl">2</span>)*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b<span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb6-3">xyz(<span class="fl">8</span>, <span class="fl">0</span>, <span class="fl">0</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb6-4">xyz(<span class="fl">2</span>, <span class="fl">2</span>, <span class="fl">0</span>): <span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>)*<span class="kw">pow</span>(a,<span class="fl">2</span>)-<span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>)*a+(-<span class="fl">2</span>)*b*<span class="kw">pow</span>(a,<span class="fl">2</span>)+<span class="fl">2</span>*b*a,</span>
<span id="cb6-5">xyz(<span class="fl">4</span>, <span class="fl">2</span>, <span class="fl">0</span>): (-<span class="fl">2</span>)*<span class="kw">pow</span>(b,<span class="fl">2</span>)*a+(-<span class="fl">4</span>)*b*<span class="kw">pow</span>(a,<span class="fl">2</span>)-<span class="fl">4</span>*b*a<span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb6-6">xyz(<span class="fl">6</span>, <span class="fl">2</span>, <span class="fl">0</span>): <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)+<span class="fl">2</span>*a*b,</span>
<span id="cb6-7">xyz(<span class="fl">0</span>, <span class="fl">4</span>, <span class="fl">0</span>): <span class="kw">pow</span>(b,<span class="fl">2</span>)*<span class="kw">pow</span>(a,<span class="fl">2</span>)-<span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>)*a+<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb6-8">xyz(<span class="fl">2</span>, <span class="fl">4</span>, <span class="fl">0</span>): (-<span class="fl">4</span>)*<span class="kw">pow</span>(b,<span class="fl">2</span>)*a<span class="fl">-2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>)+(-<span class="fl">2</span>)*b*<span class="kw">pow</span>(a,<span class="fl">2</span>)-<span class="fl">4</span>*b*a,</span>
<span id="cb6-9">xyz(<span class="fl">4</span>, <span class="fl">4</span>, <span class="fl">0</span>): <span class="kw">pow</span>(b,<span class="fl">2</span>)+<span class="fl">4</span>*b*a+<span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb6-10">xyz(<span class="fl">0</span>, <span class="fl">6</span>, <span class="fl">0</span>): (-<span class="fl">2</span>)*<span class="kw">pow</span>(b,<span class="fl">2</span>)*a<span class="fl">-2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb6-11">xyz(<span class="fl">2</span>, <span class="fl">6</span>, <span class="fl">0</span>): <span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>)+<span class="fl">2</span>*b*a,</span>
<span id="cb6-12">xyz(<span class="fl">0</span>, <span class="fl">8</span>, <span class="fl">0</span>): <span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb6-13">xyz(<span class="fl">3</span>, <span class="fl">1</span>, <span class="fl">1</span>): <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b<span class="fl">-4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)+(-<span class="fl">4</span>)*a*<span class="kw">pow</span>(b,<span class="fl">2</span>)+<span class="fl">4</span>*a*b,</span>
<span id="cb6-14">xyz(<span class="fl">5</span>, <span class="fl">1</span>, <span class="fl">1</span>): <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)-<span class="fl">4</span>*a*b,</span>
<span id="cb6-15">xyz(<span class="fl">1</span>, <span class="fl">3</span>, <span class="fl">1</span>): <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b+(-<span class="fl">4</span>)*a*<span class="kw">pow</span>(b,<span class="fl">2</span>)-<span class="fl">4</span>*a*b+<span class="fl">4</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb6-16">xyz(<span class="fl">3</span>, <span class="fl">3</span>, <span class="fl">1</span>): <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)-<span class="fl">4</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb6-17">xyz(<span class="fl">1</span>, <span class="fl">5</span>, <span class="fl">1</span>): <span class="fl">4</span>*a*b<span class="fl">-4</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb6-18">xyz(<span class="fl">4</span>, <span class="fl">0</span>, <span class="fl">2</span>): (-<span class="fl">2</span>)*a*<span class="kw">pow</span>(b,<span class="fl">2</span>)+<span class="fl">2</span>*a*b,</span>
<span id="cb6-19">xyz(<span class="fl">6</span>, <span class="fl">0</span>, <span class="fl">2</span>): <span class="fl">2</span>*b*a,</span>
<span id="cb6-20">xyz(<span class="fl">2</span>, <span class="fl">2</span>, <span class="fl">2</span>): (-<span class="fl">2</span>)*<span class="kw">pow</span>(b,<span class="fl">2</span>)*a+<span class="fl">6</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>)+(-<span class="fl">2</span>)*b*<span class="kw">pow</span>(a,<span class="fl">2</span>)-<span class="fl">8</span>*b*a+<span class="fl">6</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb6-21">xyz(<span class="fl">4</span>, <span class="fl">2</span>, <span class="fl">2</span>): (-<span class="fl">2</span>)*<span class="kw">pow</span>(a,<span class="fl">2</span>)+<span class="fl">10</span>*a*b<span class="fl">-2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb6-22">xyz(<span class="fl">0</span>, <span class="fl">4</span>, <span class="fl">2</span>): (-<span class="fl">2</span>)*b*<span class="kw">pow</span>(a,<span class="fl">2</span>)+<span class="fl">2</span>*b*a,</span>
<span id="cb6-23">xyz(<span class="fl">2</span>, <span class="fl">4</span>, <span class="fl">2</span>): (-<span class="fl">2</span>)*<span class="kw">pow</span>(a,<span class="fl">2</span>)+<span class="fl">10</span>*a*b<span class="fl">-2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb6-24">xyz(<span class="fl">0</span>, <span class="fl">6</span>, <span class="fl">2</span>): <span class="fl">2</span>*a*b,</span>
<span id="cb6-25">xyz(<span class="fl">3</span>, <span class="fl">1</span>, <span class="fl">3</span>): <span class="fl">4</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>)-<span class="fl">4</span>*b*a,</span>
<span id="cb6-26">xyz(<span class="fl">1</span>, <span class="fl">3</span>, <span class="fl">3</span>): (-<span class="fl">4</span>)*<span class="kw">pow</span>(a,<span class="fl">2</span>)+<span class="fl">4</span>*a*b,</span>
<span id="cb6-27">xyz(<span class="fl">4</span>, <span class="fl">0</span>, <span class="fl">4</span>): <span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb6-28">xyz(<span class="fl">2</span>, <span class="fl">2</span>, <span class="fl">4</span>): <span class="fl">2</span>*a*b,</span>
<span id="cb6-29">xyz(<span class="fl">0</span>, <span class="fl">4</span>, <span class="fl">4</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>)</span></code></pre>
      </div>
      <p>
        Now we will restrict the
        <span class="math inline">\(405\)</span> combinations. There are only
        <span class="math inline">\(29\)</span> combinations of exponents in the
        polynomial expansion. How to get them? With <strong>spray</strong>. We
        don’t care if there are rational numbers in the polynomial because we
        will take the exponents only.
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(spray)</span>
<span id="cb7-2">x &lt;-<span class="st"> </span><span class="kw">lone</span>(1L, 5L)</span>
<span id="cb7-3">y &lt;-<span class="st"> </span><span class="kw">lone</span>(2L, 5L)</span>
<span id="cb7-4">z &lt;-<span class="st"> </span><span class="kw">lone</span>(3L, 5L)</span>
<span id="cb7-5">a &lt;-<span class="st"> </span><span class="kw">lone</span>(4L, 5L)</span>
<span id="cb7-6">b &lt;-<span class="st"> </span><span class="kw">lone</span>(5L, 5L)</span>
<span id="cb7-7">P &lt;-<span class="st"> </span>((x<span class="op">*</span>x<span class="op">+</span>y<span class="op">*</span>y<span class="op">+</span><span class="dv">1</span>)<span class="op">*</span>(a<span class="op">*</span>x<span class="op">*</span>x<span class="op">+</span>b<span class="op">*</span>y<span class="op">*</span>y) <span class="op">+</span><span class="st"> </span>z<span class="op">*</span>z<span class="op">*</span>(b<span class="op">*</span>x<span class="op">*</span>x<span class="op">+</span>a<span class="op">*</span>y<span class="op">*</span>y) <span class="op">-</span><span class="st"> </span></span>
<span id="cb7-8"><span class="st">        </span><span class="dv">2</span><span class="op">*</span>(a<span class="op">-</span>b)<span class="op">*</span>x<span class="op">*</span>y<span class="op">*</span>z <span class="op">-</span><span class="st"> </span>a<span class="op">*</span>b<span class="op">*</span>(x<span class="op">*</span>x<span class="op">+</span>y<span class="op">*</span>y))<span class="op">^</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span></span>
<span id="cb7-9"><span class="st">  </span><span class="dv">4</span><span class="op">*</span>(x<span class="op">*</span>x<span class="op">+</span>y<span class="op">*</span>y)<span class="op">*</span>(a<span class="op">*</span>x<span class="op">*</span>x<span class="op">+</span>b<span class="op">*</span>y<span class="op">*</span>y<span class="op">-</span>x<span class="op">*</span>y<span class="op">*</span>z<span class="op">*</span>(a<span class="op">-</span>b))<span class="op">^</span><span class="dv">2</span></span>
<span id="cb7-10">exponents &lt;-<span class="st"> </span><span class="kw">index</span>(P)</span>
<span id="cb7-11">exponents_xyz &lt;-<span class="st"> </span><span class="kw">unique</span>(exponents[, <span class="kw">c</span>(1L, 2L, 3L)])</span>
<span id="cb7-12"><span class="kw">dim</span>(exponents_xyz)</span>
<span id="cb7-13"><span class="co">## [1] 29  3</span></span></code></pre>
      </div>
      <p>
        Indeed, there are <span class="math inline">\(29\)</span> combinations.
        Now we can proceed as before and get the POV-Ray within a couple of
        seconds:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1">povray &lt;-<span class="st"> </span><span class="kw">apply</span>(exponents_xyz, 1L, f)</span>
<span id="cb8-2"><span class="kw">cat</span>(povray, <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span>, <span class="dt">file =</span> <span class="st">"SolidMobiusStrip.pov"</span>)</span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 05 Jul 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/expandPolynomialWithRyacasSpray.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Fast expansion of a polynomial with R</title>
      <link>https://laustep.github.io/stlahblog/posts/expandPolynomialWithSpray.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In
        <a href="https://laustep.github.io/stlahblog/posts/caracas01.html"
          >this previous post</a
        >,
        <a href="https://laustep.github.io/stlahblog/posts/caracas02.html"
          >this previous post</a
        >, and
        <a
          href="https://laustep.github.io/stlahblog/posts/juliaPolynomialExpansion.html"
          >this previous post</a
        >, I showed how to expand a polynomial with symbolic parameters. In the
        first two posts, I used the R package <strong>caracas</strong>, a
        wrapper of <strong>SymPy</strong>, and in the third post I used Julia.
      </p>
      <p>
        Now I’ve found a pure R solution, with the help of the
        <strong>spray</strong> package, and it is very fast. That’s what I’m
        going to demonstrate here, with the same example I treated with Julia.
      </p>
      <p>
        We will lost something as compared to Julia: the
        <strong>spray</strong> package does not handle rational numbers, so we
        will replace them by their double approximation. We could use the
        <strong>qspray</strong> package instead, to deal with the rational
        numbers.
      </p>
      <p>Here is the starting polynomial expression:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># define the polynomial expression as a function</span></span>
<span id="cb1-2">f &lt;-<span class="st"> </span><span class="cf">function</span>(x, y, z, w, sqrt3) {</span>
<span id="cb1-3">  ((x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span><span class="op">+</span>z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>w<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">145</span><span class="op">/</span><span class="dv">3</span>)<span class="op">^</span><span class="dv">2-4</span><span class="op">*</span>(<span class="dv">9</span><span class="op">*</span>z<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">16</span><span class="op">*</span>w<span class="op">^</span><span class="dv">2</span>))<span class="op">^</span><span class="dv">2</span> <span class="op">*</span><span class="st"> </span></span>
<span id="cb1-4"><span class="st">    </span>((x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span><span class="op">+</span>z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>w<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">145</span><span class="op">/</span><span class="dv">3</span>)<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">296</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>)<span class="op">-</span><span class="dv">4</span><span class="op">*</span>(<span class="dv">9</span><span class="op">*</span>z<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">16</span><span class="op">*</span>w<span class="op">^</span><span class="dv">2</span>)) <span class="op">-</span><span class="st"> </span></span>
<span id="cb1-5"><span class="st">    </span><span class="dv">16</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>)<span class="op">*</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span><span class="op">+</span>z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>w<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">145</span><span class="op">/</span><span class="dv">3</span>)<span class="op">^</span><span class="dv">2</span> <span class="op">*</span><span class="st"> </span></span>
<span id="cb1-6"><span class="st">    </span>(<span class="dv">37</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span><span class="op">+</span>z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>w<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">145</span><span class="op">/</span><span class="dv">3</span>)<span class="op">^</span><span class="dv">2-1369</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>)<span class="op">-</span><span class="dv">7</span><span class="op">*</span>(<span class="dv">225</span><span class="op">*</span>z<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">448</span><span class="op">*</span>w<span class="op">^</span><span class="dv">2</span>)) <span class="op">-</span><span class="st"> </span></span>
<span id="cb1-7"><span class="st">    </span>sqrt3<span class="op">*</span><span class="dv">16</span><span class="op">/</span><span class="dv">9</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">3-3</span><span class="op">*</span>x<span class="op">*</span>y<span class="op">^</span><span class="dv">2</span>) <span class="op">*</span><span class="st"> </span></span>
<span id="cb1-8"><span class="st">    </span>(<span class="dv">110</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span><span class="op">+</span>z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>w<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">145</span><span class="op">/</span><span class="dv">3</span>)<span class="op">^</span><span class="dv">3-148</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span><span class="op">+</span>z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>w<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">145</span><span class="op">/</span><span class="dv">3</span>) <span class="op">*</span><span class="st"> </span></span>
<span id="cb1-9"><span class="st">       </span>(<span class="dv">110</span><span class="op">*</span>x<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">110</span><span class="op">*</span>y<span class="op">^</span><span class="dv">2-297</span><span class="op">*</span>z<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">480</span><span class="op">*</span>w<span class="op">^</span><span class="dv">2</span>)) <span class="op">-</span><span class="st"> </span></span>
<span id="cb1-10"><span class="st">    </span><span class="dv">64</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>)<span class="op">*</span>(<span class="dv">3</span><span class="op">*</span>(<span class="dv">729</span><span class="op">*</span>z<span class="op">^</span><span class="dv">4</span><span class="op">+</span><span class="dv">4096</span><span class="op">*</span>w<span class="op">^</span><span class="dv">4</span>)<span class="op">+</span><span class="dv">168</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>)<span class="op">*</span>(<span class="dv">15</span><span class="op">*</span>z<span class="op">^</span><span class="dv">2-22</span><span class="op">*</span>w<span class="op">^</span><span class="dv">2</span>)) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-11"><span class="st">    </span><span class="dv">64</span><span class="op">*</span>(<span class="dv">12100</span><span class="op">/</span><span class="dv">27</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">3-3</span><span class="op">*</span>x<span class="op">*</span>y<span class="op">^</span><span class="dv">2</span>)<span class="op">^</span><span class="dv">2-7056</span><span class="op">*</span>(<span class="dv">3</span><span class="op">*</span>x<span class="op">^</span><span class="dv">2</span><span class="op">*</span>y<span class="op">-</span>y<span class="op">^</span><span class="dv">3</span>)<span class="op">^</span><span class="dv">2</span>)<span class="op">-</span><span class="dv">592240896</span><span class="op">*</span>z<span class="op">^</span><span class="dv">2</span><span class="op">*</span>w<span class="op">^</span><span class="dv">2</span></span>
<span id="cb1-12">}</span></code></pre>
      </div>
      <p>We transform it to the polynomial of interest:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># there are 3 variables (x,y,z) and 6 parameters (w0,a,b,c,d,sqrt3)</span></span>
<span id="cb2-2"><span class="kw">library</span>(spray)</span>
<span id="cb2-3">x     &lt;-<span class="st"> </span><span class="kw">lone</span>(<span class="dv">1</span>, <span class="dv">9</span>)</span>
<span id="cb2-4">y     &lt;-<span class="st"> </span><span class="kw">lone</span>(<span class="dv">2</span>, <span class="dv">9</span>)</span>
<span id="cb2-5">z     &lt;-<span class="st"> </span><span class="kw">lone</span>(<span class="dv">3</span>, <span class="dv">9</span>)</span>
<span id="cb2-6">w0    &lt;-<span class="st"> </span><span class="kw">lone</span>(<span class="dv">4</span>, <span class="dv">9</span>)</span>
<span id="cb2-7">a     &lt;-<span class="st"> </span><span class="kw">lone</span>(<span class="dv">5</span>, <span class="dv">9</span>)</span>
<span id="cb2-8">b     &lt;-<span class="st"> </span><span class="kw">lone</span>(<span class="dv">6</span>, <span class="dv">9</span>)</span>
<span id="cb2-9">c     &lt;-<span class="st"> </span><span class="kw">lone</span>(<span class="dv">7</span>, <span class="dv">9</span>)</span>
<span id="cb2-10">d     &lt;-<span class="st"> </span><span class="kw">lone</span>(<span class="dv">8</span>, <span class="dv">9</span>)</span>
<span id="cb2-11">sqrt3 &lt;-<span class="st"> </span><span class="kw">lone</span>(<span class="dv">9</span>, <span class="dv">9</span>)</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co"># define the substitutions</span></span>
<span id="cb2-14">X &lt;-<span class="st"> </span>a<span class="op">*</span>x  <span class="op">-</span><span class="st"> </span>b<span class="op">*</span>y  <span class="op">-</span><span class="st"> </span>c<span class="op">*</span>z  <span class="op">-</span><span class="st"> </span>d<span class="op">*</span>w0</span>
<span id="cb2-15">Y &lt;-<span class="st"> </span>a<span class="op">*</span>y  <span class="op">+</span><span class="st"> </span>b<span class="op">*</span>x  <span class="op">+</span><span class="st"> </span>c<span class="op">*</span>w0 <span class="op">-</span><span class="st"> </span>d<span class="op">*</span>z</span>
<span id="cb2-16">Z &lt;-<span class="st"> </span>a<span class="op">*</span>z  <span class="op">-</span><span class="st"> </span>b<span class="op">*</span>w0 <span class="op">+</span><span class="st"> </span>c<span class="op">*</span>x  <span class="op">+</span><span class="st"> </span>d<span class="op">*</span>y</span>
<span id="cb2-17">W &lt;-<span class="st"> </span>a<span class="op">*</span>w0 <span class="op">+</span><span class="st"> </span>b<span class="op">*</span>z  <span class="op">-</span><span class="st"> </span>c<span class="op">*</span>y  <span class="op">+</span><span class="st"> </span>d<span class="op">*</span>x</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co"># here is the polynomial of interest</span></span>
<span id="cb2-20">P &lt;-<span class="st"> </span><span class="kw">f</span>(X, Y, Z, W, sqrt3)</span></code></pre>
      </div>
      <p>Now we take the “xyz” part of each term:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="co"># the exponents of x, y, z</span></span>
<span id="cb3-2">xyz_powers &lt;-<span class="st"> </span>P[[<span class="st">"index"</span>]][, <span class="kw">c</span>(1L, 2L, 3L)]</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co"># the "keys" xyz(i,j,k) for POV-Ray</span></span>
<span id="cb3-5">xyz_povray &lt;-<span class="st"> </span><span class="kw">apply</span>(xyz_powers, 1L, <span class="cf">function</span>(comp) {</span>
<span id="cb3-6">  <span class="kw">sprintf</span>(<span class="st">"xyz(%s): "</span>, <span class="kw">toString</span>(comp))</span>
<span id="cb3-7">})</span></code></pre>
      </div>
      <p>Now we take the remaining part of each term:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="co"># the other exponents, those of w0, a, b, c, d, sqrt3</span></span>
<span id="cb4-2">other_powers &lt;-<span class="st"> </span>P[[<span class="st">"index"</span>]][, <span class="kw">c</span>(4L, 5L, 6L, 7L, 8L, 9L)]</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co"># the polynomials in w0, a, b, c, d, sqrt3</span></span>
<span id="cb4-5">nterms &lt;-<span class="st"> </span><span class="kw">length</span>(P)</span>
<span id="cb4-6">coeffs &lt;-<span class="st"> </span>P[[<span class="st">"value"</span>]]</span>
<span id="cb4-7">polynomials &lt;-<span class="st"> </span><span class="kw">lapply</span>(1L<span class="op">:</span>nterms, <span class="cf">function</span>(i) {</span>
<span id="cb4-8">  <span class="kw">spray</span>(other_powers[i, ], coeffs[i])</span>
<span id="cb4-9">})</span></code></pre>
      </div>
      <p>
        And we group these polynomials, putting together those which share the
        same “xyz” part:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="co"># group the polynomials which have the same x,y,z exponents</span></span>
<span id="cb5-2">polynomials_groups &lt;-<span class="st"> </span><span class="kw">sapply</span>(<span class="kw">split</span>(polynomials, xyz_povray), <span class="cf">function</span>(polys) {</span>
<span id="cb5-3">  polysum &lt;-<span class="st"> </span>polys[[<span class="dv">1</span>]]</span>
<span id="cb5-4">  <span class="cf">for</span>(poly <span class="cf">in</span> polys[<span class="op">-</span><span class="dv">1</span>]) {</span>
<span id="cb5-5">    polysum &lt;-<span class="st"> </span><span class="kw">spray_add</span>(</span>
<span id="cb5-6">      polysum<span class="op">$</span>index, polysum<span class="op">$</span>value, poly<span class="op">$</span>index, poly<span class="op">$</span>value</span>
<span id="cb5-7">    )</span>
<span id="cb5-8">  }</span>
<span id="cb5-9">  <span class="kw">as.spray</span>(polysum)</span>
<span id="cb5-10">}, <span class="dt">simplify =</span> <span class="ot">FALSE</span>)</span>
<span id="cb5-11"><span class="co"># remove the empty polynomials, if there are some</span></span>
<span id="cb5-12">polynomials_groups &lt;-<span class="st"> </span><span class="kw">Filter</span>(<span class="kw">Negate</span>(is.empty), polynomials_groups)</span></code></pre>
      </div>
      <p>We want these polynomials as character strings:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="co"># there's no as.character function for sprays (polynomials), so we make one</span></span>
<span id="cb6-2">asCharacter &lt;-<span class="st"> </span><span class="cf">function</span>(poly) {</span>
<span id="cb6-3">  op &lt;-<span class="st"> </span><span class="kw">options</span>(<span class="dt">sprayvars =</span> <span class="kw">c</span>(<span class="st">"w0"</span>, <span class="st">"a"</span>, <span class="st">"b"</span>, <span class="st">"c"</span>, <span class="st">"d"</span>, <span class="st">"sqrt3"</span>))</span>
<span id="cb6-4">  x &lt;-<span class="st"> </span><span class="kw">capture.output</span>(<span class="kw">print_spray_polyform</span>(poly))</span>
<span id="cb6-5">  <span class="kw">options</span>(op)</span>
<span id="cb6-6">  <span class="kw">paste0</span>(x, <span class="dt">collapse =</span> <span class="st">" "</span>)</span>
<span id="cb6-7">}</span>
<span id="cb6-8"></span>
<span id="cb6-9">polynomials_strings &lt;-<span class="st"> </span></span>
<span id="cb6-10"><span class="st">  </span><span class="kw">sapply</span>(polynomials_groups, asCharacter, <span class="dt">simplify =</span> <span class="ot">FALSE</span>)</span></code></pre>
      </div>
      <p>
        And that’s it. We have everything needed to construct the POV-Ray code:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">head</span>(polynomials_strings, 2L)</span>
<span id="cb7-2"><span class="co">## $`xyz(0, 0, 0): `</span></span>
<span id="cb7-3"><span class="co">## [1] "12749128107.8532 +1760*w0^7*c^6*d*sqrt3 -6*w0^10*d^10 +w0^12*b^12 +60*w0^12*b^2*c^4*d^6 +180*w0^12*a^4*b^2*c^2*d^4 +9498*w0^8*b^4*c^4 +44148*w0^8*a^4*b^2*d^2 +180*w0^12*a^4*b^2*c^4*d^2 +1068*w0^10*a^4*c^4*d^2 +30*w0^12*a^2*c^8*d^2 +2196*w0^10*a^4*b^2*d^4 +2519250.2222222*w0^6*a^2*b^4 +10209.6666667*w0^8*a^8 +6*w0^12*a^10*d^2 -12537.3333333*w0^8*a^2*d^6 +31964*w0^8*b^6*d^2 +2076*w0^10*b^4*c^4*d^2 +182*w0^10*b^10 +296*w0^10*a^2*c^6*d^2 +w0^12*a^12 +593516.8888889*w0^6*b^4*d^2 +2076*w0^10*b^4*c^2*d^4 -2933.3333333*w0^9*a^2*c^4*d^3*sqrt3 -1345147.5555556*w0^6*a^2*c^2*d^2 -1760*w0^9*a^2*c^6*d*sqrt3 -4697.3333333*w0^8*b^2*c^6 +18996*w0^8*b^4*c^2*d^2 -14022*w0^8*a^4*c^4 +386*w0^10*a^8*d^2 +6*w0^12*a^10*c^2 -317738.6666667*w0^7*b^2*c^4*d*sqrt3 -60*w0^10*c^6*d^4 +15*w0^12*a^4*c^8 +2136*w0^10*b^6*c^2*d^2 +180*w0^12*a^2*b^4*c^4*d^2 +60*w0^12*a^6*b^2*c^4 -6876*w0^8*a^2*b^2*c^4 +67668*w0^8*a^2*b^4*d^2 +60*w0^12*b^4*c^6*d^2 +15*w0^12*a^8*b^4 +30*w0^12*a^8*c^2*d^2 +20*w0^12*a^6*c^6 +632*w0^10*b^2*c^2*d^6 +722*w0^10*b^8*c^2 +67668*w0^8*a^2*b^4*c^2 +120*w0^12*a^6*b^2*c^2*d^2 -28355.5555556*w0^5*d^5*sqrt3 -37612*w0^8*a^2*c^2*d^4 +6*w0^12*a^2*d^10 -1124*w0^8*c^6*d^2 +1105545.7777778*w0^6*a^2*b^2*c^2 +722*w0^10*b^8*d^2 -586.6666667*w0^9*a^6*c^2*d*sqrt3 +6*w0^12*a^10*b^2 +2933.3333333*w0^7*c^4*d^3*sqrt3 -1173.3333333*w0^9*c^4*d^5*sqrt3 -1760*w0^9*a^2*b^4*c^2*d*sqrt3 +6*w0^12*a^2*b^10 +60*w0^12*a^2*b^4*d^6 +3144*w0^10*a^2*b^2*c^2*d^4 +30*w0^12*a^8*b^2*d^2 +30*w0^12*a^2*b^2*d^8 +356*w0^10*a^4*c^6 +1484*w0^10*a^4*b^6 +56711.1111111*w0^5*c^2*d^3*sqrt3 +44148*w0^8*a^4*b^2*c^2 +90*w0^12*a^4*c^4*d^4 +6*w0^12*a^2*c^10 -1124*w0^8*c^2*d^6 -37612*w0^8*a^2*c^4*d^2 +564*w0^10*a^6*c^4 -4733659.2592593*w0^5*a^2*d^3*sqrt3 +2552*w0^10*a^2*b^6*c^2 +15*w0^12*b^8*c^4 +85066.6666667*w0^5*c^4*d*sqrt3 +60*w0^12*a^2*b^6*c^4 +60*w0^12*b^6*c^2*d^4 -3520*w0^9*a^2*b^2*c^4*d*sqrt3 +1173.3333333*w0^9*a^2*b^2*d^5*sqrt3 +15*w0^12*a^4*d^8 +30*w0^12*a^8*b^2*c^2 +18049.6666667*w0^8*b^8 -1409995.5555556*w0^6*b^2*c^2*d^2 +w0^12*c^12 +60*w0^12*b^6*c^4*d^2 -14022*w0^8*a^4*d^4 +w0^12*d^12 +98*w0^10*a^10 +1048*w0^10*a^2*b^2*c^6 +90*w0^12*a^4*b^4*d^4 +60*w0^12*a^6*b^2*d^4 +5147478.5185185*w0^5*b^2*d^3*sqrt3 +31964*w0^8*b^6*c^2 +993249552.469136*w0^2*b^2 -281*w0^8*d^8 +30*w0^12*a^2*b^2*c^8 +90*w0^12*a^4*b^4*c^4 -656447.2222222*w0^4*d^4 +8444*w0^8*a^6*c^2 -211825.7777778*w0^7*b^2*c^2*d^3*sqrt3 +586.6666667*w0^7*c^2*d^5*sqrt3 +15*w0^12*b^4*d^8 +1073624.7407407*w0^6*b^6 -1760*w0^9*a^4*b^2*c^2*d*sqrt3 -66241728.3950617*w0^3*c^2*d*sqrt3 -1760*w0^9*b^2*c^6*d*sqrt3 +20*w0^12*a^6*b^6 -586.6666667*w0^9*b^6*c^2*d*sqrt3 +60*w0^12*b^2*c^6*d^4 +106499.5555556*w0^7*b^4*d^3*sqrt3 -656447.2222222*w0^4*c^4 -586.6666667*w0^9*b^2*c^2*d^5*sqrt3 +30*w0^12*a^2*b^8*c^2 +60*w0^12*a^4*b^6*d^2 -9660598.1481482*w0^4*b^2*d^2 -12537.3333333*w0^8*a^2*c^6 -97937.7777778*w0^7*a^4*d^3*sqrt3 -672573.7777778*w0^6*a^2*c^4 +586.6666667*w0^9*a^4*b^2*d^3*sqrt3 -1312894.4444444*w0^4*c^2*d^2 +3324*w0^10*a^4*b^4*d^2 +60*w0^12*a^4*b^6*c^2 +1880*w0^10*a^6*b^2*d^2 +586.6666667*w0^9*a^2*b^4*d^3*sqrt3 +5400*w0^10*a^2*b^4*c^2*d^2 +1048*w0^10*a^2*b^2*d^6 +23850915.7407407*w0^4*a^4 +60*w0^12*a^2*b^6*d^4 +60*w0^12*a^4*b^2*c^6 +586.6666667*w0^9*a^4*d^5*sqrt3 -27975709.2592593*w0^4*a^2*d^2 -30*w0^10*c^2*d^8 +60*w0^12*a^2*c^6*d^4 -30*w0^10*c^8*d^2 -704997.7777778*w0^6*b^2*d^4 +30*w0^12*a^2*b^8*d^2 +120*w0^12*a^2*b^2*c^6*d^2 +46326.6666667*w0^8*a^6*b^2 +255375.5555556*w0^6*d^6 +1068*w0^10*b^6*d^4 +20*w0^12*c^6*d^6 +60*w0^12*a^6*b^4*d^2 -224889.9259259*w0^6*c^6 +120*w0^12*a^2*b^2*c^2*d^6 +60*w0^12*a^6*b^4*c^2 +62006.6666667*w0^8*a^2*b^6 +8561.7777778*w0^7*a^2*b^2*d^3*sqrt3 +492736.7407407*w0^6*a^6 +60*w0^12*a^2*c^4*d^6 +3647719.5555556*w0^6*c^4*d^2 +60*w0^12*a^4*c^2*d^6 +20*w0^12*b^6*c^6 +15*w0^12*c^4*d^8 +15*w0^12*b^8*d^4 +6*w0^12*c^2*d^10 -14092*w0^8*b^2*c^2*d^4 +586.6666667*w0^9*b^2*d^7*sqrt3 +158*w0^10*b^2*d^8 +2700*w0^10*a^2*b^4*d^4 -32744490.7407408*w0^2*c^2 +586.6666667*w0^9*a^2*d^7*sqrt3 +692*w0^10*b^4*c^6 +90*w0^12*b^4*c^4*d^4 -704997.7777778*w0^6*b^2*c^4 +593516.8888889*w0^6*b^4*c^2 +195.5555556*w0^9*d^9*sqrt3 -25685.3333333*w0^7*a^2*b^2*c^2*d*sqrt3 +45052.8888889*w0^6*a^4*c^2 -6*w0^10*c^10 -319498.6666667*w0^7*b^4*c^2*d*sqrt3 +42166026.8518519*w0^4*b^4 +195.5555556*w0^9*b^6*d^3*sqrt3 +1105545.7777778*w0^6*a^2*b^2*d^2 +293813.3333333*w0^7*a^4*c^2*d*sqrt3 -586.6666667*w0^9*c^8*d*sqrt3 -531718486.740741*w0^4*a^2*b^2 +120*w0^12*a^2*b^6*c^2*d^2 -2933.3333333*w0^9*b^2*c^4*d^3*sqrt3 +2552*w0^10*a^2*b^6*d^2 +296*w0^10*a^2*c^2*d^6 +2700*w0^10*a^2*b^4*c^4 -32744490.7407408*w0^2*d^2 +6*w0^12*b^2*d^10 +444*w0^10*a^2*c^4*d^4 +3144*w0^10*a^2*b^2*c^4*d^2 +105912.8888889*w0^7*b^2*d^5*sqrt3 +195.5555556*w0^9*a^6*d^3*sqrt3 -3556262.6666667*w0^6*c^2*d^4 +180*w0^12*a^4*b^4*c^2*d^2 -4697.3333333*w0^8*b^2*d^6 +2196*w0^10*a^4*b^2*c^4 -15442435.5555556*w0^5*b^2*c^2*d*sqrt3 +6*w0^12*b^2*c^10 -60*w0^10*c^4*d^6 +158*w0^10*b^2*c^8 -1564.4444444*w0^9*c^6*d^3*sqrt3 +1880*w0^10*a^6*b^2*c^2 +295573.3333333*w0^7*a^2*c^4*d*sqrt3 +632*w0^10*b^2*c^6*d^2 +6*w0^12*b^10*d^2 +6*w0^12*b^10*c^2 +1068*w0^10*b^6*c^4 +60*w0^12*b^4*c^2*d^6 -1173.3333333*w0^9*a^4*c^2*d^3*sqrt3 +14200977.7777778*w0^5*a^2*c^2*d*sqrt3 +8444*w0^8*a^6*d^2 +564*w0^10*a^6*d^4 +15*w0^12*c^8*d^4 +9498*w0^8*b^4*d^4 +15*w0^12*a^8*d^4 +574*w0^10*a^8*b^2 -27975709.2592593*w0^4*a^2*c^2 +15*w0^12*b^4*c^8 +15*w0^12*a^4*b^8 -9660598.1481482*w0^4*b^2*c^2 +534826682.098766*w0^2*a^2 +60*w0^12*a^2*b^4*c^6 +180*w0^12*a^2*b^2*c^4*d^4 -98524.4444444*w0^7*a^2*d^5*sqrt3 +60*w0^12*a^6*c^2*d^4 +20*w0^12*b^6*d^6 +1960314.2222222*w0^6*a^4*b^2 +586.6666667*w0^9*b^4*d^5*sqrt3 +1068*w0^10*a^4*c^2*d^4 -1173.3333333*w0^9*b^4*c^2*d^3*sqrt3 +80074*w0^8*a^4*b^4 +20*w0^12*a^6*d^6 +74*w0^10*a^2*c^8 -14092*w0^8*b^2*c^4*d^2 +948*w0^10*b^2*c^4*d^4 +3324*w0^10*a^4*b^4*c^2 +30*w0^12*b^2*c^8*d^2 -586.6666667*w0^7*d^7*sqrt3 -1760*w0^9*b^4*c^4*d*sqrt3 +30*w0^12*b^2*c^2*d^8 +30*w0^12*a^2*c^2*d^8 -1686*w0^8*c^4*d^4 +15*w0^12*a^8*c^4 +180*w0^12*a^2*b^4*c^2*d^4 +356*w0^10*a^4*d^6 +692*w0^10*b^4*d^6 -6876*w0^8*a^2*b^2*d^4 +74*w0^10*a^2*d^8 -28044*w0^8*a^4*c^2*d^2 +826*w0^10*a^2*b^8 +1316*w0^10*a^6*b^4 +60*w0^12*a^4*b^2*d^6 +30*w0^12*b^8*c^2*d^2 -2346.6666667*w0^9*a^2*b^2*c^2*d^3*sqrt3 +6*w0^12*c^10*d^2 +1128*w0^10*a^6*c^2*d^2 +197048.8888889*w0^7*a^2*c^2*d^3*sqrt3 +60*w0^12*a^4*c^6*d^2 +60*w0^12*a^6*c^4*d^2 -672573.7777778*w0^6*a^2*d^4 +386*w0^10*a^8*c^2 +45052.8888889*w0^6*a^4*d^2 -13752*w0^8*a^2*b^2*c^2*d^2 +4392*w0^10*a^4*b^2*c^2*d^2 +22080576.1316872*w0^3*d^3*sqrt3 -586.6666667*w0^9*a^2*c^2*d^5*sqrt3 -1760*w0^9*a^4*c^4*d*sqrt3 -281*w0^8*c^8"</span></span>
<span id="cb7-4"><span class="co">## </span></span>
<span id="cb7-5"><span class="co">## $`xyz(0, 0, 1): `</span></span>
<span id="cb7-6"><span class="co">## [1] "-20384*w0^7*a*b^7 -672*w0^9*a*b^7*c^2 -672*w0^9*a*b^3*c^6 -408874.6666667*w0^6*a^3*b*d^3*sqrt3 -25685.3333333*w0^6*a^2*b^2*c^3*sqrt3 -15680*w0^7*a*b*c^6 +5280*w0^8*a^4*b^2*c*d^2*sqrt3 -84672*w0^7*a^3*b*c^2*d^2 -2235744*w0^5*a^3*b^3 +85066.6666667*w0^4*c^5*sqrt3 -1760*w0^8*a^4*b^2*c^3*sqrt3 -408874.6666667*w0^6*a*b*d^5*sqrt3 -672*w0^9*a*b*c^2*d^6 +5280*w0^8*b^2*c*d^6*sqrt3 -1008*w0^9*a^5*b*c^4 -168*w0^9*a^9*b -881440*w0^6*a^4*c*d^2*sqrt3 +14200977.7777778*w0^4*a^2*c^3*sqrt3 +198725185.185185*w0^2*c*d^2*sqrt3 -2016*w0^9*a^5*b^3*c^2 -672*w0^9*a^3*b*d^6 +5280*w0^8*b^4*c*d^4*sqrt3 -672*w0^9*a*b^7*d^2 +129696*w0^5*a*b*c^2*d^2 -1403248*w0^5*a*b^5 -51744*w0^7*a*b^3*d^4 -672*w0^9*a*b^3*d^6 +1226624*w0^6*a*b*c^4*d*sqrt3 -56448*w0^7*a*b^5*d^2 -4032*w0^9*a^3*b^3*c^2*d^2 +953216*w0^6*b^2*c*d^4*sqrt3 -170133.3333333*w0^4*c^3*d^2*sqrt3 -94080*w0^7*a^3*b^3*c^2 +958496*w0^6*b^4*c*d^2*sqrt3 -2016*w0^9*a^3*b^3*c^4 -162976*w0^5*a*b^3*c^2 -672*w0^9*a^7*b*d^2 -2016*w0^9*a^5*b^3*d^2 -42336*w0^7*a^5*b^3 +1760*w0^8*a^2*c^5*d^2*sqrt3 +293813.3333333*w0^6*a^4*c^3*sqrt3 +5280*w0^8*a^4*c*d^4*sqrt3 +4693.3333333*w0^8*c^3*d^6*sqrt3 +5280*w0^8*a^2*c*d^6*sqrt3 -672*w0^9*a^7*b*c^2 -2016*w0^9*a^3*b*c^4*d^2 +1226624*w0^6*a^3*b*c^2*d*sqrt3 -672*w0^9*a^3*b^7 -8800*w0^6*c^3*d^4*sqrt3 -37632*w0^7*a^5*b*d^2 -1760*w0^8*a^4*c^5*sqrt3 +635477.3333333*w0^6*b^2*c^3*d^2*sqrt3 -672*w0^9*a^7*b^3 -586.6666667*w0^8*a^6*c^3*sqrt3 +1760*w0^8*a^6*c*d^2*sqrt3 -586.6666667*w0^8*c^9*sqrt3 -42602933.3333333*w0^4*a^2*c*d^2*sqrt3 +1760*w0^8*b^6*c*d^2*sqrt3 -168*w0^9*a*b*c^8 -15680*w0^7*a*b*d^6 +64848*w0^5*a*b*d^4 +8644778.6666667*w0^5*c^5*d -255200*w0^4*c*d^4*sqrt3 -42336*w0^7*a^3*b*d^4 -47040*w0^7*a*b*c^2*d^4 -5280*w0^6*c*d^6*sqrt3 -3520*w0^8*a^2*b^2*c^5*sqrt3 -19762275.5555556*w0^4*a*b*d^3*sqrt3 -37632*w0^7*a^5*b*c^2 -408874.6666667*w0^6*a*b^3*d^3*sqrt3 -1008*w0^9*a*b*c^4*d^4 -964208*w0^5*a^5*b -672*w0^9*a*b*c^6*d^2 -47040*w0^7*a*b*c^4*d^2 +1158840636.44444*w0^3*a^3*b -15442435.5555556*w0^4*b^2*c^3*sqrt3 -886720*w0^6*a^2*c*d^4*sqrt3 -1008*w0^9*a^5*b*d^4 -1008*w0^9*a*b^5*c^4 -2016*w0^9*a^3*b*c^2*d^4 +77056*w0^6*a^2*b^2*c*d^2*sqrt3 -2016*w0^9*a*b^5*c^2*d^2 +8800*w0^8*b^2*c^3*d^4*sqrt3 +8800*w0^8*a^2*c^3*d^4*sqrt3 -36630222.2222222*w0^3*a*b*c^2 +295573.3333333*w0^6*a^2*c^5*sqrt3 -56448*w0^7*a*b^5*c^2 +3520*w0^8*b^4*c^3*d^2*sqrt3 +1760*w0^8*c*d^8*sqrt3 -103488*w0^7*a*b^3*c^2*d^2 -1760*w0^8*a^2*c^7*sqrt3 -2016*w0^9*a^3*b^5*d^2 -2016*w0^9*a*b^3*c^2*d^4 -586.6666667*w0^8*b^6*c^3*sqrt3 -162976*w0^5*a*b^3*d^2 +1760*w0^6*c^7*sqrt3 -319498.6666667*w0^6*b^4*c^3*sqrt3 -66241728.3950617*w0^2*c^3*sqrt3 +817749.3333333*w0^6*a*b*c^2*d^3*sqrt3 -168*w0^9*a*b^9 -28815928.8888889*w0^5*c^3*d^3 -1008*w0^9*a*b^5*d^4 -51744*w0^7*a^3*b^5 +59286826.6666667*w0^4*a*b*c^2*d*sqrt3 -672*w0^9*a^3*b*c^6 -1008*w0^9*a^5*b^5 -2030880*w0^5*a^3*b*c^2 -591146.6666667*w0^6*a^2*c^3*d^2*sqrt3 -1232101080.88889*w0^3*a*b^3 -2016*w0^9*a^3*b^3*d^4 +1760*w0^8*b^2*c^5*d^2*sqrt3 +3520*w0^8*a^4*c^3*d^2*sqrt3 +64848*w0^5*a*b*c^4 -916845740.740741*w0*a*b +1226624*w0^6*a*b^3*c^2*d*sqrt3 -2016*w0^9*a*b^3*c^4*d^2 -2016*w0^9*a^3*b^5*c^2 -317738.6666667*w0^6*b^2*c^5*sqrt3 -168*w0^9*a*b*d^8 +7040*w0^8*a^2*b^2*c^3*d^2*sqrt3 -36630222.2222222*w0^3*a*b*d^2 +3520*w0^8*c^5*d^4*sqrt3 -1760*w0^8*b^2*c^7*sqrt3 +5280*w0^8*a^2*b^4*c*d^2*sqrt3 -1760*w0^8*a^2*b^4*c^3*sqrt3 +46327306.6666667*w0^4*b^2*c*d^2*sqrt3 -51744*w0^7*a*b^3*c^4 +8644778.6666667*w0^5*c*d^5 -10976*w0^7*a^7*b -94080*w0^7*a^3*b^3*d^2 -2030880*w0^5*a^3*b*d^2 -2016*w0^9*a^5*b*c^2*d^2 +10560*w0^8*a^2*b^2*c*d^4*sqrt3 -1760*w0^8*b^4*c^5*sqrt3 -42336*w0^7*a^3*b*c^4 -1760*w0^6*c^5*d^2*sqrt3"</span></span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Tue, 04 Jul 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/expandPolynomialWithSpray.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>3D alpha wrapping with R</title>
      <link>https://laustep.github.io/stlahblog/posts/alphaWrapping.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        The <strong>RcppCGAL</strong> package now contains version 5.5.2 of the
        <strong>CGAL</strong> library. There is something new in this version:
        the <em>3D alpha wrapping</em>. This is a bit similar to the
        <em>3D alpha hull</em> but this can work better.
      </p>
      <p>
        So I implemented the alpha wrapping in my package
        <a href="https://github.com/stla/cgalMeshes">cgalMeshes</a> (currently
        it is only in the <strong>github</strong> branch of the repository).
      </p>
      <p>
        To illustrate the alpha wrapping, I will take a pseudo-gyroid. It is an
        isosurface, and it is qualified as “pseudo” because the true gyroid has
        a more complicated isosurface equation. The pseudo-gyroid is an
        approximation of the gyroid.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># the pseudo-gyroid is the isosurface f(x,y,z)=0</span></span>
<span id="cb1-2">f &lt;-<span class="st"> </span><span class="cf">function</span>(x, y, z) {</span>
<span id="cb1-3">  <span class="kw">cos</span>(x) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(y) <span class="op">+</span><span class="st"> </span><span class="kw">cos</span>(y) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(z) <span class="op">+</span><span class="st"> </span><span class="kw">cos</span>(z) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(x)</span>
<span id="cb1-4">}</span>
<span id="cb1-5"><span class="co"># construct the isosurface f=0</span></span>
<span id="cb1-6">ngrid &lt;-<span class="st"> </span>70L</span>
<span id="cb1-7">x &lt;-<span class="st"> </span>y &lt;-<span class="st"> </span>z &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">length.out =</span> ngrid)</span>
<span id="cb1-8">Grid &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">X =</span> x, <span class="dt">Y =</span> y, <span class="dt">Z =</span> z)</span>
<span id="cb1-9">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(</span>
<span id="cb1-10">  <span class="kw">with</span>(Grid, <span class="kw">f</span>(X, Y, Z)), <span class="dt">dim =</span> <span class="kw">c</span>(ngrid, ngrid, ngrid)</span>
<span id="cb1-11">)</span>
<span id="cb1-12"><span class="kw">library</span>(rmarchingcubes)</span>
<span id="cb1-13">contour_shape &lt;-<span class="st"> </span><span class="kw">contour3d</span>(</span>
<span id="cb1-14">  <span class="dt">griddata =</span> voxel, <span class="dt">level =</span> <span class="dv">0</span>, <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z</span>
<span id="cb1-15">)</span>
<span id="cb1-16"><span class="co"># make mesh</span></span>
<span id="cb1-17"><span class="kw">library</span>(rgl)</span>
<span id="cb1-18">rglMesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb1-19">  <span class="dt">vertices =</span> <span class="kw">t</span>(contour_shape[[<span class="st">"vertices"</span>]]),</span>
<span id="cb1-20">  <span class="dt">indices  =</span> <span class="kw">t</span>(contour_shape[[<span class="st">"triangles"</span>]]),</span>
<span id="cb1-21">  <span class="dt">normals  =</span> contour_shape[[<span class="st">"normals"</span>]]</span>
<span id="cb1-22">)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb2-2"><span class="kw">view3d</span>(<span class="op">-</span><span class="dv">40</span>, <span class="dv">35</span>)</span>
<span id="cb2-3"><span class="kw">shade3d</span>(rglMesh, <span class="dt">color =</span> <span class="st">"orange"</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"></span>
<span id="cb2-6">bdry &lt;-<span class="st"> </span><span class="kw">getBoundary3d</span>(rglMesh, <span class="dt">color =</span> <span class="st">"black"</span>, <span class="dt">lwd =</span> <span class="dv">3</span>)</span>
<span id="cb2-7"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb2-8"><span class="kw">view3d</span>(<span class="op">-</span><span class="dv">40</span>, <span class="dv">35</span>)</span>
<span id="cb2-9"><span class="kw">shade3d</span>(rglMesh, <span class="dt">color =</span> <span class="st">"orange"</span>)</span>
<span id="cb2-10"><span class="kw">shade3d</span>(bdry)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pseudogyroid_cube.png"
        />
      </p>
      <p>Maybe adding the boundary to the plot is helpful for visualization:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">bdry &lt;-<span class="st"> </span><span class="kw">getBoundary3d</span>(rglMesh, <span class="dt">color =</span> <span class="st">"black"</span>, <span class="dt">lwd =</span> <span class="dv">3</span>)</span>
<span id="cb3-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb3-3"><span class="kw">view3d</span>(<span class="op">-</span><span class="dv">40</span>, <span class="dv">35</span>)</span>
<span id="cb3-4"><span class="kw">shade3d</span>(rglMesh, <span class="dt">color =</span> <span class="st">"orange"</span>)</span>
<span id="cb3-5"><span class="kw">shade3d</span>(bdry)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pseudogyroid_cube_boundary.png"
        />
      </p>
      <p>
        This pseudo-gyroid is inscribed in the cube
        <span class="math inline">\((-5,5)\times(-5,5)\times(-5,5)\)</span>. I
        prefer the spherical pseudo-gyroid, obtained by clipping the cubical
        pseudo-gyroid to a sphere:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="co"># returns the squared norms of the vertices</span></span>
<span id="cb4-2">sqnorm &lt;-<span class="st"> </span><span class="cf">function</span>(vertices) { </span>
<span id="cb4-3">  <span class="kw">apply</span>(vertices, 1L, <span class="cf">function</span>(row) <span class="kw">crossprod</span>(row))</span>
<span id="cb4-4">}</span>
<span id="cb4-5"><span class="co"># clipping</span></span>
<span id="cb4-6">rglMesh2 &lt;-<span class="st"> </span><span class="kw">clipMesh3d</span>(rglMesh, sqnorm, <span class="dt">bound =</span> <span class="dv">25</span>, <span class="dt">greater =</span> <span class="ot">FALSE</span>)</span>
<span id="cb4-7"><span class="co"># extract boundary</span></span>
<span id="cb4-8">bdry &lt;-<span class="st"> </span><span class="kw">getBoundary3d</span>(rglMesh2, <span class="dt">color =</span> <span class="st">"black"</span>, <span class="dt">lwd =</span> <span class="dv">3</span>)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>), <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb5-2"><span class="kw">shade3d</span>(rglMesh2, <span class="dt">color =</span> <span class="st">"orangered"</span>)</span>
<span id="cb5-3"><span class="kw">shade3d</span>(bdry)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pseudogyroid_sphere.png"
        />
      </p>
      <p>
        This mesh has <span class="math inline">\(21371\)</span> vertices and
        <span class="math inline">\(40919\)</span> triangles:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">rglMesh2</span>
<span id="cb6-2"><span class="co">##  mesh3d object with 21731 vertices, 40919 triangles.</span></span></code></pre>
      </div>
      <p>Let’s extract its vertices:</p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1">vertices &lt;-<span class="st"> </span><span class="kw">t</span>(rglMesh2<span class="op">$</span>vb[<span class="op">-</span>4L, ])</span></code></pre>
      </div>
      <p>
        And now we will try to reconstruct the surface from its vertices only.
      </p>
      <p>The <em>advanced front surface reconstruction</em> fails:</p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1"><span class="kw">library</span>(cgalMeshes)</span>
<span id="cb8-2">AFSmesh &lt;-<span class="st"> </span><span class="kw">AFSreconstruction</span>(vertices)</span>
<span id="cb8-3">AFSmesh<span class="op">$</span><span class="kw">computeNormals</span>()</span></code></pre>
      </div>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>), <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb9-2"><span class="kw">shade3d</span>(AFSmesh<span class="op">$</span><span class="kw">getMesh</span>(), <span class="dt">color =</span> <span class="st">"red"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pseudogyroid_AFS.png"
        />
      </p>
      <p>
        The pseudo-gyroid does not bound a volume (it has no width), so the
        Poisson reconstruction cannot be applied.
      </p>
      <p>Let’s try the alpha hull.</p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1"><span class="kw">library</span>(AlphaHull3D)</span>
<span id="cb10-2">ahull &lt;-<span class="st"> </span><span class="kw">fullAhull3d</span>(vertices)</span>
<span id="cb10-3">amesh &lt;-<span class="st"> </span><span class="kw">setAlpha</span>(ahull, <span class="dt">alpha =</span> <span class="fl">1.8</span>)</span></code></pre>
      </div>
      <p>
        This value of <span class="math inline">\(\alpha\)</span> is both too
        big (we get some faces that shouldn’t be there) and too small (we get
        some holes):
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>), <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb11-2"><span class="kw">shade3d</span>(amesh, <span class="dt">color =</span> <span class="st">"green"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pseudogyroid_alphaHull.png"
        />
      </p>
      <p>So there’s no way.</p>
      <p>
        Finally, the alpha wrapping comes to our rescue. The alpha wrapping
        depends on two parameters:
      </p>
      <ul>
        <li>
          <p>
            <span class="math inline">\(\alpha\)</span>: the smallest
            <span class="math inline">\(\alpha\)</span>, the smallest triangles
            in the output mesh;
          </p>
        </li>
        <li>
          <p><em>offset</em>: the distance between the input and the output.</p>
        </li>
      </ul>
      <p>
        In the <code>alphaWrap</code> function, we give the relative
        <span class="math inline">\(\alpha\)</span> and the relative offset.
        Then <span class="math inline">\(\alpha\)</span> and the offset are both
        obtained by dividing the length of the diagonal of the bounding box of
        the vertices by their relative version. You have to play with these
        parameters to get a nice mesh. A too small
        <span class="math inline">\(\alpha\)</span> yields some holes in the
        mesh, and the mesh has less details when
        <span class="math inline">\(\alpha\)</span> increases.
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb12-1">wrapMesh &lt;-<span class="st"> </span><span class="kw">alphaWrap</span>(vertices, <span class="dt">ralpha =</span> <span class="dv">100</span>, <span class="dt">roffset =</span> <span class="dv">1000</span>) </span>
<span id="cb12-2">wrapMesh<span class="op">$</span><span class="kw">computeNormals</span>()</span></code></pre>
      </div>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb13-1">wrapRglMesh &lt;-<span class="st"> </span>wrapMesh<span class="op">$</span><span class="kw">getMesh</span>()</span>
<span id="cb13-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>), <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb13-3"><span class="kw">shade3d</span>(wrapRglMesh, <span class="dt">color =</span> <span class="st">"orangered"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pseudogyroid_wrapped.png"
        />
      </p>
      <p>
        Note that we cannot add the boundary to this mesh: it has no boundary.
        It has a width, controlled by the offset parameter.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 01 Jun 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/alphaWrapping.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Maximum volume inscribed ellipsoid</title>
      <link>https://laustep.github.io/stlahblog/posts/maximumVolumeEllipse.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I’ve just discovered the excellent book
        <a href="https://web.stanford.edu/~boyd/cvxbook/bv_cvxbook.pdf"
          >Convex Optimization</a
        >
        written by Stephen Boyd and Lieven Vandenberghe.
      </p>
      <p>
        It gives methods for many interesting geometric problems. In this blog
        post I will construct the maximum volume ellipsoid inscribed in a convex
        polyhedron.
      </p>
      <p>Let’s take the vertices of a convex polyhedron:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">vertices &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-2">  <span class="kw">c</span>( <span class="dv">0</span>,  <span class="dv">0</span>,  <span class="dv">0</span>),</span>
<span id="cb1-3">  <span class="kw">c</span>( <span class="dv">0</span>,  <span class="dv">1</span>,  <span class="dv">0</span>),</span>
<span id="cb1-4">  <span class="kw">c</span>( <span class="dv">1</span>,  <span class="dv">1</span>,  <span class="dv">0</span>),</span>
<span id="cb1-5">  <span class="kw">c</span>( <span class="dv">1</span>,  <span class="dv">0</span>,  <span class="dv">0</span>),</span>
<span id="cb1-6">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">-1</span>,  <span class="dv">4</span>),</span>
<span id="cb1-7">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,  <span class="dv">2</span>,  <span class="dv">4</span>),</span>
<span id="cb1-8">  <span class="kw">c</span>( <span class="dv">2</span>,  <span class="dv">2</span>,  <span class="dv">4</span>),</span>
<span id="cb1-9">  <span class="kw">c</span>( <span class="dv">2</span>, <span class="dv">-1</span>,  <span class="dv">4</span>)</span>
<span id="cb1-10">)</span></code></pre>
      </div>
      <p>Let’s see how it looks like:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(cxhull)</span>
<span id="cb2-2"><span class="kw">library</span>(rgl)</span>
<span id="cb2-3">polyhedron &lt;-<span class="st"> </span><span class="kw">cxhull</span>(vertices, <span class="dt">triangulate =</span> <span class="ot">TRUE</span>)</span>
<span id="cb2-4"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb2-5"><span class="kw">plotConvexHull3d</span>(polyhedron, <span class="dt">facesColor =</span> <span class="st">"red"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/maxvolume_polyhedron.png"
        />
      </p>
      <p>
        The goal is to inscribe an ellipsoid in this polyhedron with the maximum
        volume.
      </p>
      <p>
        We first need to represent the polyhedron by a set of linear
        inequalities. To do so, we use the <strong>rcdd</strong> package.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(rcdd)</span>
<span id="cb3-2">V &lt;-<span class="st"> </span><span class="kw">makeV</span>(vertices)     <span class="co"># V-representation</span></span>
<span id="cb3-3">H &lt;-<span class="st"> </span><span class="kw">scdd</span>(V)[[<span class="st">"output"</span>]] <span class="co"># H-representation</span></span>
<span id="cb3-4">A &lt;-<span class="st"> </span><span class="op">-</span><span class="st"> </span>H[, <span class="op">-</span><span class="kw">c</span>(1L, 2L)]   <span class="co"># matrix A</span></span>
<span id="cb3-5">b &lt;-<span class="st"> </span>H[, 2L]             <span class="co"># column vector b</span></span></code></pre>
      </div>
      <p>
        Now we have a matrix <span class="math inline">\(A\)</span> and a column
        vector <span class="math inline">\(b\)</span> such that our polyhedron
        is defined by <span class="math inline">\(Ax \leqslant b\)</span>.
      </p>
      <p>
        Then we’re ready to define the optimization problem, with the
        <strong>CVXR</strong> package. See the book for the details
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(CVXR)</span>
<span id="cb4-2">Bvar &lt;-<span class="st"> </span><span class="kw">Variable</span>(<span class="dv">3</span>, <span class="dv">3</span>, <span class="dt">symmetric =</span> <span class="ot">TRUE</span>) <span class="co"># a symmetric 3x3 matrix</span></span>
<span id="cb4-3">dvar &lt;-<span class="st"> </span><span class="kw">Variable</span>(<span class="dv">3</span>)                      <span class="co"># a length three vector</span></span>
<span id="cb4-4">objective &lt;-<span class="st"> </span><span class="kw">Minimize</span>(<span class="op">-</span><span class="kw">log_det</span>(Bvar))    <span class="co"># objective</span></span>
<span id="cb4-5"><span class="co"># now we define the constraints</span></span>
<span id="cb4-6">constraints &lt;-<span class="st"> </span><span class="kw">list</span>()</span>
<span id="cb4-7"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(A)) {</span>
<span id="cb4-8">  constraints &lt;-<span class="st"> </span><span class="kw">append</span>(</span>
<span id="cb4-9">    constraints, <span class="kw">list</span>(<span class="kw">norm2</span>(Bvar <span class="op">%*%</span><span class="st"> </span>A[i,]) <span class="op">+</span><span class="st"> </span><span class="kw">sum</span>(A[i,]<span class="op">*</span>dvar) <span class="op">&lt;=</span><span class="st"> </span>b[i])</span>
<span id="cb4-10">  )</span>
<span id="cb4-11">}</span></code></pre>
      </div>
      <p>It remains to solve this problem.</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">program &lt;-<span class="st"> </span><span class="kw">Problem</span>(objective, constraints)</span>
<span id="cb5-2">solution &lt;-<span class="st"> </span><span class="kw">solve</span>(program, <span class="dt">solver =</span> <span class="st">"SCS"</span>)</span>
<span id="cb5-3"><span class="co"># extract the solutions</span></span>
<span id="cb5-4">B &lt;-<span class="st"> </span>solution<span class="op">$</span><span class="kw">getValue</span>(Bvar)</span>
<span id="cb5-5">d &lt;-<span class="st"> </span><span class="kw">c</span>(solution<span class="op">$</span><span class="kw">getValue</span>(dvar))</span></code></pre>
      </div>
      <p>
        The matrix <span class="math inline">\(B\)</span> is the shape matrix of
        the ellipsoid and the vector <span class="math inline">\(d\)</span> is
        its center. That means that the ellipsoid is the set of vector
        <span class="math inline">\(Bu + d\)</span> for
        <span class="math inline">\(u\)</span> in the unit ball. This is a
        parameterization of the ellipsoid. We can plot it with the help of
        spherical coordinates.
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">library</span>(misc3d) <span class="co"># to use parametric3d</span></span>
<span id="cb6-2">h &lt;-<span class="st"> </span><span class="cf">function</span>(θ, ϕ) {</span>
<span id="cb6-3">  x &lt;-<span class="st"> </span><span class="kw">cos</span>(θ) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(ϕ)</span>
<span id="cb6-4">  y &lt;-<span class="st"> </span><span class="kw">sin</span>(θ) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(ϕ)</span>
<span id="cb6-5">  z &lt;-<span class="st"> </span><span class="kw">cos</span>(ϕ)</span>
<span id="cb6-6">  u &lt;-<span class="st"> </span><span class="kw">c</span>(x, y, z)</span>
<span id="cb6-7">  B <span class="op">%*%</span><span class="st"> </span>u <span class="op">+</span><span class="st"> </span>d</span>
<span id="cb6-8">}</span>
<span id="cb6-9">fx &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(u, v) {<span class="kw">h</span>(u, v)[1L]})</span>
<span id="cb6-10">fy &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(u, v) {<span class="kw">h</span>(u, v)[2L]})</span>
<span id="cb6-11">fz &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(u, v) {<span class="kw">h</span>(u, v)[3L]})</span>
<span id="cb6-12"><span class="co"># plot</span></span>
<span id="cb6-13"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb6-14"><span class="kw">plotConvexHull3d</span>(polyhedron, <span class="dt">facesColor =</span> <span class="st">"red"</span>, <span class="dt">alpha =</span> <span class="fl">0.2</span>)</span>
<span id="cb6-15"><span class="kw">parametric3d</span>(</span>
<span id="cb6-16">  fx, fy, fz, <span class="dt">umin =</span> <span class="dv">0</span>, <span class="dt">umax =</span> <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">vmin =</span> <span class="dv">0</span>, <span class="dt">vmax =</span> pi, <span class="dt">n =</span> <span class="dv">250</span>,</span>
<span id="cb6-17">  <span class="dt">color =</span> <span class="st">"maroon"</span>, <span class="dt">add =</span> <span class="ot">TRUE</span></span>
<span id="cb6-18">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/maxvolume_polyhedron_ellipse1.png"
        />
      </p>
      <p>
        Another way to plot it is to use the central matrix of the ellipsoid,
        which defines the ellipsoid as an isosurface. The central matrix is
        <span class="math inline">\(S = {(BB')^{-1}}\)</span>, and then the
        ellipsoid is the set of points
        <span class="math inline">\(x\)</span> satisfying
        <span class="math inline">\((x-d)' S (x-d) \leqslant 1\)</span>.
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(misc3d)</span>
<span id="cb7-2">S &lt;-<span class="st"> </span><span class="kw">chol2inv</span>(<span class="kw">chol</span>(<span class="kw">tcrossprod</span>(B)))</span>
<span id="cb7-3">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">2</span>, <span class="dt">length.out =</span> 150L)</span>
<span id="cb7-4">y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">2</span>, <span class="dt">length.out =</span> 150L)</span>
<span id="cb7-5">z &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">1</span>, <span class="dv">4</span>, <span class="dt">length.out =</span> 150L)</span>
<span id="cb7-6">Grid &lt;-<span class="st"> </span><span class="kw">as.matrix</span>(<span class="kw">expand.grid</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z))</span>
<span id="cb7-7">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(</span>
<span id="cb7-8">  <span class="kw">apply</span>(Grid, 1L, <span class="cf">function</span>(v) <span class="kw">c</span>(<span class="kw">t</span>(v<span class="op">-</span>d) <span class="op">%*%</span><span class="st"> </span>S <span class="op">%*%</span><span class="st"> </span>(v<span class="op">-</span>d))), </span>
<span id="cb7-9">  <span class="dt">dim =</span> <span class="kw">c</span>(150L, 150L, 150L)</span>
<span id="cb7-10">)</span>
<span id="cb7-11">isosurface &lt;-<span class="st"> </span><span class="kw">computeContour3d</span>(voxel, <span class="kw">max</span>(voxel), <span class="dv">1</span>, <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z)</span>
<span id="cb7-12"><span class="co"># plot</span></span>
<span id="cb7-13"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb7-14"><span class="kw">drawScene.rgl</span>(<span class="kw">makeTriangles</span>(isosurface), <span class="dt">color =</span> <span class="st">"maroon"</span>)</span>
<span id="cb7-15"><span class="kw">plotConvexHull3d</span>(polyhedron, <span class="dt">facesColor =</span> <span class="st">"red"</span>, <span class="dt">alpha =</span> <span class="fl">0.2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/maxvolume_polyhedron_ellipse2.png"
        />
      </p>
      <p>
        The same method can be performed in any dimension. In the latest update
        of my package <strong>PlaneGeometry</strong>, I implemented it for
        dimension 2.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 20 May 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/maximumVolumeEllipse.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Tooltips for a dropdown list in Shiny</title>
      <link>https://laustep.github.io/stlahblog/posts/selectizeTooltips.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Here is how to have some tooltips for the options and their headers of a
        <code>selectizeInput</code> in Shiny.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"></span>
<span id="cb1-3">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb1-4">  <span class="kw">selectizeInput</span>(</span>
<span id="cb1-5">    <span class="dt">inputId =</span> <span class="st">"selectAnimals"</span>,</span>
<span id="cb1-6">    <span class="dt">label =</span> <span class="st">"Select some animals"</span>,</span>
<span id="cb1-7">    <span class="dt">choices =</span> <span class="ot">NULL</span>,</span>
<span id="cb1-8">    <span class="dt">multiple =</span> <span class="ot">TRUE</span>,</span>
<span id="cb1-9">    <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb1-10">      <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb1-11">        <span class="kw">list</span>(</span>
<span id="cb1-12">          <span class="dt">species =</span> <span class="st">"mammal"</span>, <span class="dt">value =</span> <span class="st">"dog"</span>, <span class="dt">name =</span> <span class="st">"Dog"</span>, </span>
<span id="cb1-13">          <span class="dt">tooltip =</span> <span class="st">"it's a pet"</span></span>
<span id="cb1-14">        ),</span>
<span id="cb1-15">        <span class="kw">list</span>(</span>
<span id="cb1-16">          <span class="dt">species =</span> <span class="st">"mammal"</span>, <span class="dt">value =</span> <span class="st">"cat"</span>, <span class="dt">name =</span> <span class="st">"Cat"</span>, </span>
<span id="cb1-17">          <span class="dt">tooltip =</span> <span class="st">"another pet"</span></span>
<span id="cb1-18">        ),</span>
<span id="cb1-19">        <span class="kw">list</span>(</span>
<span id="cb1-20">          <span class="dt">species =</span> <span class="st">"mammal"</span>, <span class="dt">value =</span> <span class="st">"kangaroo"</span>, <span class="dt">name =</span> <span class="st">"Kangaroo"</span>,</span>
<span id="cb1-21">          <span class="dt">tooltip =</span> <span class="st">"it jumps"</span></span>
<span id="cb1-22">        ),</span>
<span id="cb1-23">        <span class="kw">list</span>(</span>
<span id="cb1-24">          <span class="dt">species =</span> <span class="st">"bird"</span>, <span class="dt">value =</span> <span class="st">"duck"</span>, <span class="dt">name =</span> <span class="st">"Duck"</span>,</span>
<span id="cb1-25">          <span class="dt">tooltip =</span> <span class="st">"like Donald"</span></span>
<span id="cb1-26">        ),</span>
<span id="cb1-27">        <span class="kw">list</span>(</span>
<span id="cb1-28">          <span class="dt">species =</span> <span class="st">"bird"</span>, <span class="dt">value =</span> <span class="st">"ostrich"</span>, <span class="dt">name =</span> <span class="st">"Ostrich"</span>,</span>
<span id="cb1-29">          <span class="dt">tooltip =</span> <span class="st">"very tasty"</span></span>
<span id="cb1-30">        ),</span>
<span id="cb1-31">        <span class="kw">list</span>(</span>
<span id="cb1-32">          <span class="dt">species =</span> <span class="st">"bird"</span>, <span class="dt">value =</span> <span class="st">"seagull"</span>, <span class="dt">name =</span> <span class="st">"Seagull"</span>,</span>
<span id="cb1-33">          <span class="dt">tooltip =</span> <span class="st">"it's a seabird"</span></span>
<span id="cb1-34">        ),</span>
<span id="cb1-35">        <span class="kw">list</span>(</span>
<span id="cb1-36">          <span class="dt">species =</span> <span class="st">"reptile"</span>, <span class="dt">value =</span> <span class="st">"snake"</span>, <span class="dt">name =</span> <span class="st">"Snake"</span>,</span>
<span id="cb1-37">          <span class="dt">tooltip =</span> <span class="st">"it has no leg"</span></span>
<span id="cb1-38">        ),</span>
<span id="cb1-39">        <span class="kw">list</span>(</span>
<span id="cb1-40">          <span class="dt">species =</span> <span class="st">"reptile"</span>, <span class="dt">value =</span> <span class="st">"lizard"</span>, <span class="dt">name =</span> <span class="st">"Lizard"</span>,</span>
<span id="cb1-41">          <span class="dt">tooltip =</span> <span class="st">"mainly carnivorous"</span></span>
<span id="cb1-42">        ),</span>
<span id="cb1-43">        <span class="kw">list</span>(</span>
<span id="cb1-44">          <span class="dt">species =</span> <span class="st">"reptile"</span>, <span class="dt">value =</span> <span class="st">"turtle"</span>, <span class="dt">name =</span> <span class="st">"Turtle"</span>,</span>
<span id="cb1-45">          <span class="dt">tooltip =</span> <span class="st">"it is slow"</span></span>
<span id="cb1-46">        )</span>
<span id="cb1-47">      ),</span>
<span id="cb1-48">      <span class="dt">optgroups =</span> <span class="kw">list</span>(</span>
<span id="cb1-49">        <span class="kw">list</span>(</span>
<span id="cb1-50">          <span class="dt">value =</span> <span class="st">"mammal"</span>,  <span class="dt">label =</span> <span class="st">"Mammal"</span>,  <span class="dt">tooltip =</span> <span class="st">"like us"</span></span>
<span id="cb1-51">        ),</span>
<span id="cb1-52">        <span class="kw">list</span>(</span>
<span id="cb1-53">          <span class="dt">value =</span> <span class="st">"bird"</span>,    <span class="dt">label =</span> <span class="st">"Bird"</span>,    <span class="dt">tooltip =</span> <span class="st">"they fly"</span></span>
<span id="cb1-54">        ),</span>
<span id="cb1-55">        <span class="kw">list</span>(</span>
<span id="cb1-56">          <span class="dt">value =</span> <span class="st">"reptile"</span>, <span class="dt">label =</span> <span class="st">"Reptile"</span>, <span class="dt">tooltip =</span> <span class="st">"not only snakes"</span></span>
<span id="cb1-57">        )</span>
<span id="cb1-58">      ),</span>
<span id="cb1-59">      <span class="dt">optgroupField =</span> <span class="st">"species"</span>,</span>
<span id="cb1-60">      <span class="dt">labelField =</span> <span class="st">"name"</span>,</span>
<span id="cb1-61">      <span class="dt">render =</span> <span class="kw">I</span>(</span>
<span id="cb1-62">        <span class="st">"{</span></span>
<span id="cb1-63"><span class="st">          optgroup_header: function(data, escape) {</span></span>
<span id="cb1-64"><span class="st">            return '&lt;div class=</span><span class="ch">\"</span><span class="st">optgroup-header</span><span class="ch">\"</span><span class="st">&gt;&lt;span ' + </span></span>
<span id="cb1-65"><span class="st">              'title=</span><span class="ch">\"</span><span class="st">' + data.tooltip + '</span><span class="ch">\"</span><span class="st">&gt;' + escape(data.label) + </span></span>
<span id="cb1-66"><span class="st">              '&lt;/span&gt;&lt;/div&gt;';</span></span>
<span id="cb1-67"><span class="st">          },</span></span>
<span id="cb1-68"><span class="st">          option: function(data, escape) {</span></span>
<span id="cb1-69"><span class="st">            return '&lt;div class=</span><span class="ch">\"</span><span class="st">option</span><span class="ch">\"</span><span class="st">&gt;&lt;span ' + </span></span>
<span id="cb1-70"><span class="st">              title=</span><span class="ch">\"</span><span class="st">' + data.tooltip + '</span><span class="ch">\"</span><span class="st">&gt;' + escape(data.name) + </span></span>
<span id="cb1-71"><span class="st">              '&lt;/span&gt;&lt;/div&gt;';</span></span>
<span id="cb1-72"><span class="st">          }</span></span>
<span id="cb1-73"><span class="st">        }"</span></span>
<span id="cb1-74">      )</span>
<span id="cb1-75">    )</span>
<span id="cb1-76">  )</span>
<span id="cb1-77">)</span>
<span id="cb1-78"></span>
<span id="cb1-79">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session) {}</span>
<span id="cb1-80"></span>
<span id="cb1-81"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        It’s also possible to have Bootstrap tooltips. They are prettier, and
        customizable. To do so, replace the <code>render</code> option with the
        following one (that could differ if you use Bootstrap 5) and add this
        <code>onDropdownOpen</code> option and this
        <code>onChange</code> options to initialize them or reinitialize them:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">render =<span class="st"> </span><span class="kw">I</span>(</span>
<span id="cb2-2">  <span class="st">"{</span></span>
<span id="cb2-3"><span class="st">    optgroup_header: function(data, escape) {</span></span>
<span id="cb2-4"><span class="st">      return '&lt;div class=</span><span class="ch">\"</span><span class="st">optgroup-header</span><span class="ch">\"</span><span class="st">&gt;&lt;span ' + </span></span>
<span id="cb2-5"><span class="st">        'data-toggle=</span><span class="ch">\"</span><span class="st">tooltip</span><span class="ch">\"</span><span class="st"> data-placement=</span><span class="ch">\"</span><span class="st">right</span><span class="ch">\"</span><span class="st"> title=</span><span class="ch">\"</span><span class="st">' + </span></span>
<span id="cb2-6"><span class="st">        data.tooltip + '</span><span class="ch">\"</span><span class="st">&gt;' + escape(data.label) + '&lt;/span&gt;&lt;/div&gt;';</span></span>
<span id="cb2-7"><span class="st">    },</span></span>
<span id="cb2-8"><span class="st">    option: function(data, escape) {</span></span>
<span id="cb2-9"><span class="st">      return '&lt;div class=</span><span class="ch">\"</span><span class="st">option</span><span class="ch">\"</span><span class="st">&gt;&lt;span ' + </span></span>
<span id="cb2-10"><span class="st">        'data-toggle=</span><span class="ch">\"</span><span class="st">tooltip</span><span class="ch">\"</span><span class="st"> data-placement=</span><span class="ch">\"</span><span class="st">top</span><span class="ch">\"</span><span class="st"> title=</span><span class="ch">\"</span><span class="st">' + </span></span>
<span id="cb2-11"><span class="st">        data.tooltip + '</span><span class="ch">\"</span><span class="st">&gt;' + escape(data.name) + '&lt;/span&gt;&lt;/div&gt;';</span></span>
<span id="cb2-12"><span class="st">    }</span></span>
<span id="cb2-13"><span class="st">  }"</span></span>
<span id="cb2-14">),</span>
<span id="cb2-15">onDropdownOpen =<span class="st"> </span><span class="kw">I</span>(</span>
<span id="cb2-16">  <span class="st">"function() {</span></span>
<span id="cb2-17"><span class="st">     setTimeout(function(){$('[data-toggle=tooltip]').tooltip();}, 100);</span></span>
<span id="cb2-18"><span class="st">  }"</span></span>
<span id="cb2-19">),</span>
<span id="cb2-20">onChange =<span class="st"> </span><span class="kw">I</span>(</span>
<span id="cb2-21">  <span class="st">"function() {</span></span>
<span id="cb2-22"><span class="st">     setTimeout(function(){$('[data-toggle=tooltip]').tooltip();}, 100);</span></span>
<span id="cb2-23"><span class="st">  }"</span></span>
<span id="cb2-24">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/selectizeTooltips.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 13 May 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/selectizeTooltips.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Fisheye effect with R</title>
      <link>https://laustep.github.io/stlahblog/posts/fisheye.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        The <code>fisheye</code> function below distorts a bitmap image with a
        <a href="https://en.wikipedia.org/wiki/Fisheye_lens">fisheye effect</a>
        or an anti-fisheye effect (<code>rho &gt; 0.5</code> or
        <code>rho &lt; 0.5</code>).
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">fisheye_xy &lt;-<span class="st"> </span><span class="cf">function</span>(x, y, rho, stick) {</span>
<span id="cb1-2">  p &lt;-<span class="st"> </span><span class="kw">c</span>(x, y)</span>
<span id="cb1-3">  <span class="cf">if</span>(rho <span class="op">==</span><span class="st"> </span><span class="fl">0.5</span>) {</span>
<span id="cb1-4">    <span class="kw">return</span>(p)</span>
<span id="cb1-5">  }</span>
<span id="cb1-6">  m &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="fl">0.5</span>, <span class="fl">0.5</span>)</span>
<span id="cb1-7">  d &lt;-<span class="st"> </span>p <span class="op">-</span><span class="st"> </span>m</span>
<span id="cb1-8">  r &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(d)))</span>
<span id="cb1-9">  dnormalized &lt;-<span class="st"> </span>d <span class="op">/</span><span class="st"> </span>r</span>
<span id="cb1-10">  mnorm &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(m)))</span>
<span id="cb1-11">  power &lt;-<span class="st"> </span>pi <span class="op">/</span><span class="st"> </span>mnorm <span class="op">*</span><span class="st"> </span>(rho <span class="op">-</span><span class="st"> </span><span class="fl">0.5</span>)</span>
<span id="cb1-12">  <span class="cf">if</span>(power <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>) {</span>
<span id="cb1-13">    bind &lt;-<span class="st"> </span><span class="cf">if</span>(stick <span class="op">==</span><span class="st"> "corners"</span>) mnorm <span class="cf">else</span> m[2L]</span>
<span id="cb1-14">    uv &lt;-<span class="st"> </span>m <span class="op">+</span><span class="st"> </span>dnormalized <span class="op">*</span><span class="st"> </span><span class="kw">tan</span>(r<span class="op">*</span>power) <span class="op">*</span><span class="st"> </span>bind <span class="op">/</span><span class="st"> </span><span class="kw">tan</span>(bind<span class="op">*</span>power)</span>
<span id="cb1-15">  } <span class="cf">else</span> {</span>
<span id="cb1-16">    bind &lt;-<span class="st"> </span>m[2L]</span>
<span id="cb1-17">    uv &lt;-<span class="st"> </span>m <span class="op">+</span><span class="st"> </span>dnormalized <span class="op">*</span><span class="st"> </span><span class="kw">atan</span>(<span class="op">-</span><span class="dv">10</span><span class="op">*</span>r<span class="op">*</span>power) <span class="op">*</span><span class="st"> </span>bind <span class="op">/</span><span class="st"> </span><span class="kw">atan</span>(<span class="op">-</span><span class="dv">10</span><span class="op">*</span>bind<span class="op">*</span>power)</span>
<span id="cb1-18">  }</span>
<span id="cb1-19">  uv</span>
<span id="cb1-20">}</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="kw">library</span>(imager)</span>
<span id="cb1-23"><span class="kw">library</span>(cooltools)</span>
<span id="cb1-24"><span class="co">#' @importFrom imager load.image add.color squeeze R G B</span></span>
<span id="cb1-25"><span class="co">#' @importFrom cooltools approxfun2</span></span>
<span id="cb1-26"><span class="co">#' @importFrom grDevices col2rgb rgb</span></span>
<span id="cb1-27"><span class="co">#' @param bitmapFile path to a bitmap file (jpg, png, ...)</span></span>
<span id="cb1-28"><span class="co">#' @param rho amount of effect; no effect if 0.5, fisheye if &gt;0.5, </span></span>
<span id="cb1-29"><span class="co">#'   antifisheye if &lt;0.5</span></span>
<span id="cb1-30"><span class="co">#' @param stick where to stick the image when rho&gt;0.5, to the </span></span>
<span id="cb1-31"><span class="co">#'   corners or to the borders; if you stick to the corners, a </span></span>
<span id="cb1-32"><span class="co">#'   part of the image is lost</span></span>
<span id="cb1-33"><span class="co">#' @param bkg background color; it appears only if rho&gt;0.5 and </span></span>
<span id="cb1-34"><span class="co">#'   stick="borders" </span></span>
<span id="cb1-35">fisheye &lt;-<span class="st"> </span><span class="cf">function</span>(bitmapFile, rho, <span class="dt">stick =</span> <span class="st">"corners"</span>, <span class="dt">bkg =</span> <span class="st">"black"</span>) {</span>
<span id="cb1-36">  <span class="kw">stopifnot</span>(rho <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, rho <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb1-37">  stick &lt;-<span class="st"> </span><span class="kw">match.arg</span>(stick, <span class="kw">c</span>(<span class="st">"borders"</span>, <span class="st">"corners"</span>))</span>
<span id="cb1-38">  <span class="co"># load the image</span></span>
<span id="cb1-39">  img &lt;-<span class="st"> </span><span class="kw">load.image</span>(bitmapFile)</span>
<span id="cb1-40">  dims &lt;-<span class="st"> </span><span class="kw">dim</span>(img)</span>
<span id="cb1-41">  nx &lt;-<span class="st"> </span>dims[1L]</span>
<span id="cb1-42">  ny &lt;-<span class="st"> </span>dims[2L]</span>
<span id="cb1-43">  nchannels &lt;-<span class="st"> </span>dims[4L]</span>
<span id="cb1-44">  <span class="co"># if the image is gray, add colors</span></span>
<span id="cb1-45">  <span class="cf">if</span>(nchannels <span class="op">==</span><span class="st"> </span>1L) {</span>
<span id="cb1-46">    img &lt;-<span class="st"> </span><span class="kw">add.color</span>(img)</span>
<span id="cb1-47">  } <span class="cf">else</span> <span class="cf">if</span>(nchannels <span class="op">!=</span><span class="st"> </span>3L) {</span>
<span id="cb1-48">    <span class="kw">stop</span>(<span class="st">"Cannot process this image."</span>)</span>
<span id="cb1-49">  }</span>
<span id="cb1-50">  <span class="co"># fisheye matrix</span></span>
<span id="cb1-51">  PSI &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_complex_</span>, <span class="dt">nrow =</span> nx, <span class="dt">ncol =</span> ny)</span>
<span id="cb1-52">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nx) {</span>
<span id="cb1-53">    x &lt;-<span class="st"> </span>(i<span class="op">-</span>1L) <span class="op">/</span><span class="st"> </span>(nx<span class="op">-</span>1L)</span>
<span id="cb1-54">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>ny) {</span>
<span id="cb1-55">      y &lt;-<span class="st"> </span>(j<span class="op">-</span>1L) <span class="op">/</span><span class="st"> </span>(ny<span class="op">-</span>1L)</span>
<span id="cb1-56">      uv &lt;-<span class="st"> </span><span class="kw">fisheye_xy</span>(x, y, rho, stick)</span>
<span id="cb1-57">      PSI[i, j] &lt;-<span class="st"> </span><span class="kw">complex</span>(<span class="dt">real =</span> uv[1L], <span class="dt">imaginary =</span> uv[2L])</span>
<span id="cb1-58">    }</span>
<span id="cb1-59">  }</span>
<span id="cb1-60">  <span class="co"># take the r, g, b channels</span></span>
<span id="cb1-61">  r &lt;-<span class="st"> </span><span class="kw">squeeze</span>(<span class="kw">R</span>(img))</span>
<span id="cb1-62">  g &lt;-<span class="st"> </span><span class="kw">squeeze</span>(<span class="kw">G</span>(img))</span>
<span id="cb1-63">  b &lt;-<span class="st"> </span><span class="kw">squeeze</span>(<span class="kw">B</span>(img))</span>
<span id="cb1-64">  <span class="co"># interpolation</span></span>
<span id="cb1-65">  x_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dt">length.out =</span> nx)</span>
<span id="cb1-66">  y_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dt">length.out =</span> ny)</span>
<span id="cb1-67">  f_r &lt;-<span class="st"> </span><span class="kw">approxfun2</span>(x_, y_, r)</span>
<span id="cb1-68">  f_g &lt;-<span class="st"> </span><span class="kw">approxfun2</span>(x_, y_, g)</span>
<span id="cb1-69">  f_b &lt;-<span class="st"> </span><span class="kw">approxfun2</span>(x_, y_, b)</span>
<span id="cb1-70">  M_r &lt;-<span class="st"> </span><span class="kw">f_r</span>(<span class="kw">Re</span>(PSI), <span class="kw">Im</span>(PSI))</span>
<span id="cb1-71">  M_g &lt;-<span class="st"> </span><span class="kw">f_g</span>(<span class="kw">Re</span>(PSI), <span class="kw">Im</span>(PSI))</span>
<span id="cb1-72">  M_b &lt;-<span class="st"> </span><span class="kw">f_b</span>(<span class="kw">Re</span>(PSI), <span class="kw">Im</span>(PSI))</span>
<span id="cb1-73">  <span class="co"># set outside color</span></span>
<span id="cb1-74">  RGB &lt;-<span class="st"> </span><span class="kw">col2rgb</span>(bkg)[, 1L] <span class="op">/</span><span class="st"> </span><span class="dv">255</span></span>
<span id="cb1-75">  M_r[<span class="kw">is.na</span>(M_r)] &lt;-<span class="st"> </span>RGB[1L]</span>
<span id="cb1-76">  M_g[<span class="kw">is.na</span>(M_g)] &lt;-<span class="st"> </span>RGB[2L]</span>
<span id="cb1-77">  M_b[<span class="kw">is.na</span>(M_b)] &lt;-<span class="st"> </span>RGB[3L]</span>
<span id="cb1-78">  <span class="co"># convert to hex codes</span></span>
<span id="cb1-79">  rstr &lt;-<span class="st"> </span><span class="kw">rgb</span>(M_r, M_g, M_b)</span>
<span id="cb1-80">  <span class="kw">dim</span>(rstr) &lt;-<span class="st"> </span><span class="kw">c</span>(nx, ny)</span>
<span id="cb1-81">  <span class="co"># rotate</span></span>
<span id="cb1-82">  <span class="kw">t</span>(rstr)</span>
<span id="cb1-83">}</span></code></pre>
      </div>
      <p>
        Let’s take for example this picture of Dilbert, named
        <strong>dilbert512x512.png</strong>:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/dilbert512x512.png"
        />
      </p>
      <p>
        It has a transparent background. We firstly transform this background it
        to a gray color (<code>#aaaaaa</code>) with the help of ImageMagick. The
        command to do that is:
      </p>
      <pre><code>convert in.png -background '#aaaaaa' -alpha remove -alpha off out.png</code></pre>
      <p>(<code>magick convert</code> if you use Windows).</p>
      <p>We can run this command from R:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">dilbert_transparent &lt;-<span class="st"> "dilbert512x512.png"</span></span>
<span id="cb3-2">dilbert_gray        &lt;-<span class="st"> "dilbert_gray.png"</span></span>
<span id="cb3-3">gray_color &lt;-<span class="st"> "#aaaaaa"</span></span>
<span id="cb3-4">cmd &lt;-<span class="st"> </span><span class="kw">sprintf</span>(</span>
<span id="cb3-5">  <span class="st">"convert %s -background '%s' -alpha remove -alpha off %s"</span>, </span>
<span id="cb3-6">  dilbert_transparent, gray_color, dilbert_gray</span>
<span id="cb3-7">)</span>
<span id="cb3-8"><span class="kw">system</span>(cmd)</span></code></pre>
      </div>
      <p>Here is <strong>dilbert_gray.png</strong>:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/dilbert_gray.png"
        />
      </p>
      <p>
        Now let’s perform a fisheye distortion of this image with
        <code>rho=0.95</code>:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">img &lt;-<span class="st"> </span><span class="kw">fisheye</span>(dilbert_gray, <span class="dt">rho =</span> <span class="fl">0.95</span>, <span class="dt">stick =</span> <span class="st">"borders"</span>, <span class="dt">bkg =</span> gray_color)</span>
<span id="cb4-2"><span class="co"># plot</span></span>
<span id="cb4-3">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>))</span>
<span id="cb4-4"><span class="kw">plot</span>(<span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="dt">type =</span> <span class="st">"n"</span>, <span class="dt">asp =</span> <span class="dv">1</span>, </span>
<span id="cb4-5">     <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xaxs =</span> <span class="st">"i"</span>, <span class="dt">yaxs =</span> <span class="st">"i"</span>)</span>
<span id="cb4-6"><span class="kw">rasterImage</span>(img, <span class="dv">-100</span>, <span class="dv">-100</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb4-7"><span class="kw">par</span>(opar)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/dilbert_fisheye.png"
        />
      </p>
      <p>
        The anti-fisheye effect is obtained by setting <code>rho&lt;0.5</code>.
        We will do it, with something more: we will get a transparent background
        at the end.
      </p>
      <p>
        To do so, first transform the transparent background to a color, for
        example green (<code>#00ff00</code>):
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">dilbert_transparent  &lt;-<span class="st"> "dilbert512x512.png"</span></span>
<span id="cb5-2">dilbert_green        &lt;-<span class="st"> "dilbert_green.png"</span></span>
<span id="cb5-3">green_color &lt;-<span class="st"> "#00ff00"</span></span>
<span id="cb5-4">cmd &lt;-<span class="st"> </span><span class="kw">sprintf</span>(</span>
<span id="cb5-5">  <span class="st">"convert %s -background '%s' -alpha remove -alpha off %s"</span>, </span>
<span id="cb5-6">  dilbert_transparent, green_color, dilbert_green</span>
<span id="cb5-7">)</span>
<span id="cb5-8"><span class="kw">system</span>(cmd)</span></code></pre>
      </div>
      <p>Here is <strong>dilbert_green.png</strong>:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/dilbert_green.png"
        />
      </p>
      <p>
        Now perform the anti-fisheye effect, and use the same green color as
        background:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">img &lt;-<span class="st"> </span><span class="kw">fisheye</span>(dilbert_green, <span class="dt">rho =</span> <span class="fl">0.45</span>, <span class="dt">bkg =</span> green_color)</span>
<span id="cb6-2"><span class="co"># save image</span></span>
<span id="cb6-3"><span class="kw">png</span>(<span class="st">"dilbert_antifisheye_green.png"</span>, <span class="dt">width =</span> <span class="dv">512</span>, <span class="dt">height =</span> <span class="dv">512</span>)</span>
<span id="cb6-4">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>))</span>
<span id="cb6-5"><span class="kw">plot</span>(<span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="dt">type =</span> <span class="st">"n"</span>, <span class="dt">asp =</span> <span class="dv">1</span>, </span>
<span id="cb6-6">     <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xaxs =</span> <span class="st">"i"</span>, <span class="dt">yaxs =</span> <span class="st">"i"</span>)</span>
<span id="cb6-7"><span class="kw">rasterImage</span>(img, <span class="dv">-100</span>, <span class="dv">-100</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb6-8"><span class="kw">par</span>(opar)</span>
<span id="cb6-9"><span class="kw">dev.off</span>()</span></code></pre>
      </div>
      <p>Here is <strong>dilbert_antifisheye_green.png</strong>:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/dilbert_antifisheye_green.png"
        />
      </p>
      <p>
        Finally, using ImageMagick, transform the green color to transparent:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1">cmd &lt;-<span class="st"> </span><span class="kw">sprintf</span>(</span>
<span id="cb7-2">  <span class="st">"convert -fuzz 30% -transparent '%s' %s %s"</span>,</span>
<span id="cb7-3">  green_color, <span class="st">"dilbert_antifisheye_green.png"</span>, <span class="st">"dilbert_antifisheye.png"</span></span>
<span id="cb7-4">)</span>
<span id="cb7-5"><span class="kw">system</span>(cmd)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/dilbert_antifisheye.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 29 Apr 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/fisheye.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Heatmap formatting of a table with 'DT'</title>
      <link>https://laustep.github.io/stlahblog/posts/TempCitiesUSA.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Googling “heatmap format excel” returns a lot of results. Here we will
        see how to do a heatmap formatting with a <strong>DT</strong> table in
        R.
      </p>
      <p>
        The dataset we use provides the average monthly temperatures over a year
        for some cities in USA. It is available in a
        <a
          href="https://github.com/FanWangEcon/Stat4Econ/blob/master/data/TempCitiesUSA.csv"
          >CSV file here</a
        >.
      </p>
      <p>
        The table is in long format. Below we turn it into a table in wide
        format. We also convert the temperatures to Celsius degrees and we
        rename the months which are given as numbers in the original data.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># read the CSV data</span></span>
<span id="cb1-2">dat0 &lt;-<span class="st"> </span><span class="kw">read.csv</span>(<span class="st">"TempCitiesUSA.csv"</span>)</span>
<span id="cb1-3"><span class="co"># it is in long format:</span></span>
<span id="cb1-4"><span class="kw">head</span>(dat0)</span>
<span id="cb1-5"><span class="co">##   state      city month temp.f</span></span>
<span id="cb1-6"><span class="co">## 1    AK ANCHORAGE     1   15.8</span></span>
<span id="cb1-7"><span class="co">## 2    AK ANCHORAGE     2   18.7</span></span>
<span id="cb1-8"><span class="co">## 3    AK ANCHORAGE     3   25.9</span></span>
<span id="cb1-9"><span class="co">## 4    AK ANCHORAGE     4   36.3</span></span>
<span id="cb1-10"><span class="co">## 5    AK ANCHORAGE     5   46.9</span></span>
<span id="cb1-11"><span class="co">## 6    AK ANCHORAGE     6   54.7</span></span>
<span id="cb1-12"><span class="co"># I prefer Celsius degrees</span></span>
<span id="cb1-13">dat0[[<span class="st">"temp.f"</span>]] &lt;-<span class="st"> </span><span class="kw">round</span>((dat0[[<span class="st">"temp.f"</span>]] <span class="op">-</span><span class="st"> </span><span class="dv">32</span>) <span class="op">/</span><span class="st"> </span><span class="fl">1.8</span>, <span class="dt">digits =</span> 1L) </span>
<span id="cb1-14"><span class="co"># convert to wide format</span></span>
<span id="cb1-15"><span class="kw">library</span>(tidyr)</span>
<span id="cb1-16">dat &lt;-<span class="st"> </span>dat0 <span class="op">%&gt;%</span><span class="st"> </span></span>
<span id="cb1-17"><span class="st">  </span><span class="kw">pivot_wider</span>(</span>
<span id="cb1-18">    <span class="dt">names_from  =</span> month,</span>
<span id="cb1-19">    <span class="dt">values_from =</span> temp.f</span>
<span id="cb1-20">)</span>
<span id="cb1-21"><span class="co"># replace the month numbers in the column names</span></span>
<span id="cb1-22"><span class="kw">colnames</span>(dat)[<span class="dv">3</span><span class="op">:</span><span class="dv">14</span>] &lt;-<span class="st"> </span>month.abb</span>
<span id="cb1-23"><span class="co"># have a look</span></span>
<span id="cb1-24">pillar<span class="op">::</span><span class="kw">glimpse</span>(dat, <span class="dt">width =</span> <span class="dv">65</span>)</span>
<span id="cb1-25"><span class="co">## Rows: 261</span></span>
<span id="cb1-26"><span class="co">## Columns: 14</span></span>
<span id="cb1-27"><span class="co">## $ state &lt;chr&gt; "AK", "AK", "AK", "AK", "AK", "AK", "AK", "AK", "…</span></span>
<span id="cb1-28"><span class="co">## $ city  &lt;chr&gt; "ANCHORAGE", "ANNETTE", "BARROW", "BETHEL", "FAIR…</span></span>
<span id="cb1-29"><span class="co">## $ Jan   &lt;dbl&gt; -9.0, 1.7, -25.4, -14.1, -23.2, -4.8, -3.5, -9.2,…</span></span>
<span id="cb1-30"><span class="co">## $ Feb   &lt;dbl&gt; -7.4, 2.8, -26.6, -13.6, -19.9, -3.9, -1.7, -9.1,…</span></span>
<span id="cb1-31"><span class="co">## $ Mar   &lt;dbl&gt; -3.4, 4.2, -25.4, -9.7, -11.6, -1.4, 0.9, -4.7, 0…</span></span>
<span id="cb1-32"><span class="co">## $ Apr   &lt;dbl&gt; 2.4, 6.6, -18.1, -3.4, -0.2, 2.4, 4.9, 0.6, 2.9, …</span></span>
<span id="cb1-33"><span class="co">## $ May   &lt;dbl&gt; 8.3, 9.7, -6.6, 5.2, 9.3, 6.5, 8.8, 6.4, 6.4, -0.…</span></span>
<span id="cb1-34"><span class="co">## $ Jun   &lt;dbl&gt; 12.6, 12.4, 1.7, 10.8, 15.4, 10.0, 12.2, 10.5, 9.…</span></span>
<span id="cb1-35"><span class="co">## $ Jul   &lt;dbl&gt; 14.7, 14.6, 4.7, 13.3, 16.9, 12.3, 13.8, 13.2, 12…</span></span>
<span id="cb1-36"><span class="co">## $ Aug   &lt;dbl&gt; 13.6, 14.8, 3.7, 12.0, 13.4, 12.1, 13.2, 12.7, 12…</span></span>
<span id="cb1-37"><span class="co">## $ Sep   &lt;dbl&gt; 9.0, 12.1, -0.4, 7.4, 6.9, 8.8, 10.0, 8.7, 9.7, 5…</span></span>
<span id="cb1-38"><span class="co">## $ Oct   &lt;dbl&gt; 1.2, 8.1, -9.7, -1.1, -4.7, 3.2, 5.7, 0.7, 4.6, -…</span></span>
<span id="cb1-39"><span class="co">## $ Nov   &lt;dbl&gt; -5.7, 4.3, -18.3, -8.1, -16.5, -1.4, 0.7, -4.9, 1…</span></span>
<span id="cb1-40"><span class="co">## $ Dec   &lt;dbl&gt; -8.1, 2.4, -23.7, -12.6, -21.1, -3.4, -1.8, -8.2,…</span></span></code></pre>
      </div>
      <p>
        We will use the lowest temperature and the highest temperature later.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># get the lowest and highest temperatures</span></span>
<span id="cb2-2">lowest  &lt;-<span class="st"> </span><span class="kw">min</span>(dat0[[<span class="st">"temp.f"</span>]])</span>
<span id="cb2-3">highest &lt;-<span class="st"> </span><span class="kw">max</span>(dat0[[<span class="st">"temp.f"</span>]])</span></code></pre>
      </div>
      <p>
        Now let’s detail our manipulation for one column. We map the
        temperatures to the interval <span class="math inline">\((0,1)\)</span>,
        in such a way that <span class="math inline">\(0\)</span> is sent to
        <span class="math inline">\(0.5\)</span>.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="co"># let's detail for one column, January</span></span>
<span id="cb3-2">x &lt;-<span class="st"> </span>dat[[<span class="st">"Jan"</span>]]</span>
<span id="cb3-3"><span class="co"># function to map from (lowest, highest) to (0, 1), mapping 0 to 0.5</span></span>
<span id="cb3-4">interpfun &lt;-<span class="st"> </span><span class="kw">splinefun</span>(</span>
<span id="cb3-5">  <span class="kw">c</span>(lowest, <span class="dv">0</span>, highest),</span>
<span id="cb3-6">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="fl">0.5</span>, <span class="dv">1</span>)</span>
<span id="cb3-7">)</span>
<span id="cb3-8"><span class="co"># map the January data</span></span>
<span id="cb3-9">y &lt;-<span class="st"> </span><span class="kw">interpfun</span>(x)</span></code></pre>
      </div>
      <p>
        Now we map each value of <code>y</code> to a color, such that
        <span class="math inline">\(0.5\)</span> is sent to white.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="co"># function mapping (0, 1) to a color; 0.5 is sent to white </span></span>
<span id="cb4-2">colfunc &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(<span class="kw">c</span>(<span class="st">"blue"</span>, <span class="st">"white"</span>, <span class="st">"red"</span>))</span>
<span id="cb4-3"><span class="co"># get the colors for January</span></span>
<span id="cb4-4">cols &lt;-<span class="st"> </span><span class="kw">colfunc</span>(y)</span>
<span id="cb4-5"><span class="co"># these are rgb codes, we convert them to hex codes</span></span>
<span id="cb4-6">clrs &lt;-<span class="st"> </span><span class="kw">rgb</span>(cols[, 1L], cols[, 2L], cols[, 3L], <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span></code></pre>
      </div>
      <p>
        In this way the negative temperatures will be colored in blue and the
        positive temperatures in red.
      </p>
      <p>Now we apply this manipulation for each month.</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="co"># now we perform this stuff for each month</span></span>
<span id="cb5-2">Colors &lt;-<span class="st"> </span><span class="kw">lapply</span>(dat[, month.abb], <span class="cf">function</span>(x) {</span>
<span id="cb5-3">  y &lt;-<span class="st"> </span><span class="kw">interpfun</span>(x)</span>
<span id="cb5-4">  cols &lt;-<span class="st"> </span><span class="kw">colfunc</span>(y)</span>
<span id="cb5-5">  <span class="kw">rgb</span>(cols[, 1L], cols[, 2L], cols[, 3L], <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb5-6">})</span>
<span id="cb5-7"><span class="co"># have a look</span></span>
<span id="cb5-8"><span class="kw">str</span>(Colors)</span>
<span id="cb5-9"><span class="co">## List of 12</span></span>
<span id="cb5-10"><span class="co">##  $ Jan: chr [1:261] "#AEAEFF" "#FFF0F0" "#0C0CFF" "#7E7EFF" ...</span></span>
<span id="cb5-11"><span class="co">##  $ Feb: chr [1:261] "#BDBDFF" "#FFE7E7" "#0000FF" "#8282FF" ...</span></span>
<span id="cb5-12"><span class="co">##  $ Mar: chr [1:261] "#E1E1FF" "#FFDBDB" "#0C0CFF" "#A7A7FF" ...</span></span>
<span id="cb5-13"><span class="co">##  $ Apr: chr [1:261] "#FFEAEA" "#FFC7C7" "#5757FF" "#E1E1FF" ...</span></span>
<span id="cb5-14"><span class="co">##  $ May: chr [1:261] "#FFB9B9" "#FFAEAE" "#C4C4FF" "#FFD3D3" ...</span></span>
<span id="cb5-15"><span class="co">##  $ Jun: chr [1:261] "#FF9797" "#FF9999" "#FFF0F0" "#FFA5A5" ...</span></span>
<span id="cb5-16"><span class="co">##  $ Jul: chr [1:261] "#FF8787" "#FF8888" "#FFD7D7" "#FF9292" ...</span></span>
<span id="cb5-17"><span class="co">##  $ Aug: chr [1:261] "#FF9090" "#FF8787" "#FFDFDF" "#FF9C9C" ...</span></span>
<span id="cb5-18"><span class="co">##  $ Sep: chr [1:261] "#FFB4B4" "#FF9B9B" "#FBFBFF" "#FFC1C1" ...</span></span>
<span id="cb5-19"><span class="co">##  $ Oct: chr [1:261] "#FFF4F4" "#FFBBBB" "#A7A7FF" "#F5F5FF" ...</span></span>
<span id="cb5-20"><span class="co">##  $ Nov: chr [1:261] "#CCCCFF" "#FFDADA" "#5555FF" "#B6B6FF" ...</span></span>
<span id="cb5-21"><span class="co">##  $ Dec: chr [1:261] "#B6B6FF" "#FFEAEA" "#1E1EFF" "#8C8CFF" ...</span></span></code></pre>
      </div>
      <p>
        Now let’s do the <strong>DT</strong> table. I use the
        <strong>RowGroup</strong> extension to group the data by state (the 0-th
        column in JavaScript).
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">library</span>(DT)</span>
<span id="cb6-2">dtable &lt;-<span class="st"> </span><span class="kw">datatable</span>(</span>
<span id="cb6-3">  dat, <span class="dt">rownames =</span> <span class="ot">FALSE</span>, <span class="dt">extensions =</span> <span class="st">"RowGroup"</span>, </span>
<span id="cb6-4">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb6-5">    <span class="dt">rowGroup =</span> <span class="kw">list</span>(<span class="dt">dataSrc =</span> <span class="kw">list</span>(<span class="dv">0</span>)),</span>
<span id="cb6-6">    <span class="dt">columnDefs =</span> <span class="kw">list</span>( <span class="co"># hide the grouping column</span></span>
<span id="cb6-7">      <span class="kw">list</span>(<span class="dt">targets =</span> <span class="dv">0</span>, <span class="dt">visible =</span> <span class="ot">FALSE</span>)</span>
<span id="cb6-8">    )</span>
<span id="cb6-9">  )</span>
<span id="cb6-10">)</span></code></pre>
      </div>
      <p>And now we format this table.</p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><span class="cf">for</span>(month <span class="cf">in</span> month.abb) {</span>
<span id="cb7-2">  dtable &lt;-<span class="st"> </span>dtable <span class="op">%&gt;%</span></span>
<span id="cb7-3"><span class="st">    </span><span class="kw">formatStyle</span>(</span>
<span id="cb7-4">      month, </span>
<span id="cb7-5">      <span class="dt">backgroundColor =</span> <span class="kw">styleEqual</span>(dat[[month]], Colors[[month]])</span>
<span id="cb7-6">    )</span>
<span id="cb7-7">}</span></code></pre>
      </div>
      <p>That’s done.</p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1">dtable</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/TempCitiesUSA.png"
          style="width: 60%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 08 Apr 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/TempCitiesUSA.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Orbit trapped Julia fractal</title>
      <link>https://laustep.github.io/stlahblog/posts/JuliaOrbitTrap.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Given a complex number <span class="math inline">\(z_c\)</span>, called
        <em>the Julia point</em>, the corresponding <em>Julia fractal</em> is
        obtained by iterating
        <span class="math inline">\(z \mapsto z^2 + z_c\)</span> for each
        complex number <span class="math inline">\(z\)</span> until the modulus
        of <span class="math inline">\(z\)</span> exceeds a certain threshold or
        the maximal number of iterations is attained. Then a color is assigned
        to <span class="math inline">\(z\)</span>.
      </p>
      <p>
        An <em>orbit trapped Julia fractal</em> is obtained in the same way, but
        the iteration is stopped whenever
        <span class="math inline">\(z\)</span> is close enough to a given set
        such as a square or a circle. In the example shown below, we take the
        two axes as this trapping set.
      </p>
      <p>
        I also add something: instead of looking at the distance between
        <span class="math inline">\(z\)</span> and the two axes, I look at the
        distance between <span class="math inline">\(z\)</span> and the axes
        after having rotated <span class="math inline">\(z\)</span> by an angle
        <span class="math inline">\(\alpha\)</span>. Then I’ll vary
        <span class="math inline">\(\alpha\)</span> to get an animation.
      </p>
      <p>
        So here is the code of this algorithm; the color assigned to the final
        <span class="math inline">\(z\)</span> is defined in function of the
        value of the trapping function (the distance):
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># trapping function:</span></span>
<span id="cb1-2"><span class="co">#   distance (up to factor 1/0.03) between alpha-rotated z and axes</span></span>
<span id="cb1-3">f &lt;-<span class="st"> </span><span class="cf">function</span>(z, alpha) {</span>
<span id="cb1-4">  z &lt;-<span class="st"> </span>z <span class="op">*</span><span class="st"> </span><span class="kw">exp</span>(1i<span class="op">*</span>alpha)</span>
<span id="cb1-5">  <span class="kw">min</span>(<span class="kw">abs</span>(<span class="kw">Re</span>(z)), <span class="kw">abs</span>(<span class="kw">Im</span>(z))) <span class="op">/</span><span class="st"> </span><span class="fl">0.03</span></span>
<span id="cb1-6">}</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co"># choose the Julia point</span></span>
<span id="cb1-9">juliaPoint &lt;-<span class="st"> </span><span class="kw">complex</span>(<span class="dt">real =</span> <span class="fl">-0.687</span>, <span class="dt">imaginary =</span> <span class="fl">0.299015</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co"># main function</span></span>
<span id="cb1-12">Julia &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(x, y, juliaPoint, alpha) {</span>
<span id="cb1-13">  <span class="co"># counter</span></span>
<span id="cb1-14">  i &lt;-<span class="st"> </span>0L</span>
<span id="cb1-15">  <span class="co"># current point, to be iterated</span></span>
<span id="cb1-16">  z &lt;-<span class="st"> </span><span class="kw">complex</span>(<span class="dt">real =</span> x, <span class="dt">imaginary =</span> y)</span>
<span id="cb1-17">  <span class="co"># iterations</span></span>
<span id="cb1-18">  <span class="cf">while</span>(i <span class="op">&lt;</span><span class="st"> </span>100L <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">Mod</span>(z) <span class="op">&lt;</span><span class="st"> </span><span class="dv">100</span> <span class="op">&amp;&amp;</span><span class="st"> </span>(i <span class="op">&lt;</span><span class="st"> </span>2L <span class="op">||</span><span class="st"> </span><span class="kw">f</span>(z, alpha) <span class="op">&gt;</span><span class="st"> </span><span class="dv">1</span>)) {</span>
<span id="cb1-19">    z &lt;-<span class="st"> </span>z<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>juliaPoint</span>
<span id="cb1-20">    i &lt;-<span class="st"> </span>i <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb1-21">  }</span>
<span id="cb1-22">  <span class="co"># now assign a color to the resulting z</span></span>
<span id="cb1-23">  fz &lt;-<span class="st"> </span><span class="dv">2</span> <span class="op">*</span><span class="st"> </span><span class="kw">f</span>(z, alpha)</span>
<span id="cb1-24">  <span class="kw">hsv</span>( <span class="co"># h, s, v must be in (0, 1)</span></span>
<span id="cb1-25">    <span class="dt">h =</span> (<span class="kw">Arg</span>(z) <span class="op">+</span><span class="st"> </span>pi) <span class="op">/</span><span class="st"> </span>(<span class="dv">2</span> <span class="op">*</span><span class="st"> </span>pi), </span>
<span id="cb1-26">    <span class="dt">s =</span> <span class="kw">min</span>(<span class="dv">1</span>, fz), </span>
<span id="cb1-27">    <span class="dt">v =</span> <span class="kw">max</span>(<span class="dv">0</span>, <span class="kw">min</span>(<span class="dv">1</span>, <span class="dv">2</span> <span class="op">-</span><span class="st"> </span>fz))</span>
<span id="cb1-28">  )</span>
<span id="cb1-29">})</span></code></pre>
      </div>
      <p>
        The condition <code>i &lt; 2L</code> ensures that the iteration is not
        stopped at the beginning. Let’s plot a first image:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># run the orbit trapping of Julia</span></span>
<span id="cb2-2">n &lt;-<span class="st"> </span>2048L</span>
<span id="cb2-3">x_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">2</span>,   <span class="dv">2</span>,   <span class="dt">length.out =</span> n)</span>
<span id="cb2-4">y_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">1.5</span>, <span class="fl">1.5</span>, <span class="dt">length.out =</span> n)</span>
<span id="cb2-5">img &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">outer</span>(x_, y_, Julia, <span class="dt">juliaPoint =</span> juliaPoint, <span class="dt">alpha =</span> <span class="dv">0</span>))</span>
<span id="cb2-6"><span class="co"># plot</span></span>
<span id="cb2-7">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>), <span class="dt">bg =</span> <span class="st">"black"</span>)</span>
<span id="cb2-8"><span class="kw">plot</span>(<span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="dt">type =</span> <span class="st">"n"</span>, <span class="dt">asp =</span> <span class="dv">3</span><span class="op">/</span><span class="dv">4</span>, </span>
<span id="cb2-9">     <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xaxs =</span> <span class="st">"i"</span>, <span class="dt">yaxs =</span> <span class="st">"i"</span>)</span>
<span id="cb2-10"><span class="kw">rasterImage</span>(img, <span class="dv">-100</span>, <span class="dv">-100</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb2-11"><span class="kw">par</span>(opar)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/JuliaOrbitTrap.png"
          style="width: 50%"
        />
      </p>
      <p>
        And here is the animation obtained by varying the angle
        <span class="math inline">\(\alpha\)</span>:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/JuliaOrbitTrap.gif"
          style="width: 50%"
        />
      </p>
      <p>
        Such a fractal is easily and efficiently rendered as a <em>shader</em>.
        <a
          href="https://laustep.github.io/stlahblog/frames/pixijs_orbitTrap_julia.html"
          >Click here</a
        >
        to play with the shader, in which the cursor of the mouse is used to
        take the Julia point. I also modified the trapping function (<span
          class="math inline"
          >\(z^3\)</span
        >
        instead of <span class="math inline">\(z\)</span>).
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 20 Mar 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/JuliaOrbitTrap.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Interpolating non-gridded data</title>
      <link>https://laustep.github.io/stlahblog/posts/bivariateInterpolation.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I still wrapped a part of the C++ library <strong>CGAL</strong> in a R
        package, namely
        <a href="https://github.com/stla/interpolation"
          ><strong>interpolation</strong></a
        >.
      </p>
      <p>
        The purpose of this package is to perform interpolation of bivariate
        functions. As compared to existing packages, it can do more: it can
        interpolate vector-valued functions (with dimension two or three), and
        it does not require that the given data are gridded. I will illustrate
        this second point here.
      </p>
      <p>
        First, let’s plot a surface
        <span class="math inline">\(z = f(x, y)\)</span>.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># make a square grid</span></span>
<span id="cb1-2">x &lt;-<span class="st"> </span>y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">3</span>, <span class="dv">3</span>, <span class="dt">by =</span> <span class="fl">0.1</span>)</span>
<span id="cb1-3">Grid &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">X =</span> x, <span class="dt">Y =</span> y)</span>
<span id="cb1-4"><span class="co"># make surface </span></span>
<span id="cb1-5">z &lt;-<span class="st"> </span><span class="kw">with</span>(Grid, <span class="dv">30</span> <span class="op">*</span><span class="st"> </span><span class="kw">dcauchy</span>(X) <span class="op">*</span><span class="st"> </span><span class="kw">dcauchy</span>(Y))</span>
<span id="cb1-6"><span class="co"># plot</span></span>
<span id="cb1-7"><span class="kw">library</span>(deldir)</span>
<span id="cb1-8">delxyz &lt;-<span class="st"> </span><span class="kw">deldir</span>(Grid[[<span class="st">"X"</span>]], Grid[[<span class="st">"Y"</span>]], <span class="dt">z =</span> z)</span>
<span id="cb1-9"><span class="kw">library</span>(rgl)</span>
<span id="cb1-10"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb1-11"><span class="kw">persp3d</span>(delxyz, <span class="dt">color =</span> <span class="st">"red"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/CauchySurface.png"
          style="width: 50%"
        />
      </p>
      <p>
        Now we will make a hole in this surface, and then we will interpolate
        it.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># make a hole in the grid: the square [-0.5, 1]x[-0.5, 1]</span></span>
<span id="cb2-2">toremove &lt;-<span class="st"> </span><span class="kw">with</span>(Grid, X <span class="op">&gt;</span><span class="st"> </span><span class="fl">-0.5</span> <span class="op">&amp;</span><span class="st"> </span>X <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span> <span class="op">&amp;</span><span class="st"> </span>Y <span class="op">&gt;</span><span class="st"> </span><span class="fl">-0.5</span> <span class="op">&amp;</span><span class="st"> </span>Y <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb2-3">GridWithHole &lt;-<span class="st"> </span>Grid[<span class="op">!</span>toremove, ]</span>
<span id="cb2-4"><span class="co"># plot this grid</span></span>
<span id="cb2-5"><span class="kw">plot</span>(GridWithHole[[<span class="st">"X"</span>]], GridWithHole[[<span class="st">"Y"</span>]], <span class="dt">pch =</span> <span class="dv">19</span>, <span class="dt">asp =</span> <span class="dv">1</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gridWithHole.png"
          style="width: 50%"
        />
      </p>
      <p>
        Now, to plot the surface with the hole, I will use a constrained
        Delaunay triangulation. I didn’t find a more straightforward way.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="co"># constraint edges: squares [-0.5, 1]x[-0.5, 1] and [-3, 3]x[-3, 3]</span></span>
<span id="cb3-2">Constraints &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb3-3">  <span class="dt">X =</span> <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.5</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="fl">-0.5</span>, <span class="dv">-3</span>, <span class="dv">3</span>, <span class="dv">3</span>, <span class="dv">-3</span>),</span>
<span id="cb3-4">  <span class="dt">Y =</span> <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.5</span>, <span class="fl">-0.5</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">-3</span>, <span class="dv">-3</span>, <span class="dv">3</span>, <span class="dv">3</span>)</span>
<span id="cb3-5">)</span>
<span id="cb3-6"><span class="co"># add constraint edges to the grid with the hole</span></span>
<span id="cb3-7">GridWithHole &lt;-<span class="st"> </span><span class="kw">rbind</span>(Constraints, GridWithHole)</span>
<span id="cb3-8"><span class="co"># remove duplicated points</span></span>
<span id="cb3-9">GridWithHole &lt;-<span class="st"> </span>GridWithHole[<span class="op">!</span><span class="kw">duplicated</span>(GridWithHole), ]</span>
<span id="cb3-10"><span class="co"># vertices</span></span>
<span id="cb3-11">points &lt;-<span class="st"> </span><span class="kw">cbind</span>(GridWithHole[[<span class="st">"X"</span>]], GridWithHole[[<span class="st">"Y"</span>]])</span>
<span id="cb3-12"><span class="co"># constraint edges must be given by vertex indices</span></span>
<span id="cb3-13">edges &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">c</span>(1L, 2L), <span class="kw">c</span>(2L, 3L), <span class="kw">c</span>(3L, 4L), <span class="kw">c</span>(4L, 1L)) <span class="co"># the hole</span></span>
<span id="cb3-14">edges &lt;-<span class="st"> </span><span class="kw">rbind</span>(edges, edges <span class="op">+</span><span class="st"> </span>4L) <span class="co"># the outer square</span></span>
<span id="cb3-15"><span class="co"># perform constrained Delaunay triangulation</span></span>
<span id="cb3-16"><span class="kw">library</span>(delaunay)</span>
<span id="cb3-17">del &lt;-<span class="st"> </span><span class="kw">delaunay</span>(points, <span class="dt">constraints =</span> edges)</span></code></pre>
      </div>
      <p>
        Note that the <strong>delaunay</strong> package is also a wrapper of
        <strong>CGAL</strong>.
      </p>
      <p>
        This Delaunay triangulation provides triangular faces that we can use to
        create a 3D <strong>rgl</strong> mesh.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="co"># create surface plot</span></span>
<span id="cb4-2">z &lt;-<span class="st"> </span><span class="kw">with</span>(GridWithHole, <span class="dv">30</span> <span class="op">*</span><span class="st"> </span><span class="kw">dcauchy</span>(X) <span class="op">*</span><span class="st"> </span><span class="kw">dcauchy</span>(Y))</span>
<span id="cb4-3">vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(points, z)</span>
<span id="cb4-4">rmesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb4-5">  <span class="dt">vertices =</span> <span class="kw">t</span>(vertices),</span>
<span id="cb4-6">  <span class="dt">indices  =</span> <span class="kw">t</span>(del[[<span class="st">"faces"</span>]]),</span>
<span id="cb4-7">  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb4-8">)</span>
<span id="cb4-9">rmesh &lt;-<span class="st"> </span><span class="kw">addNormals</span>(rmesh)</span>
<span id="cb4-10"><span class="co"># we plot the front side in red and the back side in gray</span></span>
<span id="cb4-11"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb4-12"><span class="kw">shade3d</span>(rmesh, <span class="dt">color =</span> <span class="st">"red"</span>, <span class="dt">back =</span> <span class="st">"cull"</span>)</span>
<span id="cb4-13"><span class="kw">shade3d</span>(rmesh, <span class="dt">color =</span> <span class="st">"gray"</span>, <span class="dt">front =</span> <span class="st">"cull"</span>)</span>
<span id="cb4-14"><span class="kw">persp3d</span>(delxyz, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">alpha =</span> <span class="fl">0.2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/CauchySurfaceWithHole.png"
          style="width: 50%"
        />
      </p>
      <p>Good. Now let’s interpolate.</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="co"># make the interpolating function</span></span>
<span id="cb5-2"><span class="kw">library</span>(interpolation)</span>
<span id="cb5-3">fun &lt;-<span class="st"> </span><span class="kw">interpfun</span>(</span>
<span id="cb5-4">  GridWithHole[[<span class="st">"X"</span>]], GridWithHole[[<span class="st">"Y"</span>]], z, <span class="dt">method =</span> <span class="st">"linear"</span></span>
<span id="cb5-5">)</span>
<span id="cb5-6"><span class="co"># make a grid of the hole</span></span>
<span id="cb5-7">xnew &lt;-<span class="st"> </span>ynew &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">0.5</span>, <span class="dv">1</span>, <span class="dt">by =</span> <span class="fl">0.04</span>)</span>
<span id="cb5-8">griddedHole &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">X =</span> xnew, <span class="dt">Y =</span> ynew)</span>
<span id="cb5-9"><span class="co"># interpolation</span></span>
<span id="cb5-10">znew &lt;-<span class="st"> </span><span class="kw">fun</span>(griddedHole[[<span class="st">"X"</span>]], griddedHole[[<span class="st">"Y"</span>]])</span>
<span id="cb5-11"><span class="co"># new 3D data</span></span>
<span id="cb5-12">newPoints &lt;-<span class="st"> </span><span class="kw">cbind</span>(griddedHole[[<span class="st">"X"</span>]], griddedHole[[<span class="st">"Y"</span>]], znew)</span>
<span id="cb5-13"><span class="co"># plot</span></span>
<span id="cb5-14"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb5-15"><span class="kw">shade3d</span>(rmesh, <span class="dt">color =</span> <span class="st">"red"</span>, <span class="dt">back =</span> <span class="st">"cull"</span>)</span>
<span id="cb5-16"><span class="kw">shade3d</span>(rmesh, <span class="dt">color =</span> <span class="st">"gray"</span>, <span class="dt">front =</span> <span class="st">"cull"</span>)</span>
<span id="cb5-17"><span class="kw">points3d</span>(newPoints)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/CauchySurfaceWithFilledHole_linear.png"
          style="width: 50%"
        />
      </p>
      <p>
        Not very nice, you think? Right, but I used the linear method of
        interpolation here. The <strong>interpolation</strong> package also
        provides the <em>Sibson</em> method, this one is not linear. One just
        has to repeat the above code but starting with:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">fun &lt;-<span class="st"> </span><span class="kw">interpfun</span>(</span>
<span id="cb6-2">  GridWithHole[[<span class="st">"X"</span>]], GridWithHole[[<span class="st">"Y"</span>]], z, <span class="dt">method =</span> <span class="st">"sibson"</span></span>
<span id="cb6-3">)</span></code></pre>
      </div>
      <p>And we obtain:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/CauchySurfaceWithFilledHole_sibson.png"
          style="width: 50%"
        />
      </p>
      <p>
        This is not exactly the true curve, but nevertheless this is impressive.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 06 Mar 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/bivariateInterpolation.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Animating a 'rgl' mesh at constant speed</title>
      <link>https://laustep.github.io/stlahblog/posts/constantSpeedAnimation.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        The purpose of my package <strong>qsplines</strong> is to construct
        quaternions splines. This is a port of the Python library
        <strong>splines</strong>, written by Matthias Geier. A quaternions
        spline is a sequence of quaternions interpolating some given
        quaternions.
      </p>
      <p>
        One feature I particularly like is the possibility to get a quaternions
        spline having <em>constant speed</em>. I’m going to illustrate this
        feature.
      </p>
      <p>
        Firstly, I take some key points following a spherical curve on the unit
        ball. Then I will take, for each key point, a unit quaternion (“rotor”)
        which sends the first key point to this key point, through the rotation
        it corresponds to. The spherical curve I take is a so-called
        <a href="https://mathcurve.com/courbes3d.gb/satellite/satellite.shtml"
          >satellite curve</a
        >.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># satellite curve</span></span>
<span id="cb1-2"><span class="co"># https://mathcurve.com/courbes3d.gb/satellite/satellite.shtml</span></span>
<span id="cb1-3">satellite &lt;-<span class="st"> </span><span class="cf">function</span>(t, <span class="dt">R =</span> <span class="dv">1</span>, <span class="dt">alpha =</span> pi<span class="op">/</span><span class="dv">2</span>, <span class="dt">k =</span> <span class="dv">8</span>) {</span>
<span id="cb1-4">  <span class="kw">c</span>(</span>
<span id="cb1-5">    <span class="kw">cos</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(t) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(k<span class="op">*</span>t) <span class="op">-</span><span class="st"> </span><span class="kw">sin</span>(t) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(k<span class="op">*</span>t),</span>
<span id="cb1-6">    <span class="kw">cos</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(t) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(k<span class="op">*</span>t) <span class="op">+</span><span class="st"> </span><span class="kw">cos</span>(t) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(k<span class="op">*</span>t),</span>
<span id="cb1-7">    <span class="kw">sin</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(k<span class="op">*</span>t)</span>
<span id="cb1-8">  )</span>
<span id="cb1-9">}</span>
<span id="cb1-10"><span class="co"># take key points running on the satellite curve</span></span>
<span id="cb1-11">nkeypoints &lt;-<span class="st"> </span>10L</span>
<span id="cb1-12">t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nkeypoints<span class="op">+</span>1L)[1L<span class="op">:</span>nkeypoints]</span>
<span id="cb1-13">keyPoints &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">vapply</span>(t_, satellite, <span class="kw">numeric</span>(3L)))</span></code></pre>
      </div>
      <p>Now the rotors as previously described:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># construction of the key rotors; the first key rotor </span></span>
<span id="cb2-2"><span class="co">#   is the identity quaternion and rotor i sends the </span></span>
<span id="cb2-3"><span class="co">#   first key point to the i-th key point</span></span>
<span id="cb2-4">keyRotors &lt;-<span class="st"> </span><span class="kw">quaternion</span>(<span class="dt">length.out =</span> nkeypoints)</span>
<span id="cb2-5">rotor &lt;-<span class="st"> </span>keyRotors[1L] &lt;-<span class="st"> </span>H1</span>
<span id="cb2-6"><span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_len</span>(nkeypoints <span class="op">-</span><span class="st"> </span>1L)){</span>
<span id="cb2-7">  keyRotors[i<span class="op">+</span>1L] &lt;-<span class="st"> </span>rotor &lt;-</span>
<span id="cb2-8"><span class="st">    </span><span class="kw">quaternionFromTo</span>(keyPoints[i, ], keyPoints[i<span class="op">+</span>1L, ]) <span class="op">*</span><span class="st"> </span>rotor</span>
<span id="cb2-9">}</span></code></pre>
      </div>
      <p>And now the constant speed quaternions spline:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="co"># Kochanek-Bartels quaternions spline interpolating the key rotors</span></span>
<span id="cb3-2">rotors &lt;-<span class="st"> </span><span class="kw">KochanekBartels</span>(</span>
<span id="cb3-3">  keyRotors, <span class="dt">n_intertimes =</span> 10L, </span>
<span id="cb3-4">  <span class="dt">endcondition =</span> <span class="st">"closed"</span>, <span class="dt">tcb =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>), </span>
<span id="cb3-5">  <span class="dt">constantSpeed =</span> <span class="ot">TRUE</span></span>
<span id="cb3-6">)</span></code></pre>
      </div>
      <p>
        And now, with the help of this spline, we can construct an animation of
        a <strong>rgl</strong> mesh rotating at constant speed. I take a mesh of
        a Dupin cyclide.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(rgl)</span>
<span id="cb4-2">mesh0 &lt;-<span class="st"> </span>cgalMeshes<span class="op">::</span><span class="kw">cyclideMesh</span>(</span>
<span id="cb4-3">  <span class="dt">a =</span> <span class="dv">97</span>, <span class="dt">c =</span> <span class="dv">32</span>, <span class="dt">mu =</span> <span class="dv">57</span>, <span class="dt">nu =</span> 200L, <span class="dt">nv =</span> 200L</span>
<span id="cb4-4">)</span>
<span id="cb4-5"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>), <span class="dt">zoom =</span> <span class="fl">0.6</span>)</span>
<span id="cb4-6"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">length</span>(rotors)) {</span>
<span id="cb4-7">  rotMatrix &lt;-<span class="st"> </span><span class="kw">as.orthogonal</span>(rotors[i])</span>
<span id="cb4-8">  mesh &lt;-<span class="st"> </span><span class="kw">rotate3d</span>(mesh0, <span class="dt">matrix =</span> rotMatrix)</span>
<span id="cb4-9">  <span class="co"># this invisible sphere is used to fix the frame </span></span>
<span id="cb4-10">  <span class="kw">spheres3d</span>(<span class="dt">x =</span> <span class="dv">0</span>, <span class="dt">y =</span> <span class="dv">0</span>, <span class="dt">z =</span> <span class="dv">0</span>, <span class="dt">radius =</span> <span class="dv">200</span>, <span class="dt">alpha =</span> <span class="dv">0</span>)</span>
<span id="cb4-11">  <span class="kw">shade3d</span>(mesh0, <span class="dt">color =</span> <span class="st">"chartreuse"</span>)</span>
<span id="cb4-12">  png &lt;-<span class="st"> </span><span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, i)</span>
<span id="cb4-13">  <span class="kw">snapshot3d</span>(png, <span class="dt">webshot =</span> <span class="ot">FALSE</span>)</span>
<span id="cb4-14">  <span class="kw">clear3d</span>()</span>
<span id="cb4-15">}</span>
<span id="cb4-16"><span class="co"># mount animation</span></span>
<span id="cb4-17">pngFiles &lt;-<span class="st"> </span><span class="kw">Sys.glob</span>(<span class="st">"*.png"</span>)</span>
<span id="cb4-18"><span class="kw">library</span>(gifski)</span>
<span id="cb4-19"><span class="kw">gifski</span>(</span>
<span id="cb4-20">  pngFiles, <span class="st">"cyclide_constantSpeed.gif"</span>,</span>
<span id="cb4-21">  <span class="dt">width =</span> <span class="dv">512</span>, <span class="dt">height =</span> <span class="dv">512</span>,</span>
<span id="cb4-22">  <span class="dt">delay =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">10</span></span>
<span id="cb4-23">)</span>
<span id="cb4-24"><span class="kw">file.remove</span>(pngFiles)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cyclide_constantSpeed.gif"
          style="width: 40%"
        />
      </p>
      <p>
        If you want to play with this stuff, you can change the parameters of
        the satellite curve to get a different motion, and also change the
        <code>tcb</code> argument in the <code>KochanekBartels</code> function
        (tension, continuity, bias). There is a Shiny application in
        <strong>qsplines</strong> allowing to visualize the effects of
        <code>tcb</code>.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 27 Feb 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/constantSpeedAnimation.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Mapping a square to a circle</title>
      <link>https://laustep.github.io/stlahblog/posts/square2circle.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Denoting by <span class="math inline">\(F(z \,|\, m)\)</span> the
        incomplete elliptic function of first kind, the function
        <span class="math display"
          >\[ \varphi(z) = -\sqrt{i} \, F\bigl(i \sinh^{-1}(\sqrt{i} \, z) \,|\,
          -1 \bigr). \]</span
        >
        is a conformal mapping from the square
        <span class="math inline">\([-1,1] \times [-1,1]\)</span> to a centered
        circle. I learnt that
        <a href="https://math.stackexchange.com/a/3159827/38217">here</a>.
      </p>
      <p>
        Then, if one has a square image, we can transform it to a circular image
        with the help of this function
        <span class="math inline">\(\varphi\)</span>. I will give an example.
      </p>
      <p>
        One can use instead the function
        <span class="math inline">\(\psi(z) = \varphi(z)/\varphi(1)\)</span> to
        get a conformal mapping from this square to the unit circle. I will use
        this one. And I will call this square the unit square.
      </p>
      <p>
        First, let’s plot a beautiful complex function on a square. I take the
        Weierstrass zeta function.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(jacobi)     <span class="co"># to get the `wzeta` function</span></span>
<span id="cb1-2"><span class="kw">library</span>(RcppColors) <span class="co"># to get the `colorMap1` function</span></span>
<span id="cb1-3"><span class="co"># vectorize a Weierstrass zeta function</span></span>
<span id="cb1-4">f &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(x, y){</span>
<span id="cb1-5">  z &lt;-<span class="st"> </span><span class="kw">complex</span>(<span class="dt">real =</span> x, <span class="dt">imaginary =</span> y)</span>
<span id="cb1-6">  <span class="kw">wzeta</span>(w, <span class="dt">omega =</span> <span class="kw">c</span>(<span class="dv">1</span><span class="op">/</span><span class="dv">2</span>, 1i<span class="op">/</span><span class="dv">2</span>))</span>
<span id="cb1-7">})</span>
<span id="cb1-8"><span class="co"># compute it on a 2-dimensional grid</span></span>
<span id="cb1-9">x_ &lt;-<span class="st"> </span>y_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">1.5</span>, <span class="fl">1.5</span>, <span class="dt">length.out =</span> 512L)</span>
<span id="cb1-10">ZETA &lt;-<span class="st"> </span><span class="kw">outer</span>(x_, y_, f)</span>
<span id="cb1-11"><span class="co"># map this complex matrix to a matrix of colors</span></span>
<span id="cb1-12">img &lt;-<span class="st"> </span><span class="kw">colorMap1</span>(ZETA)</span>
<span id="cb1-13"><span class="co"># background color for the plot (only appears in R)</span></span>
<span id="cb1-14">bkgcol &lt;-<span class="st"> </span><span class="kw">rgb</span>(<span class="dv">21</span>, <span class="dv">25</span>, <span class="dv">30</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb1-15"><span class="co"># plot</span></span>
<span id="cb1-16">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>), <span class="dt">bg =</span> bkgcol)</span>
<span id="cb1-17"><span class="kw">plot</span>(<span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="dt">type =</span> <span class="st">"n"</span>, <span class="dt">asp =</span> <span class="dv">1</span>, </span>
<span id="cb1-18">     <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xaxs =</span> <span class="st">"i"</span>, <span class="dt">yaxs =</span> <span class="st">"i"</span>)</span>
<span id="cb1-19"><span class="kw">rasterImage</span>(img, <span class="dv">-100</span>, <span class="dv">-100</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb1-20"><span class="kw">par</span>(opar)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/zetaw_square.png"
          style="width: 40%"
        />
      </p>
      <p>I hope you like it. Now we will map this image to a circle.</p>
      <p>
        We firstly compute the values of
        <span class="math inline">\(\psi\)</span> on a grid of the unit square:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(Carlson) <span class="co"># to get the `elliptic_F` function</span></span>
<span id="cb2-2"><span class="co"># define the `psi` function</span></span>
<span id="cb2-3">w &lt;-<span class="st"> </span><span class="kw">sqrt</span>(1i)</span>
<span id="cb2-4">D &lt;-<span class="st"> </span><span class="kw">elliptic_F</span>(1i <span class="op">*</span><span class="st"> </span><span class="kw">asinh</span>(w), <span class="dv">-1</span>)</span>
<span id="cb2-5">psi &lt;-<span class="st"> </span><span class="cf">function</span>(x, y) { <span class="co"># maps the unit square to the unit circle</span></span>
<span id="cb2-6">  z &lt;-<span class="st"> </span><span class="kw">complex</span>(<span class="dt">real =</span> x, <span class="dt">imaginary =</span> y)</span>
<span id="cb2-7">  <span class="kw">elliptic_F</span>(1i <span class="op">*</span><span class="st"> </span><span class="kw">asinh</span>(w <span class="op">*</span><span class="st"> </span>z), <span class="dv">-1</span>, <span class="dt">minerror =</span> <span class="fl">1e-10</span>) <span class="op">/</span><span class="st"> </span>D</span>
<span id="cb2-8">}</span>
<span id="cb2-9"><span class="co"># compute this function on a grid of the unit square</span></span>
<span id="cb2-10">n &lt;-<span class="st"> </span>512L</span>
<span id="cb2-11">PSI &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_complex_</span>, <span class="dt">nrow =</span> n, <span class="dt">ncol =</span> n)</span>
<span id="cb2-12"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>n) {</span>
<span id="cb2-13">  x &lt;-<span class="st"> </span><span class="dv">-1</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span> <span class="op">*</span><span class="st"> </span>(i<span class="dv">-1</span>) <span class="op">/</span><span class="st"> </span>(n<span class="dv">-1</span>)</span>
<span id="cb2-14">  <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>n) {</span>
<span id="cb2-15">    y &lt;-<span class="st"> </span><span class="dv">-1</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span> <span class="op">*</span><span class="st"> </span>(j<span class="dv">-1</span>) <span class="op">/</span><span class="st"> </span>(n<span class="dv">-1</span>)</span>
<span id="cb2-16">    PSI[i, j] &lt;-<span class="st"> </span><span class="kw">psi</span>(x, y)</span>
<span id="cb2-17">  }</span>
<span id="cb2-18">}</span></code></pre>
      </div>
      <p>
        We will need to interpolate the values of the Weierstrass zeta function
        stored in the <code>ZETA</code> matrix. To do so, we introduce two
        functions, one to interpolate the real parts, the other one to
        interpolate the imaginary parts:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(cooltools) <span class="co"># to get the `approxfun2` function</span></span>
<span id="cb3-2">x_ &lt;-<span class="st"> </span>y_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>, <span class="dt">length.out =</span> n)</span>
<span id="cb3-3">f_re &lt;-<span class="st"> </span><span class="kw">approxfun2</span>(x_, y_, <span class="kw">Re</span>(ZETA))</span>
<span id="cb3-4">f_im &lt;-<span class="st"> </span><span class="kw">approxfun2</span>(x_, y_, <span class="kw">Im</span>(ZETA))</span></code></pre>
      </div>
      <p>
        Note that these two functions are defined on the unit square. And the
        <strong>cooltools</strong> package is indeed cool.
      </p>
      <p>
        Now it’s easy. With the help of these two functions, we map the values
        of <span class="math inline">\(\psi\)</span> that we stored in the
        <code>PSI</code> matrix:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">M_re &lt;-<span class="st"> </span><span class="kw">f_re</span>(<span class="kw">Re</span>(PSI), <span class="kw">Im</span>(PSI))</span>
<span id="cb4-2">M_im &lt;-<span class="st"> </span><span class="kw">f_im</span>(<span class="kw">Re</span>(PSI), <span class="kw">Im</span>(PSI))</span>
<span id="cb4-3">ZETA_CIRCLE &lt;-<span class="st"> </span><span class="kw">complex</span>(<span class="dt">real =</span> M_re, <span class="dt">imaginary =</span> M_im)</span>
<span id="cb4-4"><span class="kw">dim</span>(ZETA_CIRCLE) &lt;-<span class="st"> </span><span class="kw">c</span>(n, n)</span></code></pre>
      </div>
      <p>
        Now we transform this complex matrix to a matrix of colors, and we plot
        it:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="co"># map the complex matrix to a matrix of colors</span></span>
<span id="cb5-2">img &lt;-<span class="st"> </span><span class="kw">colorMap1</span>(ZETA_CIRCLE)</span>
<span id="cb5-3"><span class="co"># plot</span></span>
<span id="cb5-4">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>), <span class="dt">bg =</span> bkgcol)</span>
<span id="cb5-5"><span class="kw">plot</span>(<span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="dt">type =</span> <span class="st">"n"</span>, <span class="dt">asp =</span> <span class="dv">1</span>, </span>
<span id="cb5-6">     <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xaxs =</span> <span class="st">"i"</span>, <span class="dt">yaxs =</span> <span class="st">"i"</span>)</span>
<span id="cb5-7"><span class="kw">rasterImage</span>(img, <span class="dv">-100</span>, <span class="dv">-100</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb5-8"><span class="kw">par</span>(opar)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/zetaw_circle.png"
          style="width: 40%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 25 Feb 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/square2circle.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The plasma effect: correction</title>
      <link>https://laustep.github.io/stlahblog/posts/plasmaFourier2.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        There’s a kind of error in
        <a href="https://laustep.github.io/stlahblog/posts/plasmaFourier.html"
          >the previous post</a
        >. In this formula:
        <span class="math display"
          >\[ \exp\Bigl(-\frac{{(i/n-0.5)}^2 + {(j/n-0.5)}^2}{0.025^2} \Bigr),
          \]</span
        >
        the indices <span class="math inline">\(i\)</span> and
        <span class="math inline">\(j\)</span> should range from
        <span class="math inline">\(0\)</span> to
        <span class="math inline">\(n\)</span>, and
        <span class="math inline">\(n\)</span> must be even in order to get
        something centered. See the corrected code for details:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">fplasma4 &lt;-<span class="st"> </span><span class="cf">function</span>(<span class="dt">n =</span> 400L, <span class="dt">gaussianMean =</span> <span class="dv">-50</span>, <span class="dt">gaussianSD =</span> <span class="dv">5</span>) {</span>
<span id="cb1-2">  n &lt;-<span class="st"> </span>n <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb1-3">  M &lt;-<span class="st"> </span><span class="kw">matrix</span>(</span>
<span id="cb1-4">    <span class="kw">rnorm</span>(n<span class="op">*</span>n, gaussianMean, gaussianSD), </span>
<span id="cb1-5">    <span class="dt">nrow =</span> n, <span class="dt">ncol =</span> n</span>
<span id="cb1-6">  )</span>
<span id="cb1-7">  FT &lt;-<span class="st"> </span><span class="kw">dft</span>(M)</span>
<span id="cb1-8">  n &lt;-<span class="st"> </span>n <span class="op">-</span><span class="st"> </span>1L</span>
<span id="cb1-9">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq</span>(n<span class="op">+</span>1L)) {</span>
<span id="cb1-10">    <span class="cf">for</span>(j <span class="cf">in</span> <span class="kw">seq</span>(n<span class="op">+</span>1L)) {</span>
<span id="cb1-11">      FT[i, j] &lt;-<span class="st"> </span>FT[i, j] <span class="op">*</span><span class="st"> </span></span>
<span id="cb1-12"><span class="st">        </span><span class="kw">exp</span>(<span class="op">-</span>(((i<span class="op">-</span>1L)<span class="op">/</span>n <span class="op">-</span><span class="st"> </span><span class="fl">0.5</span>)<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>((j<span class="op">-</span>1L)<span class="op">/</span>n <span class="op">-</span><span class="st"> </span><span class="fl">0.5</span>)<span class="op">^</span><span class="dv">2</span>) <span class="op">/</span><span class="st"> </span><span class="fl">0.025</span><span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb1-13">    }</span>
<span id="cb1-14">  }</span>
<span id="cb1-15">  IFT &lt;-<span class="st"> </span><span class="kw">dft</span>(FT, <span class="dt">inverse =</span> <span class="ot">TRUE</span>)</span>
<span id="cb1-16">  <span class="kw">colorMap1</span>(IFT, <span class="dt">reverse =</span> <span class="kw">c</span>(<span class="ot">FALSE</span>, <span class="ot">FALSE</span>, <span class="ot">TRUE</span>))</span>
<span id="cb1-17">}</span></code></pre>
      </div>
      <p>
        The funny point is that the result is more interesting with the “error”.
        But it is not bad without it:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/plasmaFourier_fixed.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 11 Feb 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/plasmaFourier2.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>A (kind of) plasma effect in R</title>
      <link>https://laustep.github.io/stlahblog/posts/plasmaFourier.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>I found such an algorithm on Paul Bourke’s website:</p>
      <ul>
        <li>
          <p>
            take a random matrix <span class="math inline">\(M\)</span> of size
            <span class="math inline">\(n \times n\)</span> (we’ll take
            <span class="math inline">\(n=400\)</span>), real or complex;
          </p>
        </li>
        <li>
          <p>
            compute the discrete Fourier transform of
            <span class="math inline">\(M\)</span>, this gives a complex matrix
            <span class="math inline">\(FT\)</span> of size
            <span class="math inline">\(n \times n\)</span>;
          </p>
        </li>
        <li>
          <p>
            for each pair <span class="math inline">\((i,j)\)</span> of indices,
            multiply the entry <span class="math inline">\(FT_{ij}\)</span> of
            <span class="math inline">\(FT\)</span> by<br /><span
              class="math display"
              >\[ \exp\Bigl(-\frac{{(i/n-0.5)}^2 + {(j/n-0.5)}^2}{0.025^2}
              \Bigr); \]</span
            >
          </p>
        </li>
        <li>
          <p>
            finally, take the inverse discrete Fourier transform of the obtained
            matrix, and map the resulting matrix to an image by associating a
            color to each complex number.
          </p>
        </li>
      </ul>
      <p>Here is some code producing the above algorithm:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(cooltools)  <span class="co"># for the dft() function (discrete Fourier transform)</span></span>
<span id="cb1-2"><span class="kw">library</span>(RcppColors) <span class="co"># for the colorMap1() function</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">fplasma1 &lt;-<span class="st"> </span><span class="cf">function</span>(<span class="dt">n =</span> 400L, <span class="dt">gaussianMean =</span> <span class="dv">-50</span>, <span class="dt">gaussianSD =</span> <span class="dv">5</span>) {</span>
<span id="cb1-5">  M &lt;-<span class="st"> </span><span class="kw">matrix</span>(</span>
<span id="cb1-6">    <span class="kw">rnorm</span>(n<span class="op">*</span>n, gaussianMean, gaussianSD), </span>
<span id="cb1-7">    <span class="dt">nrow =</span> n, <span class="dt">ncol =</span> n</span>
<span id="cb1-8">  )</span>
<span id="cb1-9">  FT &lt;-<span class="st"> </span><span class="kw">dft</span>(M)</span>
<span id="cb1-10">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq</span>(n)) {</span>
<span id="cb1-11">    <span class="cf">for</span>(j <span class="cf">in</span> <span class="kw">seq</span>(n)) {</span>
<span id="cb1-12">      FT[i, j] &lt;-<span class="st"> </span>FT[i, j] <span class="op">*</span><span class="st"> </span></span>
<span id="cb1-13"><span class="st">        </span><span class="kw">exp</span>(<span class="op">-</span>((i<span class="op">/</span>n <span class="op">-</span><span class="st"> </span><span class="fl">0.5</span>)<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>(j<span class="op">/</span>n <span class="op">-</span><span class="st"> </span><span class="fl">0.5</span>)<span class="op">^</span><span class="dv">2</span>) <span class="op">/</span><span class="st"> </span><span class="fl">0.025</span><span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb1-14">    }</span>
<span id="cb1-15">  }</span>
<span id="cb1-16">  IFT &lt;-<span class="st"> </span><span class="kw">dft</span>(FT, <span class="dt">inverse =</span> <span class="ot">TRUE</span>)</span>
<span id="cb1-17">  <span class="kw">colorMap1</span>(IFT, <span class="dt">reverse =</span> <span class="kw">c</span>(<span class="ot">FALSE</span>, <span class="ot">FALSE</span>, <span class="ot">TRUE</span>))</span>
<span id="cb1-18">}</span></code></pre>
      </div>
      <p>Let’s see a first image:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">img &lt;-<span class="st"> </span><span class="kw">fplasma1</span>()</span>
<span id="cb2-2">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>))</span>
<span id="cb2-3"><span class="kw">plot</span>(</span>
<span id="cb2-4">  <span class="ot">NULL</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>), <span class="dt">asp =</span> <span class="dv">1</span>, </span>
<span id="cb2-5">  <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xaxs =</span> <span class="st">"i"</span>, <span class="dt">yaxs =</span> <span class="st">"i"</span></span>
<span id="cb2-6">)</span>
<span id="cb2-7"><span class="kw">rasterImage</span>(img, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">1</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/plasmaFourier_fig1-1.png"
          width="50%"
          style="display: block; margin: auto"
        />
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">par</span>(opar)</span></code></pre>
      </div>
      <p>And more images:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/plasmaFourier_fourfigs-1.png"
          width="50%"
          style="display: block; margin: auto"
        />
      </p>
      <p>You can play with the parameters to obtain something different.</p>
      <p>
        Below I take the first image and I alter the colors by exchanging the
        green part with the blue part and then by darkening:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(colorspace) <span class="co"># for the darken() function</span></span>
<span id="cb4-2">alterColor &lt;-<span class="st"> </span><span class="cf">function</span>(col) {</span>
<span id="cb4-3">  RGB &lt;-<span class="st"> </span><span class="kw">col2rgb</span>(col)</span>
<span id="cb4-4">  <span class="kw">darken</span>(</span>
<span id="cb4-5">    <span class="kw">rgb</span>(RGB[<span class="dv">1</span>, ], RGB[<span class="dv">3</span>, ], RGB[<span class="dv">2</span>, ], <span class="dt">maxColorValue =</span> <span class="dv">255</span>),</span>
<span id="cb4-6">    <span class="dt">amount =</span> <span class="fl">0.5</span></span>
<span id="cb4-7">  )</span>
<span id="cb4-8">}</span>
<span id="cb4-9"></span>
<span id="cb4-10">img      &lt;-<span class="st"> </span><span class="kw">alterColor</span>(img)</span>
<span id="cb4-11"><span class="kw">dim</span>(img) &lt;-<span class="st"> </span><span class="kw">c</span>(400L, 400L)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/plasmaFourier_camouflage-1.png"
          width="50%"
          style="display: block; margin: auto"
        />
      </p>
      <p>Looks like a camouflage.</p>
      <p>
        Note that the images are doubly periodic, so you can map them to a
        torus.
      </p>
      <p>
        Now let’s do an animation. The <code>fplasma2</code> function below does
        the same thing as <code>fplasma1</code> after adding a number to the
        matrix <span class="math inline">\(M\)</span>, which will range from
        <span class="math inline">\(-1\)</span> to
        <span class="math inline">\(1\)</span>.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">fplasma2 &lt;-<span class="st"> </span><span class="cf">function</span>(M, t) {</span>
<span id="cb5-2">  M &lt;-<span class="st"> </span>M <span class="op">+</span><span class="st"> </span><span class="kw">sinpi</span>(t <span class="op">/</span><span class="st"> </span><span class="dv">64</span>) <span class="co"># t will run from 1 to 128</span></span>
<span id="cb5-3">  FT &lt;-<span class="st"> </span><span class="kw">dft</span>(M)</span>
<span id="cb5-4">  n &lt;-<span class="st"> </span><span class="kw">nrow</span>(M)</span>
<span id="cb5-5">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq</span>(n)) {</span>
<span id="cb5-6">    <span class="cf">for</span>(j <span class="cf">in</span> <span class="kw">seq</span>(n)) {</span>
<span id="cb5-7">      FT[i, j] &lt;-<span class="st"> </span>FT[i, j] <span class="op">*</span><span class="st"> </span></span>
<span id="cb5-8"><span class="st">        </span><span class="kw">exp</span>(<span class="op">-</span>((i<span class="op">/</span>n <span class="op">-</span><span class="st"> </span><span class="fl">0.5</span>)<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>(j<span class="op">/</span>n <span class="op">-</span><span class="st"> </span><span class="fl">0.5</span>)<span class="op">^</span><span class="dv">2</span>) <span class="op">/</span><span class="st"> </span><span class="fl">0.025</span><span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb5-9">    }</span>
<span id="cb5-10">  }</span>
<span id="cb5-11">  IFT &lt;-<span class="st"> </span><span class="kw">dft</span>(FT, <span class="dt">inverse =</span> <span class="ot">TRUE</span>)</span>
<span id="cb5-12">  <span class="kw">colorMap1</span>(IFT, <span class="dt">reverse =</span> <span class="kw">c</span>(<span class="ot">FALSE</span>, <span class="ot">FALSE</span>, <span class="ot">TRUE</span>))</span>
<span id="cb5-13">}</span></code></pre>
      </div>
      <p>Here is how to use this function to make an animation:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">n &lt;-<span class="st"> </span>400L</span>
<span id="cb6-2">M &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="kw">rnorm</span>(n<span class="op">*</span>n, <span class="dv">-50</span>, <span class="dv">5</span>), <span class="dt">nrow =</span> n, <span class="dt">ncol =</span> n)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="cf">for</span>(t <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="dv">128</span>) {</span>
<span id="cb6-5">  img &lt;-<span class="st"> </span><span class="kw">fplasma2</span>(M, t)</span>
<span id="cb6-6">  fl &lt;-<span class="st"> </span><span class="kw">sprintf</span>(<span class="st">"img%03d.png"</span>, t)</span>
<span id="cb6-7">  <span class="kw">png</span>(<span class="dt">file =</span> fl, <span class="dt">width =</span> <span class="dv">400</span>, <span class="dt">height =</span> <span class="dv">400</span>)</span>
<span id="cb6-8">  <span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>))</span>
<span id="cb6-9">  <span class="kw">plot</span>(</span>
<span id="cb6-10">    <span class="ot">NULL</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>), <span class="dt">asp =</span> <span class="dv">1</span>,</span>
<span id="cb6-11">    <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xaxs =</span> <span class="st">"i"</span>, <span class="dt">yaxs =</span> <span class="st">"i"</span></span>
<span id="cb6-12">  )</span>
<span id="cb6-13">  <span class="kw">rasterImage</span>(img, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">1</span>)</span>
<span id="cb6-14">  <span class="kw">dev.off</span>()</span>
<span id="cb6-15">}</span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="kw">library</span>(gifski)</span>
<span id="cb6-18">pngFiles &lt;-<span class="st"> </span><span class="kw">Sys.glob</span>(<span class="st">"img*.png"</span>)</span>
<span id="cb6-19"><span class="kw">gifski</span>(</span>
<span id="cb6-20">  <span class="dt">png_files =</span> pngFiles,</span>
<span id="cb6-21">  <span class="dt">gif_file  =</span> <span class="st">"plasmaFourier_anim1.gif"</span>,</span>
<span id="cb6-22">  <span class="dt">width =</span> <span class="dv">400</span>, <span class="dt">height =</span> <span class="dv">400</span>,</span>
<span id="cb6-23">  <span class="dt">delay  =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">10</span></span>
<span id="cb6-24">)</span>
<span id="cb6-25"><span class="kw">file.remove</span>(pngFiles)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/plasmaFourier_anim1.gif"
        />
      </p>
      <p>
        Observe the black and blue background: it does not move. If instead of
        adding a number in the interval
        <span class="math inline">\([-1, 1]\)</span>, we add a number in the
        complex interval <span class="math inline">\([-i, i]\)</span>, then we
        observe the opposite behavior:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1">fplasma3 &lt;-<span class="st"> </span><span class="cf">function</span>(M, t) {</span>
<span id="cb7-2">  M &lt;-<span class="st"> </span>M <span class="op">+</span><span class="st"> </span>1i <span class="op">*</span><span class="st"> </span><span class="kw">sinpi</span>(t <span class="op">/</span><span class="st"> </span><span class="dv">64</span>) <span class="co"># t will run from 1 to 128</span></span>
<span id="cb7-3">  FT &lt;-<span class="st"> </span><span class="kw">dft</span>(M)</span>
<span id="cb7-4">  n &lt;-<span class="st"> </span><span class="kw">nrow</span>(M)</span>
<span id="cb7-5">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq</span>(n)) {</span>
<span id="cb7-6">    <span class="cf">for</span>(j <span class="cf">in</span> <span class="kw">seq</span>(n)) {</span>
<span id="cb7-7">      FT[i, j] &lt;-<span class="st"> </span>FT[i, j] <span class="op">*</span><span class="st"> </span></span>
<span id="cb7-8"><span class="st">        </span><span class="kw">exp</span>(<span class="op">-</span>((i<span class="op">/</span>n <span class="op">-</span><span class="st"> </span><span class="fl">0.5</span>)<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>(j<span class="op">/</span>n <span class="op">-</span><span class="st"> </span><span class="fl">0.5</span>)<span class="op">^</span><span class="dv">2</span>) <span class="op">/</span><span class="st"> </span><span class="fl">0.025</span><span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb7-9">    }</span>
<span id="cb7-10">  }</span>
<span id="cb7-11">  IFT &lt;-<span class="st"> </span><span class="kw">dft</span>(FT, <span class="dt">inverse =</span> <span class="ot">TRUE</span>)</span>
<span id="cb7-12">  <span class="kw">colorMap1</span>(IFT, <span class="dt">reverse =</span> <span class="kw">c</span>(<span class="ot">FALSE</span>, <span class="ot">FALSE</span>, <span class="ot">TRUE</span>))</span>
<span id="cb7-13">}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/plasmaFourier_anim2.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 10 Feb 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/plasmaFourier.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The Mandelbulb in R</title>
      <link>https://laustep.github.io/stlahblog/posts/mandelbulb.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In this post, I provide some R code which generates a mesh of the
        Mandelbulb, a well-known 3D fractal.
      </p>
      <p>
        The Mandelbulb is an isosurface, and I use the
        <strong>rmarchingcubes</strong> package to get a mesh of this
        isosurface. Since the Mandelbulb has many details, a thin grid of the
        voxel space is necessary, and that is why I use <strong>Rcpp</strong> to
        generate the voxel. Here is the C++ code:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode cpp"
        ><code class="sourceCode cpp"><span id="cb1-1"><span class="co">// file mandelbulb.cpp</span></span>
<span id="cb1-2"><span class="pp">#include </span><span class="im">&lt;Rcpp.h&gt;</span></span>
<span id="cb1-3"><span class="kw">using</span> <span class="kw">namespace</span> Rcpp;</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="dt">double</span> mandelbulb0(</span>
<span id="cb1-6">  <span class="dt">double</span> x, <span class="dt">double</span> y, <span class="dt">double</span> z, <span class="at">const</span> <span class="dt">unsigned</span> power, <span class="at">const</span> <span class="dt">double</span> phase</span>
<span id="cb1-7">) {</span>
<span id="cb1-8">  <span class="at">const</span> <span class="dt">double</span> x0 = x;</span>
<span id="cb1-9">  <span class="at">const</span> <span class="dt">double</span> y0 = y;</span>
<span id="cb1-10">  <span class="at">const</span> <span class="dt">double</span> z0 = z;</span>
<span id="cb1-11">  <span class="at">const</span> <span class="dt">double</span> k = power;</span>
<span id="cb1-12">  <span class="dt">double</span> r, rkm1, rk, theta, phi;</span>
<span id="cb1-13">  <span class="dt">double</span> dr = <span class="fl">1.0</span>;</span>
<span id="cb1-14">  <span class="dt">int</span> i;</span>
<span id="cb1-15">  <span class="cf">for</span>(i = <span class="dv">0</span>; i &lt; <span class="dv">10</span>; i++) {</span>
<span id="cb1-16">    r = sqrt(x*x + y*y + z*z);</span>
<span id="cb1-17">    <span class="cf">if</span>(r &gt; <span class="dv">2</span>) {</span>
<span id="cb1-18">      <span class="cf">return</span> <span class="fl">2.0</span> * r * log(r) / dr;</span>
<span id="cb1-19">    }</span>
<span id="cb1-20">    rkm1 = pow(r, k - <span class="fl">1.0</span>);</span>
<span id="cb1-21">    dr = k * rkm1 * dr + <span class="fl">1.0</span>;</span>
<span id="cb1-22">    theta = k * atan2(sqrt(x*x + y*y), z) + phase;</span>
<span id="cb1-23">    phi   = k * atan2(y, x);</span>
<span id="cb1-24">    rk = rkm1 * r;</span>
<span id="cb1-25">    x = rk * cos(phi) * sin(theta) + x0;</span>
<span id="cb1-26">    y = rk * sin(phi) * sin(theta) + y0;</span>
<span id="cb1-27">    z = rk * cos(theta) + z0;</span>
<span id="cb1-28">  }</span>
<span id="cb1-29">  <span class="cf">return</span> <span class="fl">0.0</span>;</span>
<span id="cb1-30">}</span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="co">// [[Rcpp::export]]</span></span>
<span id="cb1-33">NumericVector mandelbulb(</span>
<span id="cb1-34">  <span class="at">const</span> <span class="dt">double</span> m, <span class="at">const</span> <span class="dt">double</span> M, <span class="at">const</span> <span class="dt">unsigned</span> n, </span>
<span id="cb1-35">  <span class="at">const</span> <span class="dt">unsigned</span> power, <span class="at">const</span> <span class="dt">double</span> phase</span>
<span id="cb1-36">) {</span>
<span id="cb1-37">  NumericVector out(n * n * n);</span>
<span id="cb1-38">  <span class="at">const</span> <span class="dt">double</span> h = (M - m) / (n - <span class="dv">1</span>);</span>
<span id="cb1-39">  <span class="dt">double</span> x, y, z;</span>
<span id="cb1-40">  <span class="dt">unsigned</span> i, j, k;</span>
<span id="cb1-41">  <span class="dt">unsigned</span> l = <span class="dv">0</span>;</span>
<span id="cb1-42">  <span class="cf">for</span>(i = <span class="dv">0</span>; i &lt; n; i++) {</span>
<span id="cb1-43">    x = m + i*h;</span>
<span id="cb1-44">    <span class="cf">for</span>(j = <span class="dv">0</span>; j &lt; n; j++) {</span>
<span id="cb1-45">      y = m + j*h;</span>
<span id="cb1-46">      <span class="cf">for</span>(k = <span class="dv">0</span>; k &lt; n; k++) {</span>
<span id="cb1-47">        z = m + k*h;</span>
<span id="cb1-48">        out(l) = mandelbulb0(x, y, z, power, phase);</span>
<span id="cb1-49">        l++;</span>
<span id="cb1-50">      }</span>
<span id="cb1-51">    }</span>
<span id="cb1-52">  }</span>
<span id="cb1-53">  out.attr(<span class="st">"dim"</span>) = Dimension(n, n, n);</span>
<span id="cb1-54">  <span class="cf">return</span> out;</span>
<span id="cb1-55">}</span></code></pre>
      </div>
      <p>
        In fact, there are several Mandelbulb, each corresponding to a value of
        the <code>power</code> argument in the above code. The most popular one
        is the one with <code>power=8</code>. At the end of this post, I’ll show
        you the effect of the <code>phase</code> argument.
      </p>
      <p>Now here is the R code which generates the mesh:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">Rcpp<span class="op">::</span><span class="kw">sourceCpp</span>(<span class="st">"mandelbulb.cpp"</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw">library</span>(rmarchingcubes)</span>
<span id="cb2-4"><span class="kw">library</span>(rgl)</span>
<span id="cb2-5"></span>
<span id="cb2-6">n &lt;-<span class="st"> </span>512L <span class="co"># more than enough</span></span>
<span id="cb2-7">x &lt;-<span class="st"> </span>y &lt;-<span class="st"> </span>z &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">1.2</span>, <span class="fl">1.2</span>, <span class="dt">length.out =</span> n)</span>
<span id="cb2-8"></span>
<span id="cb2-9">voxel &lt;-<span class="st"> </span><span class="kw">mandelbulb</span>(<span class="op">-</span><span class="fl">1.2</span>, <span class="fl">1.2</span>, n, 8L, <span class="dv">0</span>)</span>
<span id="cb2-10">ctr   &lt;-<span class="st"> </span><span class="kw">contour3d</span>(voxel, <span class="dt">level =</span> <span class="fl">0.01</span>, <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z)</span>
<span id="cb2-11"></span>
<span id="cb2-12">mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb2-13">  <span class="dt">vertices =</span> <span class="kw">t</span>(ctr[[<span class="st">"vertices"</span>]]),</span>
<span id="cb2-14">  <span class="dt">indices  =</span> <span class="kw">t</span>(ctr[[<span class="st">"triangles"</span>]]),</span>
<span id="cb2-15">  <span class="dt">normals  =</span> ctr[[<span class="st">"normals"</span>]],</span>
<span id="cb2-16">  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb2-17">)</span></code></pre>
      </div>
      <p>
        This mesh can be plotted with <strong>rgl</strong>. But let’s add some
        color before. I like the ‘klingon’ color palette of the
        <strong>trekcolors</strong> package.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(trekcolors)</span>
<span id="cb3-2">fpalette &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(<span class="kw">trek_pal</span>(<span class="st">"klingon"</span>, <span class="dt">reverse =</span> <span class="ot">TRUE</span>))</span>
<span id="cb3-3">d2 &lt;-<span class="st"> </span><span class="kw">apply</span>(mesh[[<span class="st">"vb"</span>]][<span class="op">-</span>4L, ], 2L, crossprod)</span>
<span id="cb3-4">d2 &lt;-<span class="st"> </span>(d2 <span class="op">-</span><span class="st"> </span><span class="kw">min</span>(d2)) <span class="op">/</span><span class="st"> </span><span class="kw">diff</span>(<span class="kw">range</span>(d2))</span>
<span id="cb3-5">RGB &lt;-<span class="st"> </span><span class="kw">fpalette</span>(d2)</span>
<span id="cb3-6">mesh[[<span class="st">"material"</span>]] &lt;-<span class="st"> </span><span class="kw">list</span>(</span>
<span id="cb3-7">  <span class="st">"color"</span> =<span class="st"> </span><span class="kw">rgb</span>(RGB[, 1L], RGB[, 2L], RGB[, 3L], <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb3-8">)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb3-11"><span class="kw">shade3d</span>(mesh, <span class="dt">shininess =</span> <span class="dv">128</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/mandelbulb1.gif"
          style="width: 45%"
        />
      </p>
      <p>
        The animation below shows the effect of the <code>phase</code> argument,
        varying from <span class="math inline">\(0\)</span> to
        <span class="math inline">\(2\pi\)</span>:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/mandelbulb2.gif"
          style="width: 45%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 08 Feb 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/mandelbulb.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Passing a function from R to C++</title>
      <link>https://laustep.github.io/stlahblog/posts/functionParser.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        The <code>algebraicMesh</code> function of my package
        <a href="https://github.com/stla/cgalMeshes"
          ><strong>cgalMeshes</strong></a
        >
        takes as inputs a trivariate polynomial
        <span class="math inline">\(P(x,y,z)\)</span>, a number
        <span class="math inline">\(\ell\)</span> and some other parameters, and
        it returns a mesh of the isosurface defined by
        <span class="math inline">\(P(x,y,z) = \ell\)</span>. The computation of
        this mesh is done in C++ with the help of the
        <strong>Rcpp</strong> package and the <strong>CGAL</strong> library.
      </p>
      <p>
        Each term of the polynomial is represented by a number, its coefficient,
        and a vector of three integers, the exponents of the three variables. So
        there is no difficulty to pass this polynomial from R to C++ with
        <strong>Rcpp</strong>.
      </p>
      <p>
        I was wondering how one could pass the body of an arbitrary function
        <span class="math inline">\(f(x,y,z)\)</span> from R to C++, and not
        only a polynomial, to compute a mesh of an isosurface
        <span class="math inline">\(f(x,y,z) = \ell\)</span>. I mean a simple
        function, whose body is given by an elementary mathematical expression.
        I know it is possible to pass a R function with <strong>Rcpp</strong>,
        as explained in the quick reference guide, but the evaluation of this
        function is not efficient enough for this situation.
      </p>
      <p>
        Then I googled, and I discovered the C++ library
        <a href="http://warp.povusers.org/FunctionParser/"
          ><strong>Function Parser</strong></a
        >, written by Juha Nieminen and Joel Yliluoma. I gave it a try today; it
        works fine and it is easy to use.
      </p>
      <p>
        Here is how to use it with <strong>Rcpp</strong>. First, download the
        <strong>zip</strong> file given in the above link. Unzip it and then, in
        the <strong><em>src</em></strong> folder of your package, put the files
        <strong>fparser.cc</strong>, <strong>fparser.hh</strong>,
        <strong>fpconfig.hh</strong>, <strong>fpoptimizer.cc</strong>, and the
        folder <strong>extrasrc</strong>. Now you’re ready to use
        <strong>Function Parser</strong>. Here is simple example:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode cpp"
        ><code class="sourceCode cpp"><span id="cb1-1"><span class="pp">#include </span><span class="im">&lt;Rcpp.h&gt;</span></span>
<span id="cb1-2"><span class="pp">#include </span><span class="im">"fparser.hh"</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co">// [[Rcpp::export]]</span></span>
<span id="cb1-5"><span class="dt">void</span> helloWorld() {</span>
<span id="cb1-6">  FunctionParser fp;</span>
<span id="cb1-7">  fp.Parse(<span class="st">"sqrt(x*x + y*y)"</span>, <span class="st">"x,y"</span>);</span>
<span id="cb1-8">  <span class="dt">double</span> variables[<span class="dv">2</span>] = { <span class="fl">3.0</span>, <span class="fl">4.0</span> };</span>
<span id="cb1-9">  <span class="dt">double</span> result = fp.Eval(variables);</span>
<span id="cb1-10">  Rcpp::Rcout &lt;&lt; result &lt;&lt; <span class="st">"</span><span class="sc">\n</span><span class="st">"</span>;</span>
<span id="cb1-11">}</span></code></pre>
      </div>
      <p>
        Build the package and run <code>helloWorld()</code> in R. Then
        <code>5</code> will be printed in the console. Of course this example
        has no interest. Here is a more interesting one:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode cpp"
        ><code class="sourceCode cpp"><span id="cb2-1"><span class="co">// [[Rcpp::export]]</span></span>
<span id="cb2-2"><span class="dt">double</span> funeval(</span>
<span id="cb2-3">  <span class="at">const</span> <span class="bu">std::</span>string&amp;        functionBody, </span>
<span id="cb2-4">  <span class="at">const</span> <span class="bu">std::</span>string&amp;        variableNames, </span>
<span id="cb2-5">  <span class="at">const</span> Rcpp::NumericVector variableValues</span>
<span id="cb2-6">) {</span>
<span id="cb2-7">  FunctionParser fp;</span>
<span id="cb2-8">  fp.Parse(functionBody, variableNames);</span>
<span id="cb2-9">  <span class="at">const</span> <span class="dt">int</span> nvariables = variableValues.size();</span>
<span id="cb2-10">  <span class="dt">double</span> values[nvariables];</span>
<span id="cb2-11">  <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; nvariables; i++) {</span>
<span id="cb2-12">    values[i] = variableValues(i);</span>
<span id="cb2-13">  }</span>
<span id="cb2-14">  <span class="at">const</span> <span class="dt">double</span> result = fp.Eval(values);</span>
<span id="cb2-15">  <span class="cf">return</span> result;</span>
<span id="cb2-16">}</span></code></pre>
      </div>
      <p>
        Build and run <code>funeval("sqrt(x*x + y*y)", "x,y", c(3, 4))</code>,
        you’ll get <code>5</code>.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 06 Feb 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/functionParser.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Update of the 'cgalMeshes' package</title>
      <link>https://laustep.github.io/stlahblog/posts/cgalMeshes2.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I made some progress on the <strong>cgalMeshes</strong> package, that I
        introduced
        <a href="https://laustep.github.io/stlahblog/posts/cgalMeshes.html"
          >here</a
        >. The new version is not on CRAN yet.
      </p>
      <p>
        In particular, one can know assign some properties to the meshes (the
        <code>cgalMesh</code> objects). One can assign some face properties:
        colors and scalars, and some vertex properties: colors, scalars, and
        normals. Actually a color can be any character string, but if you really
        set some colors, and you write the mesh to a file, then you’ll retrieve
        the colors in this file. Some of these properties are preserved by
        certain operations on the mesh. For example, all properties are
        preserved when one splits a mesh into connected components. This was my
        original motivation by the way, more precisely I wanted to retrieve the
        normals of the mesh in its connected components, because I had a mesh
        made with the <strong>rmarchingcubes</strong> package and then it had
        very good normals (the normals returned by the
        <strong>rmarchingcubes</strong> package are obtained by an approximation
        of the gradient of the function defining the isosurface). The union of
        two meshes preserves the face properties of the two meshes. This is nice
        when one does not want to lose the colors.
      </p>
      <p>
        Here is a couple of new features. Let’s start by the new methods of the
        <code>cgalMesh</code> objects. The <code>$clip()</code> method now
        returns two meshes: the clipped mesh and the modified clipping mesh (it
        is modified by a corefinement). These two meshes inherit the colors of
        the original meshes. For example, here is the result one obtains by
        clipping a cylinder to another cylinder, and then clipping the resulting
        mesh by a third cylinder, with different colors for the three cylinders:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cgalMeshes_clipCylinders.gif"
          style="width: 50%"
        />
      </p>
      <p>
        See
        <a href="http://paulbourke.net/geometry/cylinders/"
          >this page by Paul Bourke</a
        >
        for more fun with intersecting cylinders. I’ve tried to do something
        similar to the intersection of a bunch of random cylinders but my
        implementation is too time-consuming.
      </p>
      <p>
        The <code>$fillBoundaryHole()</code> method allows to fill the holes of
        a mesh. There’s one option, <code>fair</code>, allowing to request a
        smooth hole filling or a flat hole filling. Here is an example of a
        sphere with a hole, filled with the option <code>fair=TRUE</code> and
        <code>fair=FALSE</code>:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cgalMeshes_holefilling.png"
          style="width: 75%"
        />
      </p>
      <p>
        Also some subdivision and deformation methods are available now. Below
        is a coarse mesh of a Hopf torus and the mesh obtained after two
        iterations of the Loop subdivision:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cgalMeshes_Hopf_LoopSubdiv.png"
          style="width: 65%"
        />
      </p>
      <p>
        Now let’s see some new functions of the package. The
        <code>algebraicMesh()</code> function allows to construct a mesh of an
        algebraic surface, that is to say an isosurface of the form
        <span class="math inline">\(P(x, y, z) = 0\)</span> where
        <span class="math inline">\(P\)</span> is a polynomial. Of course it is
        possible to make an isosurface
        <span class="math inline">\(f(x, y, z) = 0\)</span> where
        <span class="math inline">\(f\)</span> is arbitrary with
        <strong>CGAL</strong> but I don’t know an efficient way to pass a
        function from R to C++. Here is the Barth decic obtained with this
        function:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cgalMeshes_BarthDecic.gif"
          style="width: 50%"
        />
      </p>
      <p>
        The algorithm used by <strong>CGAL</strong> is not the marching cubes
        algorithm. Actually, so far, I didn’t observe any advantage of this
        algorithm as compared to the marching cubes algorithm (if you know such
        an advantage, please leave an
        <a href="https://scicomp.stackexchange.com/q/42410/14840">answer here</a
        >).
      </p>
      <p>
        There is now the <code>convexHull()</code> function in the package, and
        also <code>convexHullsIntersection</code> to (fastly) compute a mesh of
        the intersection of some convex hulls. I used it to get the intersection
        of the
        <a
          href="https://laustep.github.io/stlahblog/posts/tetrahedraCompound.html"
          >compound of five tetrahedra</a
        >:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cgalMeshes_cxhullinter.png"
          style="width: 50%"
        />
      </p>
      <p>
        The <code>sphericalTriangle()</code> function allows to get a mesh of a
        spherical triangle. Here is a spherical icosahedron:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cgalMeshes_sphericalIcosahedron.gif"
          style="width: 50%"
        />
      </p>
      <p>Hopefully the package will pass the CRAN checks.</p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 28 Jan 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/cgalMeshes2.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>More on the 'Reorient' transformation</title>
      <link>https://laustep.github.io/stlahblog/posts/ReorientTransformation2.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I presented the ‘Reorient’ rotation in
        <a
          href="https://laustep.github.io/stlahblog/posts/ReorientTransformation.html"
          >a previous post</a
        >.
      </p>
      <p>I figured out three things:</p>
      <ul>
        <li>
          there’s an easy precise definition of this rotation, that I didn’t
          give;
        </li>
        <li>this rotation has a simple quaternion representation;</li>
        <li>
          this is the rotation I used to construct a mesh of a
          <a href="https://laustep.github.io/stlahblog/posts/rglTorus.html"
            >torus passing through three points</a
          >.
        </li>
      </ul>
      <p>Here is the function returning the matrix of this rotation:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># Cross product of two 3D vectors.</span></span>
<span id="cb1-2">crossProduct &lt;-<span class="st"> </span><span class="cf">function</span>(v, w){</span>
<span id="cb1-3">  <span class="kw">c</span>(</span>
<span id="cb1-4">    v[2L] <span class="op">*</span><span class="st"> </span>w[3L] <span class="op">-</span><span class="st"> </span>v[3L] <span class="op">*</span><span class="st"> </span>w[2L],</span>
<span id="cb1-5">    v[3L] <span class="op">*</span><span class="st"> </span>w[1L] <span class="op">-</span><span class="st"> </span>v[1L] <span class="op">*</span><span class="st"> </span>w[3L],</span>
<span id="cb1-6">    v[1L] <span class="op">*</span><span class="st"> </span>w[2L] <span class="op">-</span><span class="st"> </span>v[2L] <span class="op">*</span><span class="st"> </span>w[1L]</span>
<span id="cb1-7">  )</span>
<span id="cb1-8">}</span>
<span id="cb1-9"><span class="co"># The 'Reorient' rotation matrix. </span></span>
<span id="cb1-10">Reorient_Trans &lt;-<span class="st"> </span><span class="cf">function</span>(Axis1, Axis2){</span>
<span id="cb1-11">  vX1 &lt;-<span class="st"> </span>Axis1 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(Axis1)))</span>
<span id="cb1-12">  vX2 &lt;-<span class="st"> </span>Axis2 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(Axis2)))</span>
<span id="cb1-13">  Y &lt;-<span class="st"> </span><span class="kw">crossProduct</span>(vX1, vX2)</span>
<span id="cb1-14">  vY &lt;-<span class="st"> </span>Y <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(Y)))</span>
<span id="cb1-15">  Z1 &lt;-<span class="st"> </span><span class="kw">crossProduct</span>(vX1, vY)</span>
<span id="cb1-16">  vZ1 &lt;-<span class="st"> </span>Z1 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(Z1)))</span>
<span id="cb1-17">  Z2 &lt;-<span class="st"> </span><span class="kw">crossProduct</span>(vX2, vY)</span>
<span id="cb1-18">  vZ2 &lt;-<span class="st"> </span>Z2 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(Z2)))</span>
<span id="cb1-19">  M1 &lt;-<span class="st"> </span><span class="kw">cbind</span>(vX1, vY, vZ1)</span>
<span id="cb1-20">  M2 &lt;-<span class="st"> </span><span class="kw">rbind</span>(vX2, vY, vZ2)</span>
<span id="cb1-21">  M1 <span class="op">%*%</span><span class="st"> </span>M2</span>
<span id="cb1-22">}</span></code></pre>
      </div>
      <p>
        This rotation sends <code>Axis2</code> to <code>Axis1</code>. Actually
        it would be more natural to take its inverse (whose matrix is obtained
        by transposition) but I used it in the <code>transform3d</code> function
        of the <strong>rgl</strong> package and this function requires the
        inverse of the transformation to be applied (oddly).
      </p>
      <p>Here is how to get its inverse from a quaternion:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(onion)</span>
<span id="cb2-2"><span class="co"># Get a rotation matrix sending `u` to `v`; </span></span>
<span id="cb2-3"><span class="co">#   the vectors `u` and `v` must be normalized.</span></span>
<span id="cb2-4">uvRotation &lt;-<span class="st"> </span><span class="cf">function</span>(u, v) {</span>
<span id="cb2-5">  re &lt;-<span class="st"> </span><span class="kw">sqrt</span>((<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sum</span>(u<span class="op">*</span>v))<span class="op">/</span><span class="dv">2</span>)</span>
<span id="cb2-6">  w &lt;-<span class="st"> </span><span class="kw">crossProduct</span>(u, v) <span class="op">/</span><span class="st"> </span><span class="dv">2</span> <span class="op">/</span><span class="st"> </span>re</span>
<span id="cb2-7">  q &lt;-<span class="st"> </span><span class="kw">as.quaternion</span>(<span class="kw">c</span>(re, w), <span class="dt">single =</span> <span class="ot">TRUE</span>)</span>
<span id="cb2-8">  <span class="kw">as.orthogonal</span>(q) <span class="co"># quaternion to rotation matrix</span></span>
<span id="cb2-9">}</span></code></pre>
      </div>
      <p>
        As you can see, these two rotations indeed are inverse (transpose) of
        each other:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">u &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>)</span>
<span id="cb3-2">v &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>) <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">3</span>)</span>
<span id="cb3-3"><span class="kw">Reorient_Trans</span>(u, v)</span>
<span id="cb3-4"><span class="co">##            [,1]       [,2]       [,3]</span></span>
<span id="cb3-5"><span class="co">## [1,]  0.7886751 -0.2113249 -0.5773503</span></span>
<span id="cb3-6"><span class="co">## [2,] -0.2113249  0.7886751 -0.5773503</span></span>
<span id="cb3-7"><span class="co">## [3,]  0.5773503  0.5773503  0.5773503</span></span>
<span id="cb3-8"><span class="kw">uvRotation</span>(u, v)</span>
<span id="cb3-9"><span class="co">##            [,1]       [,2]      [,3]</span></span>
<span id="cb3-10"><span class="co">## [1,]  0.7886751 -0.2113249 0.5773503</span></span>
<span id="cb3-11"><span class="co">## [2,] -0.2113249  0.7886751 0.5773503</span></span>
<span id="cb3-12"><span class="co">## [3,] -0.5773503 -0.5773503 0.5773503</span></span></code></pre>
      </div>
      <p>
        Thus, <code>uvRotation(u, v)</code> is a rotation sending
        <code>u</code> to <code>v</code>. Such a rotation is not unique. We can
        give a precise definition of this rotation: this is the rotation which
        sends the plane orthogonal to <code>u</code> and passing through the
        origin to the plane orthogonal to <code>v</code> and passing through the
        origin.
      </p>
      <p>
        And as I said in the introduction, this is the rotation I used to
        construct a mesh of a torus “passing through three points”. Indeed, I
        firstly constructed a torus having
        <span class="math inline">\(\{z = 0\}\)</span> as equatorial plane, and
        then I mapped it with a rotation and a translation. The rotation in
        question is simply the <code>uvRotation(u, v)</code> transformation with
        <span class="math inline">\(u = (0,0,1)\)</span>, orthogonal to the
        plane <span class="math inline">\(\{z = 0\}\)</span>, and
        <span class="math inline">\(v\)</span> the normal of the plane passing
        through the three points. And the translation is the one sending the
        origin to the circumcenter of the three points.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 21 Jan 2023 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ReorientTransformation2.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Exact integral of a polynomial on a simplex</title>
      <link>https://laustep.github.io/stlahblog/posts/integratePolynomialOnSimplex.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        The paper
        <a href="https://arxiv.org/pdf/1908.06736.pdf"
          >Simple formula for integration of polynomials on a simplex</a
        >
        by Jean B. Lasserre provides a method to calculate the exact value of
        the integral of a multivariate polynomial on a simplex (i.e. a
        tetrahedron in dimension three). I implemented it in
        <strong>Julia</strong>, <strong>Python</strong>, and <strong>R</strong>.
      </p>
      <p>
        Integration on simplices is important, because any convex polyhedron can
        be decomposed into simplices, thanks to the Delaunay tessellation.
        Therefore one can integrate over convex polyhedra once one can integrate
        over simplices (I wrote an
        <a
          href="https://laustep.github.io/stlahblog/posts/integralPolyhedron.html"
          >example</a
        >
        of doing so with <strong>R</strong>).
      </p>
      <h2 id="julia">Julia</h2>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb1-1"><span class="kw">using</span> TypedPolynomials</span>
<span id="cb1-2"><span class="kw">using</span> LinearAlgebra</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw">function</span> integratePolynomialOnSimplex(P<span class="op">,</span> S)</span>
<span id="cb1-5">    gens <span class="op">=</span> variables(P)</span>
<span id="cb1-6">    n <span class="op">=</span> length(gens)</span>
<span id="cb1-7">    v <span class="op">=</span> S[<span class="kw">end</span>]    </span>
<span id="cb1-8">    B <span class="op">=</span> <span class="dt">Array</span>{<span class="dt">Float64</span>}(<span class="cn">undef</span><span class="op">,</span> n<span class="op">,</span> <span class="fl">0</span>)</span>
<span id="cb1-9">    <span class="kw">for</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n</span>
<span id="cb1-10">        B <span class="op">=</span> hcat(B<span class="op">,</span> S[i] <span class="op">-</span> v)</span>
<span id="cb1-11">    <span class="kw">end</span></span>
<span id="cb1-12">    Q <span class="op">=</span> P(gens <span class="op">=&gt;</span> v <span class="op">+</span> B <span class="op">*</span> vec(gens))</span>
<span id="cb1-13">    s <span class="op">=</span> <span class="fl">0.0</span></span>
<span id="cb1-14">    <span class="kw">for</span> t <span class="kw">in</span> terms(Q)</span>
<span id="cb1-15">        coef <span class="op">=</span> TypedPolynomials.coefficient(t)</span>
<span id="cb1-16">        powers <span class="op">=</span> TypedPolynomials.exponents(t)</span>
<span id="cb1-17">        j <span class="op">=</span> sum(powers)</span>
<span id="cb1-18">        <span class="kw">if</span> j <span class="op">==</span> <span class="fl">0</span></span>
<span id="cb1-19">            s <span class="op">=</span> s <span class="op">+</span> coef</span>
<span id="cb1-20">            <span class="kw">continue</span></span>
<span id="cb1-21">        <span class="kw">end</span></span>
<span id="cb1-22">        coef <span class="op">=</span> coef <span class="op">*</span> prod(factorial.(powers))</span>
<span id="cb1-23">        s <span class="op">=</span> s <span class="op">+</span> coef <span class="op">/</span> prod((n<span class="op">+</span><span class="fl">1</span>)<span class="op">:</span>(n<span class="op">+</span>j))</span>
<span id="cb1-24">    <span class="kw">end</span></span>
<span id="cb1-25">    <span class="kw">return</span> abs(LinearAlgebra.det(B)) <span class="op">/</span> factorial(n) <span class="op">*</span> s</span>
<span id="cb1-26"><span class="kw">end</span></span></code></pre>
      </div>
      <h3 id="julia-example">Julia example</h3>
      <p>We define the polynomial to be integrated as follows:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb2-1"><span class="kw">using</span> TypedPolynomials</span>
<span id="cb2-2"><span class="pp">@polyvar</span> x y z</span>
<span id="cb2-3">P <span class="op">=</span> x<span class="op">^</span><span class="fl">4</span> <span class="op">+</span> y <span class="op">+</span> <span class="fl">2</span><span class="op">*</span>x<span class="op">*</span>y<span class="op">^</span><span class="fl">2</span> <span class="op">-</span> <span class="fl">3</span><span class="op">*</span>z</span></code></pre>
      </div>
      <p>
        <em>Be careful</em>. If the expression of your polynomial does not
        involve one of the variables, e.g. <span class="math inline"
          >\(P(x, y, z) = x^4 + 2xy^2\)</span
        >, you must define a polynomial involving this variable:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb3-1">P <span class="op">=</span> x<span class="op">^</span><span class="fl">4</span> <span class="op">+</span> <span class="fl">2</span><span class="op">*</span>x<span class="op">*</span>y<span class="op">^</span><span class="fl">2</span> <span class="op">+</span> <span class="fl">0.0</span><span class="op">*</span>z</span></code></pre>
      </div>
      <p>
        Now we define the simplex as a matrix whose rows correspond to the
        vertices:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb4-1"><span class="co"># simplex vertices</span></span>
<span id="cb4-2">v1 <span class="op">=</span> [<span class="fl">1.0</span><span class="op">,</span> <span class="fl">1.0</span><span class="op">,</span> <span class="fl">1.0</span>] </span>
<span id="cb4-3">v2 <span class="op">=</span> [<span class="fl">2.0</span><span class="op">,</span> <span class="fl">2.0</span><span class="op">,</span> <span class="fl">3.0</span>] </span>
<span id="cb4-4">v3 <span class="op">=</span> [<span class="fl">3.0</span><span class="op">,</span> <span class="fl">4.0</span><span class="op">,</span> <span class="fl">5.0</span>] </span>
<span id="cb4-5">v4 <span class="op">=</span> [<span class="fl">3.0</span><span class="op">,</span> <span class="fl">2.0</span><span class="op">,</span> <span class="fl">1.0</span>]</span>
<span id="cb4-6"><span class="co"># simplex</span></span>
<span id="cb4-7">S <span class="op">=</span> [v1<span class="op">,</span> v2<span class="op">,</span> v3<span class="op">,</span> v4]</span></code></pre>
      </div>
      <p>And finally we run the function:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb5-1">integratePolynomialOnSimplex(P<span class="op">,</span> S)</span></code></pre>
      </div>
      <h2 id="python">Python</h2>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb6-1"><span class="im">from</span> math <span class="im">import</span> factorial</span>
<span id="cb6-2"><span class="im">from</span> sympy <span class="im">import</span> Poly</span>
<span id="cb6-3"><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw">def</span> _term(Q, monom):</span>
<span id="cb6-6">    coef <span class="op">=</span> Q.coeff_monomial(monom)</span>
<span id="cb6-7">    powers <span class="op">=</span> <span class="bu">list</span>(monom)</span>
<span id="cb6-8">    j <span class="op">=</span> <span class="bu">sum</span>(powers)</span>
<span id="cb6-9">    <span class="cf">if</span> j <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb6-10">        <span class="cf">return</span> coef</span>
<span id="cb6-11">    coef <span class="op">=</span> coef <span class="op">*</span> np.prod(<span class="bu">list</span>(<span class="bu">map</span>(factorial, powers)))</span>
<span id="cb6-12">    n <span class="op">=</span> <span class="bu">len</span>(monom)</span>
<span id="cb6-13">    <span class="cf">return</span> coef <span class="op">/</span> np.prod(<span class="bu">list</span>(<span class="bu">range</span>(n<span class="op">+</span><span class="dv">1</span>, n<span class="op">+</span>j<span class="op">+</span><span class="dv">1</span>)))</span>
<span id="cb6-14"></span>
<span id="cb6-15"><span class="kw">def</span> integratePolynomialOnSimplex(P, S):</span>
<span id="cb6-16">    gens <span class="op">=</span> P.gens</span>
<span id="cb6-17">    n <span class="op">=</span> <span class="bu">len</span>(gens)</span>
<span id="cb6-18">    S <span class="op">=</span> np.asarray(S)</span>
<span id="cb6-19">    v <span class="op">=</span> S[n,:]</span>
<span id="cb6-20">    columns <span class="op">=</span> []</span>
<span id="cb6-21">    <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(n):</span>
<span id="cb6-22">        columns.append(S[i,:] <span class="op">-</span> v)    </span>
<span id="cb6-23">    B <span class="op">=</span> np.column_stack(<span class="bu">tuple</span>(columns))</span>
<span id="cb6-24">    dico <span class="op">=</span> {}</span>
<span id="cb6-25">    <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(n):</span>
<span id="cb6-26">        newvar <span class="op">=</span> v[i]</span>
<span id="cb6-27">        <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(n):</span>
<span id="cb6-28">            newvar <span class="op">=</span> newvar <span class="op">+</span> B[i,j]<span class="op">*</span>Poly(gens[j], gens, domain<span class="op">=</span><span class="st">"RR"</span>)</span>
<span id="cb6-29">        dico[gens[i]] <span class="op">=</span> newvar.as_expr()</span>
<span id="cb6-30">    Q <span class="op">=</span> P.subs(dico, simultaneous<span class="op">=</span><span class="va">True</span>).as_expr().as_poly(gens)</span>
<span id="cb6-31">    <span class="bu">print</span>(Q)</span>
<span id="cb6-32">    monoms <span class="op">=</span> Q.monoms()</span>
<span id="cb6-33">    s <span class="op">=</span> <span class="fl">0.0</span></span>
<span id="cb6-34">    <span class="cf">for</span> monom <span class="kw">in</span> monoms:</span>
<span id="cb6-35">        s <span class="op">=</span> s <span class="op">+</span> _term(Q, monom)</span>
<span id="cb6-36">    <span class="cf">return</span> np.<span class="bu">abs</span>(np.linalg.det(B)) <span class="op">/</span> factorial(n) <span class="op">*</span> s</span></code></pre>
      </div>
      <h3 id="python-example">Python example</h3>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb7-1"><span class="co"># simplex vertices</span></span>
<span id="cb7-2">v1 <span class="op">=</span> [<span class="fl">1.0</span>, <span class="fl">1.0</span>, <span class="fl">1.0</span>] </span>
<span id="cb7-3">v2 <span class="op">=</span> [<span class="fl">2.0</span>, <span class="fl">2.0</span>, <span class="fl">3.0</span>] </span>
<span id="cb7-4">v3 <span class="op">=</span> [<span class="fl">3.0</span>, <span class="fl">4.0</span>, <span class="fl">5.0</span>] </span>
<span id="cb7-5">v4 <span class="op">=</span> [<span class="fl">3.0</span>, <span class="fl">2.0</span>, <span class="fl">1.0</span>]</span>
<span id="cb7-6"><span class="co"># simplex</span></span>
<span id="cb7-7">S <span class="op">=</span> [v1, v2, v3, v4]</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co"># polynomial to integrate</span></span>
<span id="cb7-10"><span class="im">from</span> sympy <span class="im">import</span> Poly</span>
<span id="cb7-11"><span class="im">from</span> sympy.abc <span class="im">import</span> x, y, z</span>
<span id="cb7-12">P <span class="op">=</span> Poly(x<span class="op">**</span><span class="dv">4</span> <span class="op">+</span> y <span class="op">+</span> <span class="dv">2</span><span class="op">*</span>x<span class="op">*</span>y<span class="op">**</span><span class="dv">2</span> <span class="op">-</span> <span class="dv">3</span><span class="op">*</span>z, x, y, z, domain <span class="op">=</span> <span class="st">"RR"</span>)</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co"># integral</span></span>
<span id="cb7-15">integratePolynomialOnSimplex(P, S)</span></code></pre>
      </div>
      <h2 id="r">R</h2>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1"><span class="kw">library</span>(spray)</span>
<span id="cb8-2"></span>
<span id="cb8-3">integratePolynomialonSimplex &lt;-<span class="st"> </span><span class="cf">function</span>(P, S) {</span>
<span id="cb8-4">  n &lt;-<span class="st"> </span><span class="kw">ncol</span>(S)</span>
<span id="cb8-5">  v &lt;-<span class="st"> </span>S[n<span class="op">+</span>1L, ]</span>
<span id="cb8-6">  B &lt;-<span class="st"> </span><span class="kw">t</span>(S[1L<span class="op">:</span>n, ]) <span class="op">-</span><span class="st"> </span>v</span>
<span id="cb8-7">  gens &lt;-<span class="st"> </span><span class="kw">lapply</span>(1L<span class="op">:</span>n, <span class="cf">function</span>(i) <span class="kw">lone</span>(i, n))</span>
<span id="cb8-8">  newvars &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">"list"</span>, n)</span>
<span id="cb8-9">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>n) {</span>
<span id="cb8-10">    newvar &lt;-<span class="st"> </span>v[i]</span>
<span id="cb8-11">    Bi &lt;-<span class="st"> </span>B[i, ]</span>
<span id="cb8-12">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>n) {</span>
<span id="cb8-13">      newvar &lt;-<span class="st"> </span>newvar <span class="op">+</span><span class="st"> </span>Bi[j] <span class="op">*</span><span class="st"> </span>gens[[j]]</span>
<span id="cb8-14">    }</span>
<span id="cb8-15">    newvars[[i]] &lt;-<span class="st"> </span>newvar</span>
<span id="cb8-16">  }</span>
<span id="cb8-17">  Q &lt;-<span class="st"> </span><span class="dv">0</span></span>
<span id="cb8-18">  exponents &lt;-<span class="st"> </span>P[[<span class="st">"index"</span>]]</span>
<span id="cb8-19">  coeffs    &lt;-<span class="st"> </span>P[[<span class="st">"value"</span>]] </span>
<span id="cb8-20">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(exponents)) {</span>
<span id="cb8-21">    powers &lt;-<span class="st"> </span>exponents[i, ]</span>
<span id="cb8-22">    term &lt;-<span class="st"> </span><span class="dv">1</span></span>
<span id="cb8-23">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>n) {</span>
<span id="cb8-24">      term &lt;-<span class="st"> </span>term <span class="op">*</span><span class="st"> </span>newvars[[j]]<span class="op">^</span>powers[j] </span>
<span id="cb8-25">    }</span>
<span id="cb8-26">    Q &lt;-<span class="st"> </span>Q <span class="op">+</span><span class="st"> </span>coeffs[i] <span class="op">*</span><span class="st"> </span>term</span>
<span id="cb8-27">  }</span>
<span id="cb8-28">  s &lt;-<span class="st"> </span><span class="dv">0</span></span>
<span id="cb8-29">  exponents &lt;-<span class="st"> </span>Q[[<span class="st">"index"</span>]]</span>
<span id="cb8-30">  coeffs    &lt;-<span class="st"> </span>Q[[<span class="st">"value"</span>]] </span>
<span id="cb8-31">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(exponents)) {</span>
<span id="cb8-32">    coef &lt;-<span class="st"> </span>coeffs[i]</span>
<span id="cb8-33">    powers &lt;-<span class="st"> </span>exponents[i, ]</span>
<span id="cb8-34">    d &lt;-<span class="st"> </span><span class="kw">sum</span>(powers)</span>
<span id="cb8-35">    <span class="cf">if</span>(d <span class="op">==</span><span class="st"> </span>0L) {</span>
<span id="cb8-36">      s &lt;-<span class="st"> </span>s <span class="op">+</span><span class="st"> </span>coef</span>
<span id="cb8-37">      <span class="cf">next</span></span>
<span id="cb8-38">    }</span>
<span id="cb8-39">    coef &lt;-<span class="st"> </span>coef <span class="op">*</span><span class="st"> </span><span class="kw">prod</span>(<span class="kw">factorial</span>(powers))</span>
<span id="cb8-40">    s &lt;-<span class="st"> </span>s <span class="op">+</span><span class="st"> </span>coef <span class="op">/</span><span class="st"> </span><span class="kw">prod</span>((n<span class="op">+</span>1L)<span class="op">:</span>(n<span class="op">+</span>d))</span>
<span id="cb8-41">  }</span>
<span id="cb8-42">  <span class="kw">abs</span>(<span class="kw">det</span>(B)) <span class="op">/</span><span class="st"> </span><span class="kw">factorial</span>(n) <span class="op">*</span><span class="st"> </span>s</span>
<span id="cb8-43">}</span></code></pre>
      </div>
      <h3 id="r-example">R example</h3>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1"><span class="kw">library</span>(spray)</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co"># variables</span></span>
<span id="cb9-4">x &lt;-<span class="st"> </span><span class="kw">lone</span>(<span class="dv">1</span>, <span class="dv">3</span>)</span>
<span id="cb9-5">y &lt;-<span class="st"> </span><span class="kw">lone</span>(<span class="dv">2</span>, <span class="dv">3</span>)</span>
<span id="cb9-6">z &lt;-<span class="st"> </span><span class="kw">lone</span>(<span class="dv">3</span>, <span class="dv">3</span>)</span>
<span id="cb9-7"><span class="co"># polynomial</span></span>
<span id="cb9-8">P &lt;-<span class="st"> </span>x<span class="op">^</span><span class="dv">4</span> <span class="op">+</span><span class="st"> </span>y <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>x<span class="op">*</span>y<span class="op">^</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span><span class="dv">3</span><span class="op">*</span>z</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co"># simplex (tetrahedron) vertices</span></span>
<span id="cb9-11">v1 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>)</span>
<span id="cb9-12">v2 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">2</span>, <span class="dv">2</span>, <span class="dv">3</span>)</span>
<span id="cb9-13">v3 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>)</span>
<span id="cb9-14">v4 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">3</span>, <span class="dv">2</span>, <span class="dv">1</span>)</span>
<span id="cb9-15"><span class="co"># simplex</span></span>
<span id="cb9-16">S &lt;-<span class="st"> </span><span class="kw">rbind</span>(v1, v2, v3, v4)</span>
<span id="cb9-17"></span>
<span id="cb9-18"><span class="co"># integral</span></span>
<span id="cb9-19"><span class="kw">integratePolynomialonSimplex</span>(P, S)</span></code></pre>
      </div>
      <h2 id="note">Note</h2>
      <p>
        The functions do not check whether the given matrix
        <code>S</code> defines a non-degenerate simplex. This is equivalent to
        the invertibility of the matrix <code>B</code> constructed in the
        functions.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 02 Dec 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/integratePolynomialOnSimplex.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>HTML widgets in Power BI</title>
      <link>https://laustep.github.io/stlahblog/posts/pbiviz.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <ul>
        <li>
          <p>
            <a href="#setting-up-an-environment">Setting up an environment</a>
          </p>
        </li>
        <li>
          <p><a href="#example">Example</a></p>
        </li>
        <li>
          <p><a href="#notes">Notes</a></p>
        </li>
        <li>
          <p><a href="#advanced-example">Advanced example</a></p>
        </li>
        <li>
          <p><a href="#arbitrary-html">Arbitrary HTML</a></p>
        </li>
        <li>
          <p><a href="#using-multiple-datasets">Using multiple datasets</a></p>
        </li>
        <li>
          <p>
            <a href="#limiting-the-number-of-selected-columns"
              >Limiting the number of selected columns</a
            >
          </p>
        </li>
        <li>
          <p><a href="#combining-widgets">Combining widgets</a></p>
        </li>
        <li>
          <p>
            <a href="#prevent-removal-of-duplicated-rows"
              >Prevent removal of duplicated rows</a
            >
          </p>
        </li>
        <li>
          <p>
            <a href="#adding-formatting-objects">Adding formatting objects</a>
          </p>
        </li>
        <li>
          <p>
            <a href="#restricting-a-number-input-to-a-range"
              >Restricting a number input to a range</a
            >
          </p>
        </li>
      </ul>
      <hr />
      <p>
        It is possible to include a <code>htmlwidget</code> in a
        <strong>Power BI</strong> report, such as a <code>plotly</code> graphic.
      </p>
      <h1 id="setting-up-an-environment">Setting up an environment</h1>
      <p>
        You first have to follow the first three steps of
        <a
          href="https://docs.microsoft.com/en-us/power-bi/developer/visuals/environment-setup?tabs=windows"
          >this tutorial</a
        >:
      </p>
      <ol type="1">
        <li>
          <p>install <strong>Node.js</strong>;</p>
        </li>
        <li>
          <p>install <strong>pbiviz</strong>;</p>
        </li>
        <li><p>create and install a certificate;</p></li>
        <li>
          <p>install the npm package <code>powerbi-visuals-api</code>.</p>
        </li>
      </ol>
      <p>
        For Windows, you can download a portable version of
        <strong>Node.js</strong> on the
        <a href="https://nodejs.org/en/download/">nodejs.org</a> website: choose
        the 64-bit zip, unzip it in a folder and set this folder in your Windows
        path.
      </p>
      <p>
        Follow the tutorial for steps 2 and 3. Note that you have to perform
        step 3 only once, there’s no need to generate a new certificate for each
        visual you will create.
      </p>
      <p>
        For step 4, run <code>npm install -g powerbi-visuals-api</code> in a
        terminal.
      </p>
      <h1 id="example">Example</h1>
      <p>
        Let’s assume you want to render the interactive graphic produced by this
        code:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(plotly)</span>
<span id="cb1-2">gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(iris, <span class="kw">aes</span>(<span class="dt">x =</span> Petal.Length, <span class="dt">y =</span> Sepal.Length, <span class="dt">color =</span> Species)) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-3"><span class="st">  </span><span class="kw">geom_point</span>()</span>
<span id="cb1-4"><span class="kw">ggplotly</span>(gg)  </span></code></pre>
      </div>
      <ul>
        <li>
          <p>
            create a working directory: <code>mkdir pbiwidgets</code> and go
            into it: <code>cd pbiwidgets</code>;
          </p>
        </li>
        <li>
          <p>
            initialize a new visual by running:
            <code>pbiviz new iris -t rhtml</code>;
          </p>
        </li>
        <li>
          <p>
            this creates the folder
            <strong><em>pbiwidgets/iris</em></strong> with a lot of stuff;
          </p>
        </li>
        <li>
          <p>
            in this folder, edit the file <strong><em>pbiviz.json</em></strong
            >; you have to write something for <code>description</code> (what
            you want), <code>supportUrl</code>(write anything you want,
            e.g. <code>https://www.example.com</code>), and you have to write
            something for the fields <code>name</code> and <code>email</code>;
          </p>
        </li>
        <li>
          <p>
            now you have to edit <strong><em>script.r</em></strong
            >:
          </p>
        </li>
      </ul>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">source</span>(<span class="st">'./r_files/flatten_HTML.r'</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co">############### Library Declarations ###############</span></span>
<span id="cb2-4"><span class="kw">libraryRequireInstall</span>(<span class="st">"plotly"</span>)</span>
<span id="cb2-5"><span class="co">####################################################</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co">################### Actual code ####################</span></span>
<span id="cb2-8">gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(Values, <span class="kw">aes</span>(<span class="dt">x=</span>Petal.Length, <span class="dt">y=</span>Sepal.Length, <span class="dt">color =</span> Species)) <span class="op">+</span><span class="st"> </span></span>
<span id="cb2-9"><span class="st">  </span><span class="kw">geom_point</span>()</span>
<span id="cb2-10">p &lt;-<span class="st"> </span><span class="kw">ggplotly</span>(gg)</span>
<span id="cb2-11"><span class="co">####################################################</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co">################## Save widget #####################</span></span>
<span id="cb2-14"><span class="kw">internalSaveWidget</span>(p, <span class="st">"out.html"</span>)</span>
<span id="cb2-15"><span class="co">####################################################</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co">################ Reduce paddings ###################</span></span>
<span id="cb2-18"><span class="kw">ReadFullFileReplaceString</span>(</span>
<span id="cb2-19">  <span class="st">"out.html"</span>, <span class="st">"out.html"</span>, <span class="st">',"padding":[0-9]*,'</span>, <span class="st">',"padding":0,'</span></span>
<span id="cb2-20">)</span>
<span id="cb2-21"><span class="co">####################################################</span></span></code></pre>
      </div>
      <ul>
        <li>
          <p>
            the dataframe <code>Values</code> is the dataset which will be sent
            to this R script by <strong>Power BI</strong>;
          </p>
        </li>
        <li>
          <p>
            since we want to use <code>iris</code> as data, we save it to an
            Excel file that we will import in <strong>Power BI</strong>; I
            recommend to use <strong>writexl</strong> (the Excel files written
            with <strong>openxlsx</strong> cause an issue when one tries to load
            them in <strong>Power BI</strong>):
          </p>
        </li>
      </ul>
      <!-- -->
      <pre><code>writexl::write_xlsx(iris, "iris.xlsx") 
# or writexl::write_xlsx(list("sheetName" = iris), "iris.xlsx") </code></pre>
      <ul>
        <li>
          <p>
            go to the folder <strong><em>pbiwidgets/iris</em></strong> in your
            terminal and run the command <code>pbiviz package</code>;
          </p>
        </li>
        <li>
          <p>
            now open Power BI, import <strong><em>iris.xlsx</em></strong
            >, select and load the sheet;
          </p>
        </li>
        <li>
          <p>
            in the <em>‘Visualizations’</em> panel, click the three dots, then
            <em>‘import a visual from a file’</em>, and select the
            <strong><em>pbiviz</em></strong> file which is located in
            <strong><em>pbiwidgets/iris/dist</em></strong>
          </p>
        </li>
        <li>
          <p>
            a new
            <a
              href="https://laustep.github.io/stlahblog/posts/figures/pbiviz_icon.png"
              >icon showing some tools</a
            >
            appears at the bottom in the <em>‘Visualizations’</em> panel, click
            it;
          </p>
        </li>
        <li>
          <p>
            in the <em>‘Fields’</em> panel, select the columns used for the
            plot, here <code>Petal.Length</code>, <code>Sepal.Length</code> and
            <code>Species</code>;
          </p>
        </li>
        <li><p>that’s it, you get the interactive graphic in Power BI.</p></li>
      </ul>
      <h2 id="helper-function">Helper function</h2>
      <p>
        If you have to deal with multiple widgets, you will be bothered about
        the filling of the <strong><em>pbiviz.json</em></strong> file. Here is a
        R function which fills it for you:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(jsonlite)</span>
<span id="cb4-2">fill_pbiviz &lt;-<span class="st"> </span><span class="cf">function</span>(path){</span>
<span id="cb4-3">  wd &lt;-<span class="st"> </span><span class="kw">setwd</span>(path)</span>
<span id="cb4-4">  <span class="kw">on.exit</span>(<span class="kw">setwd</span>(wd))</span>
<span id="cb4-5">  pbiviz &lt;-<span class="st"> </span><span class="kw">fromJSON</span>(<span class="st">"pbiviz.json"</span>)</span>
<span id="cb4-6">  pbiviz[[<span class="st">"visual"</span>]][[<span class="st">"description"</span>]] &lt;-<span class="st"> "Description"</span></span>
<span id="cb4-7">  pbiviz[[<span class="st">"visual"</span>]][[<span class="st">"supportUrl"</span>]] &lt;-<span class="st"> "https://wwww.example.com"</span></span>
<span id="cb4-8">  pbiviz[[<span class="st">"author"</span>]][[<span class="st">"name"</span>]] &lt;-<span class="st"> "John Doe"</span></span>
<span id="cb4-9">  pbiviz[[<span class="st">"author"</span>]][[<span class="st">"email"</span>]] &lt;-<span class="st"> "john.doe@gmail.com"</span></span>
<span id="cb4-10">  pbiviz &lt;-<span class="st"> </span><span class="kw">toJSON</span>(pbiviz, <span class="dt">auto_unbox =</span> <span class="ot">TRUE</span>, <span class="dt">null =</span> <span class="st">"null"</span>, <span class="dt">pretty =</span> <span class="dv">2</span>)</span>
<span id="cb4-11">  <span class="kw">writeLines</span>(pbiviz, <span class="st">"pbiviz.json"</span>)</span>
<span id="cb4-12">}</span></code></pre>
      </div>
      <p>Just run <code>fill_pbiviz("path/to/pbiwidgets/iris")</code>.</p>
      <h1 id="notes">Notes</h1>
      <p>
        This works very well with <code>plotly</code> and
        <code>ggplotly</code> widgets. I also tested a graphic with the
        <code>scatterD3</code> package and the result was fine as well. But this
        can be less fine for other <code>htmlwidgets</code>.
      </p>
      <p>
        For example, with the <code>ggiraph</code> package, I managed to achieve
        a good result after settings the options
        <code>width_svg = 3, height_svg = 2.5</code> in the
        <code>girafe</code> function. I also set the option
        <code>opts_zoom(min = .7, max = 2)</code> in the
        <code>girafe_options</code> function:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">gg_point &lt;-<span class="st"> </span><span class="kw">ggplot</span>(<span class="dt">data =</span> data) <span class="op">+</span></span>
<span id="cb5-2"><span class="st">  </span><span class="kw">geom_point_interactive</span>(......</span>
<span id="cb5-3">p &lt;-<span class="st"> </span><span class="kw">girafe</span>(<span class="dt">ggobj =</span> gg_point, <span class="dt">width_svg =</span> <span class="dv">3</span>, <span class="dt">height_svg =</span> <span class="fl">2.5</span>)</span>
<span id="cb5-4">p &lt;-<span class="st"> </span><span class="kw">girafe_options</span>(p, <span class="kw">opts_zoom</span>(<span class="dt">min =</span> <span class="fl">.7</span>, <span class="dt">max =</span> <span class="dv">2</span>))</span>
<span id="cb5-5"><span class="kw">internalSaveWidget</span>(p, <span class="st">"out.html"</span>)</span></code></pre>
      </div>
      <p>
        I tried a pie chart with the <code>rAmCharts4</code> package and got an
        empty plot. I finally managed to get the pie chart by removing the last
        lines of the file <strong><em>script.r</em></strong
        >:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="co">################ Reduce paddings ###################</span></span>
<span id="cb6-2"><span class="kw">ReadFullFileReplaceString</span>(</span>
<span id="cb6-3">  <span class="st">"out.html"</span>, <span class="st">"out.html"</span>, <span class="st">',"padding":[0-9]*,'</span>, <span class="st">',"padding":0,'</span></span>
<span id="cb6-4">)</span></code></pre>
      </div>
      <p>
        And I set the <code>height</code> option of the
        <code>amPieChart</code> function to <code>300px</code>, otherwise the
        legend was truncated.
      </p>
      <h1 id="advanced-example">Advanced example</h1>
      <p>
        When you select the columns <code>Petal.Length</code>,
        <code>Sepal.Length</code> and <code>Species</code>, they appear in the
        <em>‘Visualizations’</em> panel, under the dataset name
        <strong>Values</strong>:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pbiviz01.png"
        />
      </p>
      <p>
        Then, <strong>Power BI</strong> sends the data to the R script with the
        help of a CSV file, and
        <em
          >the columns of this CSV file are in the same order as your selected
          columns</em
        >.
      </p>
      <p>
        Therefore, instead of using the column names in the R script, one can
        use the column indices.
      </p>
      <p>
        Let’s illustrate. We will create a scatter plot as in the previous
        example, but the user will have the choice of the variables on the
        x-axis and the y-axis, and he’ll can also choose or not a color factor.
      </p>
      <p>
        Firstly, we change the display name of the
        <strong>Values</strong> dataset. Open the file
        <code>pbiwidgets/iris/capabiities.json</code> (with any text editor),
        and change the display name in the <code>dataRoles</code> field:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode json"
        ><code class="sourceCode json"><span id="cb7-1"><span class="fu">{</span></span>
<span id="cb7-2">    <span class="dt">"dataRoles"</span> <span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb7-3">        <span class="fu">{</span></span>
<span id="cb7-4">            <span class="dt">"displayName"</span> <span class="fu">:</span> <span class="st">"Data (x, y, by)"</span><span class="fu">,</span></span>
<span id="cb7-5">            <span class="dt">"kind"</span> <span class="fu">:</span> <span class="st">"GroupingOrMeasure"</span><span class="fu">,</span></span>
<span id="cb7-6">            <span class="dt">"name"</span> <span class="fu">:</span> <span class="st">"Values"</span></span>
<span id="cb7-7">        <span class="fu">}</span></span>
<span id="cb7-8">    <span class="ot">]</span><span class="fu">,</span></span>
<span id="cb7-9">        <span class="er">......</span></span></code></pre>
      </div>
      <p>
        Now we will see <strong>Data (x, y, by)</strong> in the
        <em>‘Visualizations’</em> panel, instead of <strong>Values</strong>:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pbiviz02.png"
        />
      </p>
      <p>
        Then we use the following R code in <strong><em>script.r</em></strong
        >:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1"><span class="co">################### Actual code ####################</span></span>
<span id="cb8-2">nms &lt;-<span class="st"> </span><span class="kw">colnames</span>(Values)</span>
<span id="cb8-3">ncols &lt;-<span class="st"> </span><span class="kw">length</span>(nms)</span>
<span id="cb8-4"><span class="cf">if</span>(ncols <span class="op">==</span><span class="st"> </span>2L){</span>
<span id="cb8-5">  gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(</span>
<span id="cb8-6">    Values, <span class="kw">aes</span>(<span class="dt">x=</span>.data[[nms[<span class="dv">1</span>]]], <span class="dt">y=</span>.data[[nms[<span class="dv">2</span>]]])</span>
<span id="cb8-7">  ) <span class="op">+</span><span class="st"> </span></span>
<span id="cb8-8"><span class="st">    </span><span class="kw">geom_point</span>()</span>
<span id="cb8-9">}<span class="cf">else</span> <span class="cf">if</span>(ncols <span class="op">&gt;=</span><span class="st"> </span>3L){</span>
<span id="cb8-10">  gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(</span>
<span id="cb8-11">    Values, <span class="kw">aes</span>(<span class="dt">x=</span>.data[[nms[<span class="dv">1</span>]]], <span class="dt">y=</span>.data[[nms[<span class="dv">2</span>]]], <span class="dt">color =</span> .data[[nms[<span class="dv">3</span>]]])</span>
<span id="cb8-12">  ) <span class="op">+</span><span class="st"> </span></span>
<span id="cb8-13"><span class="st">    </span><span class="kw">geom_point</span>()</span>
<span id="cb8-14">}<span class="cf">else</span>{</span>
<span id="cb8-15">  gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>() <span class="op">+</span><span class="st"> </span><span class="kw">geom_blank</span>()</span>
<span id="cb8-16">}</span>
<span id="cb8-17">p &lt;-<span class="st"> </span><span class="kw">ggplotly</span>(gg)</span>
<span id="cb8-18"><span class="co">####################################################</span></span></code></pre>
      </div>
      <p>
        Now we can choose the columns we want for the x-axis and for the y-axis,
        and we can optionally choose the <code>Species</code> color factor:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pbiviz03.png"
          style="width: 50%"
        />
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pbiviz04.png"
          style="width: 50%"
        />
      </p>
      <h1 id="arbitrary-html">Arbitrary HTML</h1>
      <p>
        In fact, <strong>pbiviz</strong> is not restricted to render a
        <code>htmlwidget</code>. One can render any HTML file, it suffices to
        save it under the name <strong><em>out.html</em></strong> in the R
        script. For instance, in the above example, we render a blank plot if
        the user does not select at least two columns. We can throw a message
        instead, with a R script like this:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1"><span class="kw">source</span>(<span class="st">"./r_files/flatten_HTML.r"</span>)</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co">############### Library Declarations ###############</span></span>
<span id="cb9-4"><span class="kw">libraryRequireInstall</span>(<span class="st">"plotly"</span>)</span>
<span id="cb9-5"><span class="co">####################################################</span></span>
<span id="cb9-6"></span>
<span id="cb9-7">htmlMessage &lt;-<span class="st"> </span><span class="cf">function</span>(message){</span>
<span id="cb9-8">  html &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb9-9">    <span class="st">"&lt;!doctype html&gt;"</span>,</span>
<span id="cb9-10">    <span class="st">"&lt;html lang=en&gt;"</span>,</span>
<span id="cb9-11">    <span class="st">"  &lt;head&gt;"</span>,</span>
<span id="cb9-12">    <span class="st">"    &lt;meta charset=utf-8&gt;"</span>,</span>
<span id="cb9-13">    <span class="st">"  &lt;/head&gt;"</span>,</span>
<span id="cb9-14">    <span class="st">"  &lt;body&gt;"</span>,</span>
<span id="cb9-15">    <span class="kw">sprintf</span>(<span class="st">"    &lt;p&gt;%s&lt;/p&gt;"</span>, message),</span>
<span id="cb9-16">    <span class="st">"  &lt;/body&gt;"</span>,</span>
<span id="cb9-17">    <span class="st">"&lt;/html&gt;"</span></span>
<span id="cb9-18">  )</span>
<span id="cb9-19">  <span class="kw">writeLines</span>(html, <span class="st">"out.html"</span>)</span>
<span id="cb9-20">}</span>
<span id="cb9-21"></span>
<span id="cb9-22"><span class="co">################### Actual code ####################</span></span>
<span id="cb9-23">nms &lt;-<span class="st"> </span><span class="kw">colnames</span>(Values)</span>
<span id="cb9-24">ncols &lt;-<span class="st"> </span><span class="kw">length</span>(nms)</span>
<span id="cb9-25"><span class="cf">if</span>(ncols <span class="op">==</span><span class="st"> </span>2L){</span>
<span id="cb9-26">  gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(</span>
<span id="cb9-27">    Values, <span class="kw">aes</span>(<span class="dt">x=</span>.data[[nms[<span class="dv">1</span>]]], <span class="dt">y=</span>.data[[nms[<span class="dv">2</span>]]])</span>
<span id="cb9-28">  ) <span class="op">+</span><span class="st"> </span></span>
<span id="cb9-29"><span class="st">    </span><span class="kw">geom_point</span>()</span>
<span id="cb9-30">  p &lt;-<span class="st"> </span><span class="kw">ggplotly</span>(gg) </span>
<span id="cb9-31">  <span class="kw">internalSaveWidget</span>(p, <span class="st">"out.html"</span>)</span>
<span id="cb9-32">}<span class="cf">else</span> <span class="cf">if</span>(ncols <span class="op">&gt;=</span><span class="st"> </span>3L){</span>
<span id="cb9-33">  gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(</span>
<span id="cb9-34">    Values, <span class="kw">aes</span>(<span class="dt">x=</span>.data[[nms[<span class="dv">1</span>]]], <span class="dt">y=</span>.data[[nms[<span class="dv">2</span>]]], <span class="dt">color =</span> .data[[nms[<span class="dv">3</span>]]])</span>
<span id="cb9-35">  ) <span class="op">+</span><span class="st"> </span></span>
<span id="cb9-36"><span class="st">    </span><span class="kw">geom_point</span>()</span>
<span id="cb9-37">  p &lt;-<span class="st"> </span><span class="kw">ggplotly</span>(gg) </span>
<span id="cb9-38">  <span class="kw">internalSaveWidget</span>(p, <span class="st">"out.html"</span>)</span>
<span id="cb9-39">}<span class="cf">else</span>{</span>
<span id="cb9-40">  <span class="kw">htmlMessage</span>(</span>
<span id="cb9-41">    <span class="st">"You have to select at least two columns."</span></span>
<span id="cb9-42">  )</span>
<span id="cb9-43">}</span>
<span id="cb9-44"><span class="co">################## End of script ###################</span></span></code></pre>
      </div>
      <h1 id="using-multiple-datasets">Using multiple datasets</h1>
      <p>
        Some graphics require more than one dataset. We give an example here.
      </p>
      <p>First, we prepare two datasets:</p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1"><span class="kw">library</span>(dplyr)</span>
<span id="cb10-2"><span class="kw">data</span>(<span class="st">"diamonds"</span>, <span class="dt">package =</span> <span class="st">"ggplot2"</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co">## creating dataset #1</span></span>
<span id="cb10-5">data1 &lt;-<span class="st"> </span></span>
<span id="cb10-6"><span class="st">  </span>diamonds <span class="op">%&gt;%</span><span class="st"> </span></span>
<span id="cb10-7"><span class="st">  </span><span class="kw">group_by</span>(clarity) <span class="op">%&gt;%</span><span class="st"> </span></span>
<span id="cb10-8"><span class="st">  </span><span class="kw">summarize</span>(<span class="dt">m =</span> <span class="kw">mean</span>(price))  </span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co">## creating dataset #2</span></span>
<span id="cb10-11">data2 &lt;-<span class="st"> </span></span>
<span id="cb10-12"><span class="st">  </span>diamonds <span class="op">%&gt;%</span><span class="st"> </span></span>
<span id="cb10-13"><span class="st">  </span><span class="kw">group_by</span>(clarity, cut) <span class="op">%&gt;%</span><span class="st"> </span></span>
<span id="cb10-14"><span class="st">  </span><span class="kw">summarize</span>(<span class="dt">m =</span> <span class="kw">mean</span>(price))</span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="co">## save to Excel files</span></span>
<span id="cb10-17">writexl<span class="op">::</span><span class="kw">write_xlsx</span>(<span class="kw">list</span>(<span class="st">"data1"</span> =<span class="st"> </span>data1), <span class="st">"diamonds_summarized1.xlsx"</span>)</span>
<span id="cb10-18">writexl<span class="op">::</span><span class="kw">write_xlsx</span>(<span class="kw">list</span>(<span class="st">"data2"</span> =<span class="st"> </span>data2), <span class="st">"diamonds_summarized2.xlsx"</span>)</span></code></pre>
      </div>
      <p>
        Create the visual project: <code>pbiviz new diamonds -t rhtml</code>.
        Complete the file
        <strong><em>pbiwidgets/diamonds/pbiviz.json</em></strong> as previously
        explained, and modify the file
        <strong><em>pbiwidgets/diamonds/capabilities.json</em></strong> as
        follows:
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode json"
        ><code class="sourceCode json"><span id="cb11-1"><span class="fu">{</span></span>
<span id="cb11-2">  <span class="dt">"dataRoles"</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb11-3">    <span class="fu">{</span></span>
<span id="cb11-4">      <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Data1"</span><span class="fu">,</span></span>
<span id="cb11-5">      <span class="dt">"kind"</span><span class="fu">:</span> <span class="st">"GroupingOrMeasure"</span><span class="fu">,</span></span>
<span id="cb11-6">      <span class="dt">"name"</span><span class="fu">:</span> <span class="st">"data1"</span></span>
<span id="cb11-7">    <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb11-8">    <span class="fu">{</span></span>
<span id="cb11-9">      <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Data2"</span><span class="fu">,</span></span>
<span id="cb11-10">      <span class="dt">"kind"</span><span class="fu">:</span> <span class="st">"GroupingOrMeasure"</span><span class="fu">,</span></span>
<span id="cb11-11">      <span class="dt">"name"</span><span class="fu">:</span> <span class="st">"data2"</span></span>
<span id="cb11-12">    <span class="fu">}</span></span>
<span id="cb11-13">  <span class="ot">]</span><span class="fu">,</span></span>
<span id="cb11-14">  <span class="dt">"dataViewMappings"</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb11-15">    <span class="fu">{</span></span>
<span id="cb11-16">      <span class="dt">"scriptResult"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb11-17">        <span class="dt">"dataInput"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb11-18">          <span class="dt">"table"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb11-19">            <span class="dt">"rows"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb11-20">              <span class="dt">"select"</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb11-21">                <span class="fu">{</span></span>
<span id="cb11-22">                  <span class="dt">"for"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb11-23">                    <span class="dt">"in"</span><span class="fu">:</span> <span class="st">"data1"</span></span>
<span id="cb11-24">                  <span class="fu">}</span></span>
<span id="cb11-25">                <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb11-26">                <span class="fu">{</span></span>
<span id="cb11-27">                  <span class="dt">"for"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb11-28">                    <span class="dt">"in"</span><span class="fu">:</span> <span class="st">"data2"</span></span>
<span id="cb11-29">                  <span class="fu">}</span></span>
<span id="cb11-30">                <span class="fu">}</span></span>
<span id="cb11-31">              <span class="ot">]</span><span class="fu">,</span></span>
<span id="cb11-32">              <span class="er">......</span></span></code></pre>
      </div>
      <p>
        Now the R script, in
        <strong><em>pbiwidgets/diamonds/script.r</em></strong
        >:
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb12-1"><span class="kw">source</span>(<span class="st">'./r_files/flatten_HTML.r'</span>)</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co">############### Library Declarations ###############</span></span>
<span id="cb12-4"><span class="kw">libraryRequireInstall</span>(<span class="st">"plotly"</span>)</span>
<span id="cb12-5"><span class="co">####################################################</span></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co">################### Actual code ####################</span></span>
<span id="cb12-8">gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>() <span class="op">+</span></span>
<span id="cb12-9"><span class="st">  </span><span class="kw">geom_point</span>(<span class="dt">data =</span> data1, <span class="kw">aes</span>(<span class="dt">x =</span> clarity, <span class="dt">y =</span> m), <span class="dt">color =</span> <span class="st">"blue"</span>, <span class="dt">size =</span> <span class="dv">3</span>) <span class="op">+</span><span class="st"> </span></span>
<span id="cb12-10"><span class="st">  </span><span class="kw">geom_point</span>(<span class="dt">data =</span> data2, <span class="kw">aes</span>(<span class="dt">x =</span> clarity, <span class="dt">y =</span> m), <span class="dt">color =</span> <span class="st">"red"</span>)</span>
<span id="cb12-11"><span class="co">####################################################</span></span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="co">############# Create and save widget ###############</span></span>
<span id="cb12-14">p &lt;-<span class="st"> </span><span class="kw">ggplotly</span>(gg)</span>
<span id="cb12-15"><span class="kw">internalSaveWidget</span>(p, <span class="st">'out.html'</span>)</span>
<span id="cb12-16"><span class="co">####################################################</span></span></code></pre>
      </div>
      <p>
        Now you can compile the project: run <code>pbiviz package</code> from
        the folder <strong><em>pbiwidgets/diamonds</em></strong
        >.
      </p>
      <p>
        Open <strong>Power BI</strong> and load the two Excel files. Select
        <em>‘Get more visuals’</em> as before (the icon with the three dots),
        <em>‘Import a visual from a file’</em> and select the
        <strong>pbiviz</strong> file located in the
        <strong><em>pbiwidgets/diamonds/dist</em></strong> folder.
      </p>
      <p>
        Drag and drop the column names of the two datasets to put them in
        <strong>Data1</strong> and <strong>Data2</strong>. Here is the result:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pbiviz05.png"
          style="width: 50%"
        />
      </p>
      <h2 id="helper-function-1">Helper function</h2>
      <p>
        Here is a R function which generates the
        <strong><em>capabilities.json</em></strong> file:
      </p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb13-1"><span class="kw">library</span>(jsonlite)</span>
<span id="cb13-2">fill_capabilities &lt;-<span class="st"> </span><span class="cf">function</span>(path, dataNames, dataDisplayNames){</span>
<span id="cb13-3">  wd &lt;-<span class="st"> </span><span class="kw">setwd</span>(path)</span>
<span id="cb13-4">  <span class="kw">on.exit</span>(<span class="kw">setwd</span>(wd))</span>
<span id="cb13-5">  caps &lt;-<span class="st"> </span><span class="kw">fromJSON</span>(<span class="st">"capabilities.json"</span>, <span class="dt">simplifyVector =</span> <span class="ot">FALSE</span>)</span>
<span id="cb13-6">  caps[[<span class="st">"dataRoles"</span>]] &lt;-<span class="st"> </span><span class="kw">mapply</span>(<span class="cf">function</span>(name, displayName){</span>
<span id="cb13-7">    <span class="kw">list</span>(</span>
<span id="cb13-8">      <span class="st">"displayName"</span> =<span class="st"> </span>displayName, </span>
<span id="cb13-9">      <span class="st">"kind"</span>        =<span class="st"> "GroupingOrMeasure"</span>, </span>
<span id="cb13-10">      <span class="st">"name"</span>        =<span class="st"> </span>name</span>
<span id="cb13-11">    )</span>
<span id="cb13-12">  }, dataNames, dataDisplayNames, <span class="dt">SIMPLIFY =</span> <span class="ot">FALSE</span>, <span class="dt">USE.NAMES =</span> <span class="ot">FALSE</span>)</span>
<span id="cb13-13">  caps[[<span class="st">"dataViewMappings"</span>]][[</span>
<span id="cb13-14">    1L</span>
<span id="cb13-15">  ]][[<span class="st">"scriptResult"</span>]][[<span class="st">"dataInput"</span>]][[<span class="st">"table"</span>]][[<span class="st">"rows"</span>]][[<span class="st">"select"</span>]] &lt;-</span>
<span id="cb13-16"><span class="st">    </span><span class="kw">lapply</span>(dataNames, <span class="cf">function</span>(dataName){</span>
<span id="cb13-17">      <span class="kw">list</span>(<span class="st">"for"</span> =<span class="st"> </span><span class="kw">list</span>(<span class="st">"in"</span> =<span class="st"> </span>dataName))</span>
<span id="cb13-18">    })</span>
<span id="cb13-19">  caps &lt;-<span class="st"> </span><span class="kw">toJSON</span>(caps, <span class="dt">auto_unbox =</span> <span class="ot">TRUE</span>, <span class="dt">null =</span> <span class="st">"null"</span>, <span class="dt">pretty =</span> <span class="dv">2</span>)</span>
<span id="cb13-20">  <span class="kw">writeLines</span>(caps, <span class="st">"capabilities.json"</span>)</span>
<span id="cb13-21">}</span></code></pre>
      </div>
      <p>Usage example:</p>
      <div class="sourceCode" id="cb14">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb14-1"><span class="kw">fill_capabilities</span>(</span>
<span id="cb14-2">  <span class="st">"path/to/pbiwidgets/diamonds"</span>, <span class="kw">c</span>(<span class="st">"data1"</span>, <span class="st">"data2"</span>), <span class="kw">c</span>(<span class="st">"Data1"</span>, <span class="st">"Data2"</span>)</span>
<span id="cb14-3">)</span></code></pre>
      </div>
      <h1 id="limiting-the-number-of-selected-columns">
        Limiting the number of selected columns
      </h1>
      <p>
        We can limit the number of columns that the user can select in a table.
        For instance, let’s take the previous example. The maximum number of
        columns is set in the file <strong><em>capabilities.json</em></strong
        >, in the <code>dataViewMappings</code> field:
      </p>
      <div class="sourceCode" id="cb15">
        <pre
          class="sourceCode json"
        ><code class="sourceCode json"><span id="cb15-1"><span class="fu">{</span></span>
<span id="cb15-2">  <span class="dt">"dataRoles"</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb15-3">    <span class="fu">{</span></span>
<span id="cb15-4">      <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Data1"</span><span class="fu">,</span></span>
<span id="cb15-5">      <span class="dt">"kind"</span><span class="fu">:</span> <span class="st">"GroupingOrMeasure"</span><span class="fu">,</span></span>
<span id="cb15-6">      <span class="dt">"name"</span><span class="fu">:</span> <span class="st">"data1"</span></span>
<span id="cb15-7">    <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb15-8">    <span class="fu">{</span></span>
<span id="cb15-9">      <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Data2"</span><span class="fu">,</span></span>
<span id="cb15-10">      <span class="dt">"kind"</span><span class="fu">:</span> <span class="st">"GroupingOrMeasure"</span><span class="fu">,</span></span>
<span id="cb15-11">      <span class="dt">"name"</span><span class="fu">:</span> <span class="st">"data2"</span></span>
<span id="cb15-12">    <span class="fu">}</span></span>
<span id="cb15-13">  <span class="ot">]</span><span class="fu">,</span></span>
<span id="cb15-14">  <span class="dt">"dataViewMappings"</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb15-15">    <span class="fu">{</span></span>
<span id="cb15-16">      <span class="dt">"conditions"</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb15-17">        <span class="fu">{</span></span>
<span id="cb15-18">          <span class="dt">"data1"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb15-19">            <span class="dt">"max"</span><span class="fu">:</span> <span class="dv">2</span></span>
<span id="cb15-20">          <span class="fu">},</span></span>
<span id="cb15-21">          <span class="dt">"data2"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb15-22">            <span class="dt">"max"</span><span class="fu">:</span> <span class="dv">2</span></span>
<span id="cb15-23">          <span class="fu">}</span></span>
<span id="cb15-24">        <span class="fu">}</span></span>
<span id="cb15-25">      <span class="ot">]</span><span class="fu">,</span></span>
<span id="cb15-26">      <span class="dt">"scriptResult"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb15-27">        <span class="er">......</span></span></code></pre>
      </div>
      <h1 id="combining-widgets">Combining widgets</h1>
      <p>
        The
        <a
          href="https://cran.r-project.org/web/packages/manipulateWidget/vignettes/manipulateWidgets.html"
          >manipulateWidget package</a
        >
        provides a useful function <code>combineWidgets</code> which, as its
        name indicates, allows to combine several widgets.
      </p>
      <p>
        Here is an example using the widgets of the
        <strong>dygraphs</strong> package.
      </p>
      <div class="sourceCode" id="cb16">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb16-1"><span class="kw">source</span>(<span class="st">'./r_files/flatten_HTML.r'</span>)</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co">############### Library Declarations ###############</span></span>
<span id="cb16-4"><span class="kw">libraryRequireInstall</span>(<span class="st">"dygraphs"</span>)</span>
<span id="cb16-5"><span class="kw">libraryRequireInstall</span>(<span class="st">"manipulateWidget"</span>)</span>
<span id="cb16-6"><span class="co">####################################################</span></span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="co">################### Actual code ####################</span></span>
<span id="cb16-9">y1 &lt;-<span class="st"> </span>Values[[<span class="dv">1</span>]]</span>
<span id="cb16-10">y2 &lt;-<span class="st"> </span>Values[[<span class="dv">2</span>]]</span>
<span id="cb16-11">x &lt;-<span class="st"> </span>1L<span class="op">:</span><span class="kw">nrow</span>(Values)</span>
<span id="cb16-12">columnNames &lt;-<span class="st"> </span><span class="kw">colnames</span>(Values)</span>
<span id="cb16-13">df1 &lt;-<span class="st"> </span><span class="kw">data.frame</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y1)</span>
<span id="cb16-14">df2 &lt;-<span class="st"> </span><span class="kw">data.frame</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y2)</span>
<span id="cb16-15">widget1 &lt;-<span class="st"> </span><span class="kw">dygraph</span>(df1, <span class="dt">main =</span> columnNames[1L])</span>
<span id="cb16-16">widget2 &lt;-<span class="st"> </span><span class="kw">dygraph</span>(df2, <span class="dt">main =</span> columnNames[2L])</span>
<span id="cb16-17"><span class="co">####################################################</span></span>
<span id="cb16-18"></span>
<span id="cb16-19"><span class="co">############# Create and save widget ###############</span></span>
<span id="cb16-20">widget &lt;-<span class="st"> </span><span class="kw">combineWidgets</span>(widget1, widget2)</span>
<span id="cb16-21"><span class="kw">internalSaveWidget</span>(widget, <span class="st">'out.html'</span>)</span>
<span id="cb16-22"><span class="co">####################################################</span></span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pbiviz06.png"
          style="width: 50%"
        />
      </p>
      <h1 id="prevent-removal-of-duplicated-rows">
        Prevent removal of duplicated rows
      </h1>
      <p>
        Power BI has an undesirable behavior: when sending the data to R, it
        removes the duplicated rows. To alleviate this problem, you have to add
        a column without duplicated values. An easy way to get such a column
        consists in going to the Power Query Editor (<em>“Transform data”</em>
        button), then going to the tab <em>“Add column”</em> and select
        <em>“Index Column”</em>. Then include this column in the data exported
        to R.
      </p>
      <h1 id="adding-formatting-objects">Adding formatting objects</h1>
      <p>
        Here we explain how to achieve the result shown on the image below. With
        this visual, the user is able to add a title to the chart and to select
        a theme for the chart.
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/pbiviz07.gif"
          style="width: 50%"
        />
      </p>
      <p>
        This is achieved by modifying two files: the file
        <strong><em>capabilities.json</em></strong> and the file
        <strong><em>src/settings.ts</em></strong> in the folder created by
        <strong>pbiviz</strong>.
      </p>
      <p>
        Here is the file <strong><em>capabilities.json</em></strong
        >. We modified the <code>objects</code> node:
      </p>
      <div class="sourceCode" id="cb17">
        <pre
          class="sourceCode json"
        ><code class="sourceCode json"><span id="cb17-1"><span class="fu">{</span></span>
<span id="cb17-2">  <span class="dt">"dataRoles"</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb17-3">    <span class="fu">{</span></span>
<span id="cb17-4">      <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Data (x, y, color, index)"</span><span class="fu">,</span></span>
<span id="cb17-5">      <span class="dt">"kind"</span><span class="fu">:</span> <span class="st">"GroupingOrMeasure"</span><span class="fu">,</span></span>
<span id="cb17-6">      <span class="dt">"name"</span><span class="fu">:</span> <span class="st">"dat"</span></span>
<span id="cb17-7">    <span class="fu">}</span></span>
<span id="cb17-8">  <span class="ot">]</span><span class="fu">,</span></span>
<span id="cb17-9">  <span class="dt">"objects"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb17-10">    <span class="dt">"ggsettings"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb17-11">      <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Chart Settings"</span><span class="fu">,</span></span>
<span id="cb17-12">      <span class="dt">"description"</span><span class="fu">:</span> <span class="st">"Chart theme and title"</span><span class="fu">,</span></span>
<span id="cb17-13">      <span class="dt">"properties"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb17-14">        <span class="dt">"ChartTitle"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb17-15">          <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Chart Title"</span><span class="fu">,</span></span>
<span id="cb17-16">          <span class="dt">"description"</span><span class="fu">:</span> <span class="st">"Set chart title"</span><span class="fu">,</span></span>
<span id="cb17-17">          <span class="dt">"type"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb17-18">            <span class="dt">"text"</span><span class="fu">:</span> <span class="kw">true</span></span>
<span id="cb17-19">          <span class="fu">}</span></span>
<span id="cb17-20">        <span class="fu">},</span></span>
<span id="cb17-21">        <span class="dt">"ChartTheme"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb17-22">          <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Chart Theme"</span><span class="fu">,</span></span>
<span id="cb17-23">          <span class="dt">"description"</span><span class="fu">:</span> <span class="st">"Select the Chart Theme"</span><span class="fu">,</span></span>
<span id="cb17-24">          <span class="dt">"type"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb17-25">            <span class="dt">"enumeration"</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb17-26">              <span class="fu">{</span></span>
<span id="cb17-27">                <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Classic"</span><span class="fu">,</span></span>
<span id="cb17-28">                <span class="dt">"value"</span><span class="fu">:</span> <span class="st">"classic"</span></span>
<span id="cb17-29">              <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb17-30">              <span class="fu">{</span></span>
<span id="cb17-31">                <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Economist"</span><span class="fu">,</span></span>
<span id="cb17-32">                <span class="dt">"value"</span><span class="fu">:</span> <span class="st">"economist"</span></span>
<span id="cb17-33">              <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb17-34">              <span class="fu">{</span></span>
<span id="cb17-35">                <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Excel"</span><span class="fu">,</span></span>
<span id="cb17-36">                <span class="dt">"value"</span><span class="fu">:</span> <span class="st">"excel"</span></span>
<span id="cb17-37">              <span class="fu">}</span></span>
<span id="cb17-38">            <span class="ot">]</span></span>
<span id="cb17-39">          <span class="fu">}</span></span>
<span id="cb17-40">        <span class="fu">}</span></span>
<span id="cb17-41">      <span class="fu">}</span></span>
<span id="cb17-42">    <span class="fu">}</span></span>
<span id="cb17-43">  <span class="fu">},</span></span>
<span id="cb17-44">  <span class="dt">"dataViewMappings"</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb17-45">    <span class="fu">{</span></span>
<span id="cb17-46">     <span class="er">......</span></span></code></pre>
      </div>
      <p>
        And here is the TypeScript file <strong><em>src/settings.ts</em></strong
        >:
      </p>
      <div class="sourceCode" id="cb18">
        <pre
          class="sourceCode ts"
        ><code class="sourceCode typescript"><span id="cb18-1"><span class="st">"use strict"</span><span class="op">;</span></span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="im">import</span> { dataViewObjectsParser } from <span class="st">"powerbi-visuals-utils-dataviewutils"</span><span class="op">;</span></span>
<span id="cb18-4"><span class="im">import</span> DataViewObjectsParser <span class="op">=</span> dataViewObjectsParser<span class="op">.</span><span class="at">DataViewObjectsParser</span><span class="op">;</span></span>
<span id="cb18-5"></span>
<span id="cb18-6">export class VisualSettings extends DataViewObjectsParser {</span>
<span id="cb18-7">  public ggsettings<span class="op">:</span> ChartSettings <span class="op">=</span> <span class="kw">new</span> <span class="fu">ChartSettings</span>()<span class="op">;</span></span>
<span id="cb18-8">}</span>
<span id="cb18-9"></span>
<span id="cb18-10">export class ChartSettings {</span>
<span id="cb18-11">  public ChartTitle<span class="op">:</span> <span class="dt">string</span> <span class="op">=</span> <span class="st">""</span><span class="op">;</span></span>
<span id="cb18-12">  public ChartTheme<span class="op">:</span> <span class="dt">string</span> <span class="op">=</span> <span class="st">"classic"</span><span class="op">;</span></span>
<span id="cb18-13">}</span></code></pre>
      </div>
      <p>
        Then, in the file <strong><em>script.r</em></strong> the title set by
        the user and the theme he chooses are named
        <code>ggsettings_ChartTitle</code> and
        <code>ggsettings_ChartTheme</code> respectively. But they won’t be
        available at the first creation of the chart, so we have to check for
        their existence in the R script:
      </p>
      <div class="sourceCode" id="cb19">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb19-1"><span class="cf">if</span>(<span class="kw">exists</span>(<span class="st">"ggsettings_ChartTheme"</span>) <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">exists</span>(<span class="st">"ggsettings_ChartTitle"</span>)){</span>
<span id="cb19-2">  ......</span></code></pre>
      </div>
      <p>Here is the full script I used:</p>
      <div class="sourceCode" id="cb20">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb20-1"><span class="kw">source</span>(<span class="st">'./r_files/flatten_HTML.r'</span>)</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="co">############### Library Declarations ###############</span></span>
<span id="cb20-4"><span class="kw">libraryRequireInstall</span>(<span class="st">"plotly"</span>)</span>
<span id="cb20-5"><span class="kw">library</span>(ggthemes)</span>
<span id="cb20-6"><span class="co">####################################################</span></span>
<span id="cb20-7"></span>
<span id="cb20-8"><span class="co">################### Actual code ####################</span></span>
<span id="cb20-9">nms &lt;-<span class="st"> </span><span class="kw">colnames</span>(dat)</span>
<span id="cb20-10">ncols &lt;-<span class="st"> </span><span class="kw">length</span>(nms)</span>
<span id="cb20-11"><span class="cf">if</span>(ncols <span class="op">==</span><span class="st"> </span><span class="dv">4</span>){</span>
<span id="cb20-12">  gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(</span>
<span id="cb20-13">    dat, <span class="kw">aes_string</span>(<span class="dt">x =</span> nms[<span class="dv">1</span>], <span class="dt">y =</span> nms[<span class="dv">2</span>], <span class="dt">color =</span> nms[<span class="dv">3</span>])</span>
<span id="cb20-14">  ) <span class="op">+</span><span class="st"> </span></span>
<span id="cb20-15"><span class="st">    </span><span class="kw">geom_point</span>()</span>
<span id="cb20-16">}<span class="cf">else</span>{</span>
<span id="cb20-17">  <span class="kw">stop</span>(<span class="st">"You have to select four columns!"</span>)</span>
<span id="cb20-18">}</span>
<span id="cb20-19"></span>
<span id="cb20-20"><span class="cf">if</span>(<span class="kw">exists</span>(<span class="st">"ggsettings_ChartTheme"</span>) <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">exists</span>(<span class="st">"ggsettings_ChartTitle"</span>)){</span>
<span id="cb20-21">  gg &lt;-<span class="st"> </span>gg <span class="op">+</span><span class="st"> </span><span class="kw">ggtitle</span>(ggsettings_ChartTitle)</span>
<span id="cb20-22">  <span class="cf">if</span>(ggsettings_ChartTheme <span class="op">==</span><span class="st"> "economist"</span>){</span>
<span id="cb20-23">    gg &lt;-<span class="st"> </span>gg <span class="op">+</span><span class="st"> </span><span class="kw">scale_color_economist</span>() <span class="op">+</span><span class="st"> </span><span class="kw">theme_economist</span>()</span>
<span id="cb20-24">  }<span class="cf">else</span> <span class="cf">if</span>(ggsettings_ChartTheme <span class="op">==</span><span class="st"> "excel"</span>){</span>
<span id="cb20-25">    gg &lt;-<span class="st"> </span>gg <span class="op">+</span><span class="st"> </span><span class="kw">scale_color_excel_new</span>() <span class="op">+</span><span class="st"> </span><span class="kw">theme_excel_new</span>()</span>
<span id="cb20-26">  }</span>
<span id="cb20-27">}</span>
<span id="cb20-28"><span class="co">####################################################</span></span>
<span id="cb20-29"></span>
<span id="cb20-30"><span class="co">############# Create and save widget ###############</span></span>
<span id="cb20-31">p &lt;-<span class="st"> </span><span class="kw">ggplotly</span>(gg)</span>
<span id="cb20-32"><span class="kw">internalSaveWidget</span>(p, <span class="st">'out.html'</span>)</span>
<span id="cb20-33"><span class="co">####################################################</span></span></code></pre>
      </div>
      <h2 id="list-of-available-object-types">
        List of available object types
      </h2>
      <ul>
        <li>color picker:</li>
      </ul>
      <div class="sourceCode" id="cb21">
        <pre
          class="sourceCode json"
        ><code class="sourceCode json"><span id="cb21-1"><span class="er">"type":</span> <span class="fu">{</span></span>
<span id="cb21-2">  <span class="dt">"fill"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb21-3">    <span class="dt">"solid"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb21-4">      <span class="dt">"color"</span><span class="fu">:</span> <span class="kw">true</span></span>
<span id="cb21-5">    <span class="fu">}</span></span>
<span id="cb21-6">  <span class="fu">}</span></span>
<span id="cb21-7"><span class="fu">}</span></span></code></pre>
      </div>
      <ul>
        <li>text input:</li>
      </ul>
      <div class="sourceCode" id="cb22">
        <pre
          class="sourceCode json"
        ><code class="sourceCode json"><span id="cb22-1"><span class="er">"type":</span> <span class="fu">{</span></span>
<span id="cb22-2">  <span class="dt">"text"</span><span class="fu">:</span> <span class="kw">true</span></span>
<span id="cb22-3"><span class="fu">}</span></span></code></pre>
      </div>
      <ul>
        <li>number input:</li>
      </ul>
      <div class="sourceCode" id="cb23">
        <pre
          class="sourceCode json"
        ><code class="sourceCode json"><span id="cb23-1"><span class="er">"type":</span> <span class="fu">{</span></span>
<span id="cb23-2">  <span class="dt">"numeric"</span><span class="fu">:</span> <span class="kw">true</span></span>
<span id="cb23-3"><span class="fu">}</span></span></code></pre>
      </div>
      <ul>
        <li>integer input:</li>
      </ul>
      <div class="sourceCode" id="cb24">
        <pre
          class="sourceCode json"
        ><code class="sourceCode json"><span id="cb24-1"><span class="er">"type":</span> <span class="fu">{</span></span>
<span id="cb24-2">  <span class="dt">"integer"</span><span class="fu">:</span> <span class="kw">true</span></span>
<span id="cb24-3"><span class="fu">}</span></span></code></pre>
      </div>
      <ul>
        <li>switch input (true/false):</li>
      </ul>
      <div class="sourceCode" id="cb25">
        <pre
          class="sourceCode json"
        ><code class="sourceCode json"><span id="cb25-1"><span class="er">"type":</span> <span class="fu">{</span></span>
<span id="cb25-2">  <span class="dt">"bool"</span><span class="fu">:</span> <span class="kw">true</span></span>
<span id="cb25-3"><span class="fu">}</span></span></code></pre>
      </div>
      <ul>
        <li>percentage input:</li>
      </ul>
      <div class="sourceCode" id="cb26">
        <pre
          class="sourceCode json"
        ><code class="sourceCode json"><span id="cb26-1"><span class="er">"type":</span> <span class="fu">{</span></span>
<span id="cb26-2">  <span class="dt">"formatting"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb26-3">    <span class="dt">"fontSize"</span><span class="fu">:</span> <span class="kw">true</span></span>
<span id="cb26-4">  <span class="fu">}</span></span>
<span id="cb26-5"><span class="fu">}</span></span></code></pre>
      </div>
      <ul>
        <li>dropdown list:</li>
      </ul>
      <div class="sourceCode" id="cb27">
        <pre
          class="sourceCode json"
        ><code class="sourceCode json"><span id="cb27-1"><span class="er">"type":</span> <span class="fu">{</span></span>
<span id="cb27-2">  <span class="dt">"enumeration"</span><span class="fu">:</span> <span class="ot">[</span></span>
<span id="cb27-3">    <span class="fu">{</span></span>
<span id="cb27-4">      <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Item 1"</span><span class="fu">,</span></span>
<span id="cb27-5">      <span class="dt">"value"</span><span class="fu">:</span> <span class="st">"item1"</span></span>
<span id="cb27-6">    <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb27-7">    <span class="fu">{</span></span>
<span id="cb27-8">      <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Item 2"</span><span class="fu">,</span></span>
<span id="cb27-9">      <span class="dt">"value"</span><span class="fu">:</span> <span class="st">"item2"</span></span>
<span id="cb27-10">    <span class="fu">}</span></span>
<span id="cb27-11">  <span class="ot">]</span></span>
<span id="cb27-12"><span class="fu">}</span></span></code></pre>
      </div>
      <h1 id="restricting-a-number-input-to-a-range">
        Restricting a number input to a range
      </h1>
      <p>
        It might be desirable to have a minimum value and a maximum value for a
        number input. Assume you have such an <code>objects</code> field in
        <strong><em>capabilities.json</em></strong
        >:
      </p>
      <div class="sourceCode" id="cb28">
        <pre
          class="sourceCode json"
        ><code class="sourceCode json"><span id="cb28-1">  <span class="er">"objects":</span> <span class="fu">{</span></span>
<span id="cb28-2">    <span class="dt">"regressionline"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb28-3">      <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Regression Line"</span><span class="fu">,</span></span>
<span id="cb28-4">      <span class="dt">"description"</span><span class="fu">:</span> <span class="st">"Add regression line"</span><span class="fu">,</span></span>
<span id="cb28-5">      <span class="dt">"properties"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb28-6">        <span class="dt">"AddLine"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb28-7">          <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Add"</span><span class="fu">,</span></span>
<span id="cb28-8">          <span class="dt">"description"</span><span class="fu">:</span> <span class="st">"Add regression line"</span><span class="fu">,</span></span>
<span id="cb28-9">          <span class="dt">"type"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb28-10">            <span class="dt">"bool"</span><span class="fu">:</span> <span class="kw">true</span></span>
<span id="cb28-11">          <span class="fu">}</span></span>
<span id="cb28-12">        <span class="fu">},</span></span>
<span id="cb28-13">        <span class="dt">"LineWidth"</span><span class="er">;</span> <span class="er">{</span></span>
<span id="cb28-14">          <span class="dt">"displayName"</span><span class="fu">:</span> <span class="st">"Line Width"</span><span class="fu">,</span></span>
<span id="cb28-15">          <span class="dt">"description"</span><span class="fu">:</span> <span class="st">"Width of regression line"</span><span class="fu">,</span></span>
<span id="cb28-16">          <span class="dt">"type"</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb28-17">            <span class="dt">"numeric"</span><span class="fu">:</span> <span class="kw">true</span></span>
<span id="cb28-18">          <span class="fu">}</span></span>
<span id="cb28-19">        <span class="fu">}</span></span>
<span id="cb28-20">      <span class="fu">}</span></span>
<span id="cb28-21">    <span class="fu">}</span><span class="er">,</span></span>
<span id="cb28-22">    <span class="er">......</span></span>
<span id="cb28-23">  <span class="er">}</span></span></code></pre>
      </div>
      <p>
        You want to restrict the choice of the line width, say for example it
        must lie between 2 and 8. Then you have to modify the file
        <strong><em>src/visual.ts</em></strong
        >. Firstly, you have to add this import:
      </p>
      <div class="sourceCode" id="cb29">
        <pre
          class="sourceCode ts"
        ><code class="sourceCode typescript"><span id="cb29-1"><span class="im">import</span> VisualObjectInstanceEnumeration <span class="op">=</span> powerbi<span class="op">.</span><span class="at">VisualObjectInstanceEnumeration</span><span class="op">;</span></span></code></pre>
      </div>
      <p>
        (add it in the block of imports at the beginning of the file). Secondly,
        you have to replace the function
        <code>enumerateObjectInstances</code> defined at the end with:
      </p>
      <div class="sourceCode" id="cb30">
        <pre
          class="sourceCode ts"
        ><code class="sourceCode typescript"><span id="cb30-1">public <span class="fu">enumerateObjectInstances</span>(</span>
<span id="cb30-2">  options<span class="op">:</span> EnumerateVisualObjectInstancesOptions</span>
<span id="cb30-3">)<span class="op">:</span> VisualObjectInstanceEnumeration {</span>
<span id="cb30-4">  var enumeratedObjects<span class="op">:</span> VisualObjectInstanceEnumerationObject <span class="op">=</span> <span class="op">&lt;</span></span>
<span id="cb30-5">    VisualObjectInstanceEnumerationObject</span>
<span id="cb30-6">  <span class="op">&gt;</span>VisualSettings<span class="op">.</span><span class="fu">enumerateObjectInstances</span>(</span>
<span id="cb30-7">    this<span class="op">.</span><span class="at">settings</span> <span class="op">||</span> VisualSettings<span class="op">.</span><span class="fu">getDefault</span>()<span class="op">,</span> options</span>
<span id="cb30-8">  )<span class="op">;</span></span>
<span id="cb30-9"></span>
<span id="cb30-10">  <span class="fu">if</span> (options<span class="op">.</span><span class="at">objectName</span> <span class="op">===</span> <span class="st">"regressionline"</span>) {</span>
<span id="cb30-11">    enumeratedObjects<span class="op">.</span><span class="at">instances</span>[<span class="dv">0</span>]<span class="op">.</span><span class="at">validValues</span> <span class="op">=</span> {</span>
<span id="cb30-12">      LineWidth<span class="op">:</span> { numberRange<span class="op">:</span> { min<span class="op">:</span> <span class="dv">2</span><span class="op">,</span> max<span class="op">:</span> <span class="dv">8</span> } }</span>
<span id="cb30-13">    }<span class="op">;</span></span>
<span id="cb30-14">  }</span>
<span id="cb30-15"></span>
<span id="cb30-16">  return enumeratedObjects<span class="op">;</span></span>
<span id="cb30-17">}</span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 24 Nov 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/pbiviz.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The missing lazy numbers: implementation</title>
      <link>https://laustep.github.io/stlahblog/posts/lazyNumbers3.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In Haskell, for any type <code>T</code> (for example
        <code>Double</code>), there is a corresponding type
        <code>Maybe T</code>. An object of this type either has form
        <code>Just x</code>, where <code>x</code> is of type <code>T</code>, or
        is <code>Nothing</code>. Thus one can use the <code>Maybe T</code> type
        to extend the type <code>T</code> to a type allowing missing values. One
        can test whether a <code>Maybe T</code> object <code>y</code> is not
        “missing” with <code>isJust y</code>, and, if so, one can extract its
        <code>T</code> value with <code>fromJust y</code>, which returns the
        object <code>x</code> of type <code>T</code> such that
        <code>y</code> equals <code>Just x</code>. There is also the function
        <code>isNothing</code>, whose name is explicit.
      </p>
      <p>
        There is something similar in C++, available since C++ 17: the type
        <code>std::optional&lt;T&gt;</code>. I used it with
        <strong>Rcpp</strong> to allow missing values in vectors of
        <a href="https://laustep.github.io/stlahblog/posts/lazyNumbers.html"
          >lazy numbers</a
        >.
      </p>
      <p>The <code>lazyNumber</code> type is defined as follows in C++:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode cpp"
        ><code class="sourceCode cpp"><span id="cb1-1"><span class="kw">typedef</span> CGAL::Quotient&lt;CGAL::MP_Float&gt; Quotient;</span>
<span id="cb1-2"><span class="kw">typedef</span> CGAL::Lazy_exact_nt&lt;Quotient&gt;  lazyNumber;</span></code></pre>
      </div>
      <p>Then one can define the <code>maybeLazyNumber</code> type:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode cpp"
        ><code class="sourceCode cpp"><span id="cb2-1"><span class="kw">typedef</span> <span class="bu">std::</span>optional&lt;lazyNumber&gt;      maybeLazyNumber;</span></code></pre>
      </div>
      <p>
        and the type <code>lazyVector</code> to deals with vectors of (maybe)
        lazy numbers:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode cpp"
        ><code class="sourceCode cpp"><span id="cb3-1"><span class="kw">typedef</span> <span class="bu">std::</span>vector&lt;maybeLazyNumber&gt;   lazyVector;</span></code></pre>
      </div>
      <p>
        Now, what is the equivalent of the Haskell elements
        <code>Just x</code> and <code>Nothing</code> and the functions
        <code>isJust</code>, <code>isNothing</code>, and <code>fromJust</code>?
      </p>
      <p>
        Well, <code>Nothing</code> corresponds to <code>std::nullopt</code>. The
        equivalent of <code>isJust y</code> is obtained as follows. A
        <code>maybeLazyNumber</code> object <code>y</code> is either
        <code>std::nullopt</code> or a pointer to a
        <code>lazyNumber</code> object. To test whether <code>y</code> points to
        a <code>lazyNumber</code> object <code>x</code>, one simply does
        <code>if(y)</code>. And if so, the <code>lazyNumber</code> object
        <code>x</code> is nothing but <code>*y</code>. Thus the equivalent of
        the Haskell command <code>fromJust y</code> in C++ is <code>*y</code>.
      </p>
      <p>
        For example, here is the implementation of the C++ function which
        converts a vector of double numbers with possible missing values to a
        vector of (maybe) lazy numbers:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode cpp"
        ><code class="sourceCode cpp"><span id="cb4-1">lazyVector doubleVector_to_lazyVector(Rcpp::NumericVector dvector) {</span>
<span id="cb4-2">  <span class="dt">int</span> n = dvector.size();</span>
<span id="cb4-3">  lazyVector lvector;</span>
<span id="cb4-4">  lvector.reserve(n);</span>
<span id="cb4-5">  <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; n; i++) {</span>
<span id="cb4-6">    <span class="cf">if</span>(Rcpp::NumericVector::is_na(dvector(i))) {</span>
<span id="cb4-7">      lvector.emplace_back(<span class="bu">std::</span>nullopt);</span>
<span id="cb4-8">    } <span class="cf">else</span> {</span>
<span id="cb4-9">      lvector.emplace_back(lazyNumber(dvector(i)));</span>
<span id="cb4-10">    }</span>
<span id="cb4-11">  }</span>
<span id="cb4-12">  <span class="cf">return</span> lvector;</span>
<span id="cb4-13">}</span></code></pre>
      </div>
      <p>
        And here is the function performing the conversion in the other
        direction:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode cpp"
        ><code class="sourceCode cpp"><span id="cb5-1">Rcpp::NumericVector lazyVector_to_doubleVector(lazyVector lvector) {</span>
<span id="cb5-2">  <span class="dt">int</span> n = lvector.size();</span>
<span id="cb5-3">  Rcpp::NumericVector dvector(n);</span>
<span id="cb5-4">  <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; n; i++) {</span>
<span id="cb5-5">    maybeLazyNumber y = lvector[i];</span>
<span id="cb5-6">    <span class="cf">if</span>(y) {</span>
<span id="cb5-7">      dvector(i) = Rcpp::NumericVector::get_na();</span>
<span id="cb5-8">    } <span class="cf">else</span> {</span>
<span id="cb5-9">      dvector(i) = CGAL::to_double&lt;Quotient&gt;((*y).exact());</span>
<span id="cb5-10">    }</span>
<span id="cb5-11">  }</span>
<span id="cb5-12">  <span class="cf">return</span> dvector;</span>
<span id="cb5-13">}</span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 19 Nov 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/lazyNumbers3.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The lazy numbers in R: correction</title>
      <link>https://laustep.github.io/stlahblog/posts/lazyNumbers2.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Because of a change I did in the <strong>lazyNumbers</strong> package, I
        have to post a correction to
        <a href="https://laustep.github.io/stlahblog/posts/lazyNumbers.html"
          >my previous post</a
        >.
      </p>
      <p>
        The <code>as.double</code> function, called on a lazy number, was not
        stable. Now it is. In the previous post, the following equality was
        true:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(lazyNumbers)</span>
<span id="cb1-2">x &lt;-<span class="st"> </span><span class="dv">1</span> <span class="op">-</span><span class="st"> </span><span class="kw">lazynb</span>(<span class="dv">7</span>) <span class="op">*</span><span class="st"> </span><span class="fl">0.1</span></span>
<span id="cb1-3"><span class="kw">as.double</span>(x) <span class="op">==</span><span class="st"> </span><span class="fl">0.3</span></span>
<span id="cb1-4"><span class="co">## [1] FALSE</span></span></code></pre>
      </div>
      <p>
        It is not true anymore. This is expected actually. Indeed, the double
        numbers <code>0.1</code> and <code>0.3</code> do not exactly represent
        the numbers <span class="math inline">\(0.1\)</span> and
        <span class="math inline">\(0.3\)</span>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">print</span>(<span class="fl">0.1</span>, <span class="dt">digits =</span> 17L)</span>
<span id="cb2-2"><span class="co">## [1] 0.10000000000000001</span></span>
<span id="cb2-3"><span class="kw">print</span>(<span class="fl">0.3</span>, <span class="dt">digits =</span> 17L)</span>
<span id="cb2-4"><span class="co">## [1] 0.29999999999999999</span></span></code></pre>
      </div>
      <p>
        The double representation of whole numbers is exact. The following
        equality is true:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(lazyNumbers)</span>
<span id="cb3-2">x &lt;-<span class="st"> </span><span class="dv">1</span> <span class="op">-</span><span class="st"> </span><span class="kw">lazynb</span>(<span class="dv">7</span>) <span class="op">/</span><span class="st"> </span><span class="dv">10</span></span>
<span id="cb3-3"><span class="kw">as.double</span>(x) <span class="op">==</span><span class="st"> </span><span class="fl">0.3</span></span>
<span id="cb3-4"><span class="co">## [1] TRUE</span></span></code></pre>
      </div>
      <p>
        No other change, and nothing else to correct. It is time to submit the
        package to CRAN. See the
        <a href="https://github.com/stla/lazyNumbers">Github repository</a> for
        another short presentation of this package.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Tue, 15 Nov 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/lazyNumbers2.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The lazy numbers in R</title>
      <link>https://laustep.github.io/stlahblog/posts/lazyNumbers.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        My new package
        <a href="https://github.com/stla/lazyNumbers"
          ><strong>lazyNumbers</strong></a
        >
        is a port of the lazy numbers implemented in the C++ library
        <strong>CGAL</strong>. The lazy numbers represent the real numbers and
        arithmetic on these numbers is exact.
      </p>
      <p>
        The ordinary floating-point arithmetic is not exact. Consider for
        example the simple operation
        <span class="math inline">\(1 - 7 \times 0.1\)</span>. In double
        precision, it is not equal to <span class="math inline">\(0.3\)</span>:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">x &lt;-<span class="st"> </span><span class="dv">1</span> <span class="op">-</span><span class="st"> </span><span class="dv">7</span> <span class="op">*</span><span class="st"> </span><span class="fl">0.1</span></span>
<span id="cb1-2">x <span class="op">==</span><span class="st"> </span><span class="fl">0.3</span></span>
<span id="cb1-3"><span class="co">## [1] FALSE</span></span></code></pre>
      </div>
      <p>
        With the lazy numbers, it is equal to
        <span class="math inline">\(0.3\)</span>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(lazyNumbers)</span>
<span id="cb2-2">x &lt;-<span class="st"> </span><span class="kw">lazynb</span>(<span class="dv">1</span>) <span class="op">-</span><span class="st"> </span><span class="kw">lazynb</span>(<span class="dv">7</span>) <span class="op">*</span><span class="st"> </span><span class="kw">lazynb</span>(<span class="fl">0.1</span>)</span>
<span id="cb2-3"><span class="kw">as.double</span>(x) <span class="op">==</span><span class="st"> </span><span class="fl">0.3</span></span>
<span id="cb2-4"><span class="co">## [1] TRUE</span></span></code></pre>
      </div>
      <p>
        <strong><em>Correction:</em></strong> <em>this is</em>
        <a href="https://laustep.github.io/stlahblog/posts/lazyNumbers2.html"
          ><em>wrong</em></a
        ><em>!</em>
      </p>
      <p>
        In fact, when a binary operation involves a lazy number, the other
        number is automatically converted to a lazy number, so you can shortly
        enter this operation as follows:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">x &lt;-<span class="st"> </span><span class="dv">1</span> <span class="op">-</span><span class="st"> </span><span class="kw">lazynb</span>(<span class="dv">7</span>) <span class="op">*</span><span class="st"> </span><span class="fl">0.1</span></span>
<span id="cb3-2"><span class="kw">as.double</span>(x) <span class="op">==</span><span class="st"> </span><span class="fl">0.3</span></span>
<span id="cb3-3"><span class="co">## [1] TRUE</span></span></code></pre>
      </div>
      <p>
        Let’s see a more dramatic example now. Consider the sequence
        <span class="math inline">\((u_n)\)</span> recursively defined by
        <span class="math inline">\(u_1 = 1/7\)</span> and
        <span class="math inline">\(u_{n+1} = 8 u_n - 1\)</span>. You can easily
        check that <span class="math inline">\(u_2 = 1/7\)</span>, therefore
        <span class="math inline">\(u_n = 1/7\)</span> for every
        <span class="math inline">\(n \geqslant 1\)</span>. However, when
        implemented in double precision, this sequence quickly goes crazy (<span
          class="math inline"
          >\(1/7 \approx 0.1428571\)</span
        >):
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">u &lt;-<span class="st"> </span><span class="cf">function</span>(n) {</span>
<span id="cb4-2">  <span class="cf">if</span>(n <span class="op">==</span><span class="st"> </span><span class="dv">1</span>) {</span>
<span id="cb4-3">    <span class="kw">return</span>(<span class="dv">1</span> <span class="op">/</span><span class="st"> </span><span class="dv">7</span>)</span>
<span id="cb4-4">  }</span>
<span id="cb4-5">  <span class="dv">8</span> <span class="op">*</span><span class="st"> </span><span class="kw">u</span>(n<span class="dv">-1</span>) <span class="op">-</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb4-6">}</span>
<span id="cb4-7"><span class="kw">u</span>(<span class="dv">15</span>)</span>
<span id="cb4-8"><span class="co">## [1] 0.1428223</span></span>
<span id="cb4-9"><span class="kw">u</span>(<span class="dv">18</span>)</span>
<span id="cb4-10"><span class="co">## [1] 0.125</span></span>
<span id="cb4-11"><span class="kw">u</span>(<span class="dv">20</span>)</span>
<span id="cb4-12"><span class="co">## [1] -1</span></span>
<span id="cb4-13"><span class="kw">u</span>(<span class="dv">30</span>)</span>
<span id="cb4-14"><span class="co">## [1] -1227133513</span></span></code></pre>
      </div>
      <p>
        With the lazy numbers, this sequence never moves from
        <span class="math inline">\(1/7\)</span>:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">u_lazy &lt;-<span class="st"> </span><span class="cf">function</span>(n) {</span>
<span id="cb5-2">  <span class="cf">if</span>(n <span class="op">==</span><span class="st"> </span><span class="dv">1</span>) {</span>
<span id="cb5-3">    <span class="kw">return</span>(<span class="dv">1</span> <span class="op">/</span><span class="st"> </span><span class="kw">lazynb</span>(<span class="dv">7</span>))</span>
<span id="cb5-4">  }</span>
<span id="cb5-5">  <span class="dv">8</span> <span class="op">*</span><span class="st"> </span><span class="kw">u_lazy</span>(n<span class="dv">-1</span>) <span class="op">-</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb5-6">}</span>
<span id="cb5-7"><span class="kw">as.double</span>(<span class="kw">u_lazy</span>(<span class="dv">100</span>))</span>
<span id="cb5-8"><span class="co">## [1] 0.1428571</span></span></code></pre>
      </div>
      <p>
        Let’s compare with the multiple precision numbers provided by the
        <strong>Rmpfr</strong> package. One has to set the precision of these
        numbers. Let’s try with <span class="math inline">\(256\)</span> bits
        (the double precision corresponds to
        <span class="math inline">\(53\)</span> bits):
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">library</span>(Rmpfr)</span>
<span id="cb6-2">u_mpfr &lt;-<span class="st"> </span><span class="cf">function</span>(n) {</span>
<span id="cb6-3">  <span class="cf">if</span>(n <span class="op">==</span><span class="st"> </span><span class="dv">1</span>) {</span>
<span id="cb6-4">    <span class="kw">return</span>(<span class="dv">1</span> <span class="op">/</span><span class="st"> </span><span class="kw">mpfr</span>(<span class="dv">7</span>, <span class="dt">prec =</span> 256L))</span>
<span id="cb6-5">  }</span>
<span id="cb6-6">  <span class="dv">8</span> <span class="op">*</span><span class="st"> </span><span class="kw">u_mpfr</span>(n<span class="dv">-1</span>) <span class="op">-</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb6-7">}</span>
<span id="cb6-8"><span class="kw">asNumeric</span>(<span class="kw">u_mpfr</span>(<span class="dv">30</span>))</span>
<span id="cb6-9"><span class="co">## [1] 0.1428571</span></span>
<span id="cb6-10"><span class="kw">asNumeric</span>(<span class="kw">u_mpfr</span>(<span class="dv">85</span>))</span>
<span id="cb6-11"><span class="co">## [1] 0.140625</span></span>
<span id="cb6-12"><span class="kw">asNumeric</span>(<span class="kw">u_mpfr</span>(<span class="dv">100</span>))</span>
<span id="cb6-13"><span class="co">## [1] -78536544841</span></span></code></pre>
      </div>
      <p>
        The sequence goes crazy before the
        <span class="math inline">\(100^{\textrm{th}}\)</span> term. Of course
        we could increase the precision. With the lazy numbers, there’s no
        precision to set. Moreover they are faster (at least for this example):
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(microbenchmark)</span>
<span id="cb7-2"><span class="kw">options</span>(<span class="dt">digits =</span> 4L)</span>
<span id="cb7-3"><span class="kw">microbenchmark</span>(</span>
<span id="cb7-4">  <span class="dt">lazy =</span> <span class="kw">u_lazy</span>(<span class="dv">200</span>),</span>
<span id="cb7-5">  <span class="dt">mpfr =</span> <span class="kw">u_mpfr</span>(<span class="dv">200</span>),</span>
<span id="cb7-6">  <span class="dt">times =</span> 20L</span>
<span id="cb7-7">)</span>
<span id="cb7-8"><span class="co">## Unit: milliseconds</span></span>
<span id="cb7-9"><span class="co">##  expr   min    lq  mean median    uq   max neval cld</span></span>
<span id="cb7-10"><span class="co">##  lazy 38.42 39.57 40.30  40.04 40.68 43.47    20  a </span></span>
<span id="cb7-11"><span class="co">##  mpfr 59.22 60.09 61.01  60.60 61.94 64.89    20   b</span></span></code></pre>
      </div>
      <p>
        Vectors of lazy numbers and matrices of lazy numbers are available in
        the <strong>lazyNumbers</strong> package. One can get the inverse and
        the determinant of a square lazy matrix.
      </p>
      <p>
        A thing to note is that the usual mathematical functions such as
        <span class="math inline">\(\exp\)</span>,
        <span class="math inline">\(\cos\)</span> or
        <span class="math inline">\(\sqrt{}\)</span>, are not implemented for
        lazy numbers. Only the addition, the subtraction, the multiplication,
        the division and the absolute value are implemented.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 12 Nov 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/lazyNumbers.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>'CGAL' meets 'R6': the 'cgalMeshes' package</title>
      <link>https://laustep.github.io/stlahblog/posts/cgalMeshes.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        My new package
        <a href="https://github.com/stla/cgalMeshes">cgalMeshes</a> (not on CRAN
        yet) deals with 3D meshes. All algorithms implemented in this package
        are performed by the C++ library
        <a href="https://www.cgal.org/">CGAL</a>.
      </p>
      <p>
        I already wrapped some <strong>CGAL</strong> stuff in some other
        packages. But these packages have been archived by CRAN because there
        were some warnings from the <strong>CGAL</strong> library, and I can’t
        fix them. So I didn’t implement the algorithms which throw some
        CRAN-unacceptable warnings in <strong>cgalMeshes</strong>, and hopefully
        this package will remain on CRAN.
      </p>
      <p>
        Moreover this package is different: the meshes are represented by a
        <strong>R6</strong> class, called <code>cgalMesh</code>. This is more
        convenient for the user, and once a mesh is instantiated, it stays in
        memory, whereas the mesh was reprocessed at each operation with the
        other packages.
      </p>
      <p>
        Let’s have a quick look at <strong>cgalMeshes</strong>. Recall that the
        <strong>R6</strong> class representing a mesh is called
        <code>cgalMesh</code>. So to create a <strong>R6</strong> object from
        this class, one has to use the <code>new</code> method. This method
        allows to instantiate a mesh from a file, a <strong>rgl</strong> mesh,
        or from a matrix of vertices and a list of faces.
      </p>
      <p>
        I have the Stanford dragon in a mesh file. Let’s create a new
        <code>cgalMesh</code> object from this file:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(cgalMeshes)</span>
<span id="cb1-2">dragon &lt;-<span class="st"> </span>cgalMesh<span class="op">$</span><span class="kw">new</span>(<span class="st">"StanfordDragon.off"</span>)</span>
<span id="cb1-3">dragon</span>
<span id="cb1-4"><span class="co">## Mesh with 100239 vertices and 200379 faces.</span></span></code></pre>
      </div>
      <p>
        Let’s plot it. We first do a <strong>rgl</strong> mesh from
        <code>dragon</code> with the <code>getMesh</code> method:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">rglDragon &lt;-<span class="st"> </span>dragon<span class="op">$</span><span class="kw">getMesh</span>()</span></code></pre>
      </div>
      <p>And now we plot the Stanford dragon:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(rgl)</span>
<span id="cb3-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb3-3"><span class="kw">view3d</span>(<span class="op">-</span><span class="dv">30</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb3-4"><span class="kw">shade3d</span>(rglDragon, <span class="dt">color =</span> <span class="st">"darkgreen"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/StanfordDragon.png"
          style="width: 50%"
        />
      </p>
      <p>We can check whether the mesh is triangle and closed:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">dragon<span class="op">$</span><span class="kw">isTriangle</span>()</span>
<span id="cb4-2"><span class="co">## [1] TRUE</span></span>
<span id="cb4-3">dragon<span class="op">$</span><span class="kw">isClosed</span>()</span>
<span id="cb4-4"><span class="co">## [1] FALSE</span></span></code></pre>
      </div>
      <p>
        I don’t know why this mesh is not closed. If it were closed, we could
        get its volume by running <code>dragon$volume</code>:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">dragon<span class="op">$</span><span class="kw">volume</span>()</span>
<span id="cb5-2"><span class="co">## Error in .CppObject$volume(...): The mesh is not closed.</span></span></code></pre>
      </div>
      <p>
        Let’s do something more funny now. We will compute the geodesic
        distances between a source vertex on the mesh and all other vertices,
        and we will plot the dragon after assigning to each vertex a color
        corresponding to its geodesic distance from the source vertex. The
        geodesic distance between two vertices is the length of the shortest
        path between these two vertices which lies on the surface of the mesh.
      </p>
      <p>We will take the rightmost vertex for the source vertex:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">vertices &lt;-<span class="st"> </span>dragon<span class="op">$</span><span class="kw">vertices</span>()</span>
<span id="cb6-2">index &lt;-<span class="st"> </span><span class="kw">which.max</span>(vertices[, 1L])</span></code></pre>
      </div>
      <p>
        And we call the <code>geoDists</code> method to get the estimated
        geodesic distances:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1">geoDists &lt;-<span class="st"> </span>dragon<span class="op">$</span><span class="kw">geoDists</span>(index)</span></code></pre>
      </div>
      <p>
        Now we define a coloring function, which associates a color of the
        <code>viridisLite::plasma</code> palette to each number in
        <span class="math inline">\((0, 1)\)</span>:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1">fcolor &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(viridisLite<span class="op">::</span><span class="kw">plasma</span>(200L))</span></code></pre>
      </div>
      <p>Then we associate a color to each vertex:</p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1">colors &lt;-<span class="st"> </span><span class="kw">fcolor</span>(geoDists <span class="op">/</span><span class="st"> </span><span class="kw">max</span>(geoDists))</span></code></pre>
      </div>
      <p>
        The <code>colors</code> object is a matrix, one row for each vertex, and
        the columns provide the RGB coding of the color. We use the
        <code>rgb</code> function to get hexadecimal colors:
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1">colors &lt;-<span class="st"> </span><span class="kw">rgb</span>(</span>
<span id="cb10-2">  colors[, 1L], colors[, 2L], colors[, 3L], <span class="dt">maxColorValue =</span> <span class="dv">255</span></span>
<span id="cb10-3">)</span></code></pre>
      </div>
      <p>Now we can add these colors to the <strong>rgl</strong> mesh:</p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1">rglDragon[[<span class="st">"material"</span>]] &lt;-<span class="st"> </span><span class="kw">list</span>(<span class="st">"color"</span> =<span class="st"> </span>colors)</span></code></pre>
      </div>
      <p>And here is the result:</p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb12-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="dv">50</span> <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">512</span>, <span class="dv">512</span>))</span>
<span id="cb12-2"><span class="kw">view3d</span>(<span class="op">-</span><span class="dv">30</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb12-3"><span class="kw">shade3d</span>(rglDragon)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/StanfordDragon_colors.png"
          style="width: 50%"
        />
      </p>
      <p>
        More images on
        <a href="https://github.com/stla/cgalMeshes">the Github repo</a>.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 03 Nov 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/cgalMeshes.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>A note on Shiny reactivity</title>
      <link>https://laustep.github.io/stlahblog/posts/shinyReactivity.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In the ‘shiny’ package, the <code>reactiveConsole</code> function allows
        to enable reactivity at the console, for the purposes of experimentation
        and learning (that doesn’t work in a R Markdown document).
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">reactiveConsole</span>(<span class="ot">TRUE</span>)</span></code></pre>
      </div>
      <p>So let’s play with the Shiny reactivity, without a Shiny app.</p>
      <p>
        The code below creates an observer which observes a
        <em>reactive value</em>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">x &lt;-<span class="st"> </span><span class="kw">reactiveVal</span>(<span class="ot">NULL</span>)</span>
<span id="cb2-2"><span class="kw">observeEvent</span>(<span class="kw">x</span>(), {</span>
<span id="cb2-3">  <span class="kw">print</span>(<span class="st">"An event has occured."</span>)</span>
<span id="cb2-4">})</span></code></pre>
      </div>
      <p>
        Recall that <code>x</code> is a function; when calling it with an
        argument, this sets the value, and when calling it without argument,
        this read the value.
      </p>
      <p>Let’s try it:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="op">&gt;</span><span class="st"> </span><span class="kw">x</span>(<span class="dv">2</span>)  <span class="co"># observer triggered</span></span>
<span id="cb3-2">[<span class="dv">1</span>] <span class="st">"An event has occured."</span></span>
<span id="cb3-3">[<span class="dv">1</span>] <span class="st">"The value of x is 2"</span></span>
<span id="cb3-4"><span class="op">&gt;</span><span class="st"> </span><span class="kw">x</span>(<span class="dv">2</span>)  <span class="co"># observer not triggered, because same value</span></span>
<span id="cb3-5"><span class="op">&gt;</span><span class="st"> </span><span class="kw">x</span>(<span class="op">-</span><span class="dv">2</span>) <span class="co"># observer triggered</span></span>
<span id="cb3-6">[<span class="dv">1</span>] <span class="st">"An event has occured."</span></span>
<span id="cb3-7">[<span class="dv">1</span>] <span class="st">"The value of x is -2"</span></span></code></pre>
      </div>
      <p>Nothing surprising. Everybody knows that.</p>
      <p>
        Now, let’s define a <code>reactive conductor</code> which calculates the
        square of our reactive value, and let’s observe its value:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">x &lt;-<span class="st"> </span><span class="kw">reactiveVal</span>(<span class="ot">NULL</span>)</span>
<span id="cb4-2">xsquared &lt;-<span class="st"> </span><span class="kw">reactive</span>({</span>
<span id="cb4-3">  <span class="kw">x</span>()<span class="op">^</span><span class="dv">2</span></span>
<span id="cb4-4">})</span>
<span id="cb4-5"><span class="kw">observeEvent</span>(<span class="kw">xsquared</span>(), {</span>
<span id="cb4-6">  <span class="kw">print</span>(<span class="st">"An event has occured."</span>)</span>
<span id="cb4-7">  <span class="kw">print</span>(<span class="kw">paste</span>(<span class="st">"The value of x² is"</span>, <span class="kw">xsquared</span>()))</span>
<span id="cb4-8">})</span></code></pre>
      </div>
      <p>
        What happens if we execute the same code as before? The same output as
        before? The answer is <em>no</em>:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="op">&gt;</span><span class="st"> </span><span class="kw">x</span>(<span class="dv">2</span>)  <span class="co"># observer triggered</span></span>
<span id="cb5-2">[<span class="dv">1</span>] <span class="st">"An event has occured."</span></span>
<span id="cb5-3">[<span class="dv">1</span>] <span class="st">"The value of x² is 4"</span></span>
<span id="cb5-4"><span class="op">&gt;</span><span class="st"> </span><span class="kw">x</span>(<span class="dv">2</span>)  <span class="co"># observer not triggered, because nothing has changed</span></span>
<span id="cb5-5"><span class="op">&gt;</span><span class="st"> </span><span class="kw">x</span>(<span class="op">-</span><span class="dv">2</span>) <span class="co"># observer triggered, while x² has not changed!</span></span>
<span id="cb5-6">[<span class="dv">1</span>] <span class="st">"An event has occured."</span></span>
<span id="cb5-7">[<span class="dv">1</span>] <span class="st">"The value of x² is 4"</span></span></code></pre>
      </div>
      <p>
        This is an important difference between a reactive value and a reactive
        conductor. The reactive conductor is also an observer, and here it
        observes the reactive value <code>x()</code>. Then it reacts when
        <code>x()</code> changes and even though its output does not change, it
        triggers an event.
      </p>
      <p>
        Note that an observer observing <code>x()^2</code> is also triggered
        when <code>x()</code> takes the value <code>2</code> then
        <code>-2</code>:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">x &lt;-<span class="st"> </span><span class="kw">reactiveVal</span>(<span class="ot">NULL</span>)</span>
<span id="cb6-2"><span class="kw">observeEvent</span>(<span class="kw">x</span>()<span class="op">^</span><span class="dv">2</span>, {</span>
<span id="cb6-3">  <span class="kw">print</span>(<span class="st">"An event has occured."</span>)</span>
<span id="cb6-4">}, <span class="dt">ignoreInit =</span> <span class="ot">TRUE</span>)</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="op">&gt;</span><span class="st"> </span><span class="kw">x</span>(<span class="dv">2</span>)</span>
<span id="cb6-7">[<span class="dv">1</span>] <span class="st">"An event has occured."</span></span>
<span id="cb6-8"><span class="op">&gt;</span><span class="st"> </span><span class="kw">x</span>(<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb6-9">[<span class="dv">1</span>] <span class="st">"An event has occured."</span></span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 24 Sep 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/shinyReactivity.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The 'Reorient' transformation</title>
      <link>https://laustep.github.io/stlahblog/posts/ReorientTransformation.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        If you follow
        <a
          href="https://www.youtube.com/channel/UCQ2hC8ETS9FFm2pzzyZCVUw/videos"
          >my youtube channel</a
        >
        then you have certainly seen the “ball” of twenty Hopf tori. Sometimes I
        call it the “Hopf flower”. How is it done?
      </p>
      <p>
        Well, firstly, I take twenty points on a ball: the twenty vertices of
        the
        <a
          href="https://laustep.github.io/stlahblog/posts/tetrahedraCompound.html"
          >compound of five tetrahedra</a
        >. Then, I construct one Hopf torus, and for each of the twenty points I
        reorient it towards this point and I translate it to this point. This
        post is about the transformation used to reorient.
      </p>
      <h2 id="pov-ray">POV-Ray</h2>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Reorient_povray.gif"
          style="width: 50%"
        />
      </p>
      <p>
        I discovered this transformation in the file
        <strong>transforms.inc</strong> of the POV-Ray distribution. You can
        find it
        <a
          href="https://github.com/POV-Ray/povray/blob/master/distribution/include/transforms.inc"
          >here</a
        >. Below is the POV-Ray macro which runs the transformation.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode povray"
        ><code class="sourceCode povray"><span id="cb1-1"><span class="kw">#macro Reorient_Trans</span>(Axis1, Axis2)</span>
<span id="cb1-2">   <span class="kw">#local vX1 </span>= <span class="kw">vnormalize</span>(Axis1);</span>
<span id="cb1-3">   <span class="kw">#local vX2 </span>= <span class="kw">vnormalize</span>(Axis2);</span>
<span id="cb1-4">   <span class="kw">#local Y </span>= <span class="kw">vcross</span>(vX1, vX2);</span>
<span id="cb1-5">   <span class="ot">#if</span>(<span class="kw">vlength</span>(Y) &gt; <span class="fl">0</span>)</span>
<span id="cb1-6">      <span class="kw">#local vY </span>= <span class="kw">vnormalize</span>(Y);</span>
<span id="cb1-7">      <span class="kw">#local vZ1 </span>= <span class="kw">vnormalize</span>(<span class="kw">vcross</span>(vX1, vY));</span>
<span id="cb1-8">      <span class="kw">#local vZ2 </span>= <span class="kw">vnormalize</span>(<span class="kw">vcross</span>(vX2, vY));</span>
<span id="cb1-9">      <span class="kw">transform</span> {</span>
<span id="cb1-10">         <span class="kw">matrix</span> &lt; vX1.<span class="kw">x</span>, vY.<span class="kw">x</span>, vZ1.<span class="kw">x</span>, </span>
<span id="cb1-11">                  vX1.<span class="kw">y</span>, vY.<span class="kw">y</span>, vZ1.<span class="kw">y</span>, </span>
<span id="cb1-12">                  vX1.<span class="kw">z</span>, vY.<span class="kw">z</span>, vZ1.<span class="kw">z</span>, </span>
<span id="cb1-13">                  <span class="fl">0</span>,     <span class="fl">0</span>,    <span class="fl">0</span> &gt;</span>
<span id="cb1-14">         <span class="kw">matrix</span> &lt; vX2.<span class="kw">x</span>, vX2.<span class="kw">y</span>, vX2.<span class="kw">z</span>,</span>
<span id="cb1-15">                  vY.<span class="kw">x</span>,  vY.<span class="kw">y</span>,  vY.<span class="kw">z</span>, </span>
<span id="cb1-16">                  vZ2.<span class="kw">x</span>, vZ2.<span class="kw">y</span>, vZ2.<span class="kw">z</span>, </span>
<span id="cb1-17">                  <span class="fl">0</span>,     <span class="fl">0</span>,     <span class="fl">0</span> &gt;</span>
<span id="cb1-18">      }</span>
<span id="cb1-19">   <span class="ot">#else</span></span>
<span id="cb1-20">      <span class="ot">#if</span> (<span class="kw">vlength</span>(vX1-vX2)=<span class="fl">0</span>)</span>
<span id="cb1-21">         <span class="kw">transform</span> {}</span>
<span id="cb1-22">      <span class="ot">#else</span></span>
<span id="cb1-23">         <span class="kw">#local vZ </span>= VPerp_To_Vector(vX2);</span>
<span id="cb1-24">         <span class="kw">transform</span> { Axis_Rotate_Trans(vZ,<span class="fl">180</span>) }</span>
<span id="cb1-25">      <span class="ot">#end</span></span>
<span id="cb1-26">   <span class="ot">#end</span></span>
<span id="cb1-27"><span class="ot">#end</span></span></code></pre>
      </div>
      <p>
        <code>Axis1</code> is the vector to be rotated and <code>Axis2</code> is
        the vector to be rotated towards. Usually, <code>Axis1</code> is the
        <span class="math inline">\(x\)</span>,
        <span class="math inline">\(y\)</span>, or
        <span class="math inline">\(z\)</span> direction, that depends on the
        software used.
      </p>
      <h2 id="haskell">Haskell</h2>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Reorient_haskell.gif"
          style="width: 50%"
        />
      </p>
      <p>
        I also did the ball of twenty Hopf tori in Haskell, with the
        <strong>OpenGL</strong> library. The full code is available in
        <a href="https://github.com/stla/opengl-HopfTorus"
          >this Github repository</a
        >. Below are the relevant parts of the code.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode haskell"
        ><code class="sourceCode haskell"><span id="cb2-1"><span class="kw">import</span> <span class="dt">Data.Foldable</span> (toList)</span>
<span id="cb2-2"><span class="kw">import</span> <span class="dt">Linear</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="ot">translateAndReorient ::</span> (<span class="dt">Real</span> a, <span class="dt">Floating</span> a) <span class="ot">=&gt;</span> <span class="dt">V3</span> a <span class="ot">-&gt;</span> <span class="dt">V3</span> a <span class="ot">-&gt;</span> [a]</span>
<span id="cb2-5">translateAndReorient axis vector <span class="ot">=</span> </span>
<span id="cb2-6">  <span class="fu">concatMap</span> toList (toList (mkTransformationMat m vector))</span>
<span id="cb2-7">  <span class="kw">where</span></span>
<span id="cb2-8">    vx1 <span class="ot">=</span> axis <span class="op">^/</span> (norm axis)</span>
<span id="cb2-9">    vx2 <span class="ot">=</span> vector <span class="op">^/</span> (norm vector)</span>
<span id="cb2-10">    y' <span class="ot">=</span> cross vx1 vx2</span>
<span id="cb2-11">    y <span class="ot">=</span> y' <span class="op">^/</span> norm y'</span>
<span id="cb2-12">    z1' <span class="ot">=</span> cross vx1 y</span>
<span id="cb2-13">    z1 <span class="ot">=</span> z1' <span class="op">^/</span> norm z1'</span>
<span id="cb2-14">    z2' <span class="ot">=</span> cross vx2 y</span>
<span id="cb2-15">    z2 <span class="ot">=</span> z2' <span class="op">^/</span> norm z2'</span>
<span id="cb2-16">    m1 <span class="ot">=</span> transpose <span class="op">$</span> <span class="dt">V3</span> vx1 y z1</span>
<span id="cb2-17">    m2 <span class="ot">=</span> <span class="dt">V3</span> vx2 y z2</span>
<span id="cb2-18">    m <span class="ot">=</span> transpose <span class="op">$</span> m1 <span class="op">!*!</span> m2</span></code></pre>
      </div>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode haskell"
        ><code class="sourceCode haskell"><span id="cb3-1"><span class="kw">import</span> <span class="dt">Graphics.Rendering.OpenGL.GL</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="op">......</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="ot">tmatrices ::</span> [[<span class="dt">GLfloat</span>]]</span>
<span id="cb3-6">tmatrices <span class="ot">=</span> </span>
<span id="cb3-7">    <span class="fu">map</span> (translateAndReorient (<span class="dt">V3</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span>)) points</span>
<span id="cb3-8">    </span>
<span id="cb3-9"><span class="op">......</span></span>
<span id="cb3-10"></span>
<span id="cb3-11">forM_ tmatrices <span class="op">$</span> \tmatrix <span class="ot">-&gt;</span></span>
<span id="cb3-12">  preservingMatrix <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb3-13">    m <span class="ot">&lt;-</span> newMatrix <span class="dt">RowMajor</span><span class="ot"> tmatrix ::</span> <span class="dt">IO</span> (<span class="dt">GLmatrix</span> <span class="dt">GLfloat</span>)</span>
<span id="cb3-14">    multMatrix m</span>
<span id="cb3-15">    </span>
<span id="cb3-16"><span class="op">......</span></span></code></pre>
      </div>
      <h2 id="r">R</h2>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Reorient_R.gif"
          style="width: 50%"
        />
      </p>
      <p>
        Of course I also did it in R, with the <strong>rgl</strong> package. The
        code is available in
        <a href="https://gist.github.com/stla/9c036c2ae9c678745b784ed8d895a518"
          >this gist</a
        >, and below are the relevant parts of the code.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">Reorient_Trans &lt;-<span class="st"> </span><span class="cf">function</span>(Axis1, Axis2){</span>
<span id="cb4-2">  vX1 &lt;-<span class="st"> </span>Axis1 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(Axis1)))</span>
<span id="cb4-3">  vX2 &lt;-<span class="st"> </span>Axis2 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(Axis2)))</span>
<span id="cb4-4">  Y &lt;-<span class="st"> </span>rgl<span class="op">:::</span><span class="kw">xprod</span>(vX1, vX2)</span>
<span id="cb4-5">  vY &lt;-<span class="st"> </span>Y <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(Y)))</span>
<span id="cb4-6">  Z1 &lt;-<span class="st"> </span>rgl<span class="op">:::</span><span class="kw">xprod</span>(vX1, vY)</span>
<span id="cb4-7">  vZ1 &lt;-<span class="st"> </span>Z1 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(Z1)))</span>
<span id="cb4-8">  Z2 &lt;-<span class="st"> </span>rgl<span class="op">:::</span><span class="kw">xprod</span>(vX2, vY)</span>
<span id="cb4-9">  vZ2 &lt;-<span class="st"> </span>Z2 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(Z2)))</span>
<span id="cb4-10">  M1 &lt;-<span class="st"> </span><span class="kw">cbind</span>(vX1, vY, vZ1)</span>
<span id="cb4-11">  M2 &lt;-<span class="st"> </span><span class="kw">rbind</span>(vX2, vY, vZ2)</span>
<span id="cb4-12">  M &lt;-<span class="st"> </span>M1 <span class="op">%*%</span><span class="st"> </span>M2</span>
<span id="cb4-13">  <span class="kw">rbind</span>(<span class="kw">cbind</span>(M, <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>)), <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>))</span>
<span id="cb4-14">}</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="kw">library</span>(rgl)</span>
<span id="cb4-17"></span>
<span id="cb4-18">......</span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="dv">20</span>){</span>
<span id="cb4-21">    v &lt;-<span class="st"> </span>vertices[i,]</span>
<span id="cb4-22">    M &lt;-<span class="st"> </span><span class="kw">Reorient_Trans</span>(<span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>), v)</span>
<span id="cb4-23">    obj &lt;-<span class="st"> </span><span class="kw">transform3d</span>(HTmesh, M)</span>
<span id="cb4-24">    obj &lt;-<span class="st"> </span><span class="kw">translate3d</span>(obj, v[<span class="dv">1</span>], v[<span class="dv">2</span>], v[<span class="dv">3</span>])</span>
<span id="cb4-25">    <span class="kw">shade3d</span>(obj, <span class="dt">color=</span>colors[i])</span>
<span id="cb4-26">    <span class="kw">shade3d</span>(<span class="kw">Cmesh</span>(<span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>), <span class="dv">0</span>, v, <span class="fl">0.05</span>, <span class="dv">6</span>, <span class="dv">40</span>, <span class="dt">color =</span> <span class="st">"brown"</span>))</span>
<span id="cb4-27">}</span></code></pre>
      </div>
      <h2 id="python">Python</h2>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Reorient_python.gif"
          style="width: 50%"
        />
      </p>
      <p>
        I dit it in Python as well, with the <strong>PyVista</strong> library.
        You can find the code in
        <a href="https://github.com/stla/PyVistaMiscellanous"
          >this Github repository</a
        >.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb5-1"><span class="kw">def</span> Reorient_Trans(Axis1, Axis2):</span>
<span id="cb5-2">  vX1 <span class="op">=</span> Axis1 <span class="co">#/ must be normalized</span></span>
<span id="cb5-3">  vX2 <span class="op">=</span> Axis2 <span class="co">#/ must be normalized</span></span>
<span id="cb5-4">  Y <span class="op">=</span> np.cross(vX1, vX2)</span>
<span id="cb5-5">  vY <span class="op">=</span> Y <span class="op">/</span> np.linalg.norm(Y)</span>
<span id="cb5-6">  Z1 <span class="op">=</span> np.cross(vX1, vY)</span>
<span id="cb5-7">  vZ1 <span class="op">=</span> Z1 <span class="op">/</span> np.linalg.norm(Z1)</span>
<span id="cb5-8">  Z2 <span class="op">=</span> np.cross(vX2, vY)</span>
<span id="cb5-9">  vZ2 <span class="op">=</span> Z2 <span class="op">/</span> np.linalg.norm(Z2)</span>
<span id="cb5-10">  M1 <span class="op">=</span> np.transpose(np.array([vX1, vY, vZ1]))</span>
<span id="cb5-11">  M2 <span class="op">=</span> np.array([vX2, vY, vZ2])</span>
<span id="cb5-12">  M <span class="op">=</span> np.matmul(M1, M2)</span>
<span id="cb5-13">  <span class="cf">return</span> np.transpose(</span>
<span id="cb5-14">      np.column_stack(</span>
<span id="cb5-15">          (np.vstack((M, np.zeros((<span class="dv">1</span>,<span class="dv">3</span>)))), np.transpose(np.array([<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">1</span>])))</span>
<span id="cb5-16">      )</span>
<span id="cb5-17">  )</span>
<span id="cb5-18"></span>
<span id="cb5-19">......</span>
<span id="cb5-20"></span>
<span id="cb5-21">M <span class="op">=</span> Reorient_Trans(np.array([<span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">0</span>]), v)</span>
<span id="cb5-22">m <span class="op">=</span> mesh.copy()</span>
<span id="cb5-23">m.transform(M)</span>
<span id="cb5-24">m.translate((v[<span class="dv">0</span>], v[<span class="dv">1</span>], v[<span class="dv">2</span>]), inplace<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb5-25"></span>
<span id="cb5-26">......</span></code></pre>
      </div>
      <h2 id="asymptote">Asymptote</h2>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Reorient_asymptote.gif"
          style="width: 50%"
        />
      </p>
      <p>
        And I did it in Asymptote too. The full code is available in
        <a href="https://gist.github.com/stla/6892a261bc2c45509cd1482fbeff2f93"
          >this gist</a
        >.
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode cpp"
        ><code class="sourceCode cpp"><span id="cb6-1"><span class="co">// transformation which reorients and translates -----</span></span>
<span id="cb6-2">transform3 transReorient(triple axis, triple vector){</span>
<span id="cb6-3">  triple vX1 = unit(vector);</span>
<span id="cb6-4">  triple vX2 = unit(axis);</span>
<span id="cb6-5">  triple vY = unit(cross(vX1,vX2));</span>
<span id="cb6-6">  triple vZ1 = unit(cross(vX1,vY));</span>
<span id="cb6-7">  triple vZ2 = unit(cross(vX2,vY));</span>
<span id="cb6-8">  real[][] M1 = </span>
<span id="cb6-9">    {{vX1.x, vX1.y, vX1.z}, </span>
<span id="cb6-10">     {vY.x, vY.y, vY.z}, </span>
<span id="cb6-11">     {vZ1.x, vZ1.y, vZ1.z}};</span>
<span id="cb6-12">  real[][] M2 = </span>
<span id="cb6-13">    {{vX2.x, vY.x, vZ2.x}, </span>
<span id="cb6-14">     {vX2.y, vY.y, vZ2.y}, </span>
<span id="cb6-15">     {vX2.z, vY.z, vZ2.z}};</span>
<span id="cb6-16">  real[][] M = transpose(M2*M1);</span>
<span id="cb6-17">  transform3 T = copy(identity4);</span>
<span id="cb6-18">  T[<span class="dv">0</span>][<span class="dv">0</span>] = M[<span class="dv">0</span>][<span class="dv">0</span>];</span>
<span id="cb6-19">  T[<span class="dv">1</span>][<span class="dv">0</span>] = M[<span class="dv">1</span>][<span class="dv">0</span>];</span>
<span id="cb6-20">  T[<span class="dv">2</span>][<span class="dv">0</span>] = M[<span class="dv">2</span>][<span class="dv">0</span>];</span>
<span id="cb6-21">  T[<span class="dv">0</span>][<span class="dv">1</span>] = M[<span class="dv">0</span>][<span class="dv">1</span>];</span>
<span id="cb6-22">  T[<span class="dv">1</span>][<span class="dv">1</span>] = M[<span class="dv">1</span>][<span class="dv">1</span>];</span>
<span id="cb6-23">  T[<span class="dv">2</span>][<span class="dv">1</span>] = M[<span class="dv">2</span>][<span class="dv">1</span>];</span>
<span id="cb6-24">  T[<span class="dv">0</span>][<span class="dv">2</span>] = M[<span class="dv">0</span>][<span class="dv">2</span>];</span>
<span id="cb6-25">  T[<span class="dv">1</span>][<span class="dv">2</span>] = M[<span class="dv">1</span>][<span class="dv">2</span>];</span>
<span id="cb6-26">  T[<span class="dv">2</span>][<span class="dv">2</span>] = M[<span class="dv">2</span>][<span class="dv">2</span>];</span>
<span id="cb6-27">  T[<span class="dv">0</span>][<span class="dv">3</span>] = vector.x;</span>
<span id="cb6-28">  T[<span class="dv">1</span>][<span class="dv">3</span>] = vector.y;</span>
<span id="cb6-29">  T[<span class="dv">2</span>][<span class="dv">3</span>] = vector.z;</span>
<span id="cb6-30">  <span class="cf">return</span> T;</span>
<span id="cb6-31">}</span></code></pre>
      </div>
      <h2 id="three.js">three.js</h2>
      <iframe
        src="../frames/threejs_TwentyHopfTori2.html"
        width="100%"
        height="500px"
        scrolling="no"
        frameborder="0"
      >
      </iframe>
      <p>
        And finally in JavaScript, with <strong>three.js</strong>. Go
        <a
          href="https://github.com/laustep/stlahblog/blob/gh-pages/frames/threejs_TwentyHopfTori2.html"
          >here</a
        >
        for the code. And click
        <a
          href="https://laustep.github.io/stlahblog/frames/threejs_TwentyHopfTori2.html"
          >here</a
        >
        to play with it in full screen.
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode js"
        ><code class="sourceCode javascript"><span id="cb7-1"><span class="kw">function</span> <span class="fu">reorient</span>(axis1<span class="op">,</span> axis2) {</span>
<span id="cb7-2">  <span class="kw">var</span> vX1 <span class="op">=</span> axis1<span class="op">.</span><span class="fu">normalize</span>()<span class="op">;</span></span>
<span id="cb7-3">  <span class="kw">var</span> vX2 <span class="op">=</span> axis2<span class="op">.</span><span class="fu">normalize</span>()<span class="op">;</span></span>
<span id="cb7-4">  <span class="kw">var</span> vY <span class="op">=</span> vX1<span class="op">.</span><span class="fu">clone</span>()<span class="op">.</span><span class="fu">cross</span>(vX2)<span class="op">.</span><span class="fu">normalize</span>()<span class="op">;</span></span>
<span id="cb7-5">  <span class="kw">var</span> vZ1 <span class="op">=</span> vX1<span class="op">.</span><span class="fu">clone</span>()<span class="op">.</span><span class="fu">cross</span>(vY)<span class="op">.</span><span class="fu">normalize</span>()<span class="op">;</span></span>
<span id="cb7-6">  <span class="kw">var</span> vZ2 <span class="op">=</span> vX2<span class="op">.</span><span class="fu">clone</span>()<span class="op">.</span><span class="fu">cross</span>(vY)<span class="op">.</span><span class="fu">normalize</span>()<span class="op">;</span></span>
<span id="cb7-7">  <span class="kw">var</span> M1 <span class="op">=</span> <span class="kw">new</span> THREE<span class="op">.</span><span class="fu">Matrix3</span>()</span>
<span id="cb7-8">    <span class="op">.</span><span class="fu">fromArray</span>([vX1<span class="op">.</span><span class="at">x</span><span class="op">,</span> vX1<span class="op">.</span><span class="at">y</span><span class="op">,</span> vX1<span class="op">.</span><span class="at">z</span><span class="op">,</span> vY<span class="op">.</span><span class="at">x</span><span class="op">,</span> vY<span class="op">.</span><span class="at">y</span><span class="op">,</span> vY<span class="op">.</span><span class="at">z</span><span class="op">,</span> vZ1<span class="op">.</span><span class="at">x</span><span class="op">,</span> vZ1<span class="op">.</span><span class="at">y</span><span class="op">,</span> vZ1<span class="op">.</span><span class="at">z</span>])<span class="op">;</span></span>
<span id="cb7-9">  <span class="kw">var</span> M2 <span class="op">=</span> <span class="kw">new</span> THREE<span class="op">.</span><span class="fu">Matrix3</span>()</span>
<span id="cb7-10">    <span class="op">.</span><span class="fu">fromArray</span>([vX2<span class="op">.</span><span class="at">x</span><span class="op">,</span> vY<span class="op">.</span><span class="at">x</span><span class="op">,</span> vZ2<span class="op">.</span><span class="at">x</span><span class="op">,</span> vX2<span class="op">.</span><span class="at">y</span><span class="op">,</span> vY<span class="op">.</span><span class="at">y</span><span class="op">,</span> vZ2<span class="op">.</span><span class="at">y</span><span class="op">,</span> vX2<span class="op">.</span><span class="at">z</span><span class="op">,</span> vY<span class="op">.</span><span class="at">z</span><span class="op">,</span> vZ2<span class="op">.</span><span class="at">z</span>])<span class="op">;</span></span>
<span id="cb7-11">  <span class="kw">var</span> M <span class="op">=</span> M1<span class="op">.</span><span class="fu">clone</span>()<span class="op">.</span><span class="fu">multiply</span>(M2)<span class="op">;</span></span>
<span id="cb7-12">  <span class="kw">var</span> elems <span class="op">=</span> M<span class="op">.</span><span class="at">elements</span><span class="op">;</span></span>
<span id="cb7-13">  <span class="kw">var</span> A <span class="op">=</span> <span class="kw">new</span> THREE<span class="op">.</span><span class="fu">Matrix4</span>()<span class="op">;</span></span>
<span id="cb7-14">  A<span class="op">.</span><span class="fu">set</span>(elems[<span class="dv">0</span>]<span class="op">,</span> elems[<span class="dv">1</span>]<span class="op">,</span> elems[<span class="dv">2</span>]<span class="op">,</span> axis2<span class="op">.</span><span class="at">x</span><span class="op">,</span></span>
<span id="cb7-15">        elems[<span class="dv">3</span>]<span class="op">,</span> elems[<span class="dv">4</span>]<span class="op">,</span> elems[<span class="dv">5</span>]<span class="op">,</span> axis2<span class="op">.</span><span class="at">y</span><span class="op">,</span></span>
<span id="cb7-16">        elems[<span class="dv">6</span>]<span class="op">,</span> elems[<span class="dv">7</span>]<span class="op">,</span> elems[<span class="dv">8</span>]<span class="op">,</span> axis2<span class="op">.</span><span class="at">z</span><span class="op">,</span></span>
<span id="cb7-17">        <span class="dv">0</span><span class="op">,</span>        <span class="dv">0</span><span class="op">,</span>        <span class="dv">0</span><span class="op">,</span>        <span class="dv">1</span>)<span class="op">;</span></span>
<span id="cb7-18">  <span class="cf">return</span> A<span class="op">;</span></span>
<span id="cb7-19">}</span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 15 Sep 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ReorientTransformation.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Kantorovich distance with the 'ompr' package</title>
      <link>https://laustep.github.io/stlahblog/posts/kantorovichWithOMPR.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Do you know
        <a href="http://stla.github.io/stlapblog/index.html">my former blog</a>?
        It contains four posts about the computation of the Kantorovich
        distance:
      </p>
      <ul>
        <li>
          <p>
            <a
              href="https://stla.github.io/stlapblog/posts/KantorovichWithJulia.html"
              >Using Julia to compute the Kantorovich distance</a
            >
          </p>
        </li>
        <li>
          <p>
            <a
              href="http://stla.github.io/stlapblog/posts/KantorovichWithR.html"
              >Using R to compute the Kantorovich distance</a
            >
          </p>
        </li>
        <li>
          <p>
            <a
              href="http://stla.github.io/stlapblog/posts/KantorovichWithScala.html"
              >Using Scala to compute the Kantorovich distance</a
            >
          </p>
        </li>
        <li>
          <p>
            <a
              href="http://stla.github.io/stlapblog/posts/kantorovich-package.html"
              >The ‘kantorovich’ package for R</a
            >
          </p>
        </li>
      </ul>
      <p>
        The Julia way using the <strong>JumP</strong> library has the most
        convenient syntax:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb1-1"><span class="kw">using</span> JuMP </span>
<span id="cb1-2">mu <span class="op">=</span> [<span class="fl">1</span><span class="op">/</span><span class="fl">7</span><span class="op">,</span> <span class="fl">2</span><span class="op">/</span><span class="fl">7</span><span class="op">,</span> <span class="fl">4</span><span class="op">/</span><span class="fl">7</span>]</span>
<span id="cb1-3">nu <span class="op">=</span> [<span class="fl">1</span><span class="op">/</span><span class="fl">4</span><span class="op">,</span> <span class="fl">1</span><span class="op">/</span><span class="fl">4</span><span class="op">,</span> <span class="fl">1</span><span class="op">/</span><span class="fl">2</span>]</span>
<span id="cb1-4">n <span class="op">=</span> length(mu)</span>
<span id="cb1-5">m <span class="op">=</span> Model()</span>
<span id="cb1-6"><span class="pp">@defVar</span>(m<span class="op">,</span> p[<span class="fl">1</span><span class="op">:</span>n<span class="op">,</span> <span class="fl">1</span><span class="op">:</span>n] <span class="op">&gt;=</span> <span class="fl">0</span>)</span>
<span id="cb1-7"><span class="pp">@setObjective</span>(m<span class="op">,</span> Min<span class="op">,</span> sum{p[i<span class="op">,</span> j]<span class="op">,</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n<span class="op">,</span> j <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n<span class="op">;</span> i <span class="op">!=</span> j})</span>
<span id="cb1-8"><span class="kw">for</span> k <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n</span>
<span id="cb1-9">  <span class="pp">@addConstraint</span>(m<span class="op">,</span> sum(p[k<span class="op">,</span> <span class="op">:</span>]) <span class="op">==</span> mu[k])</span>
<span id="cb1-10">  <span class="pp">@addConstraint</span>(m<span class="op">,</span> sum(p[<span class="op">:,</span> k]) <span class="op">==</span> nu[k])</span>
<span id="cb1-11"><span class="kw">end</span></span>
<span id="cb1-12">solve(m)</span></code></pre>
      </div>
      <p>
        This allows to get the Kantorovich distance between the two
        probabilities <code>mu</code> and <code>nu</code> corresponding to the
        0-1 distance (assuming <code>mu</code> and <code>nu</code> have the same
        support). This is totally useless because one can straightforwardly get
        this distance: it is one minus the total weight of the infimum measure
        of the two probability measures (<code>1 - sum(pmin(mu, nu))</code> in
        R). But this is just for a simple illustration purpose. This problem is
        not trivial for another distance on the support of <code>mu</code> and
        <code>nu</code>. Encoding this distance as a matrix <code>D</code>, the
        linear programming model allowing to get the corresponding Kantorovich
        distance is obtained by replacing
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb2-1">sum{p[i<span class="op">,</span> j]<span class="op">,</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n<span class="op">,</span> j <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n<span class="op">;</span> i <span class="op">!=</span> j}</span></code></pre>
      </div>
      <p>with</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb3-1">sum{p[i<span class="op">,</span> j] <span class="op">*</span> D[i<span class="op">,</span> j]<span class="op">,</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n<span class="op">,</span> j <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n<span class="op">;</span> i <span class="op">!=</span> j}</span></code></pre>
      </div>
      <p>
        Now I want to show again how to compute the Kantorovich distance with R,
        but using another package I discovered yesterday: the
        <strong>ompr</strong> package. It allows to write the model with a
        convenient syntax, close to the mathematical language, similar to the
        one above with <strong>JumP</strong>. Here is the model:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(ompr)</span>
<span id="cb4-2"><span class="kw">library</span>(ompr.roi)</span>
<span id="cb4-3"><span class="kw">library</span>(ROI.plugin.glpk)</span>
<span id="cb4-4"></span>
<span id="cb4-5">mu &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span><span class="op">/</span><span class="dv">7</span>, <span class="dv">2</span><span class="op">/</span><span class="dv">7</span>, <span class="dv">4</span><span class="op">/</span><span class="dv">7</span>)</span>
<span id="cb4-6">nu &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span><span class="op">/</span><span class="dv">4</span>, <span class="dv">1</span><span class="op">/</span><span class="dv">4</span>, <span class="dv">1</span><span class="op">/</span><span class="dv">2</span>)</span>
<span id="cb4-7">n &lt;-<span class="st"> </span><span class="kw">length</span>(mu)</span>
<span id="cb4-8"></span>
<span id="cb4-9">model &lt;-<span class="st"> </span><span class="kw">MIPModel</span>() <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb4-10"><span class="st">  </span><span class="kw">add_variable</span>(p[i, j], <span class="dt">i =</span> <span class="dv">1</span><span class="op">:</span>n, <span class="dt">j =</span> <span class="dv">1</span><span class="op">:</span>n, <span class="dt">type =</span> <span class="st">"continuous"</span>) <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb4-11"><span class="st">  </span><span class="kw">add_constraint</span>(p[i, j] <span class="op">&gt;=</span><span class="st"> </span><span class="dv">0</span>, <span class="dt">i =</span> <span class="dv">1</span><span class="op">:</span>n, <span class="dt">j =</span> <span class="dv">1</span><span class="op">:</span>n) <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb4-12"><span class="st">  </span><span class="kw">add_constraint</span>(<span class="kw">sum_over</span>(p[i, j], <span class="dt">j =</span> <span class="dv">1</span><span class="op">:</span>n) <span class="op">==</span><span class="st"> </span>mu[i], <span class="dt">i =</span> <span class="dv">1</span><span class="op">:</span>n) <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb4-13"><span class="st">  </span><span class="kw">add_constraint</span>(<span class="kw">sum_over</span>(p[i, j], <span class="dt">i =</span> <span class="dv">1</span><span class="op">:</span>n) <span class="op">==</span><span class="st"> </span>nu[j], <span class="dt">j =</span> <span class="dv">1</span><span class="op">:</span>n) <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb4-14"><span class="st">  </span><span class="kw">set_objective</span>(<span class="kw">sum_over</span>(p[i, j], <span class="dt">i =</span> <span class="dv">1</span><span class="op">:</span>n, <span class="dt">j =</span> <span class="dv">1</span><span class="op">:</span>n, i <span class="op">!=</span><span class="st"> </span>j), <span class="st">"min"</span>) </span></code></pre>
      </div>
      <p>This is nicely readable. Now we solve the problem:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">optimization &lt;-<span class="st"> </span>model <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb5-2"><span class="st">  </span><span class="kw">solve_model</span>(<span class="kw">with_ROI</span>(<span class="dt">solver =</span> <span class="st">"glpk"</span>))</span></code></pre>
      </div>
      <p>And we get the Kantorovich distance:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">objective_value</span>(optimization)</span>
<span id="cb6-2"><span class="co">## [1] 0.1071429</span></span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 12 Sep 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/kantorovichWithOMPR.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The compound of five tetrahedra</title>
      <link>https://laustep.github.io/stlahblog/posts/tetrahedraCompound.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In
        <a
          href="https://laustep.github.io/stlahblog/posts/BooleanOpsOnMeshes.html"
          >this previous post</a
        >
        I was wrong when I said I didn’t have a tool to compute the intersection
        of the compound of five tetrahedra:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tetrahedraCompoundIntersection.gif"
          style="width: 50%"
        />
      </p>
      <p>
        This can be achieved with the help of the <strong>rcdd</strong> package
        in R.
      </p>
      <p>
        This package is a wrapper of the C library <strong>cddlib</strong>. It
        implements the <em>double description</em> of convex polyhedra:
      </p>
      <ul>
        <li>
          <p>
            the <em>V-description</em> is the description by the vertices of the
            polyhedron;
          </p>
        </li>
        <li>
          <p>
            the <em>H-description</em> is the description by a set of linear
            inequalities.
          </p>
        </li>
      </ul>
      <p>
        Once we get the H-description of two or more polyhedra, it is
        straightforward to get the H-description of their intersection: it
        suffices to join all the linear inequalities. Then,
        <strong>cddlib</strong> will give us the corresponding V-representation.
        That’s it.
      </p>
      <p>
        The <strong>cddlib</strong> library is also usable in Python, with the
        <strong>pycddlib</strong> library. I’m going to show how to compute the
        intersection of the five tetrahedra forming the compound with R and with
        Python.
      </p>
      <h2 id="the-r-way">The R way</h2>
      <p>Here are the vertices of the five tetrahedra:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># the twenty vertices ####</span></span>
<span id="cb1-2">phi &lt;-<span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">5</span>)) <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb1-3">a &lt;-<span class="st"> </span><span class="dv">1</span> <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">3</span>)</span>
<span id="cb1-4">b &lt;-<span class="st"> </span>a <span class="op">/</span><span class="st"> </span>phi</span>
<span id="cb1-5">c &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span>phi</span>
<span id="cb1-6">vertices &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-7">  <span class="kw">c</span>( a,  a,  a),</span>
<span id="cb1-8">  <span class="kw">c</span>( a,  a, <span class="op">-</span>a),</span>
<span id="cb1-9">  <span class="kw">c</span>( a, <span class="op">-</span>a,  a),</span>
<span id="cb1-10">  <span class="kw">c</span>(<span class="op">-</span>a, <span class="op">-</span>a,  a),</span>
<span id="cb1-11">  <span class="kw">c</span>(<span class="op">-</span>a,  a, <span class="op">-</span>a),</span>
<span id="cb1-12">  <span class="kw">c</span>(<span class="op">-</span>a,  a,  a),</span>
<span id="cb1-13">  <span class="kw">c</span>( <span class="dv">0</span>,  b, <span class="op">-</span>c),</span>
<span id="cb1-14">  <span class="kw">c</span>( <span class="dv">0</span>, <span class="op">-</span>b, <span class="op">-</span>c),</span>
<span id="cb1-15">  <span class="kw">c</span>( <span class="dv">0</span>, <span class="op">-</span>b,  c),</span>
<span id="cb1-16">  <span class="kw">c</span>( c,  <span class="dv">0</span>, <span class="op">-</span>b),</span>
<span id="cb1-17">  <span class="kw">c</span>(<span class="op">-</span>c,  <span class="dv">0</span>, <span class="op">-</span>b),</span>
<span id="cb1-18">  <span class="kw">c</span>(<span class="op">-</span>c,  <span class="dv">0</span>,  b),</span>
<span id="cb1-19">  <span class="kw">c</span>( b,  c,  <span class="dv">0</span>),</span>
<span id="cb1-20">  <span class="kw">c</span>( b, <span class="op">-</span>c,  <span class="dv">0</span>),</span>
<span id="cb1-21">  <span class="kw">c</span>(<span class="op">-</span>b, <span class="op">-</span>c,  <span class="dv">0</span>),</span>
<span id="cb1-22">  <span class="kw">c</span>(<span class="op">-</span>b,  c,  <span class="dv">0</span>),</span>
<span id="cb1-23">  <span class="kw">c</span>( <span class="dv">0</span>,  b,  c),</span>
<span id="cb1-24">  <span class="kw">c</span>( a, <span class="op">-</span>a, <span class="op">-</span>a),</span>
<span id="cb1-25">  <span class="kw">c</span>( c,  <span class="dv">0</span>,  b),</span>
<span id="cb1-26">  <span class="kw">c</span>(<span class="op">-</span>a, <span class="op">-</span>a, <span class="op">-</span>a)</span>
<span id="cb1-27">)</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co"># the five tetrahedra ####</span></span>
<span id="cb1-30">th1 &lt;-<span class="st"> </span>vertices[<span class="kw">c</span>(17L, 14L,  2L, 11L), ]</span>
<span id="cb1-31">th2 &lt;-<span class="st"> </span>vertices[<span class="kw">c</span>(18L,  1L,  4L,  5L), ]</span>
<span id="cb1-32">th3 &lt;-<span class="st"> </span>vertices[<span class="kw">c</span>(19L,  6L, 15L,  7L), ]</span>
<span id="cb1-33">th4 &lt;-<span class="st"> </span>vertices[<span class="kw">c</span>( 3L, 13L, 12L,  8L), ]</span>
<span id="cb1-34">th5 &lt;-<span class="st"> </span>vertices[<span class="kw">c</span>(20L, 16L, 10L,  9L), ]</span></code></pre>
      </div>
      <p>
        To make a V-description with <strong>rcdd</strong>, one uses the
        function <code>makeV</code>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(rcdd)</span>
<span id="cb2-2">V1 &lt;-<span class="st"> </span><span class="kw">makeV</span>(th1)</span>
<span id="cb2-3">V2 &lt;-<span class="st"> </span><span class="kw">makeV</span>(th2)</span>
<span id="cb2-4">V3 &lt;-<span class="st"> </span><span class="kw">makeV</span>(th3)</span>
<span id="cb2-5">V4 &lt;-<span class="st"> </span><span class="kw">makeV</span>(th4)</span>
<span id="cb2-6">V5 &lt;-<span class="st"> </span><span class="kw">makeV</span>(th5)</span></code></pre>
      </div>
      <p>Let’s look at a V-description in R:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">V1</span>
<span id="cb3-2"><span class="co">##      [,1] [,2]       [,3]       [,4]       [,5]</span></span>
<span id="cb3-3"><span class="co">## [1,]    0    1  0.0000000  0.3568221  0.9341724</span></span>
<span id="cb3-4"><span class="co">## [2,]    0    1  0.3568221 -0.9341724  0.0000000</span></span>
<span id="cb3-5"><span class="co">## [3,]    0    1  0.5773503  0.5773503 -0.5773503</span></span>
<span id="cb3-6"><span class="co">## [4,]    0    1 -0.9341724  0.0000000 -0.3568221</span></span>
<span id="cb3-7"><span class="co">## attr(,"representation")</span></span>
<span id="cb3-8"><span class="co">## [1] "V"</span></span></code></pre>
      </div>
      <p>
        Each row starts with a zero and a one, followed by the coordinates of
        the vertex. I don’t remember what the zero means. The one means that the
        subsequent numbers represent a vertex (it is also possible to encode
        rays and lines in a V-description).
      </p>
      <p>
        Now we get the H-representations with the help of the
        <code>scdd</code> function:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">H1 &lt;-<span class="st"> </span><span class="kw">scdd</span>(V1)</span>
<span id="cb4-2">H2 &lt;-<span class="st"> </span><span class="kw">scdd</span>(V2)</span>
<span id="cb4-3">H3 &lt;-<span class="st"> </span><span class="kw">scdd</span>(V3)</span>
<span id="cb4-4">H4 &lt;-<span class="st"> </span><span class="kw">scdd</span>(V4)</span>
<span id="cb4-5">H5 &lt;-<span class="st"> </span><span class="kw">scdd</span>(V5)</span></code></pre>
      </div>
      <p>Let’s look at a H-description:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">H1</span>
<span id="cb5-2"><span class="co">## $output</span></span>
<span id="cb5-3"><span class="co">##      [,1] [,2]          [,3]          [,4]          [,5]</span></span>
<span id="cb5-4"><span class="co">## [1,]    0    1 -2.802517e+00 -2.220446e-16 -1.070466e+00</span></span>
<span id="cb5-5"><span class="co">## [2,]    0    1 -8.881784e-16  1.070466e+00  2.802517e+00</span></span>
<span id="cb5-6"><span class="co">## [3,]    0    1  1.070466e+00 -2.802517e+00  9.614813e-17</span></span>
<span id="cb5-7"><span class="co">## [4,]    0    1  1.732051e+00  1.732051e+00 -1.732051e+00</span></span>
<span id="cb5-8"><span class="co">## attr(,"representation")</span></span>
<span id="cb5-9"><span class="co">## [1] "H"</span></span></code></pre>
      </div>
      <p>
        In the first column, a zero indicates that the corresponding rows
        represents an inequality. The number in the second column is the right
        hand side of the inequality, and the subsequent three numbers are the
        coefficients of the linear inequality.
      </p>
      <p>
        Now, let’s join all the linear inequalities. That is, we stack the five
        matrices:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">H &lt;-<span class="st"> </span><span class="kw">rbind</span>(H1<span class="op">$</span>output, H2<span class="op">$</span>output, H3<span class="op">$</span>output, H4<span class="op">$</span>output, H5<span class="op">$</span>output)</span></code></pre>
      </div>
      <p>
        The <code>scdd</code> function converts from the V-representation to the
        H-representation and vice-versa. Hence we get the vertices of the
        intersection by applying this function to the above H-representation:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1">(V &lt;-<span class="st"> </span><span class="kw">scdd</span>(H) )</span></code></pre>
      </div>
      <pre><code>## $output
##       [,1] [,2]          [,3]          [,4]          [,5]
##  [1,]    0    1 -2.205282e-01 -8.212094e-16  3.568221e-01
##  [2,]    0    1  4.240675e-16 -3.568221e-01  2.205282e-01
##  [3,]    0    1  5.654233e-16  3.568221e-01  2.205282e-01
##  [4,]    0    1  2.205282e-01  0.000000e+00  3.568221e-01
##  [5,]    0    1  3.568221e-01 -2.205282e-01  4.574370e-17
##  [6,]    0    1  3.568221e-01  2.205282e-01 -4.574370e-17
##  [7,]    0    1  2.205282e-01  3.202059e-16 -3.568221e-01
##  [8,]    0    1  1.017762e-15  3.568221e-01 -2.205282e-01
##  [9,]    0    1  6.785079e-16 -3.568221e-01 -2.205282e-01
## [10,]    0    1 -2.205282e-01 -5.010035e-16 -3.568221e-01
## [11,]    0    1 -3.568221e-01  2.205282e-01  2.795606e-16
## [12,]    0    1 -3.568221e-01 -2.205282e-01 -9.718761e-17
## attr(,"representation")
## [1] "V"</code></pre>
      <p>
        The vertices are given in the last three columns. Let’s extract them:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1">vertices &lt;-<span class="st"> </span>V<span class="op">$</span>output[, <span class="kw">c</span>(3L, 4L, 5L)]</span></code></pre>
      </div>
      <p>
        There are twelve vertices. The intersection is a regular icosahedron.
        Now we will plot it. First, we compute the convex hull of these vertices
        with the <strong>cxhull</strong> package. The icosahedron is convex, so
        its convex hull is itself. But <strong>cxhull</strong> also provides the
        faces and the edges that are used for plotting.
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1"><span class="kw">library</span>(cxhull)</span>
<span id="cb10-2">icosahedron &lt;-<span class="st"> </span><span class="kw">cxhull</span>(vertices, <span class="dt">triangulate =</span> <span class="ot">TRUE</span>)</span></code></pre>
      </div>
      <p>
        There’s a convenient function in <strong>cxhull</strong> to plot a
        convex hull with <strong>rgl</strong>, namely
        <code>plotConvexHull3d</code>:
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1"><span class="kw">library</span>(rgl)</span>
<span id="cb11-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb11-3"><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">80</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb11-4"><span class="kw">plotConvexHull3d</span>(</span>
<span id="cb11-5">  icosahedron, <span class="dt">palette =</span> <span class="kw">hcl.colors</span>(<span class="dv">256</span>, <span class="st">"BuPu"</span>), <span class="dt">bias =</span> <span class="fl">0.25</span>, </span>
<span id="cb11-6">  <span class="dt">edgesColor =</span> <span class="st">"yellow"</span>, <span class="dt">tubesRadius =</span> <span class="fl">0.015</span>, <span class="dt">spheresRadius =</span> <span class="fl">0.02</span></span>
<span id="cb11-7">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/icosahedron2.png"
          style="width: 50%"
        />
      </p>
      <h2 id="the-python-way">The Python way</h2>
      <p>
        Here is the Python code computing the intersection of the five
        tetrahedra:
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode numberSource python numberLines"
        ><code class="sourceCode python"><span id="cb12-1"><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb12-2"><span class="im">import</span> cdd <span class="im">as</span> cdd</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co"># the twenty vertices </span></span>
<span id="cb12-5">phi <span class="op">=</span> (<span class="dv">1</span> <span class="op">+</span> np.sqrt(<span class="dv">5</span>)) <span class="op">/</span> <span class="dv">2</span></span>
<span id="cb12-6">a <span class="op">=</span> <span class="dv">1</span> <span class="op">/</span> np.sqrt(<span class="dv">3</span>)</span>
<span id="cb12-7">b <span class="op">=</span> a <span class="op">/</span> phi</span>
<span id="cb12-8">c <span class="op">=</span> a <span class="op">*</span> phi</span>
<span id="cb12-9"></span>
<span id="cb12-10">vertices <span class="op">=</span> np.vstack(</span>
<span id="cb12-11">    (</span>
<span id="cb12-12">        np.array([a, a, a]),</span>
<span id="cb12-13">        np.array([a, a, <span class="op">-</span>a]),</span>
<span id="cb12-14">        np.array([a, <span class="op">-</span>a, a]),</span>
<span id="cb12-15">        np.array([<span class="op">-</span>a, <span class="op">-</span>a, a]),</span>
<span id="cb12-16">        np.array([<span class="op">-</span>a, a, <span class="op">-</span>a]),</span>
<span id="cb12-17">        np.array([<span class="op">-</span>a, a, a]),</span>
<span id="cb12-18">        np.array([<span class="dv">0</span>, b, <span class="op">-</span>c]),</span>
<span id="cb12-19">        np.array([<span class="dv">0</span>, <span class="op">-</span>b, <span class="op">-</span>c]),</span>
<span id="cb12-20">        np.array([<span class="dv">0</span>, <span class="op">-</span>b, c]),</span>
<span id="cb12-21">        np.array([c, <span class="dv">0</span>, <span class="op">-</span>b]),</span>
<span id="cb12-22">        np.array([<span class="op">-</span>c, <span class="dv">0</span>, <span class="op">-</span>b]),</span>
<span id="cb12-23">        np.array([<span class="op">-</span>c, <span class="dv">0</span>, b]),</span>
<span id="cb12-24">        np.array([b, c, <span class="dv">0</span>]),</span>
<span id="cb12-25">        np.array([b, <span class="op">-</span>c, <span class="dv">0</span>]),</span>
<span id="cb12-26">        np.array([<span class="op">-</span>b, <span class="op">-</span>c, <span class="dv">0</span>]),</span>
<span id="cb12-27">        np.array([<span class="op">-</span>b, c, <span class="dv">0</span>]),</span>
<span id="cb12-28">        np.array([<span class="dv">0</span>, b, c]),</span>
<span id="cb12-29">        np.array([a, <span class="op">-</span>a, <span class="op">-</span>a]),</span>
<span id="cb12-30">        np.array([c, <span class="dv">0</span>, b]),</span>
<span id="cb12-31">        np.array([<span class="op">-</span>a, <span class="op">-</span>a, <span class="op">-</span>a]),</span>
<span id="cb12-32">    )</span>
<span id="cb12-33">)</span>
<span id="cb12-34"></span>
<span id="cb12-35"><span class="co"># tetrahedra vertices </span></span>
<span id="cb12-36">tetra1Idxs <span class="op">=</span> [<span class="dv">16</span>, <span class="dv">13</span>, <span class="dv">1</span>, <span class="dv">10</span>]</span>
<span id="cb12-37">tetra2Idxs <span class="op">=</span> [<span class="dv">17</span>, <span class="dv">0</span>, <span class="dv">3</span>, <span class="dv">4</span>]</span>
<span id="cb12-38">tetra3Idxs <span class="op">=</span> [<span class="dv">18</span>, <span class="dv">5</span>, <span class="dv">14</span>, <span class="dv">6</span>]</span>
<span id="cb12-39">tetra4Idxs <span class="op">=</span> [<span class="dv">2</span>, <span class="dv">12</span>, <span class="dv">11</span>, <span class="dv">7</span>]</span>
<span id="cb12-40">tetra5Idxs <span class="op">=</span> [<span class="dv">19</span>, <span class="dv">15</span>, <span class="dv">9</span>, <span class="dv">8</span>]</span>
<span id="cb12-41">th1 <span class="op">=</span> vertices[tetra1Idxs, :]</span>
<span id="cb12-42">th2 <span class="op">=</span> vertices[tetra2Idxs, :]</span>
<span id="cb12-43">th3 <span class="op">=</span> vertices[tetra3Idxs, :]</span>
<span id="cb12-44">th4 <span class="op">=</span> vertices[tetra4Idxs, :]</span>
<span id="cb12-45">th5 <span class="op">=</span> vertices[tetra5Idxs, :]</span>
<span id="cb12-46"></span>
<span id="cb12-47"><span class="co"># make the V-representation of each tetrahedron; you have to prepend the </span></span>
<span id="cb12-48"><span class="co"># vertices array with a column of ones</span></span>
<span id="cb12-49">v <span class="op">=</span> np.column_stack((np.ones(<span class="dv">4</span>), th1))</span>
<span id="cb12-50">mat <span class="op">=</span> cdd.Matrix(v, number_type<span class="op">=</span><span class="st">'float'</span>) </span>
<span id="cb12-51">mat.rep_type <span class="op">=</span> cdd.RepType.GENERATOR</span>
<span id="cb12-52">poly1 <span class="op">=</span> cdd.Polyhedron(mat)</span>
<span id="cb12-53">v <span class="op">=</span> np.column_stack((np.ones(<span class="dv">4</span>), th2))</span>
<span id="cb12-54">mat <span class="op">=</span> cdd.Matrix(v, number_type<span class="op">=</span><span class="st">'float'</span>) </span>
<span id="cb12-55">mat.rep_type <span class="op">=</span> cdd.RepType.GENERATOR</span>
<span id="cb12-56">poly2 <span class="op">=</span> cdd.Polyhedron(mat)</span>
<span id="cb12-57">v <span class="op">=</span> np.column_stack((np.ones(<span class="dv">4</span>), th3))</span>
<span id="cb12-58">mat <span class="op">=</span> cdd.Matrix(v, number_type<span class="op">=</span><span class="st">'float'</span>) </span>
<span id="cb12-59">mat.rep_type <span class="op">=</span> cdd.RepType.GENERATOR</span>
<span id="cb12-60">poly3 <span class="op">=</span> cdd.Polyhedron(mat)</span>
<span id="cb12-61">v <span class="op">=</span> np.column_stack((np.ones(<span class="dv">4</span>), th4))</span>
<span id="cb12-62">mat <span class="op">=</span> cdd.Matrix(v, number_type<span class="op">=</span><span class="st">'float'</span>) </span>
<span id="cb12-63">mat.rep_type <span class="op">=</span> cdd.RepType.GENERATOR</span>
<span id="cb12-64">poly4 <span class="op">=</span> cdd.Polyhedron(mat)</span>
<span id="cb12-65">v <span class="op">=</span> np.column_stack((np.ones(<span class="dv">4</span>), th5))</span>
<span id="cb12-66">mat <span class="op">=</span> cdd.Matrix(v, number_type<span class="op">=</span><span class="st">'float'</span>) </span>
<span id="cb12-67">mat.rep_type <span class="op">=</span> cdd.RepType.GENERATOR</span>
<span id="cb12-68">poly5 <span class="op">=</span> cdd.Polyhedron(mat)</span>
<span id="cb12-69"></span>
<span id="cb12-70"><span class="co"># H-representations of the tetrahedra</span></span>
<span id="cb12-71">h1 <span class="op">=</span> poly1.get_inequalities()</span>
<span id="cb12-72">h2 <span class="op">=</span> poly2.get_inequalities()</span>
<span id="cb12-73">h3 <span class="op">=</span> poly3.get_inequalities()</span>
<span id="cb12-74">h4 <span class="op">=</span> poly4.get_inequalities()</span>
<span id="cb12-75">h5 <span class="op">=</span> poly5.get_inequalities()</span>
<span id="cb12-76"></span>
<span id="cb12-77"><span class="co"># join the five sets of linear inequalities; this will give the intersection</span></span>
<span id="cb12-78">hintersection <span class="op">=</span> np.vstack((h1, h2, h3, h4, h5))</span>
<span id="cb12-79"></span>
<span id="cb12-80"><span class="co"># make the V-representation of the intersection</span></span>
<span id="cb12-81">mat <span class="op">=</span> cdd.Matrix(hintersection, number_type<span class="op">=</span><span class="st">'float'</span>)</span>
<span id="cb12-82">mat.rep_type <span class="op">=</span> cdd.RepType.INEQUALITY</span>
<span id="cb12-83">polyintersection <span class="op">=</span> cdd.Polyhedron(mat)</span>
<span id="cb12-84"></span>
<span id="cb12-85"><span class="co"># get the vertices; they are given in a matrix prepended by a column of ones</span></span>
<span id="cb12-86">vintersection <span class="op">=</span> polyintersection.get_generators()</span>
<span id="cb12-87"></span>
<span id="cb12-88"><span class="co"># get rid of the column of ones</span></span>
<span id="cb12-89">n_inequalities <span class="op">=</span> vintersection.row_size</span>
<span id="cb12-90">intersection <span class="op">=</span> np.array([</span>
<span id="cb12-91">    vintersection[i][<span class="dv">1</span>:<span class="dv">4</span>] <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(n_inequalities)    </span>
<span id="cb12-92">])</span></code></pre>
      </div>
      <p>Results are the same as the ones we got with R:</p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb13-1">array([[<span class="op">-</span><span class="fl">2.20528179e-01</span>, <span class="op">-</span><span class="fl">8.21209393e-16</span>,  <span class="fl">3.56822090e-01</span>],</span>
<span id="cb13-2">       [ <span class="fl">4.24067460e-16</span>, <span class="op">-</span><span class="fl">3.56822090e-01</span>,  <span class="fl">2.20528179e-01</span>],</span>
<span id="cb13-3">       [ <span class="fl">5.65423280e-16</span>,  <span class="fl">3.56822090e-01</span>,  <span class="fl">2.20528179e-01</span>],</span>
<span id="cb13-4">       [ <span class="fl">2.20528179e-01</span>,  <span class="fl">0.00000000e+00</span>,  <span class="fl">3.56822090e-01</span>],</span>
<span id="cb13-5">       [ <span class="fl">3.56822090e-01</span>, <span class="op">-</span><span class="fl">2.20528179e-01</span>,  <span class="fl">4.57437043e-17</span>],</span>
<span id="cb13-6">       [ <span class="fl">3.56822090e-01</span>,  <span class="fl">2.20528179e-01</span>, <span class="op">-</span><span class="fl">4.57437043e-17</span>],</span>
<span id="cb13-7">       [ <span class="fl">2.20528179e-01</span>,  <span class="fl">3.20205930e-16</span>, <span class="op">-</span><span class="fl">3.56822090e-01</span>],</span>
<span id="cb13-8">       [ <span class="fl">1.01776190e-15</span>,  <span class="fl">3.56822090e-01</span>, <span class="op">-</span><span class="fl">2.20528179e-01</span>],</span>
<span id="cb13-9">       [ <span class="fl">6.78507937e-16</span>, <span class="op">-</span><span class="fl">3.56822090e-01</span>, <span class="op">-</span><span class="fl">2.20528179e-01</span>],</span>
<span id="cb13-10">       [<span class="op">-</span><span class="fl">2.20528179e-01</span>, <span class="op">-</span><span class="fl">5.01003463e-16</span>, <span class="op">-</span><span class="fl">3.56822090e-01</span>],</span>
<span id="cb13-11">       [<span class="op">-</span><span class="fl">3.56822090e-01</span>,  <span class="fl">2.20528179e-01</span>,  <span class="fl">2.79560644e-16</span>],</span>
<span id="cb13-12">       [<span class="op">-</span><span class="fl">3.56822090e-01</span>, <span class="op">-</span><span class="fl">2.20528179e-01</span>, <span class="op">-</span><span class="fl">9.71876138e-17</span>]])</span></code></pre>
      </div>
      <p>
        It is possible to get the edges of the polyhedron with
        <strong>pycddlib</strong>; see how I did in
        <a href="https://laustep.github.io/stlahblog/posts/E8rootPolytope.html"
          >this post</a
        >. And to get the convex hull with its faces, one can use
        <code>scipy.spatial.ConvexHull(intersection)</code>.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 10 Sep 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/tetrahedraCompound.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Labelling the points of a 'ggplot' with Shiny</title>
      <link>https://laustep.github.io/stlahblog/posts/ggplot2_labelling.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        The Shiny app below allows to attribute a label to the points of a
        ‘ggplot’ by double-clicking on the points.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">library</span>(rhandsontable)</span>
<span id="cb1-3"><span class="kw">library</span>(htmlwidgets)</span>
<span id="cb1-4"><span class="kw">library</span>(colourpicker)</span>
<span id="cb1-5"><span class="kw">library</span>(ggplot2)</span>
<span id="cb1-6"><span class="kw">library</span>(ggrepel)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co">#' Add labels to points on a ggplot2 scatterplot</span></span>
<span id="cb1-9"><span class="co">#' @param gg the ggplot</span></span>
<span id="cb1-10"><span class="co">#' @param X name of the x-variable</span></span>
<span id="cb1-11"><span class="co">#' @param Y names of the y-variable</span></span>
<span id="cb1-12"><span class="co">#' @param labels named list like \code{list("10" = c("mylabel", "blue"))}; </span></span>
<span id="cb1-13"><span class="co">#' the names of the list are the row names, each component of the list is </span></span>
<span id="cb1-14"><span class="co">#' a character vector of length two: the label and its color</span></span>
<span id="cb1-15"><span class="co">#' @importFrom ggrepel geom_text_repel</span></span>
<span id="cb1-16">addLabels &lt;-<span class="st"> </span><span class="cf">function</span>(gg, X, Y, labels){</span>
<span id="cb1-17">  <span class="cf">if</span>(<span class="kw">is.null</span>(labels)){</span>
<span id="cb1-18">    <span class="kw">return</span>(gg)</span>
<span id="cb1-19">  }</span>
<span id="cb1-20">  dat &lt;-<span class="st"> </span>gg<span class="op">$</span>data</span>
<span id="cb1-21">  indices &lt;-<span class="st"> </span><span class="kw">intersect</span>(<span class="kw">names</span>(labels), <span class="kw">rownames</span>(dat)) </span>
<span id="cb1-22">  dat[[<span class="st">"..labels"</span>]] &lt;-<span class="st"> ""</span></span>
<span id="cb1-23">  dat[[<span class="st">"..colors"</span>]] &lt;-<span class="st"> "black"</span></span>
<span id="cb1-24">  dat[indices, <span class="st">"..labels"</span>] &lt;-<span class="st"> </span><span class="kw">sapply</span>(labels[indices], <span class="st">"[["</span>, 1L)</span>
<span id="cb1-25">  dat[indices, <span class="st">"..colors"</span>] &lt;-<span class="st"> </span><span class="kw">sapply</span>(labels[indices], <span class="st">"[["</span>, 2L)</span>
<span id="cb1-26">  range_x &lt;-<span class="st"> </span><span class="kw">diff</span>(<span class="kw">range</span>(dat[[X]], <span class="dt">na.rm =</span> <span class="ot">TRUE</span>))</span>
<span id="cb1-27">  range_y &lt;-<span class="st"> </span><span class="kw">diff</span>(<span class="kw">range</span>(dat[[Y]], <span class="dt">na.rm =</span> <span class="ot">TRUE</span>))</span>
<span id="cb1-28">  gg <span class="op">+</span><span class="st"> </span><span class="kw">geom_text_repel</span>(</span>
<span id="cb1-29">    <span class="kw">aes_</span>(<span class="dt">x =</span> <span class="kw">as.name</span>(X), <span class="dt">y =</span> <span class="kw">as.name</span>(Y), <span class="dt">label =</span> <span class="kw">as.name</span>(<span class="st">"..labels"</span>)), </span>
<span id="cb1-30">    <span class="dt">color =</span> dat[[<span class="st">"..colors"</span>]], <span class="dt">size =</span> <span class="dv">9</span>, <span class="dt">max.overlaps =</span> 100L, </span>
<span id="cb1-31">    <span class="dt">data =</span> dat, <span class="dt">inherit.aes =</span> <span class="ot">FALSE</span>,   </span>
<span id="cb1-32">    <span class="dt">segment.size =</span> <span class="fl">0.2</span>, <span class="dt">min.segment.length =</span> <span class="kw">unit</span>(<span class="dv">0</span>, <span class="st">'lines'</span>), </span>
<span id="cb1-33">    <span class="dt">nudge_x =</span> range_x<span class="op">/</span><span class="dv">15</span>, <span class="dt">nudge_y =</span> range_y<span class="op">/</span><span class="dv">15</span></span>
<span id="cb1-34">  )</span>
<span id="cb1-35">}</span>
<span id="cb1-36"></span>
<span id="cb1-37">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb1-38">  <span class="kw">br</span>(),</span>
<span id="cb1-39">  <span class="kw">fluidRow</span>(</span>
<span id="cb1-40">    <span class="kw">column</span>(</span>
<span id="cb1-41">      <span class="dv">8</span>,</span>
<span id="cb1-42">      <span class="kw">plotOutput</span>(<span class="st">"ggplot"</span>, <span class="dt">dblclick =</span> <span class="st">"plotClick"</span>)</span>
<span id="cb1-43">    ),</span>
<span id="cb1-44">    <span class="kw">column</span>(</span>
<span id="cb1-45">      <span class="dv">4</span>,</span>
<span id="cb1-46">      tags<span class="op">$</span><span class="kw">div</span>(</span>
<span id="cb1-47">        <span class="dt">style =</span> <span class="st">"max-height: 400px; overflow: auto;"</span>,</span>
<span id="cb1-48">        <span class="kw">rHandsontableOutput</span>(<span class="st">"hot_pointLabels"</span>)  </span>
<span id="cb1-49">      )</span>
<span id="cb1-50">    )</span>
<span id="cb1-51">  )</span>
<span id="cb1-52">)</span>
<span id="cb1-53"></span>
<span id="cb1-54">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session){</span>
<span id="cb1-55">  </span>
<span id="cb1-56">  Ggplot &lt;-<span class="st"> </span><span class="kw">reactive</span>({</span>
<span id="cb1-57">    gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(iris) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-58"><span class="st">      </span><span class="kw">geom_point</span>(<span class="kw">aes</span>(<span class="dt">x =</span> Petal.Width, <span class="dt">y =</span> Petal.Length, <span class="dt">color =</span> Species))</span>
<span id="cb1-59">    gg</span>
<span id="cb1-60">  })</span>
<span id="cb1-61">  </span>
<span id="cb1-62">  output[[<span class="st">"ggplot"</span>]] &lt;-<span class="st"> </span><span class="kw">renderPlot</span>({</span>
<span id="cb1-63">    <span class="kw">addLabels</span>(<span class="kw">Ggplot</span>(), <span class="st">"Petal.Width"</span>, <span class="st">"Petal.Length"</span>, <span class="kw">Labels</span>())</span>
<span id="cb1-64">  })</span>
<span id="cb1-65">  </span>
<span id="cb1-66">  output[[<span class="st">"hot_pointLabels"</span>]] &lt;-<span class="st"> </span><span class="kw">renderRHandsontable</span>({</span>
<span id="cb1-67">    <span class="cf">if</span>(<span class="op">!</span><span class="kw">is.null</span>(hot &lt;-<span class="st"> </span>input[[<span class="st">"hot_pointLabels"</span>]])){</span>
<span id="cb1-68">      DF &lt;-<span class="st"> </span><span class="kw">hot_to_r</span>(hot)</span>
<span id="cb1-69">    } <span class="cf">else</span> {</span>
<span id="cb1-70">      DF &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb1-71">        <span class="dt">index =</span> <span class="kw">rownames</span>(iris), </span>
<span id="cb1-72">        <span class="dt">label =</span> <span class="st">""</span>, </span>
<span id="cb1-73">        <span class="dt">color =</span> <span class="st">"black"</span>,</span>
<span id="cb1-74">        <span class="dt">stringsAsFactors =</span> <span class="ot">FALSE</span></span>
<span id="cb1-75">      )</span>
<span id="cb1-76">    }</span>
<span id="cb1-77">    <span class="kw">rhandsontable</span>(DF, <span class="dt">rowHeaders =</span> <span class="ot">NULL</span>) <span class="op">%&gt;%</span><span class="st"> </span></span>
<span id="cb1-78"><span class="st">      </span><span class="kw">hot_col</span>(<span class="st">"index"</span>, <span class="dt">readOnly =</span> <span class="ot">TRUE</span>) <span class="op">%&gt;%</span></span>
<span id="cb1-79"><span class="st">      </span><span class="kw">hot_cols</span>(<span class="dt">colWidths =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">200</span>, <span class="dv">100</span>)) <span class="op">%&gt;%</span><span class="st"> </span></span>
<span id="cb1-80"><span class="st">      </span><span class="kw">hot_table</span>(</span>
<span id="cb1-81">        <span class="dt">highlightRow =</span> <span class="ot">TRUE</span>, <span class="dt">contextMenu =</span> <span class="ot">FALSE</span>, <span class="dt">fillHandle =</span> <span class="ot">TRUE</span></span>
<span id="cb1-82">      ) <span class="op">%&gt;%</span></span>
<span id="cb1-83"><span class="st">      </span><span class="kw">onRender</span>(</span>
<span id="cb1-84">        <span class="st">"function(el, x){</span></span>
<span id="cb1-85"><span class="st">          var hot = this.hot;</span></span>
<span id="cb1-86"><span class="st">          Shiny.addCustomMessageHandler('handler_hot', function(msg){</span></span>
<span id="cb1-87"><span class="st">            hot.setDataAtCell(msg.row, 1, msg.label);</span></span>
<span id="cb1-88"><span class="st">            hot.setDataAtCell(msg.row, 2, msg.color);</span></span>
<span id="cb1-89"><span class="st">          });</span></span>
<span id="cb1-90"><span class="st">        }"</span></span>
<span id="cb1-91">      )</span>
<span id="cb1-92">  })</span>
<span id="cb1-93">  </span>
<span id="cb1-94">  Index &lt;-<span class="st"> </span><span class="kw">reactiveVal</span>()</span>
<span id="cb1-95">  <span class="kw">observeEvent</span>(input[[<span class="st">"plotClick"</span>]], {</span>
<span id="cb1-96">    dat &lt;-<span class="st"> </span><span class="kw">droplevels</span>(<span class="kw">Ggplot</span>()<span class="op">$</span>data)</span>
<span id="cb1-97">    point &lt;-<span class="st"> </span><span class="kw">nearPoints</span>(</span>
<span id="cb1-98">      dat, input[[<span class="st">"plotClick"</span>]], <span class="dt">threshold =</span> <span class="dv">15</span>, <span class="dt">maxpoints =</span> 1L</span>
<span id="cb1-99">    )</span>
<span id="cb1-100">    <span class="cf">if</span>(<span class="kw">nrow</span>(point)){</span>
<span id="cb1-101">      <span class="kw">Index</span>(<span class="kw">as.integer</span>(<span class="kw">rownames</span>(point)))</span>
<span id="cb1-102">      <span class="kw">showModal</span>(<span class="kw">modalDialog</span>(</span>
<span id="cb1-103">        <span class="dt">title =</span> <span class="st">"Set a label for this point and its color"</span>,</span>
<span id="cb1-104">        <span class="kw">textInput</span>(<span class="st">"pointLabel"</span>, <span class="ot">NULL</span>, <span class="dt">placeholder =</span> <span class="st">"label"</span>),</span>
<span id="cb1-105">        <span class="kw">colourInput</span>(<span class="st">"pointLabelCol"</span>, <span class="ot">NULL</span>, <span class="dt">value =</span> <span class="st">"black"</span>),</span>
<span id="cb1-106">        <span class="dt">footer =</span> <span class="kw">tagList</span>(</span>
<span id="cb1-107">          <span class="kw">modalButton</span>(<span class="st">"Cancel"</span>),</span>
<span id="cb1-108">          <span class="kw">actionButton</span>(<span class="st">"ok"</span>, <span class="st">"OK"</span>)</span>
<span id="cb1-109">        ), </span>
<span id="cb1-110">        <span class="dt">size =</span> <span class="st">"s"</span></span>
<span id="cb1-111">      ))</span>
<span id="cb1-112">    }</span>
<span id="cb1-113">  })</span>
<span id="cb1-114">  </span>
<span id="cb1-115">  <span class="kw">observeEvent</span>(input[[<span class="st">"ok"</span>]], {</span>
<span id="cb1-116">    session<span class="op">$</span><span class="kw">sendCustomMessage</span>(</span>
<span id="cb1-117">      <span class="st">"handler_hot"</span>, </span>
<span id="cb1-118">      <span class="kw">list</span>(</span>
<span id="cb1-119">        <span class="st">"row"</span>   =<span class="st"> </span><span class="kw">Index</span>() <span class="op">-</span><span class="st"> </span>1L, </span>
<span id="cb1-120">        <span class="st">"label"</span> =<span class="st"> </span>input[[<span class="st">"pointLabel"</span>]], </span>
<span id="cb1-121">        <span class="st">"color"</span> =<span class="st"> </span>input[[<span class="st">"pointLabelCol"</span>]]</span>
<span id="cb1-122">      )</span>
<span id="cb1-123">    )</span>
<span id="cb1-124">    <span class="kw">Index</span>(<span class="ot">NULL</span>)</span>
<span id="cb1-125">    <span class="kw">removeModal</span>()</span>
<span id="cb1-126">  })</span>
<span id="cb1-127">  </span>
<span id="cb1-128">  pointsLabelsTable &lt;-<span class="st"> </span><span class="kw">reactive</span>({</span>
<span id="cb1-129">    <span class="cf">if</span>(<span class="op">!</span><span class="kw">is.null</span>(hot &lt;-<span class="st"> </span>input[[<span class="st">"hot_pointsLabels"</span>]])){</span>
<span id="cb1-130">      <span class="kw">hot_to_r</span>(hot)</span>
<span id="cb1-131">    }<span class="cf">else</span>{</span>
<span id="cb1-132">      <span class="ot">NULL</span></span>
<span id="cb1-133">    }</span>
<span id="cb1-134">  })</span>
<span id="cb1-135">  </span>
<span id="cb1-136">  Labels &lt;-<span class="st"> </span><span class="kw">eventReactive</span>(input[[<span class="st">"hot_pointLabels"</span>]], {</span>
<span id="cb1-137">    dat &lt;-<span class="st"> </span><span class="kw">hot_to_r</span>(input[[<span class="st">"hot_pointLabels"</span>]])</span>
<span id="cb1-138">    indices &lt;-<span class="st"> </span>dat[[<span class="st">"index"</span>]]</span>
<span id="cb1-139">    labels  &lt;-<span class="st"> </span>dat[[<span class="st">"label"</span>]]</span>
<span id="cb1-140">    colors  &lt;-<span class="st"> </span>dat[[<span class="st">"color"</span>]]</span>
<span id="cb1-141">    keep &lt;-<span class="st"> </span>labels <span class="op">!=</span><span class="st"> ""</span></span>
<span id="cb1-142">    <span class="cf">if</span>(<span class="kw">any</span>(keep)){</span>
<span id="cb1-143">      L &lt;-<span class="st"> </span><span class="kw">mapply</span>(</span>
<span id="cb1-144">        c, labels[keep], colors[keep], </span>
<span id="cb1-145">        <span class="dt">SIMPLIFY =</span> <span class="ot">FALSE</span>, <span class="dt">USE.NAMES =</span> <span class="ot">FALSE</span></span>
<span id="cb1-146">      )</span>
<span id="cb1-147">      <span class="kw">setNames</span>(L, indices[keep])</span>
<span id="cb1-148">    }<span class="cf">else</span>{</span>
<span id="cb1-149">      <span class="ot">NULL</span></span>
<span id="cb1-150">    }</span>
<span id="cb1-151">  })</span>
<span id="cb1-152">  </span>
<span id="cb1-153">}</span>
<span id="cb1-154"></span>
<span id="cb1-155"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ggLabels.gif"
          style="width: 65%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 08 Aug 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ggplot2_labelling.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Expanding a polynomial with 'caracas', part 2</title>
      <link>https://laustep.github.io/stlahblog/posts/caracas02.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Last month, I posted an
        <a href="https://laustep.github.io/stlahblog/posts/caracas01.html"
          >article</a
        >
        showing a way to expand a polynomial in R when the coefficients of the
        polynomial contain some literal values, with the help of the
        <strong>caracas</strong> package. Today I wanted to apply it with a
        polynomial expression having about 500 characters, and highly
        factorized. The method took more than 30 minutes, so I looked for a more
        efficient one.
      </p>
      <p>
        Thanks to some help on StackOverflow, I came to the following method
        which is more efficient. It consists in splitting the expression
        according to its additive terms and to work on each term, instead of
        expanding the whole polynomial. In the example below I take the
        polynomial expression defining the isosurface equation of a Solid Möbius
        strip.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(caracas)</span>
<span id="cb1-2">sympy &lt;-<span class="st"> </span><span class="kw">get_sympy</span>()</span>
<span id="cb1-3"><span class="co"># define the variables x,y,z and the constants a,b</span></span>
<span id="cb1-4"><span class="kw">def_sym</span>(x, y, z, a, b)</span>
<span id="cb1-5"><span class="co"># define expression </span></span>
<span id="cb1-6">expr &lt;-<span class="st"> </span>sympy<span class="op">$</span><span class="kw">parse_expr</span>(</span>
<span id="cb1-7">  <span class="st">"((x*x+y*y+1)*(a*x*x+b*y*y)+z*z*(b*x*x+a*y*y)-2*(a-b)*x*y*z-a*b*(x*x+y*y))**2-4*(x*x+y*y)*(a*x*x+b*y*y-x*y*z*(a-b))**2"</span></span>
<span id="cb1-8">) </span>
<span id="cb1-9"><span class="co"># extraction of monomials in the 'povray' list</span></span>
<span id="cb1-10">povray &lt;-<span class="st"> </span><span class="kw">list</span>()</span>
<span id="cb1-11">terms &lt;-<span class="st"> </span>sympy<span class="op">$</span>Add<span class="op">$</span><span class="kw">make_args</span>(expr)</span>
<span id="cb1-12"><span class="cf">for</span>(term <span class="cf">in</span> terms){</span>
<span id="cb1-13">  f &lt;-<span class="st"> </span>term<span class="op">$</span><span class="kw">expand</span>()</span>
<span id="cb1-14">  fterms &lt;-<span class="st"> </span>sympy<span class="op">$</span>Add<span class="op">$</span><span class="kw">make_args</span>(f)</span>
<span id="cb1-15">  <span class="cf">for</span>(fterm <span class="cf">in</span> fterms){</span>
<span id="cb1-16">    decomp  &lt;-<span class="st"> </span>fterm<span class="op">$</span><span class="kw">as_coeff_mul</span>(x<span class="op">$</span>pyobj, y<span class="op">$</span>pyobj, z<span class="op">$</span>pyobj)</span>
<span id="cb1-17">    coef    &lt;-<span class="st"> </span>decomp[[<span class="dv">1</span>]]</span>
<span id="cb1-18">    mono    &lt;-<span class="st"> </span>decomp[[<span class="dv">2</span>]]</span>
<span id="cb1-19">    polexpr &lt;-<span class="st"> </span>sympy<span class="op">$</span>Mul<span class="op">$</span><span class="kw">fromiter</span>(mono)</span>
<span id="cb1-20">    poly    &lt;-<span class="st"> </span>polexpr<span class="op">$</span><span class="kw">as_poly</span>(x<span class="op">$</span>pyobj, y<span class="op">$</span>pyobj, z<span class="op">$</span>pyobj)</span>
<span id="cb1-21">    degree  &lt;-<span class="st"> </span><span class="kw">toString</span>(poly<span class="op">$</span><span class="kw">monoms</span>()[[<span class="dv">1</span>]])</span>
<span id="cb1-22">    <span class="cf">if</span>(degree <span class="op">%in%</span><span class="st"> </span><span class="kw">names</span>(povray)){</span>
<span id="cb1-23">      povray[[degree]] &lt;-<span class="st"> </span>sympy<span class="op">$</span><span class="kw">Add</span>(povray[[degree]], coef)</span>
<span id="cb1-24">    }<span class="cf">else</span>{</span>
<span id="cb1-25">      povray[[degree]] &lt;-<span class="st"> </span>coef</span>
<span id="cb1-26">    }</span>
<span id="cb1-27">  }</span>
<span id="cb1-28">}</span>
<span id="cb1-29">polynomial &lt;-<span class="st"> </span><span class="kw">vapply</span>(<span class="kw">names</span>(povray), <span class="cf">function</span>(degree){</span>
<span id="cb1-30">  coeff &lt;-<span class="st"> </span>povray[[degree]] <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb1-31"><span class="st">    </span><span class="kw">gsub</span>(<span class="st">"([ab])</span><span class="ch">\\</span><span class="st">*</span><span class="ch">\\</span><span class="st">*(</span><span class="ch">\\</span><span class="st">d+)"</span>, <span class="st">"pow(</span><span class="ch">\\</span><span class="st">1,</span><span class="ch">\\</span><span class="st">2)"</span>, <span class="dt">x =</span> _)</span>
<span id="cb1-32">  <span class="kw">sprintf</span>(<span class="st">"xyz(%s): %s,"</span>, degree, coeff)</span>
<span id="cb1-33">}, <span class="kw">character</span>(1L))</span>
<span id="cb1-34"><span class="kw">cat</span>(polynomial, <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span>, <span class="dt">file =</span> <span class="st">"SolidMobiusStrip.txt"</span>)</span></code></pre>
      </div>
      <p>
        At the last step I use <code>gsub</code> to replace the powers like
        <code>a**2</code> to their POV-Ray syntax <code>pow(a,2)</code>. The
        above code writes this POV-Ray code:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode povray"
        ><code class="sourceCode povray"><span id="cb2-1">xyz(<span class="fl">4</span>, <span class="fl">0</span>, <span class="fl">0</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>)*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b + <span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb2-2">xyz(<span class="fl">8</span>, <span class="fl">0</span>, <span class="fl">0</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb2-3">xyz(<span class="fl">0</span>, <span class="fl">4</span>, <span class="fl">0</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>)*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">2</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) + <span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-4">xyz(<span class="fl">0</span>, <span class="fl">8</span>, <span class="fl">0</span>): <span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-5">xyz(<span class="fl">6</span>, <span class="fl">0</span>, <span class="fl">0</span>): <span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b - <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb2-6">xyz(<span class="fl">0</span>, <span class="fl">6</span>, <span class="fl">0</span>): <span class="fl">-2</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-7">xyz(<span class="fl">4</span>, <span class="fl">4</span>, <span class="fl">0</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>) + <span class="fl">4</span>*a*b + <span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-8">xyz(<span class="fl">0</span>, <span class="fl">4</span>, <span class="fl">4</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb2-9">xyz(<span class="fl">4</span>, <span class="fl">0</span>, <span class="fl">4</span>): <span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-10">xyz(<span class="fl">4</span>, <span class="fl">2</span>, <span class="fl">0</span>): <span class="fl">-4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b - <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) - <span class="fl">2</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">4</span>*a*b,</span>
<span id="cb2-11">xyz(<span class="fl">6</span>, <span class="fl">2</span>, <span class="fl">0</span>): <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) + <span class="fl">2</span>*a*b,</span>
<span id="cb2-12">xyz(<span class="fl">2</span>, <span class="fl">4</span>, <span class="fl">0</span>): <span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b - <span class="fl">4</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">4</span>*a*b - <span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-13">xyz(<span class="fl">2</span>, <span class="fl">6</span>, <span class="fl">0</span>): <span class="fl">2</span>*a*b + <span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-14">xyz(<span class="fl">1</span>, <span class="fl">3</span>, <span class="fl">3</span>): <span class="fl">-4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) + <span class="fl">4</span>*a*b,</span>
<span id="cb2-15">xyz(<span class="fl">3</span>, <span class="fl">1</span>, <span class="fl">1</span>): <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b - <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) - <span class="fl">4</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) + <span class="fl">4</span>*a*b,</span>
<span id="cb2-16">xyz(<span class="fl">5</span>, <span class="fl">1</span>, <span class="fl">1</span>): <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) - <span class="fl">4</span>*a*b,</span>
<span id="cb2-17">xyz(<span class="fl">3</span>, <span class="fl">3</span>, <span class="fl">1</span>): <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) - <span class="fl">4</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-18">xyz(<span class="fl">2</span>, <span class="fl">2</span>, <span class="fl">0</span>): <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b - <span class="fl">2</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) + <span class="fl">2</span>*a*b,</span>
<span id="cb2-19">xyz(<span class="fl">4</span>, <span class="fl">0</span>, <span class="fl">2</span>): <span class="fl">-2</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) + <span class="fl">2</span>*a*b,</span>
<span id="cb2-20">xyz(<span class="fl">0</span>, <span class="fl">4</span>, <span class="fl">2</span>): <span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b + <span class="fl">2</span>*a*b,</span>
<span id="cb2-21">xyz(<span class="fl">6</span>, <span class="fl">0</span>, <span class="fl">2</span>): <span class="fl">2</span>*a*b,</span>
<span id="cb2-22">xyz(<span class="fl">0</span>, <span class="fl">6</span>, <span class="fl">2</span>): <span class="fl">2</span>*a*b,</span>
<span id="cb2-23">xyz(<span class="fl">2</span>, <span class="fl">4</span>, <span class="fl">2</span>): <span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) + <span class="fl">10</span>*a*b - <span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-24">xyz(<span class="fl">4</span>, <span class="fl">2</span>, <span class="fl">2</span>): <span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) + <span class="fl">10</span>*a*b - <span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-25">xyz(<span class="fl">1</span>, <span class="fl">3</span>, <span class="fl">1</span>): <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b - <span class="fl">4</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">4</span>*a*b + <span class="fl">4</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-26">xyz(<span class="fl">1</span>, <span class="fl">5</span>, <span class="fl">1</span>): <span class="fl">4</span>*a*b - <span class="fl">4</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-27">xyz(<span class="fl">3</span>, <span class="fl">1</span>, <span class="fl">3</span>): <span class="fl">-4</span>*a*b + <span class="fl">4</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-28">xyz(<span class="fl">2</span>, <span class="fl">2</span>, <span class="fl">2</span>): <span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b + <span class="fl">6</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) - <span class="fl">2</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">8</span>*a*b + <span class="fl">6</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-29">xyz(<span class="fl">2</span>, <span class="fl">2</span>, <span class="fl">4</span>): <span class="fl">2</span>*a*b,</span></code></pre>
      </div>
      <p>
        This is very fast for this example, but it still took 20 minutes with my
        case, which is a slight modification of an animation by ‘ICN5D’; here it
        is:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ICN5D_02.gif"
        />
      </p>
      <p>
        The difference with the original animation is that this one uses an
        <a
          href="https://laustep.github.io/stlahblog/posts/slicedImplicitHypersurface.html"
          >isoclinic rotation</a
        >
        for the animation.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 16 Jul 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/caracas02.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Slices of an implicit hypersurface with R</title>
      <link>https://laustep.github.io/stlahblog/posts/slicedImplicitHypersurface.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In a
        <a
          href="https://laustep.github.io/stlahblog/posts/slicedHypersurface.html"
          >previous post</a
        >, I showed how to draw a 3D slice of a 4D hypersurface when a
        parameterization of this hypersurface is available. Here we deal with
        the case when an implicit equation of the hypersurface is available. For
        the illustration, we again consider the
        <a href="http://hi.gher.space/wiki/Tiger"><em>tiger</em></a
        >. It is given by the implicit equation
        <span class="math display"
          >\[ {\bigl(\sqrt{x^2 + y^2} - R_1\bigr)}^2 + {\bigl(\sqrt{z^2 + w^2} -
          R_2\bigr)}^2 = r^2. \]</span
        >
        We will fix a value of the fourth coordinate
        <span class="math inline">\(w\)</span>, say
        <span class="math inline">\(w_0\)</span>. That is to say we deal with
        the cross-section with the hyperplane
        <span class="math inline">\(\{w = w_0\}\)</span>. And we will rotate the
        hypersurface in the 4D space. We use a
        <a
          href="https://en.wikipedia.org/wiki/Rotations_in_4-dimensional_Euclidean_space"
          ><em>right-isoclinic</em></a
        >
        rotation. The function below performs such a rotation, allowing to pass
        several input vectors as a matrix.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># right-isoclinic rotation in 4D space </span></span>
<span id="cb1-2"><span class="co"># xi is the angle of rotation</span></span>
<span id="cb1-3">rotate4d &lt;-<span class="st"> </span><span class="cf">function</span>(alpha, beta, xi, vec){</span>
<span id="cb1-4">  a &lt;-<span class="st"> </span><span class="kw">cos</span>(xi)</span>
<span id="cb1-5">  b &lt;-<span class="st"> </span><span class="kw">sin</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(beta) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(xi)</span>
<span id="cb1-6">  c &lt;-<span class="st"> </span><span class="kw">sin</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(beta) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(xi)</span>
<span id="cb1-7">  d &lt;-<span class="st"> </span><span class="kw">cos</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(xi)</span>
<span id="cb1-8">  x &lt;-<span class="st"> </span>vec[, 1L]; y &lt;-<span class="st"> </span>vec[, 2L]; z &lt;-<span class="st"> </span>vec[, 3L]; w &lt;-<span class="st"> </span>vec[, 4L]</span>
<span id="cb1-9">  <span class="kw">cbind</span>(</span>
<span id="cb1-10">    a<span class="op">*</span>x <span class="op">-</span><span class="st"> </span>b<span class="op">*</span>y <span class="op">-</span><span class="st"> </span>c<span class="op">*</span>z <span class="op">-</span><span class="st"> </span>d<span class="op">*</span>w,</span>
<span id="cb1-11">    a<span class="op">*</span>y <span class="op">+</span><span class="st"> </span>b<span class="op">*</span>x <span class="op">+</span><span class="st"> </span>c<span class="op">*</span>w <span class="op">-</span><span class="st"> </span>d<span class="op">*</span>z,</span>
<span id="cb1-12">    a<span class="op">*</span>z <span class="op">-</span><span class="st"> </span>b<span class="op">*</span>w <span class="op">+</span><span class="st"> </span>c<span class="op">*</span>x <span class="op">+</span><span class="st"> </span>d<span class="op">*</span>y,</span>
<span id="cb1-13">    a<span class="op">*</span>w <span class="op">+</span><span class="st"> </span>b<span class="op">*</span>z <span class="op">-</span><span class="st"> </span>c<span class="op">*</span>y <span class="op">+</span><span class="st"> </span>d<span class="op">*</span>x</span>
<span id="cb1-14">  )</span>
<span id="cb1-15">}</span></code></pre>
      </div>
      <p>
        So, in the implicit equation we fix
        <span class="math inline">\(w=w_0\)</span> and we perform the rotation,
        taking arbitrary values for
        <span class="math inline">\(\alpha\)</span> and
        <span class="math inline">\(\beta\)</span>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1">f &lt;-<span class="st"> </span><span class="cf">function</span>(xyz, w0, xi, <span class="dt">R1 =</span> <span class="dv">3</span>, <span class="dt">R2 =</span> <span class="dv">2</span>, <span class="dt">r =</span> <span class="dv">1</span>){</span>
<span id="cb2-2">  rxyzw &lt;-<span class="st"> </span><span class="kw">rotate4d</span>(pi<span class="op">/</span><span class="dv">4</span>, pi<span class="op">/</span><span class="dv">4</span>, xi, <span class="kw">cbind</span>(xyz, w0))</span>
<span id="cb2-3">  x &lt;-<span class="st"> </span>rxyzw[, 1L]</span>
<span id="cb2-4">  y &lt;-<span class="st"> </span>rxyzw[, 2L]</span>
<span id="cb2-5">  z &lt;-<span class="st"> </span>rxyzw[, 3L]</span>
<span id="cb2-6">  w &lt;-<span class="st"> </span>rxyzw[, 4L]</span>
<span id="cb2-7">  (<span class="kw">sqrt</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>) <span class="op">-</span><span class="st"> </span>R1)<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>(<span class="kw">sqrt</span>(z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>w<span class="op">^</span><span class="dv">2</span>) <span class="op">-</span><span class="st"> </span>R2)<span class="op">^</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>r<span class="op">^</span><span class="dv">2</span></span>
<span id="cb2-8">}</span></code></pre>
      </div>
      <p>
        To plot the isosurface, we will use the
        <strong>rmarchingcubes</strong> package, not only for its speed, but
        also because it computes an excellent approximation of the per-vertex
        normals (it approximates the gradient of
        <span class="math inline">\(f\)</span>). So taking a
        <span class="math inline">\(150 \times 150 \times 150\)</span> grid is
        enough to get a smooth surface:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="co"># make grid ####</span></span>
<span id="cb3-2">n &lt;-<span class="st"> </span>150L</span>
<span id="cb3-3">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">len =</span> n)</span>
<span id="cb3-4">y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">len =</span> n)</span>
<span id="cb3-5">z &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">len =</span> n)</span>
<span id="cb3-6">Grid &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">X =</span> x, <span class="dt">Y =</span> y, <span class="dt">Z =</span> z)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co"># run the marching cubes #### </span></span>
<span id="cb3-9"><span class="kw">library</span>(rmarchingcubes)</span>
<span id="cb3-10">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">f</span>(Grid, <span class="dt">w_0 =</span> <span class="fl">0.3</span>, <span class="dt">xi =</span> pi<span class="op">/</span><span class="dv">3</span>), <span class="dt">dim =</span> <span class="kw">c</span>(n, n, n))</span>
<span id="cb3-11">cont &lt;-<span class="st"> </span><span class="kw">contour3d</span>(voxel, <span class="dt">level =</span> <span class="dv">0</span>, <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co"># plot #### </span></span>
<span id="cb3-14"><span class="kw">library</span>(rgl)</span>
<span id="cb3-15">mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb3-16">  <span class="dt">vertices =</span> <span class="kw">t</span>(cont[[<span class="st">"vertices"</span>]]),</span>
<span id="cb3-17">  <span class="dt">indices  =</span> <span class="kw">t</span>(cont[[<span class="st">"triangles"</span>]]),</span>
<span id="cb3-18">  <span class="dt">normals  =</span> cont[[<span class="st">"normals"</span>]],</span>
<span id="cb3-19">  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb3-20">)</span>
<span id="cb3-21"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb3-22"><span class="kw">bg3d</span>(</span>
<span id="cb3-23">  <span class="dt">sphere =</span> <span class="ot">FALSE</span>, <span class="dt">texture =</span> <span class="st">"SpaceBackground.png"</span>, <span class="dt">col =</span> <span class="st">"white"</span></span>
<span id="cb3-24">)</span>
<span id="cb3-25"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"maroon"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tiger01(implicit).png"
          style="width: 50%"
        />
      </p>
      <p>
        Now let’s make an animation by varying the angle of rotation
        <span class="math inline">\(\xi\)</span> from
        <span class="math inline">\(0\)</span> to
        <span class="math inline">\(\pi\)</span>.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1"><span class="co"># vector of angles #### </span></span>
<span id="cb4-2">nframes &lt;-<span class="st"> </span>60L</span>
<span id="cb4-3">xi_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, pi, <span class="dt">length.out =</span> nframes)</span>
<span id="cb4-4"><span class="co"># open the 3D engine #### </span></span>
<span id="cb4-5"><span class="kw">open3d</span>(</span>
<span id="cb4-6">  <span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>),</span>
<span id="cb4-7">  <span class="dt">zoom       =</span> <span class="fl">0.85</span>,</span>
<span id="cb4-8">  <span class="dt">userMatrix =</span> <span class="kw">rbind</span>(</span>
<span id="cb4-9">    <span class="kw">c</span>(<span class="fl">0.93</span>, <span class="fl">-0.16</span>, <span class="fl">-0.33</span>, <span class="dv">0</span>),</span>
<span id="cb4-10">    <span class="kw">c</span>(<span class="fl">0.35</span>,  <span class="fl">0.66</span>,  <span class="fl">0.67</span>, <span class="dv">0</span>),</span>
<span id="cb4-11">    <span class="kw">c</span>(<span class="fl">0.11</span>, <span class="fl">-0.74</span>,  <span class="fl">0.67</span>, <span class="dv">0</span>),</span>
<span id="cb4-12">    <span class="kw">c</span>(   <span class="dv">0</span>,     <span class="dv">0</span>,     <span class="dv">0</span>, <span class="dv">1</span>)</span>
<span id="cb4-13">  )</span>
<span id="cb4-14">)</span>
<span id="cb4-15"><span class="kw">bg3d</span>(</span>
<span id="cb4-16">  <span class="dt">sphere =</span> <span class="ot">FALSE</span>, <span class="dt">texture =</span> <span class="st">"SpaceBackground.png"</span>, <span class="dt">col =</span> <span class="st">"white"</span></span>
<span id="cb4-17">)</span>
<span id="cb4-18"><span class="co"># save the frames in png files #### </span></span>
<span id="cb4-19"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nframes){</span>
<span id="cb4-20">  v &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">f</span>(Grid, <span class="dt">w0 =</span> <span class="fl">0.3</span>, <span class="dt">xi =</span> xi_[i]), <span class="dt">dim =</span> <span class="kw">c</span>(n, n, n))</span>
<span id="cb4-21">  cont &lt;-<span class="st"> </span><span class="kw">contour3d</span>(v, <span class="dt">level =</span> <span class="dv">0</span>, <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z)</span>
<span id="cb4-22">  mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb4-23">    <span class="dt">vertices =</span> <span class="kw">t</span>(cont[[<span class="st">"vertices"</span>]]),</span>
<span id="cb4-24">    <span class="dt">indices  =</span> <span class="kw">t</span>(cont[[<span class="st">"triangles"</span>]]),</span>
<span id="cb4-25">    <span class="dt">normals  =</span> cont[[<span class="st">"normals"</span>]],</span>
<span id="cb4-26">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb4-27">  )</span>
<span id="cb4-28">  <span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"maroon"</span>)</span>
<span id="cb4-29">  <span class="kw">snapshot3d</span>(<span class="kw">sprintf</span>(<span class="st">"zzpic%03d.png"</span>, i), <span class="dt">webshot =</span> <span class="ot">FALSE</span>)</span>
<span id="cb4-30">  <span class="kw">clear3d</span>()</span>
<span id="cb4-31">}</span>
<span id="cb4-32"><span class="co"># make the animation with ImageMagick #### </span></span>
<span id="cb4-33"><span class="co"># option '-duplicate 1,-2-1' to get a forward-backward animation</span></span>
<span id="cb4-34">command &lt;-<span class="st"> </span><span class="kw">paste0</span>(</span>
<span id="cb4-35">  <span class="st">"magick convert -dispose previous -delay 10 "</span>,</span>
<span id="cb4-36">  <span class="st">"-duplicate 1,-2-1 zzpic*.png tiger.gif"</span></span>
<span id="cb4-37">)</span>
<span id="cb4-38"><span class="kw">system</span>(command)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tiger01(implicit).gif"
          style="width: 50%"
        />
      </p>
      <p>
        A similar animation with a more complex surface can be found on
        <a
          href="https://www.youtube.com/channel/UCQ2hC8ETS9FFm2pzzyZCVUw/videos"
          >my youtube channel</a
        >.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 15 Jul 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/slicedImplicitHypersurface.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Pretty tooltips for 'ggplot2'</title>
      <link>https://laustep.github.io/stlahblog/posts/ggplot2_qTipTooltips.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Below is a simple example of a ‘ggplot2’ graphic with tooltips in a
        Shiny application. The tooltips are constructed with the help of the
        <a href="https://github.com/qTip2/qTip2">qTip2</a> JavaScript library.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="kw">library</span>(shinyjs)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw">set.seed</span>(<span class="dv">666</span>)</span>
<span id="cb1-6">dat &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb1-7">  <span class="dt">x =</span> <span class="kw">rnorm</span>(<span class="dv">10</span>),</span>
<span id="cb1-8">  <span class="dt">y =</span> <span class="kw">rnorm</span>(<span class="dv">10</span>),</span>
<span id="cb1-9">  <span class="dt">f =</span> <span class="kw">gl</span>(<span class="dv">2</span>, <span class="dv">5</span>, <span class="dt">labels =</span> <span class="kw">c</span>(<span class="st">"A"</span>, <span class="st">"B"</span>))</span>
<span id="cb1-10">)</span>
<span id="cb1-11"></span>
<span id="cb1-12">qTipTemplate &lt;-<span class="st"> "</span></span>
<span id="cb1-13"><span class="st">$('#hoverinfo').qtip({</span></span>
<span id="cb1-14"><span class="st">  overwrite: true,</span></span>
<span id="cb1-15"><span class="st">  content: {</span></span>
<span id="cb1-16"><span class="st">    text: $('#tooltiptext').clone()</span></span>
<span id="cb1-17"><span class="st">  },</span></span>
<span id="cb1-18"><span class="st">  position: {</span></span>
<span id="cb1-19"><span class="st">    my: '%s',</span></span>
<span id="cb1-20"><span class="st">    at: '%s',</span></span>
<span id="cb1-21"><span class="st">    target: [%s, %s],</span></span>
<span id="cb1-22"><span class="st">    container: $('#ggplot')</span></span>
<span id="cb1-23"><span class="st">  },</span></span>
<span id="cb1-24"><span class="st">  show: {</span></span>
<span id="cb1-25"><span class="st">    ready: true</span></span>
<span id="cb1-26"><span class="st">  },</span></span>
<span id="cb1-27"><span class="st">  hide: {</span></span>
<span id="cb1-28"><span class="st">    event: false,</span></span>
<span id="cb1-29"><span class="st">    inactive: 4000</span></span>
<span id="cb1-30"><span class="st">  },</span></span>
<span id="cb1-31"><span class="st">  style: {</span></span>
<span id="cb1-32"><span class="st">    classes: 'myqtip'</span></span>
<span id="cb1-33"><span class="st">  }</span></span>
<span id="cb1-34"><span class="st">});</span></span>
<span id="cb1-35"><span class="st">"</span></span>
<span id="cb1-36"></span>
<span id="cb1-37">ui &lt;-<span class="st"> </span><span class="kw">basicPage</span>(</span>
<span id="cb1-38">  <span class="kw">useShinyjs</span>(),</span>
<span id="cb1-39">  tags<span class="op">$</span><span class="kw">head</span>(</span>
<span id="cb1-40">    tags<span class="op">$</span><span class="kw">link</span>(<span class="dt">rel =</span> <span class="st">"stylesheet"</span>, <span class="dt">href =</span> <span class="st">"jquery.qtip.css"</span>),</span>
<span id="cb1-41">    tags<span class="op">$</span><span class="kw">script</span>(<span class="dt">src =</span> <span class="st">"jquery.qtip.js"</span>),</span>
<span id="cb1-42">    tags<span class="op">$</span><span class="kw">style</span>(<span class="st">"</span></span>
<span id="cb1-43"><span class="st">      .myqtip {</span></span>
<span id="cb1-44"><span class="st">        font-size: 15px;</span></span>
<span id="cb1-45"><span class="st">        line-height: 18px;</span></span>
<span id="cb1-46"><span class="st">        background-color: rgba(245, 245, 245, 0.8);</span></span>
<span id="cb1-47"><span class="st">        border-color: rgb(54, 57, 64);</span></span>
<span id="cb1-48"><span class="st">      }"</span>)</span>
<span id="cb1-49">  ),</span>
<span id="cb1-50">  <span class="kw">div</span>(</span>
<span id="cb1-51">    <span class="dt">id =</span> <span class="st">"tooltiptext"</span>, <span class="dt">style =</span> <span class="st">"display: none;"</span></span>
<span id="cb1-52">  ),</span>
<span id="cb1-53">  <span class="kw">br</span>(),</span>
<span id="cb1-54">  <span class="kw">div</span>(</span>
<span id="cb1-55">    <span class="dt">style =</span> <span class="st">"position: relative;"</span>,</span>
<span id="cb1-56">    <span class="kw">plotOutput</span>(<span class="st">"ggplot"</span>, <span class="dt">hover =</span> <span class="kw">hoverOpts</span>(<span class="st">"plot_hover"</span>)),</span>
<span id="cb1-57">    <span class="kw">div</span>(<span class="dt">id =</span> <span class="st">"hoverinfo"</span>, <span class="dt">style =</span> <span class="st">"position: absolute;"</span>)</span>
<span id="cb1-58">  )</span>
<span id="cb1-59">)</span>
<span id="cb1-60"></span>
<span id="cb1-61">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session) {</span>
<span id="cb1-62">  output<span class="op">$</span>ggplot &lt;-<span class="st"> </span><span class="kw">renderPlot</span>(</span>
<span id="cb1-63">    <span class="kw">ggplot</span>(dat, <span class="kw">aes</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y)) <span class="op">+</span></span>
<span id="cb1-64"><span class="st">      </span><span class="kw">geom_point</span>(<span class="dt">size =</span> <span class="dv">6</span>) <span class="op">+</span></span>
<span id="cb1-65"><span class="st">      </span><span class="kw">theme</span>(</span>
<span id="cb1-66">        <span class="dt">panel.background =</span> <span class="kw">element_rect</span>(<span class="dt">fill =</span> <span class="st">"#FFCF9E"</span>),</span>
<span id="cb1-67">        <span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">19</span>),</span>
<span id="cb1-68">        <span class="dt">axis.text =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">16</span>)</span>
<span id="cb1-69">      )</span>
<span id="cb1-70">  )</span>
<span id="cb1-71"></span>
<span id="cb1-72">  <span class="kw">observeEvent</span>(input[[<span class="st">"plot_hover"</span>]], {</span>
<span id="cb1-73">    <span class="cf">if</span>(<span class="kw">is.null</span>(hover &lt;-<span class="st"> </span>input[[<span class="st">"plot_hover"</span>]])) {</span>
<span id="cb1-74">      <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb1-75">    }</span>
<span id="cb1-76">    point &lt;-<span class="st"> </span><span class="kw">nearPoints</span>(dat, hover, <span class="dt">threshold =</span> <span class="dv">15</span>, <span class="dt">maxpoints =</span> 1L)</span>
<span id="cb1-77">    <span class="cf">if</span>(<span class="kw">nrow</span>(point) <span class="op">==</span><span class="st"> </span>0L) {</span>
<span id="cb1-78">      <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb1-79">    }</span>
<span id="cb1-80">    left_pct &lt;-</span>
<span id="cb1-81"><span class="st">      </span>(point[[<span class="st">"x"</span>]] <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>left) <span class="op">/</span></span>
<span id="cb1-82"><span class="st">        </span>(hover<span class="op">$</span>domain<span class="op">$</span>right <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>left)</span>
<span id="cb1-83">    top_pct &lt;-</span>
<span id="cb1-84"><span class="st">      </span>(hover<span class="op">$</span>domain<span class="op">$</span>top <span class="op">-</span><span class="st"> </span>point[[<span class="st">"y"</span>]]) <span class="op">/</span></span>
<span id="cb1-85"><span class="st">        </span>(hover<span class="op">$</span>domain<span class="op">$</span>top <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>bottom)</span>
<span id="cb1-86">    left_px &lt;-</span>
<span id="cb1-87"><span class="st">      </span>(hover<span class="op">$</span>range<span class="op">$</span>left <span class="op">+</span><span class="st"> </span>left_pct <span class="op">*</span><span class="st"> </span>(hover<span class="op">$</span>range<span class="op">$</span>right <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>range<span class="op">$</span>left)) <span class="op">/</span></span>
<span id="cb1-88"><span class="st">        </span>hover<span class="op">$</span>img_css_ratio<span class="op">$</span>x</span>
<span id="cb1-89">    top_px &lt;-</span>
<span id="cb1-90"><span class="st">      </span>(hover<span class="op">$</span>range<span class="op">$</span>top <span class="op">+</span><span class="st"> </span>top_pct <span class="op">*</span><span class="st"> </span>(hover<span class="op">$</span>range<span class="op">$</span>bottom <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>range<span class="op">$</span>top)) <span class="op">/</span></span>
<span id="cb1-91"><span class="st">        </span>hover<span class="op">$</span>img_css_ratio<span class="op">$</span>y</span>
<span id="cb1-92">    pos &lt;-<span class="st"> </span><span class="kw">ifelse</span>(left_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb1-93">      <span class="kw">ifelse</span>(top_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb1-94">        <span class="st">"top left"</span>,</span>
<span id="cb1-95">        <span class="st">"bottom left"</span></span>
<span id="cb1-96">      ),</span>
<span id="cb1-97">      <span class="kw">ifelse</span>(top_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb1-98">        <span class="st">"top right"</span>,</span>
<span id="cb1-99">        <span class="st">"bottom right"</span></span>
<span id="cb1-100">      )</span>
<span id="cb1-101">    )</span>
<span id="cb1-102">    tooltip &lt;-<span class="st"> </span><span class="kw">paste0</span>(</span>
<span id="cb1-103">      <span class="st">"&lt;b&gt; x: &lt;/b&gt;"</span>, <span class="kw">formatC</span>(point[[<span class="st">"x"</span>]]), <span class="st">"&lt;br/&gt;"</span>,</span>
<span id="cb1-104">      <span class="st">"&lt;b&gt; y: &lt;/b&gt;"</span>, <span class="kw">formatC</span>(point[[<span class="st">"y"</span>]]), <span class="st">"&lt;br/&gt;"</span>,</span>
<span id="cb1-105">      <span class="st">"&lt;b&gt; f: &lt;/b&gt;"</span>, <span class="kw">as.character</span>(point[[<span class="st">"f"</span>]])</span>
<span id="cb1-106">    )</span>
<span id="cb1-107">    <span class="kw">runjs</span>(</span>
<span id="cb1-108">      <span class="kw">paste0</span>(</span>
<span id="cb1-109">        <span class="kw">sprintf</span>(</span>
<span id="cb1-110">          <span class="st">"$('#tooltiptext').html('%s');"</span>, tooltip</span>
<span id="cb1-111">        ),</span>
<span id="cb1-112">        <span class="kw">sprintf</span>(qTipTemplate, pos, pos, left_px, top_px)</span>
<span id="cb1-113">      )</span>
<span id="cb1-114">    )</span>
<span id="cb1-115">  })</span>
<span id="cb1-116">}</span>
<span id="cb1-117"></span>
<span id="cb1-118"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ggplot2_qTipTooltips.gif"
          style="width: 65%"
        />
      </p>
      <p>We can easily set some colors with the help of CSS classes:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">set.seed</span>(<span class="dv">666</span>)</span>
<span id="cb2-2">dat &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb2-3">  <span class="dt">x =</span> <span class="kw">c</span>(<span class="kw">rnorm</span>(<span class="dv">10</span>, <span class="dv">0</span>), <span class="kw">rnorm</span>(<span class="dv">10</span>, <span class="dv">2</span>), <span class="kw">rnorm</span>(<span class="dv">10</span>, <span class="dv">4</span>)),</span>
<span id="cb2-4">  <span class="dt">y =</span> <span class="kw">c</span>(<span class="kw">rnorm</span>(<span class="dv">10</span>, <span class="dv">0</span>), <span class="kw">rnorm</span>(<span class="dv">10</span>, <span class="dv">2</span>), <span class="kw">rnorm</span>(<span class="dv">10</span>, <span class="dv">4</span>)),</span>
<span id="cb2-5">  <span class="dt">f =</span> <span class="kw">gl</span>(<span class="dv">3</span>, <span class="dv">10</span>, <span class="dt">labels =</span> <span class="kw">c</span>(<span class="st">"A"</span>, <span class="st">"B"</span>, <span class="st">"C"</span>))</span>
<span id="cb2-6">)</span>
<span id="cb2-7"></span>
<span id="cb2-8">qTipTemplate &lt;-<span class="st"> "</span></span>
<span id="cb2-9"><span class="st">$('#hoverinfo').qtip({</span></span>
<span id="cb2-10"><span class="st">  overwrite: true,</span></span>
<span id="cb2-11"><span class="st">  content: {</span></span>
<span id="cb2-12"><span class="st">    text: $('#tooltiptext').clone()</span></span>
<span id="cb2-13"><span class="st">  },</span></span>
<span id="cb2-14"><span class="st">  position: {</span></span>
<span id="cb2-15"><span class="st">    my: '%s',</span></span>
<span id="cb2-16"><span class="st">    at: '%s',</span></span>
<span id="cb2-17"><span class="st">    target: [%s, %s],</span></span>
<span id="cb2-18"><span class="st">    container: $('#ggplot')</span></span>
<span id="cb2-19"><span class="st">  },</span></span>
<span id="cb2-20"><span class="st">  show: {</span></span>
<span id="cb2-21"><span class="st">    ready: true</span></span>
<span id="cb2-22"><span class="st">  },</span></span>
<span id="cb2-23"><span class="st">  hide: {</span></span>
<span id="cb2-24"><span class="st">    event: false,</span></span>
<span id="cb2-25"><span class="st">    inactive: 4000</span></span>
<span id="cb2-26"><span class="st">  },</span></span>
<span id="cb2-27"><span class="st">  style: {</span></span>
<span id="cb2-28"><span class="st">    classes: 'myqtip %s'</span></span>
<span id="cb2-29"><span class="st">  }</span></span>
<span id="cb2-30"><span class="st">});</span></span>
<span id="cb2-31"><span class="st">"</span></span>
<span id="cb2-32"></span>
<span id="cb2-33">ui &lt;-<span class="st"> </span><span class="kw">basicPage</span>(</span>
<span id="cb2-34">  <span class="kw">useShinyjs</span>(),</span>
<span id="cb2-35">  tags<span class="op">$</span><span class="kw">head</span>(</span>
<span id="cb2-36">    tags<span class="op">$</span><span class="kw">link</span>(<span class="dt">rel =</span> <span class="st">"stylesheet"</span>, <span class="dt">href =</span> <span class="st">"jquery.qtip.css"</span>),</span>
<span id="cb2-37">    tags<span class="op">$</span><span class="kw">script</span>(<span class="dt">src =</span> <span class="st">"jquery.qtip.js"</span>),</span>
<span id="cb2-38">    tags<span class="op">$</span><span class="kw">style</span>(<span class="st">"</span></span>
<span id="cb2-39"><span class="st">      .myqtip {</span></span>
<span id="cb2-40"><span class="st">        font-size: 15px;</span></span>
<span id="cb2-41"><span class="st">        line-height: 18px;</span></span>
<span id="cb2-42"><span class="st">        color: white;</span></span>
<span id="cb2-43"><span class="st">        border-color: rgb(54, 57, 64);</span></span>
<span id="cb2-44"><span class="st">      }</span></span>
<span id="cb2-45"><span class="st">      .darkred {</span></span>
<span id="cb2-46"><span class="st">        background-color: rgba(139, 0, 0, 0.8);</span></span>
<span id="cb2-47"><span class="st">      }</span></span>
<span id="cb2-48"><span class="st">      .darkgreen {</span></span>
<span id="cb2-49"><span class="st">        background-color: rgba(0, 100, 0, 0.8);</span></span>
<span id="cb2-50"><span class="st">      }</span></span>
<span id="cb2-51"><span class="st">      .darkblue {</span></span>
<span id="cb2-52"><span class="st">        background-color: rgba(0, 0, 139, 0.8);</span></span>
<span id="cb2-53"><span class="st">      }</span></span>
<span id="cb2-54"><span class="st">      "</span>)</span>
<span id="cb2-55">  ),</span>
<span id="cb2-56">  <span class="kw">div</span>(</span>
<span id="cb2-57">    <span class="dt">id =</span> <span class="st">"tooltiptext"</span>, <span class="dt">style =</span> <span class="st">"display: none;"</span></span>
<span id="cb2-58">  ),</span>
<span id="cb2-59">  <span class="kw">br</span>(),</span>
<span id="cb2-60">  <span class="kw">div</span>(</span>
<span id="cb2-61">    <span class="dt">style =</span> <span class="st">"position: relative;"</span>,</span>
<span id="cb2-62">    <span class="kw">plotOutput</span>(<span class="st">"ggplot"</span>, <span class="dt">hover =</span> <span class="kw">hoverOpts</span>(<span class="st">"plot_hover"</span>)),</span>
<span id="cb2-63">    <span class="kw">div</span>(<span class="dt">id =</span> <span class="st">"hoverinfo"</span>, <span class="dt">style =</span> <span class="st">"position: absolute;"</span>)</span>
<span id="cb2-64">  )</span>
<span id="cb2-65">)</span>
<span id="cb2-66"></span>
<span id="cb2-67">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session) {</span>
<span id="cb2-68">  output<span class="op">$</span>ggplot &lt;-<span class="st"> </span><span class="kw">renderPlot</span>(</span>
<span id="cb2-69">    <span class="kw">ggplot</span>(dat, <span class="kw">aes</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">color =</span> f)) <span class="op">+</span><span class="st"> </span><span class="kw">geom_point</span>(<span class="dt">size =</span> <span class="dv">4</span>) <span class="op">+</span></span>
<span id="cb2-70"><span class="st">      </span><span class="kw">scale_color_manual</span>(</span>
<span id="cb2-71">        <span class="dt">values =</span> <span class="kw">c</span>(<span class="st">"darkred"</span>, <span class="st">"darkgreen"</span>, <span class="st">"darkblue"</span>)</span>
<span id="cb2-72">      ) <span class="op">+</span></span>
<span id="cb2-73"><span class="st">      </span><span class="kw">theme</span>(</span>
<span id="cb2-74">        <span class="dt">panel.background =</span> <span class="kw">element_rect</span>(<span class="dt">fill =</span> <span class="st">"gainsboro"</span>),</span>
<span id="cb2-75">        <span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">19</span>),</span>
<span id="cb2-76">        <span class="dt">axis.text =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">16</span>),</span>
<span id="cb2-77">        <span class="dt">legend.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">18</span>),</span>
<span id="cb2-78">        <span class="dt">legend.text =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">15</span>),</span>
<span id="cb2-79">        <span class="dt">legend.key.size =</span> <span class="kw">unit</span>(<span class="dv">4</span>, <span class="st">"points"</span>)</span>
<span id="cb2-80">      )</span>
<span id="cb2-81">  )</span>
<span id="cb2-82"></span>
<span id="cb2-83">  <span class="kw">observeEvent</span>(input[[<span class="st">"plot_hover"</span>]], {</span>
<span id="cb2-84">    <span class="cf">if</span>(<span class="kw">is.null</span>(hover &lt;-<span class="st"> </span>input[[<span class="st">"plot_hover"</span>]])) {</span>
<span id="cb2-85">      <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb2-86">    }</span>
<span id="cb2-87">    point &lt;-<span class="st"> </span><span class="kw">nearPoints</span>(dat, hover, <span class="dt">threshold =</span> <span class="dv">15</span>, <span class="dt">maxpoints =</span> 1L)</span>
<span id="cb2-88">    <span class="cf">if</span>(<span class="kw">nrow</span>(point) <span class="op">==</span><span class="st"> </span>0L) {</span>
<span id="cb2-89">      <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb2-90">    }</span>
<span id="cb2-91">    left_pct &lt;-</span>
<span id="cb2-92"><span class="st">      </span>(point[[<span class="st">"x"</span>]] <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>left) <span class="op">/</span></span>
<span id="cb2-93"><span class="st">        </span>(hover<span class="op">$</span>domain<span class="op">$</span>right <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>left)</span>
<span id="cb2-94">    top_pct &lt;-</span>
<span id="cb2-95"><span class="st">      </span>(hover<span class="op">$</span>domain<span class="op">$</span>top <span class="op">-</span><span class="st"> </span>point[[<span class="st">"y"</span>]]) <span class="op">/</span></span>
<span id="cb2-96"><span class="st">        </span>(hover<span class="op">$</span>domain<span class="op">$</span>top <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>bottom)</span>
<span id="cb2-97">    left_px &lt;-</span>
<span id="cb2-98"><span class="st">      </span>(hover<span class="op">$</span>range<span class="op">$</span>left <span class="op">+</span><span class="st"> </span>left_pct <span class="op">*</span><span class="st"> </span>(hover<span class="op">$</span>range<span class="op">$</span>right <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>range<span class="op">$</span>left)) <span class="op">/</span></span>
<span id="cb2-99"><span class="st">        </span>hover<span class="op">$</span>img_css_ratio<span class="op">$</span>x</span>
<span id="cb2-100">    top_px &lt;-</span>
<span id="cb2-101"><span class="st">      </span>(hover<span class="op">$</span>range<span class="op">$</span>top <span class="op">+</span><span class="st"> </span>top_pct <span class="op">*</span><span class="st"> </span>(hover<span class="op">$</span>range<span class="op">$</span>bottom <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>range<span class="op">$</span>top)) <span class="op">/</span></span>
<span id="cb2-102"><span class="st">        </span>hover<span class="op">$</span>img_css_ratio<span class="op">$</span>y</span>
<span id="cb2-103">    pos &lt;-<span class="st"> </span><span class="kw">ifelse</span>(left_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb2-104">      <span class="kw">ifelse</span>(top_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb2-105">        <span class="st">"top left"</span>,</span>
<span id="cb2-106">        <span class="st">"bottom left"</span></span>
<span id="cb2-107">      ),</span>
<span id="cb2-108">      <span class="kw">ifelse</span>(top_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb2-109">        <span class="st">"top right"</span>,</span>
<span id="cb2-110">        <span class="st">"bottom right"</span></span>
<span id="cb2-111">      )</span>
<span id="cb2-112">    )</span>
<span id="cb2-113">    f &lt;-<span class="st"> </span><span class="kw">as.character</span>(point[[<span class="st">"f"</span>]])</span>
<span id="cb2-114">    color &lt;-<span class="st"> </span><span class="cf">switch</span>(f,</span>
<span id="cb2-115">      <span class="dt">A =</span> <span class="st">"darkred"</span>,</span>
<span id="cb2-116">      <span class="dt">B =</span> <span class="st">"darkgreen"</span>,</span>
<span id="cb2-117">      <span class="dt">C =</span> <span class="st">"darkblue"</span></span>
<span id="cb2-118">    )</span>
<span id="cb2-119">    tooltip &lt;-<span class="st"> </span><span class="kw">paste0</span>(</span>
<span id="cb2-120">      <span class="st">"&lt;b&gt; x: &lt;/b&gt;"</span>, <span class="kw">formatC</span>(point[[<span class="st">"x"</span>]]), <span class="st">"&lt;br/&gt;"</span>,</span>
<span id="cb2-121">      <span class="st">"&lt;b&gt; y: &lt;/b&gt;"</span>, <span class="kw">formatC</span>(point[[<span class="st">"y"</span>]]), <span class="st">"&lt;br/&gt;"</span>,</span>
<span id="cb2-122">      <span class="st">"&lt;b&gt; f: &lt;/b&gt;"</span>, f</span>
<span id="cb2-123">    )</span>
<span id="cb2-124">    <span class="kw">runjs</span>(</span>
<span id="cb2-125">      <span class="kw">paste0</span>(</span>
<span id="cb2-126">        <span class="kw">sprintf</span>(</span>
<span id="cb2-127">          <span class="st">"$('#tooltiptext').html('%s');"</span>, tooltip</span>
<span id="cb2-128">        ),</span>
<span id="cb2-129">        <span class="kw">sprintf</span>(qTipTemplate, pos, pos, left_px, top_px, color)</span>
<span id="cb2-130">      )</span>
<span id="cb2-131">    )</span>
<span id="cb2-132">  })</span>
<span id="cb2-133">}</span>
<span id="cb2-134"></span>
<span id="cb2-135"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ggplot2_qTipTooltips2.gif"
          style="width: 65%"
        />
      </p>
      <p>
        Let’s do something a bit more complicated now, with a continuous color
        scale. The idea is to define a CSS class for each point.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(shiny)</span>
<span id="cb3-2"><span class="kw">library</span>(shinyjs)</span>
<span id="cb3-3"><span class="kw">library</span>(ggplot2)</span>
<span id="cb3-4"><span class="kw">library</span>(viridisLite)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw">set.seed</span>(666L)</span>
<span id="cb3-7">n &lt;-<span class="st"> </span>200L</span>
<span id="cb3-8">dat &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb3-9">  <span class="dt">x =</span> <span class="dv">1</span><span class="op">:</span>n,</span>
<span id="cb3-10">  <span class="dt">y =</span> <span class="kw">runif</span>(n)</span>
<span id="cb3-11">)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co"># font color given background color:</span></span>
<span id="cb3-14">black_or_white &lt;-<span class="st"> </span><span class="cf">function</span>(color) {</span>
<span id="cb3-15">  rgb &lt;-<span class="st"> </span><span class="kw">col2rgb</span>(color)</span>
<span id="cb3-16">  <span class="cf">if</span>(rgb[<span class="dv">1</span>]<span class="op">*</span><span class="fl">0.299</span> <span class="op">+</span><span class="st"> </span>rgb[<span class="dv">2</span>]<span class="op">*</span><span class="fl">0.587</span> <span class="op">+</span><span class="st"> </span>rgb[<span class="dv">3</span>]<span class="op">*</span><span class="fl">0.114</span> <span class="op">&gt;</span><span class="st"> </span><span class="dv">186</span>)</span>
<span id="cb3-17">    <span class="st">"black"</span> <span class="co"># background color is light</span></span>
<span id="cb3-18">  <span class="cf">else</span></span>
<span id="cb3-19">    <span class="st">"white"</span> <span class="co"># background color is dark</span></span>
<span id="cb3-20">}</span>
<span id="cb3-21"></span>
<span id="cb3-22">ramp &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(<span class="kw">viridis</span>(255L))</span>
<span id="cb3-23"></span>
<span id="cb3-24">bkgs    &lt;-<span class="st"> </span><span class="kw">rgb</span>(<span class="kw">ramp</span>(dat<span class="op">$</span>y), <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb3-25">colors  &lt;-<span class="st"> </span><span class="kw">vapply</span>(bkgs, black_or_white, <span class="kw">character</span>(1L))</span>
<span id="cb3-26">classes &lt;-<span class="st"> </span><span class="kw">sprintf</span>(<span class="st">"color%03d"</span>, <span class="dv">1</span><span class="op">:</span>n)</span>
<span id="cb3-27">dat<span class="op">$</span>class &lt;-<span class="st"> </span>classes</span>
<span id="cb3-28"></span>
<span id="cb3-29">CSSclass &lt;-<span class="st"> </span><span class="cf">function</span>(i) {</span>
<span id="cb3-30">  <span class="kw">paste0</span>(</span>
<span id="cb3-31">    <span class="st">"."</span>, classes[i], <span class="st">" {"</span>,</span>
<span id="cb3-32">    <span class="st">"color: "</span>, colors[i], <span class="st">"; "</span>,</span>
<span id="cb3-33">    <span class="st">"background-color: "</span>, bkgs[i], <span class="st">";"</span>,</span>
<span id="cb3-34">    <span class="st">"}"</span></span>
<span id="cb3-35">  )</span>
<span id="cb3-36">}</span>
<span id="cb3-37">CSS &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="kw">vapply</span>(<span class="dv">1</span><span class="op">:</span>n, CSSclass, <span class="kw">character</span>(1L)), <span class="dt">collapse =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span>)</span>
<span id="cb3-38"></span>
<span id="cb3-39">qTipTemplate &lt;-<span class="st"> "</span></span>
<span id="cb3-40"><span class="st">$('#hoverinfo').qtip({</span></span>
<span id="cb3-41"><span class="st">  overwrite: true,</span></span>
<span id="cb3-42"><span class="st">  content: {</span></span>
<span id="cb3-43"><span class="st">    text: $('#tooltiptext').clone()</span></span>
<span id="cb3-44"><span class="st">  },</span></span>
<span id="cb3-45"><span class="st">  position: {</span></span>
<span id="cb3-46"><span class="st">    my: '%s',</span></span>
<span id="cb3-47"><span class="st">    at: '%s',</span></span>
<span id="cb3-48"><span class="st">    target: [%s, %s],</span></span>
<span id="cb3-49"><span class="st">    container: $('#ggplot')</span></span>
<span id="cb3-50"><span class="st">  },</span></span>
<span id="cb3-51"><span class="st">  show: {</span></span>
<span id="cb3-52"><span class="st">    ready: true</span></span>
<span id="cb3-53"><span class="st">  },</span></span>
<span id="cb3-54"><span class="st">  hide: {</span></span>
<span id="cb3-55"><span class="st">    event: false,</span></span>
<span id="cb3-56"><span class="st">    inactive: 4000</span></span>
<span id="cb3-57"><span class="st">  },</span></span>
<span id="cb3-58"><span class="st">  style: {</span></span>
<span id="cb3-59"><span class="st">    classes: 'myqtip %s'</span></span>
<span id="cb3-60"><span class="st">  }</span></span>
<span id="cb3-61"><span class="st">});</span></span>
<span id="cb3-62"><span class="st">"</span></span>
<span id="cb3-63"></span>
<span id="cb3-64">ui &lt;-<span class="st"> </span><span class="kw">basicPage</span>(</span>
<span id="cb3-65">  <span class="kw">useShinyjs</span>(),</span>
<span id="cb3-66">  tags<span class="op">$</span><span class="kw">head</span>(</span>
<span id="cb3-67">    tags<span class="op">$</span><span class="kw">link</span>(<span class="dt">rel =</span> <span class="st">"stylesheet"</span>, <span class="dt">href =</span> <span class="st">"jquery.qtip.css"</span>),</span>
<span id="cb3-68">    tags<span class="op">$</span><span class="kw">script</span>(<span class="dt">src =</span> <span class="st">"jquery.qtip.js"</span>),</span>
<span id="cb3-69">    tags<span class="op">$</span><span class="kw">style</span>(<span class="st">"</span></span>
<span id="cb3-70"><span class="st">      .myqtip {</span></span>
<span id="cb3-71"><span class="st">        font-size: 15px;</span></span>
<span id="cb3-72"><span class="st">        line-height: 18px;</span></span>
<span id="cb3-73"><span class="st">        color: white;</span></span>
<span id="cb3-74"><span class="st">        border-color: rgb(54, 57, 64);</span></span>
<span id="cb3-75"><span class="st">      }</span></span>
<span id="cb3-76"><span class="st">    "</span>),</span>
<span id="cb3-77">    tags<span class="op">$</span><span class="kw">style</span>(CSS)</span>
<span id="cb3-78">  ),</span>
<span id="cb3-79">  <span class="kw">div</span>(</span>
<span id="cb3-80">    <span class="dt">id =</span> <span class="st">"tooltiptext"</span>, <span class="dt">style =</span> <span class="st">"display: none;"</span></span>
<span id="cb3-81">  ),</span>
<span id="cb3-82">  <span class="kw">br</span>(),</span>
<span id="cb3-83">  <span class="kw">div</span>(</span>
<span id="cb3-84">    <span class="dt">style =</span> <span class="st">"position: relative;"</span>,</span>
<span id="cb3-85">    <span class="kw">plotOutput</span>(<span class="st">"ggplot"</span>, <span class="dt">hover =</span> <span class="kw">hoverOpts</span>(<span class="st">"plot_hover"</span>)),</span>
<span id="cb3-86">    <span class="kw">div</span>(<span class="dt">id =</span> <span class="st">"hoverinfo"</span>, <span class="dt">style =</span> <span class="st">"position: absolute;"</span>)</span>
<span id="cb3-87">  )</span>
<span id="cb3-88">)</span>
<span id="cb3-89"></span>
<span id="cb3-90">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session) {</span>
<span id="cb3-91">  output<span class="op">$</span>ggplot &lt;-<span class="st"> </span><span class="kw">renderPlot</span>(</span>
<span id="cb3-92">    <span class="kw">ggplot</span>(dat, <span class="kw">aes</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">color =</span> y)) <span class="op">+</span><span class="st"> </span><span class="kw">geom_point</span>(<span class="dt">size =</span> <span class="dv">3</span>) <span class="op">+</span></span>
<span id="cb3-93"><span class="st">      </span><span class="kw">scale_color_viridis_c</span>() <span class="op">+</span></span>
<span id="cb3-94"><span class="st">      </span><span class="kw">theme</span>(</span>
<span id="cb3-95">        <span class="dt">panel.background =</span> <span class="kw">element_rect</span>(<span class="dt">fill =</span> <span class="st">"gainsboro"</span>),</span>
<span id="cb3-96">        <span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">19</span>),</span>
<span id="cb3-97">        <span class="dt">axis.text =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">16</span>),</span>
<span id="cb3-98">        <span class="dt">legend.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">18</span>)</span>
<span id="cb3-99">      )</span>
<span id="cb3-100">  )</span>
<span id="cb3-101"></span>
<span id="cb3-102">  <span class="kw">observeEvent</span>(input[[<span class="st">"plot_hover"</span>]], {</span>
<span id="cb3-103">    <span class="cf">if</span>(<span class="kw">is.null</span>(hover &lt;-<span class="st"> </span>input[[<span class="st">"plot_hover"</span>]])) {</span>
<span id="cb3-104">      <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb3-105">    }</span>
<span id="cb3-106">    point &lt;-<span class="st"> </span><span class="kw">nearPoints</span>(dat, hover, <span class="dt">threshold =</span> <span class="dv">15</span>, <span class="dt">maxpoints =</span> 1L)</span>
<span id="cb3-107">    <span class="cf">if</span>(<span class="kw">nrow</span>(point) <span class="op">==</span><span class="st"> </span>0L) {</span>
<span id="cb3-108">      <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb3-109">    }</span>
<span id="cb3-110">    left_pct &lt;-</span>
<span id="cb3-111"><span class="st">      </span>(point[[<span class="st">"x"</span>]] <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>left) <span class="op">/</span></span>
<span id="cb3-112"><span class="st">        </span>(hover<span class="op">$</span>domain<span class="op">$</span>right <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>left)</span>
<span id="cb3-113">    top_pct &lt;-</span>
<span id="cb3-114"><span class="st">      </span>(hover<span class="op">$</span>domain<span class="op">$</span>top <span class="op">-</span><span class="st"> </span>point[[<span class="st">"y"</span>]]) <span class="op">/</span></span>
<span id="cb3-115"><span class="st">        </span>(hover<span class="op">$</span>domain<span class="op">$</span>top <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>bottom)</span>
<span id="cb3-116">    left_px &lt;-</span>
<span id="cb3-117"><span class="st">      </span>(hover<span class="op">$</span>range<span class="op">$</span>left <span class="op">+</span><span class="st"> </span>left_pct <span class="op">*</span><span class="st"> </span>(hover<span class="op">$</span>range<span class="op">$</span>right <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>range<span class="op">$</span>left)) <span class="op">/</span></span>
<span id="cb3-118"><span class="st">        </span>hover<span class="op">$</span>img_css_ratio<span class="op">$</span>x</span>
<span id="cb3-119">    top_px &lt;-</span>
<span id="cb3-120"><span class="st">      </span>(hover<span class="op">$</span>range<span class="op">$</span>top <span class="op">+</span><span class="st"> </span>top_pct <span class="op">*</span><span class="st"> </span>(hover<span class="op">$</span>range<span class="op">$</span>bottom <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>range<span class="op">$</span>top)) <span class="op">/</span></span>
<span id="cb3-121"><span class="st">        </span>hover<span class="op">$</span>img_css_ratio<span class="op">$</span>y</span>
<span id="cb3-122">    pos &lt;-<span class="st"> </span><span class="kw">ifelse</span>(left_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb3-123">      <span class="kw">ifelse</span>(top_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb3-124">        <span class="st">"top left"</span>,</span>
<span id="cb3-125">        <span class="st">"bottom left"</span></span>
<span id="cb3-126">      ),</span>
<span id="cb3-127">      <span class="kw">ifelse</span>(top_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb3-128">        <span class="st">"top right"</span>,</span>
<span id="cb3-129">        <span class="st">"bottom right"</span></span>
<span id="cb3-130">      )</span>
<span id="cb3-131">    )</span>
<span id="cb3-132">    cssClass &lt;-<span class="st"> </span>point[[<span class="st">"class"</span>]]</span>
<span id="cb3-133">    tooltip &lt;-<span class="st"> </span><span class="kw">paste0</span>(</span>
<span id="cb3-134">      <span class="st">"&lt;b&gt; x: &lt;/b&gt;"</span>, <span class="kw">formatC</span>(point[[<span class="st">"x"</span>]]), <span class="st">"&lt;br/&gt;"</span>,</span>
<span id="cb3-135">      <span class="st">"&lt;b&gt; y: &lt;/b&gt;"</span>, <span class="kw">formatC</span>(point[[<span class="st">"y"</span>]]), <span class="st">"&lt;br/&gt;"</span></span>
<span id="cb3-136">    )</span>
<span id="cb3-137">    <span class="kw">runjs</span>(</span>
<span id="cb3-138">      <span class="kw">paste0</span>(</span>
<span id="cb3-139">        <span class="kw">sprintf</span>(</span>
<span id="cb3-140">          <span class="st">"$('#tooltiptext').html('%s');"</span>, tooltip</span>
<span id="cb3-141">        ),</span>
<span id="cb3-142">        <span class="kw">sprintf</span>(qTipTemplate, pos, pos, left_px, top_px, cssClass)</span>
<span id="cb3-143">      )</span>
<span id="cb3-144">    )</span>
<span id="cb3-145">  })</span>
<span id="cb3-146">}</span>
<span id="cb3-147"></span>
<span id="cb3-148"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ggplot2_qTipTooltips3.gif"
          style="width: 65%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 03 Jul 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ggplot2_qTipTooltips.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Search in a 'DT' table w/ or w/o a regular expression</title>
      <link>https://laustep.github.io/stlahblog/posts/DT_SearchBuilder.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>It is possible to search in a ‘DT’ table with a regular expression:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">datatable</span>(</span>
<span id="cb1-2">  <span class="dt">data =</span> dat,</span>
<span id="cb1-3">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb1-4">    <span class="dt">search =</span> <span class="kw">list</span>(<span class="dt">regex =</span> <span class="ot">TRUE</span>)</span>
<span id="cb1-5">  )</span>
<span id="cb1-6">)</span></code></pre>
      </div>
      <p>
        But it could be desirable to have the possibility to search either with
        a regular expression or with an ordinary string.
      </p>
      <p>
        The <strong>SearchBuilder</strong> extension allows to search in a table
        using numerous useful criteria, such as <em>“contains”</em>,
        <em>“starts with”</em>, <em>“ends with”</em>, etc:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(DT)</span>
<span id="cb2-2"></span>
<span id="cb2-3">dat &lt;-<span class="st"> </span>iris[<span class="kw">c</span>(<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>, <span class="dv">51</span><span class="op">:</span><span class="dv">53</span>, <span class="dv">101</span><span class="op">:</span><span class="dv">103</span>), ]</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw">datatable</span>(</span>
<span id="cb2-6">  dat,</span>
<span id="cb2-7">  <span class="dt">extensions =</span> <span class="st">"SearchBuilder"</span>,</span>
<span id="cb2-8">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb2-9">    <span class="dt">dom =</span> <span class="st">"Qlfrtip"</span>,</span>
<span id="cb2-10">    <span class="dt">searchBuilder =</span> <span class="ot">TRUE</span></span>
<span id="cb2-11">  )</span>
<span id="cb2-12">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DT_SearchBuilder1.gif"
          style="width: 65%"
        />
      </p>
      <p>
        In general, this is enough. But if really needed, it is possible to add
        a custom search criterion. Here is how to add a
        <em>“matches regexp”</em> criterion, to search with a regular
        expression:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">datatable</span>(</span>
<span id="cb3-2">  dat,</span>
<span id="cb3-3">  <span class="dt">extensions =</span> <span class="st">"SearchBuilder"</span>,</span>
<span id="cb3-4">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb3-5">    <span class="dt">dom =</span> <span class="st">"Qlfrtip"</span>,</span>
<span id="cb3-6">    <span class="dt">searchBuilder =</span> <span class="kw">list</span>(</span>
<span id="cb3-7">      <span class="dt">conditions =</span> <span class="kw">list</span>(</span>
<span id="cb3-8">        <span class="dt">string =</span> <span class="kw">list</span>(</span>
<span id="cb3-9">          <span class="dt">regexp =</span> <span class="kw">list</span>(</span>
<span id="cb3-10">            <span class="dt">conditionName =</span> <span class="st">"Matches Regexp"</span>,</span>
<span id="cb3-11">            <span class="dt">init =</span> <span class="kw">JS</span>(</span>
<span id="cb3-12">              <span class="st">"function (that, fn, preDefined = null) {"</span>,</span>
<span id="cb3-13">              <span class="st">"  var el = $('&lt;input/&gt;').on('input', function() {"</span>,</span>
<span id="cb3-14">              <span class="st">"    fn(that, this);"</span>,</span>
<span id="cb3-15">              <span class="st">"   });"</span>,</span>
<span id="cb3-16">              <span class="st">"  if (preDefined !== null) {"</span>,</span>
<span id="cb3-17">              <span class="st">"     $(el).val(preDefined[0]);"</span>,</span>
<span id="cb3-18">              <span class="st">"  }"</span>,</span>
<span id="cb3-19">              <span class="st">"  return el;"</span>,</span>
<span id="cb3-20">              <span class="st">"}"</span></span>
<span id="cb3-21">            ),</span>
<span id="cb3-22">            <span class="dt">inputValue =</span> <span class="kw">JS</span>(</span>
<span id="cb3-23">              <span class="st">"function (el) {"</span>,</span>
<span id="cb3-24">              <span class="st">"  return $(el[0]).val();"</span>,</span>
<span id="cb3-25">              <span class="st">"}"</span></span>
<span id="cb3-26">            ),</span>
<span id="cb3-27">            <span class="dt">isInputValid =</span> <span class="kw">JS</span>(</span>
<span id="cb3-28">              <span class="st">"function (el, that) {"</span>,</span>
<span id="cb3-29">              <span class="st">"  var regexp = $(el[0]).val();"</span>,</span>
<span id="cb3-30">              <span class="st">"  var valid = true;"</span>,</span>
<span id="cb3-31">              <span class="st">"  try {"</span>,</span>
<span id="cb3-32">              <span class="st">"    new RegExp(regexp, 'g');"</span>,</span>
<span id="cb3-33">              <span class="st">"  } catch(e) {"</span>,</span>
<span id="cb3-34">              <span class="st">"    valid = false;"</span>,</span>
<span id="cb3-35">              <span class="st">"  }"</span>,</span>
<span id="cb3-36">              <span class="st">"  return valid;"</span>,</span>
<span id="cb3-37">              <span class="st">"}"</span></span>
<span id="cb3-38">            ),</span>
<span id="cb3-39">            <span class="dt">search =</span> <span class="kw">JS</span>(</span>
<span id="cb3-40">              <span class="st">"function (value, regexp) {"</span>,</span>
<span id="cb3-41">              <span class="st">"  var reg = new RegExp(regexp, 'g');"</span>,</span>
<span id="cb3-42">              <span class="st">"  return reg.test(value);"</span>,</span>
<span id="cb3-43">              <span class="st">"}"</span></span>
<span id="cb3-44">            )</span>
<span id="cb3-45">          )</span>
<span id="cb3-46">        )</span>
<span id="cb3-47">      )</span>
<span id="cb3-48">    )</span>
<span id="cb3-49">  )</span>
<span id="cb3-50">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DT_SearchBuilder2.gif"
          style="width: 65%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 03 Jul 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/DT_SearchBuilder.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Mapping a picture on a donut or a Hopf torus</title>
      <link>https://laustep.github.io/stlahblog/posts/ConformalTorus.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <h1 id="the-donut-torus">The donut torus</h1>
      <p>
        Given a number <span class="math inline">\(s \geqslant 1\)</span>, the
        following map:
        <span class="math display"
          >\[ (u, v) \mapsto (x, y, z) = \frac{\Bigl(s\cos\frac{u}{s},
          s\sin\frac{u}{s}, \sin v\Bigr)}{\sqrt{s^2+1}-\cos v} \]</span
        >
        is a <em>conformal parameterization</em> of the torus (the donut), where
        <span class="math inline">\(-s\pi \leqslant u &lt; s\pi\)</span> and
        <span class="math inline">\(\pi \leqslant v &lt; \pi\)</span>. I found
        it in
        <a
          href="https://static1.bridgesmathart.org/2011/cdrom/proceedings/134/paper_134.pdf"
          >this paper by J.M. Sullivan</a
        >. The number <span class="math inline">\(s\)</span> is the ratio of the
        major radius over the minor radius.
      </p>
      <p>
        The conformality of the map has the following consequence: you can
        easily map a doubly periodic image on the torus in such a way that it
        will perfectly fit on the torus.
      </p>
      <h2 id="mapping-a-checkerboard">Mapping a checkerboard</h2>
      <p>
        Let me show what I mean. The code below generates a mesh of the torus
        with a checkerboard mapped on its surface:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(rgl)</span>
<span id="cb1-2"><span class="kw">library</span>(Rvcg) <span class="co"># to use vcgUpdateNormals()</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">torusMesh &lt;-<span class="st"> </span><span class="cf">function</span>(s, nu, nv){</span>
<span id="cb1-5">  nu &lt;-<span class="st"> </span><span class="kw">as.integer</span>(nu)</span>
<span id="cb1-6">  nv &lt;-<span class="st"> </span><span class="kw">as.integer</span>(nv)</span>
<span id="cb1-7">  nunv &lt;-<span class="st"> </span>nu <span class="op">*</span><span class="st"> </span>nv</span>
<span id="cb1-8">  vs      &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nunv)</span>
<span id="cb1-9">  tris1   &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nunv)</span>
<span id="cb1-10">  tris2   &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nunv)</span>
<span id="cb1-11">  u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi<span class="op">*</span>s, pi<span class="op">*</span>s, <span class="dt">length.out =</span> nu <span class="op">+</span><span class="st"> </span>1L)[<span class="op">-</span>1L]</span>
<span id="cb1-12">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi, pi, <span class="dt">length.out =</span> nv <span class="op">+</span><span class="st"> </span>1L)[<span class="op">-</span>1L]</span>
<span id="cb1-13">  scosu_ &lt;-<span class="st"> </span>s <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_ <span class="op">/</span><span class="st"> </span>s)</span>
<span id="cb1-14">  ssinu_ &lt;-<span class="st"> </span>s <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_ <span class="op">/</span><span class="st"> </span>s)</span>
<span id="cb1-15">  sinv_ &lt;-<span class="st"> </span><span class="kw">sin</span>(v_)</span>
<span id="cb1-16">  w     &lt;-<span class="st"> </span><span class="kw">sqrt</span>(s<span class="op">*</span>s <span class="op">+</span><span class="st"> </span><span class="dv">1</span>) <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(v_)</span>
<span id="cb1-17">  jp1_ &lt;-<span class="st"> </span><span class="kw">c</span>(2L<span class="op">:</span>nv, 1L)</span>
<span id="cb1-18">  j_ &lt;-<span class="st"> </span>1L<span class="op">:</span>nv</span>
<span id="cb1-19">  color &lt;-<span class="st"> </span><span class="ot">NULL</span></span>
<span id="cb1-20">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(nu<span class="op">-</span>1L)){</span>
<span id="cb1-21">    i_nv &lt;-<span class="st"> </span>i<span class="op">*</span>nv</span>
<span id="cb1-22">    rg &lt;-<span class="st"> </span>(i_nv <span class="op">-</span><span class="st"> </span>nv <span class="op">+</span><span class="st"> </span>1L)<span class="op">:</span>i_nv</span>
<span id="cb1-23">    vs[, rg] &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-24">      scosu_[i] <span class="op">/</span><span class="st"> </span>w,</span>
<span id="cb1-25">      ssinu_[i] <span class="op">/</span><span class="st"> </span>w,</span>
<span id="cb1-26">      sinv_     <span class="op">/</span><span class="st"> </span>w</span>
<span id="cb1-27">    )</span>
<span id="cb1-28">    color &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb1-29">      color,</span>
<span id="cb1-30">      <span class="cf">if</span>(<span class="kw">mod</span>(<span class="kw">floor</span>(<span class="dv">5</span> <span class="op">*</span><span class="st"> </span>u_[i] <span class="op">/</span><span class="st"> </span>(pi<span class="op">*</span>s)), <span class="dv">2</span>) <span class="op">==</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb1-31">        <span class="kw">ifelse</span>(</span>
<span id="cb1-32">          <span class="kw">floor</span>(<span class="dv">5</span> <span class="op">*</span><span class="st"> </span>v_ <span class="op">/</span><span class="st"> </span>pi) <span class="op">%%</span><span class="st"> </span><span class="dv">2</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"yellow"</span>, <span class="st">"navy"</span></span>
<span id="cb1-33">        )</span>
<span id="cb1-34">      }<span class="cf">else</span>{</span>
<span id="cb1-35">        <span class="kw">ifelse</span>(</span>
<span id="cb1-36">          <span class="kw">floor</span>(<span class="dv">5</span> <span class="op">*</span><span class="st"> </span>v_ <span class="op">/</span><span class="st"> </span>pi) <span class="op">%%</span><span class="st"> </span><span class="dv">2</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"navy"</span>, <span class="st">"yellow"</span></span>
<span id="cb1-37">        )</span>
<span id="cb1-38">      }</span>
<span id="cb1-39">    )</span>
<span id="cb1-40">    k1 &lt;-<span class="st"> </span>i_nv <span class="op">-</span><span class="st"> </span>nv</span>
<span id="cb1-41">    k_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>j_</span>
<span id="cb1-42">    l_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>jp1_</span>
<span id="cb1-43">    m_ &lt;-<span class="st"> </span>i_nv <span class="op">+</span><span class="st"> </span>j_</span>
<span id="cb1-44">    tris1[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(m_, l_, k_)</span>
<span id="cb1-45">    tris2[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(m_, i_nv <span class="op">+</span><span class="st"> </span>jp1_, l_)</span>
<span id="cb1-46">  }</span>
<span id="cb1-47">  i_nv &lt;-<span class="st"> </span>nunv</span>
<span id="cb1-48">  rg &lt;-<span class="st"> </span>(i_nv <span class="op">-</span><span class="st"> </span>nv <span class="op">+</span><span class="st"> </span>1L)<span class="op">:</span>i_nv</span>
<span id="cb1-49">  vs[, rg] &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-50">    scosu_[nu] <span class="op">/</span><span class="st"> </span>w,</span>
<span id="cb1-51">    ssinu_[nu] <span class="op">/</span><span class="st"> </span>w,</span>
<span id="cb1-52">    sinv_      <span class="op">/</span><span class="st"> </span>w</span>
<span id="cb1-53">  )</span>
<span id="cb1-54">  color &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb1-55">    color,</span>
<span id="cb1-56">    <span class="kw">ifelse</span>(</span>
<span id="cb1-57">      <span class="kw">floor</span>(<span class="dv">5</span> <span class="op">*</span><span class="st"> </span>v_ <span class="op">/</span><span class="st"> </span>pi) <span class="op">%%</span><span class="st"> </span><span class="dv">2</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"yellow"</span>, <span class="st">"navy"</span></span>
<span id="cb1-58">    )</span>
<span id="cb1-59">  )</span>
<span id="cb1-60">  k1 &lt;-<span class="st"> </span>i_nv <span class="op">-</span><span class="st"> </span>nv</span>
<span id="cb1-61">  l_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>jp1_</span>
<span id="cb1-62">  k_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>j_</span>
<span id="cb1-63">  tris1[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(j_, l_, k_)</span>
<span id="cb1-64">  tris2[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(j_, jp1_, l_)</span>
<span id="cb1-65">  tmesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb1-66">    <span class="dt">vertices    =</span> vs,</span>
<span id="cb1-67">    <span class="dt">indices     =</span> <span class="kw">cbind</span>(tris1, tris2),</span>
<span id="cb1-68">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb1-69">    <span class="dt">material    =</span> <span class="kw">list</span>(<span class="st">"color"</span> =<span class="st"> </span>color)</span>
<span id="cb1-70">  )</span>
<span id="cb1-71">  <span class="kw">vcgUpdateNormals</span>(tmesh)</span>
<span id="cb1-72">}</span></code></pre>
      </div>
      <p>Let’s see:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">mesh &lt;-<span class="st"> </span><span class="kw">torusMesh</span>(<span class="dt">s =</span> <span class="kw">sqrt</span>(<span class="dv">2</span>), <span class="dt">nu =</span> <span class="dv">500</span>, <span class="dt">nv =</span> <span class="dv">500</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.85</span>)</span>
<span id="cb2-4"><span class="kw">bg3d</span>(<span class="st">"gainsboro"</span>)</span>
<span id="cb2-5"><span class="kw">shade3d</span>(mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ConformalTorusCheckerboard.gif"
          style="width: 55%"
        />
      </p>
      <p>Now you surely see what I mean.</p>
      <h2 id="mapping-a-gray-scott-picture">Mapping a Gray-Scott picture</h2>
      <p>
        I am a fan of the
        <a href="https://fronkonstin.com/">Fronkonstin blog</a>. Maybe you
        already see
        <a href="https://fronkonstin.com/2019/12/28/reaction-diffusion/"
          >this article about the Gray-Scott reaction-diffusion model</a
        >
        (it appeared on R-bloggers). It shows how to generate some beautiful
        pictures which are doubly periodic. So let’s map such a picture on the
        donut:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">......</span>
<span id="cb3-2"></span>
<span id="cb3-3">fcolor &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(viridisLite<span class="op">::</span><span class="kw">magma</span>(255L))</span>
<span id="cb3-4">getColors &lt;-<span class="st"> </span><span class="cf">function</span>(B){</span>
<span id="cb3-5">  rgbs &lt;-<span class="st"> </span><span class="kw">fcolor</span>(B)</span>
<span id="cb3-6">  <span class="kw">rgb</span>(rgbs[, 1L], rgbs[, 2L], rgbs[, 3L], <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb3-7">}</span>
<span id="cb3-8"></span>
<span id="cb3-9">X &lt;-<span class="st"> </span><span class="kw">iterate_Gray_Scott</span>(X, L, DA, DB, <span class="dv">500</span>)</span>
<span id="cb3-10">Colors &lt;-<span class="st"> </span><span class="kw">getColors</span>(<span class="kw">c</span>(X[,,2L]))</span>
<span id="cb3-11"></span>
<span id="cb3-12">mesh &lt;-<span class="st"> </span><span class="kw">torusMesh</span>(<span class="dt">s =</span> <span class="kw">sqrt</span>(<span class="dv">2</span>), <span class="dt">nu =</span> <span class="dv">600</span>, <span class="dt">nv =</span> <span class="dv">600</span>)</span>
<span id="cb3-13">mesh[[<span class="st">"material"</span>]] &lt;-<span class="st"> </span><span class="kw">list</span>(<span class="st">"color"</span> =<span class="st"> </span>Colors)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.85</span>)</span>
<span id="cb3-16"><span class="kw">bg3d</span>(<span class="st">"gainsboro"</span>)</span>
<span id="cb3-17"><span class="kw">shade3d</span>(mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ConformalTorusGrayScott.gif"
          style="width: 55%"
        />
      </p>
      <p>Beautiful!</p>
      <h1 id="the-hopf-torus">The Hopf torus</h1>
      <p>
        We can similarly map a picture on a Hopf torus, with this conformal
        parameterization:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">HT &lt;-<span class="st"> </span><span class="cf">function</span>(h, nlobes, t, phi){</span>
<span id="cb4-2">  <span class="co"># the spherical curve</span></span>
<span id="cb4-3">  p1 &lt;-<span class="st"> </span><span class="kw">sin</span>(h <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(nlobes<span class="op">*</span>t))</span>
<span id="cb4-4">  p2 &lt;-<span class="st"> </span><span class="kw">cos</span>(t) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(h <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(nlobes<span class="op">*</span>t))</span>
<span id="cb4-5">  p3 &lt;-<span class="st"> </span><span class="kw">sin</span>(t) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(h <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(nlobes<span class="op">*</span>t))</span>
<span id="cb4-6">  <span class="co"># parameterization</span></span>
<span id="cb4-7">  yden &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">*</span>(<span class="dv">1</span><span class="op">+</span>p1))</span>
<span id="cb4-8">  y1 &lt;-<span class="st"> </span>(<span class="dv">1</span><span class="op">+</span>p1)<span class="op">/</span>yden</span>
<span id="cb4-9">  y2 &lt;-<span class="st"> </span>p2<span class="op">/</span>yden</span>
<span id="cb4-10">  y3 &lt;-<span class="st"> </span>p3<span class="op">/</span>yden</span>
<span id="cb4-11">  cosphi &lt;-<span class="st"> </span><span class="kw">cos</span>(phi)</span>
<span id="cb4-12">  sinphi &lt;-<span class="st"> </span><span class="kw">sin</span>(phi)</span>
<span id="cb4-13">  x1 &lt;-<span class="st"> </span>cosphi<span class="op">*</span>y1</span>
<span id="cb4-14">  x2 &lt;-<span class="st"> </span>sinphi<span class="op">*</span>y1</span>
<span id="cb4-15">  x3 &lt;-<span class="st"> </span>cosphi<span class="op">*</span>y2 <span class="op">-</span><span class="st"> </span>sinphi<span class="op">*</span>y3</span>
<span id="cb4-16">  x4 &lt;-<span class="st"> </span>cosphi<span class="op">*</span>y3 <span class="op">+</span><span class="st"> </span>sinphi<span class="op">*</span>y2  </span>
<span id="cb4-17">  <span class="kw">return</span>(<span class="kw">rbind</span>(x1<span class="op">/</span>(<span class="dv">1</span><span class="op">-</span>x4), x2<span class="op">/</span>(<span class="dv">1</span><span class="op">-</span>x4), x3<span class="op">/</span>(<span class="dv">1</span><span class="op">-</span>x4)))</span>
<span id="cb4-18">}</span></code></pre>
      </div>
      <h2 id="checkerboard">Checkerboard</h2>
      <p>
        The code to construct the mesh with the checkerboard is similar to the
        one for the donut torus:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">HopfTorusMesh &lt;-<span class="st"> </span><span class="cf">function</span>(h, nlobes, nu, nv){</span>
<span id="cb5-2">  nu &lt;-<span class="st"> </span><span class="kw">as.integer</span>(nu)</span>
<span id="cb5-3">  nv &lt;-<span class="st"> </span><span class="kw">as.integer</span>(nv)</span>
<span id="cb5-4">  vs    &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb5-5">  tris1 &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb5-6">  tris2 &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb5-7">  u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi, pi, <span class="dt">length.out =</span> nu <span class="op">+</span><span class="st"> </span>1L)[<span class="op">-</span>1L]</span>
<span id="cb5-8">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi, pi, <span class="dt">length.out =</span> nv <span class="op">+</span><span class="st"> </span>1L)[<span class="op">-</span>1L]</span>
<span id="cb5-9">  jp1_ &lt;-<span class="st"> </span><span class="kw">c</span>(2L<span class="op">:</span>nv, 1L)</span>
<span id="cb5-10">  j_ &lt;-<span class="st"> </span>1L<span class="op">:</span>nv</span>
<span id="cb5-11">  color &lt;-<span class="st"> </span><span class="ot">NULL</span></span>
<span id="cb5-12">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(nu<span class="op">-</span>1L)){</span>
<span id="cb5-13">    i_nv &lt;-<span class="st"> </span>i<span class="op">*</span>nv</span>
<span id="cb5-14">    vs[, (i_nv <span class="op">-</span><span class="st"> </span>nv <span class="op">+</span><span class="st"> </span>1L)<span class="op">:</span>i_nv] &lt;-<span class="st"> </span><span class="kw">HT</span>(h, nlobes, u_[i], v_)</span>
<span id="cb5-15">    color &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb5-16">      color,</span>
<span id="cb5-17">      <span class="cf">if</span>(<span class="kw">mod</span>(<span class="kw">floor</span>(<span class="dv">10</span> <span class="op">*</span><span class="st"> </span>u_[i] <span class="op">/</span><span class="st"> </span>pi), <span class="dv">2</span>) <span class="op">==</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb5-18">        <span class="kw">ifelse</span>(</span>
<span id="cb5-19">          <span class="kw">floor</span>(<span class="dv">10</span> <span class="op">*</span><span class="st"> </span>v_ <span class="op">/</span><span class="st"> </span>pi) <span class="op">%%</span><span class="st"> </span><span class="dv">2</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"yellow"</span>, <span class="st">"navy"</span></span>
<span id="cb5-20">        )</span>
<span id="cb5-21">      }<span class="cf">else</span>{</span>
<span id="cb5-22">        <span class="kw">ifelse</span>(</span>
<span id="cb5-23">          <span class="kw">floor</span>(<span class="dv">10</span> <span class="op">*</span><span class="st"> </span>v_ <span class="op">/</span><span class="st"> </span>pi) <span class="op">%%</span><span class="st"> </span><span class="dv">2</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"navy"</span>, <span class="st">"yellow"</span></span>
<span id="cb5-24">        )</span>
<span id="cb5-25">      }</span>
<span id="cb5-26">    )</span>
<span id="cb5-27">    k1 &lt;-<span class="st"> </span>i_nv <span class="op">-</span><span class="st"> </span>nv</span>
<span id="cb5-28">    k_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>j_</span>
<span id="cb5-29">    l_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>jp1_</span>
<span id="cb5-30">    m_ &lt;-<span class="st"> </span>i_nv <span class="op">+</span><span class="st"> </span>j_</span>
<span id="cb5-31">    tris1[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(k_, l_, m_)</span>
<span id="cb5-32">    tris2[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(l_, i_nv <span class="op">+</span><span class="st"> </span>jp1_, m_)</span>
<span id="cb5-33">  }</span>
<span id="cb5-34">  i_nv &lt;-<span class="st"> </span>nu<span class="op">*</span>nv</span>
<span id="cb5-35">  vs[, (i_nv <span class="op">-</span><span class="st"> </span>nv <span class="op">+</span><span class="st"> </span>1L)<span class="op">:</span>i_nv] &lt;-<span class="st"> </span><span class="kw">HT</span>(h, nlobes, pi, v_)</span>
<span id="cb5-36">  color &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb5-37">    color,</span>
<span id="cb5-38">    <span class="kw">ifelse</span>(</span>
<span id="cb5-39">      <span class="kw">floor</span>(<span class="dv">10</span> <span class="op">*</span><span class="st"> </span>v_ <span class="op">/</span><span class="st"> </span>pi) <span class="op">%%</span><span class="st"> </span><span class="dv">2</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"yellow"</span>, <span class="st">"navy"</span></span>
<span id="cb5-40">    )</span>
<span id="cb5-41">  )</span>
<span id="cb5-42">  k1 &lt;-<span class="st"> </span>i_nv <span class="op">-</span><span class="st"> </span>nv</span>
<span id="cb5-43">  k_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>j_</span>
<span id="cb5-44">  l_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>jp1_</span>
<span id="cb5-45">  tris1[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(k_, l_, j_)</span>
<span id="cb5-46">  tris2[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(l_, jp1_, j_)</span>
<span id="cb5-47">  <span class="kw">vcgUpdateNormals</span>(<span class="kw">tmesh3d</span>(</span>
<span id="cb5-48">    <span class="dt">vertices    =</span> vs,</span>
<span id="cb5-49">    <span class="dt">indices     =</span> <span class="kw">cbind</span>(tris1, tris2),</span>
<span id="cb5-50">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb5-51">    <span class="dt">material    =</span> <span class="kw">list</span>(<span class="st">"color"</span> =<span class="st"> </span>color) </span>
<span id="cb5-52">  ))</span>
<span id="cb5-53">}</span>
<span id="cb5-54"></span>
<span id="cb5-55">mesh &lt;-<span class="st"> </span><span class="kw">HopfTorusMesh</span>(<span class="dt">h =</span> <span class="fl">0.4</span>, <span class="dt">nlobes =</span> <span class="dv">4</span>, <span class="dt">nu =</span> <span class="dv">500</span>, <span class="dt">nv =</span> <span class="dv">500</span>)</span>
<span id="cb5-56"></span>
<span id="cb5-57"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.85</span>)</span>
<span id="cb5-58"><span class="kw">bg3d</span>(<span class="st">"gainsboro"</span>)</span>
<span id="cb5-59"><span class="kw">shade3d</span>(mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ConformalHopfTorusCheckerboard.gif"
          style="width: 55%"
        />
      </p>
      <p>I really like it.</p>
      <h2 id="gray-scott-picture">Gray-Scott picture</h2>
      <p>
        To map the Gray-Scott picture, we proceed as for the donut torus. Here
        is the result:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ConformalHopfTorusGrayScott.gif"
          style="width: 55%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 30 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ConformalTorus.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>On a Möbius transformation</title>
      <link>https://laustep.github.io/stlahblog/posts/OnAMobiusTransformation.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Consider a complex number
        <span class="math inline">\(\gamma\)</span> such that
        <span class="math inline">\(|\gamma| &lt; 1\)</span> and the following
        matrix:
        <span class="math display"
          >\[ M = \begin{pmatrix} i &amp; \gamma \\ \bar\gamma &amp; -i
          \end{pmatrix}. \]</span
        >
      </p>
      <p>
        Then the Möbius transformation associated to this matrix is nice. Why?
        Because:
      </p>
      <ul>
        <li><p>it maps the unit disk to itself;</p></li>
        <li>
          <p>it is of order <span class="math inline">\(2\)</span>;</p>
        </li>
        <li><p>its fractional powers have a closed form.</p></li>
      </ul>
      <p>
        For these reasons, I often use this Möbius transformation in
        <a href="https://laustep.github.io/stlahblog/frames/shaders_index.html"
          >my shaders</a
        >.
      </p>
      <p>
        Let us derive the fractional powers of
        <span class="math inline">\(M\)</span>. We set
        <span class="math inline">\(h = \sqrt{1-|\gamma|^2}\)</span>.
      </p>
      <p>
        The eigenvalues of <span class="math inline">\(M\)</span> are
        <span class="math display"
          >\[ \begin{align} \lambda_1 &amp; = -ih \\ \lambda_2 &amp; = ih =
          \bar{\lambda_1} \end{align} \]</span
        >
        with corresponding eigen vectors
        <span class="math display"
          >\[ \begin{align} v_1 &amp; = \begin{pmatrix}
          (1-h)\dfrac{i\gamma}{|\gamma|^2} \\ 1 \end{pmatrix} \\ v_2 &amp; =
          \begin{pmatrix} (1+h)\dfrac{i\gamma}{|\gamma|^2} \\ 1 \end{pmatrix}.
          \end{align} \]</span
        >
        Let
        <span class="math inline"
          >\(P = \begin{pmatrix} v_1 &amp; v_2 \end{pmatrix}\)</span
        >. Then
        <span class="math display"
          >\[ \frac{1}{\det(P)} = \frac{i\bar\gamma}{2h} \]</span
        >
        and for any complex numbers <span class="math inline">\(d_1\)</span> and
        <span class="math inline">\(d_2\)</span>,
        <span class="math display"
          >\[ P \begin{pmatrix} d_1 &amp; 0 \\ 0 &amp; d_2 \end{pmatrix} P^{-1}
          = \frac{1}{2h} \begin{pmatrix} d_2(1+h)-d_1(1-h) &amp;
          i(d_1-d_2)\gamma \\ i(d_1-d_2)\bar\gamma &amp; d_1(1+h)-d_2(1-h)
          \end{pmatrix}. \]</span
        >
      </p>
      <p>
        In particular, <span class="math inline">\(M^t\)</span> is given by
        <span class="math display"
          >\[ \begin{pmatrix} a &amp; b \\ \bar b &amp; \bar a \end{pmatrix}
          \]</span
        >
        where
        <span class="math display"
          >\[ \begin{align} a &amp; = \Re(d_1) - i \dfrac{\Im(d_1)}{h}, \\ b
          &amp; = \gamma \dfrac{\Im(d_2)}{h}, \\ d_1 &amp; = \bar{d_2}, \\ d_2
          &amp; = h^t \exp\left(i\dfrac{t\pi}{2}\right). \end{align} \]</span
        >
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">M_power_t &lt;-<span class="st"> </span><span class="cf">function</span>(gamma, t){</span>
<span id="cb1-2">  h &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">1</span><span class="op">-</span><span class="kw">Mod</span>(gamma)<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb1-3">  d2 &lt;-<span class="st"> </span>h<span class="op">^</span>t <span class="op">*</span><span class="st"> </span>(<span class="kw">cos</span>(t<span class="op">*</span>pi<span class="op">/</span><span class="dv">2</span>) <span class="op">+</span><span class="st"> </span>1i<span class="op">*</span><span class="kw">sin</span>(t<span class="op">*</span>pi<span class="op">/</span><span class="dv">2</span>))</span>
<span id="cb1-4">  d1 &lt;-<span class="st"> </span><span class="kw">Conj</span>(d2)</span>
<span id="cb1-5">  a &lt;-<span class="st"> </span><span class="kw">Re</span>(d1) <span class="op">-</span><span class="st"> </span>1i<span class="op">*</span><span class="kw">Im</span>(d1)<span class="op">/</span>h</span>
<span id="cb1-6">  b &lt;-<span class="st"> </span>gamma <span class="op">*</span><span class="st"> </span><span class="kw">Im</span>(d2)<span class="op">/</span>h</span>
<span id="cb1-7">  c &lt;-<span class="st"> </span><span class="kw">Conj</span>(b)</span>
<span id="cb1-8">  d &lt;-<span class="st"> </span><span class="kw">Conj</span>(a)</span>
<span id="cb1-9">  <span class="kw">c</span>(<span class="dt">a =</span> a, <span class="dt">b =</span> b, <span class="dt">c =</span> c, <span class="dt">d =</span> d)</span>
<span id="cb1-10">}</span></code></pre>
      </div>
      <p>
        Let’s apply this Möbius transformation now. Here is a visualization of
        the <em>Dedekind eta function</em>, a complex function availale in the
        <strong>jacobi</strong> package:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># background color</span></span>
<span id="cb2-2">bkgcol &lt;-<span class="st"> </span><span class="kw">rgb</span>(<span class="dv">21</span>, <span class="dv">25</span>, <span class="dv">30</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">modulo &lt;-<span class="st"> </span><span class="cf">function</span>(a, p) {</span>
<span id="cb2-5">  a <span class="op">-</span><span class="st"> </span>p <span class="op">*</span><span class="st"> </span><span class="kw">ifelse</span>(a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, <span class="kw">floor</span>(a<span class="op">/</span>p), <span class="kw">ceiling</span>(a<span class="op">/</span>p))</span>
<span id="cb2-6">}</span>
<span id="cb2-7"></span>
<span id="cb2-8">colormap &lt;-<span class="st"> </span><span class="cf">function</span>(z){</span>
<span id="cb2-9">  <span class="cf">if</span>(<span class="kw">is.na</span>(z)){</span>
<span id="cb2-10">    <span class="kw">return</span>(bkgcol)</span>
<span id="cb2-11">  }</span>
<span id="cb2-12">  <span class="cf">if</span>(<span class="kw">is.infinite</span>(z) <span class="op">||</span><span class="st"> </span><span class="kw">is.nan</span>(z)){</span>
<span id="cb2-13">    <span class="kw">return</span>(<span class="st">"#000000"</span>)</span>
<span id="cb2-14">  }</span>
<span id="cb2-15">  x &lt;-<span class="st"> </span><span class="kw">Re</span>(z)</span>
<span id="cb2-16">  y &lt;-<span class="st"> </span><span class="kw">Im</span>(z)</span>
<span id="cb2-17">  r &lt;-<span class="st"> </span><span class="kw">modulo</span>(<span class="kw">Mod</span>(z), <span class="dv">1</span>)</span>
<span id="cb2-18">  g &lt;-<span class="st"> </span><span class="dv">2</span> <span class="op">*</span><span class="st"> </span><span class="kw">abs</span>(<span class="kw">modulo</span>(<span class="kw">atan2</span>(y, x), <span class="fl">0.5</span>))</span>
<span id="cb2-19">  b &lt;-<span class="st"> </span><span class="kw">abs</span>(<span class="kw">modulo</span>(x<span class="op">*</span>y, <span class="dv">1</span>))</span>
<span id="cb2-20">  <span class="cf">if</span>(<span class="kw">is.nan</span>(b)){</span>
<span id="cb2-21">    <span class="kw">return</span>(<span class="st">"#000000"</span>)</span>
<span id="cb2-22">  }</span>
<span id="cb2-23">  <span class="kw">rgb</span>(</span>
<span id="cb2-24">    <span class="dv">8</span> <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(r<span class="fl">-0.5</span>)), </span>
<span id="cb2-25">    <span class="dv">8</span> <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(g<span class="fl">-0.5</span>)), </span>
<span id="cb2-26">    <span class="dv">8</span> <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(b<span class="fl">-0.5</span>)),</span>
<span id="cb2-27">    <span class="dt">maxColorValue =</span> <span class="dv">1</span></span>
<span id="cb2-28">  )</span>
<span id="cb2-29">}</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="kw">library</span>(jacobi)</span>
<span id="cb2-32">f &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(x, y){</span>
<span id="cb2-33">  q &lt;-<span class="st"> </span>x <span class="op">+</span><span class="st"> </span>1i<span class="op">*</span>y</span>
<span id="cb2-34">  <span class="cf">if</span>(<span class="kw">Mod</span>(q) <span class="op">&gt;</span><span class="st"> </span><span class="fl">0.9999</span> <span class="op">||</span><span class="st"> </span>(<span class="kw">Im</span>(q) <span class="op">==</span><span class="st"> </span><span class="dv">0</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">Re</span>(q) <span class="op">&lt;=</span><span class="st"> </span><span class="dv">0</span>)){</span>
<span id="cb2-35">    <span class="kw">return</span>(bkgcol)</span>
<span id="cb2-36">  }</span>
<span id="cb2-37">  tau &lt;-<span class="st"> </span><span class="op">-</span>1i <span class="op">*</span><span class="st"> </span><span class="kw">log</span>(q) <span class="op">/</span><span class="st"> </span>pi</span>
<span id="cb2-38">  z &lt;-<span class="st"> </span><span class="kw">eta</span>(tau)</span>
<span id="cb2-39">  <span class="kw">colormap</span>(z)</span>
<span id="cb2-40">})</span>
<span id="cb2-41"></span>
<span id="cb2-42">x &lt;-<span class="st"> </span>y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>, <span class="dt">len =</span> <span class="dv">2000</span>)</span>
<span id="cb2-43">image &lt;-<span class="st"> </span><span class="kw">outer</span>(x, y, f)</span>
<span id="cb2-44"></span>
<span id="cb2-45">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>), <span class="dt">bg =</span> bkgcol)</span>
<span id="cb2-46"><span class="kw">plot</span>(</span>
<span id="cb2-47">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="dt">type =</span> <span class="st">"n"</span>, </span>
<span id="cb2-48">  <span class="dt">xlab =</span> <span class="st">""</span>, <span class="dt">ylab =</span> <span class="st">""</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">asp =</span> <span class="dv">1</span></span>
<span id="cb2-49">)</span>
<span id="cb2-50"><span class="kw">rasterImage</span>(image, <span class="dv">-100</span>, <span class="dv">-100</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb2-51"><span class="kw">par</span>(opar)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Dedekind.png"
          style="width: 55%"
        />
      </p>
      <p>
        Here is how to apply the Möbius transformation for one value of the
        power <span class="math inline">\(t\)</span>:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">Mobius &lt;-<span class="st"> </span><span class="kw">M_power_t</span>(<span class="dt">gamma =</span> <span class="fl">0.7</span> <span class="op">-</span><span class="st"> </span><span class="fl">0.3</span>i, <span class="dt">t =</span> ...)</span>
<span id="cb3-2">a &lt;-<span class="st"> </span>Mobius[<span class="st">"a"</span>]</span>
<span id="cb3-3">b &lt;-<span class="st"> </span>Mobius[<span class="st">"b"</span>]</span>
<span id="cb3-4">c &lt;-<span class="st"> </span>Mobius[<span class="st">"c"</span>]</span>
<span id="cb3-5">d &lt;-<span class="st"> </span>Mobius[<span class="st">"d"</span>]; </span>
<span id="cb3-6">f &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(x, y){</span>
<span id="cb3-7">  q0 &lt;-<span class="st"> </span>x <span class="op">+</span><span class="st"> </span>1i<span class="op">*</span>y</span>
<span id="cb3-8">  q &lt;-<span class="st"> </span>(a<span class="op">*</span>q0 <span class="op">+</span><span class="st"> </span>b) <span class="op">/</span><span class="st"> </span>(c<span class="op">*</span>q0 <span class="op">+</span><span class="st"> </span>d)</span>
<span id="cb3-9">  <span class="cf">if</span>(<span class="kw">Mod</span>(q) <span class="op">&gt;</span><span class="st"> </span><span class="fl">0.9999</span> <span class="op">||</span><span class="st"> </span>(<span class="kw">Im</span>(q) <span class="op">==</span><span class="st"> </span><span class="dv">0</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">Re</span>(q) <span class="op">&lt;=</span><span class="st"> </span><span class="dv">0</span>)){</span>
<span id="cb3-10">    <span class="kw">return</span>(bkgcol)</span>
<span id="cb3-11">  }</span>
<span id="cb3-12">  tau &lt;-<span class="st"> </span><span class="op">-</span>1i <span class="op">*</span><span class="st"> </span><span class="kw">log</span>(q) <span class="op">/</span><span class="st"> </span>pi</span>
<span id="cb3-13">  z &lt;-<span class="st"> </span><span class="kw">eta</span>(tau)</span>
<span id="cb3-14">  <span class="kw">colormap</span>(z)</span>
<span id="cb3-15">})</span>
<span id="cb3-16"></span>
<span id="cb3-17">x &lt;-<span class="st"> </span>y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>, <span class="dt">len =</span> <span class="dv">2000</span>)</span>
<span id="cb3-18">image &lt;-<span class="st"> </span><span class="kw">outer</span>(x, y, f)</span></code></pre>
      </div>
      <p>
        Then it suffices to run this code for
        <span class="math inline">\(t\)</span> varying from
        <span class="math inline">\(0\)</span> to
        <span class="math inline">\(2\)</span>, and to save the image for each
        value of <span class="math inline">\(t\)</span>. But this would be very
        slow. Actually I implemented the image generation with
        <strong>Rcpp</strong>. Here is the result:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Dedekind.gif"
          style="width: 55%"
        />
      </p>
      <p>
        My <strong>Rcpp</strong> code is available in the
        <a href="https://github.com/stla/jacobi">Github version</a> of the
        <strong>jacobi</strong> package. The R code which generates an image for
        one value of <span class="math inline">\(t\)</span> is:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>, <span class="dt">len =</span> 2000L)</span>
<span id="cb4-2">gamma &lt;-<span class="st"> </span><span class="fl">0.7</span> <span class="op">-</span><span class="st"> </span><span class="fl">0.3</span>i</span>
<span id="cb4-3">t &lt;-<span class="st"> </span>...</span>
<span id="cb4-4">image &lt;-<span class="st"> </span>jacobi<span class="op">:::</span><span class="kw">Image_eta</span>(x, gamma, t)</span>
<span id="cb4-5">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>), <span class="dt">bg =</span> bkgcol)</span>
<span id="cb4-6"><span class="kw">plot</span>(</span>
<span id="cb4-7">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="dt">type =</span> <span class="st">"n"</span>, </span>
<span id="cb4-8">  <span class="dt">xlab =</span> <span class="st">""</span>, <span class="dt">ylab =</span> <span class="st">""</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">asp =</span> <span class="dv">1</span></span>
<span id="cb4-9">)</span>
<span id="cb4-10"><span class="kw">rasterImage</span>(image, <span class="dv">-100</span>, <span class="dv">-100</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb4-11"><span class="kw">par</span>(opar)</span></code></pre>
      </div>
      <p>
        You can also play with <code>jacobi:::Image_E4</code> and
        <code>jacobi:::Image_E6</code>, which respectively generate a
        visualization of the Eisenstein series of weight
        <span class="math inline">\(4\)</span> and a visualization of the
        Eisenstein series of weight <span class="math inline">\(6\)</span>.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Tue, 21 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/OnAMobiusTransformation.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Beautiful complex functions</title>
      <link>https://laustep.github.io/stlahblog/posts/beautifulComplexFunctions.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I’ve just submitted a new package to CRAN: <strong>jacobi</strong>. It
        allows to evaluate the Jacobi theta functions as well as some related
        functions. In particular, some Eisenstein series, that you will see
        below.
      </p>
      <p>
        To represent a complex function, a color map is needed, that is to say a
        function which maps each complex number to a color. I’m using two
        different color maps:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">modulo &lt;-<span class="st"> </span><span class="cf">function</span>(a, p) {</span>
<span id="cb1-2">  a <span class="op">-</span><span class="st"> </span>p <span class="op">*</span><span class="st"> </span><span class="kw">ifelse</span>(a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, <span class="kw">floor</span>(a<span class="op">/</span>p), <span class="kw">ceiling</span>(a<span class="op">/</span>p))</span>
<span id="cb1-3">}</span>
<span id="cb1-4"></span>
<span id="cb1-5">colormap1 &lt;-<span class="st"> </span><span class="cf">function</span>(z){</span>
<span id="cb1-6">  <span class="cf">if</span>(<span class="kw">is.infinite</span>(z) <span class="op">||</span><span class="st"> </span><span class="kw">is.nan</span>(z)) <span class="kw">return</span>(<span class="st">"#000000"</span>)</span>
<span id="cb1-7">  x &lt;-<span class="st"> </span><span class="kw">Re</span>(z)</span>
<span id="cb1-8">  y &lt;-<span class="st"> </span><span class="kw">Im</span>(z)</span>
<span id="cb1-9">  a &lt;-<span class="st"> </span><span class="kw">atan2</span>(y, x)</span>
<span id="cb1-10">  r &lt;-<span class="st"> </span><span class="kw">modulo</span>(<span class="kw">Mod</span>(z), <span class="dv">1</span>)</span>
<span id="cb1-11">  g &lt;-<span class="st"> </span><span class="kw">abs</span>(<span class="kw">modulo</span>(a, <span class="fl">0.5</span>)) <span class="op">*</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb1-12">  b &lt;-<span class="st"> </span><span class="kw">abs</span>(<span class="kw">modulo</span>(x<span class="op">*</span>y, <span class="dv">1</span>))</span>
<span id="cb1-13">  <span class="cf">if</span>(<span class="kw">is.nan</span>(b)){</span>
<span id="cb1-14">    <span class="kw">return</span>(<span class="st">"#000000"</span>)</span>
<span id="cb1-15">  }</span>
<span id="cb1-16">  <span class="kw">rgb</span>(</span>
<span id="cb1-17">    (<span class="fl">1.0</span> <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(r<span class="fl">-0.5</span>))<span class="op">*</span><span class="fl">8.0</span>, </span>
<span id="cb1-18">    (<span class="fl">1.0</span> <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(g<span class="fl">-0.5</span>))<span class="op">*</span><span class="fl">8.0</span>, </span>
<span id="cb1-19">    (<span class="fl">1.0</span> <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(b<span class="fl">-0.5</span>))<span class="op">*</span><span class="fl">8.0</span>,</span>
<span id="cb1-20">    <span class="dt">maxColorValue =</span> <span class="dv">1</span></span>
<span id="cb1-21">  )</span>
<span id="cb1-22">}</span>
<span id="cb1-23"></span>
<span id="cb1-24">colormap2 &lt;-<span class="st"> </span><span class="cf">function</span>(z){</span>
<span id="cb1-25">  <span class="cf">if</span>(<span class="kw">is.infinite</span>(z) <span class="op">||</span><span class="st"> </span><span class="kw">is.nan</span>(z)) <span class="kw">return</span>(<span class="st">"#000000"</span>)</span>
<span id="cb1-26">  arg &lt;-<span class="st"> </span><span class="kw">Arg</span>(z)</span>
<span id="cb1-27">  <span class="cf">if</span>(arg <span class="op">&lt;</span><span class="st"> </span><span class="dv">0</span>) arg &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span>pi <span class="op">+</span><span class="st"> </span>arg</span>
<span id="cb1-28">  h &lt;-<span class="st"> </span>arg <span class="op">/</span><span class="st"> </span><span class="dv">2</span> <span class="op">/</span><span class="st"> </span>pi</span>
<span id="cb1-29">  s &lt;-<span class="st"> </span><span class="kw">sqrt</span>((<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>pi<span class="op">*</span><span class="kw">log</span>(<span class="dv">1</span><span class="op">+</span><span class="kw">Mod</span>(z))))<span class="op">/</span><span class="dv">2</span>)</span>
<span id="cb1-30">  v &lt;-<span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">cos</span>(<span class="dv">2</span><span class="op">*</span>pi<span class="op">*</span><span class="kw">log</span>(<span class="dv">1</span><span class="op">+</span><span class="kw">Mod</span>(z))))<span class="op">/</span><span class="dv">2</span></span>
<span id="cb1-31">  <span class="kw">hsv</span>(h, s, v)</span>
<span id="cb1-32">}</span></code></pre>
      </div>
      <p>
        Here is the <span class="math inline">\(E_4\)</span> Eisenstein series:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># background color</span></span>
<span id="cb2-2">bkgcol &lt;-<span class="st"> </span><span class="kw">rgb</span>(<span class="dv">21</span>, <span class="dv">25</span>, <span class="dv">30</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">f &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(x, y){</span>
<span id="cb2-5">  q &lt;-<span class="st"> </span>x <span class="op">+</span><span class="st"> </span>1i<span class="op">*</span>y</span>
<span id="cb2-6">  <span class="cf">if</span>(<span class="kw">Mod</span>(q) <span class="op">&gt;=</span><span class="st"> </span><span class="fl">0.99</span> <span class="op">||</span><span class="st"> </span>(<span class="kw">Im</span>(q) <span class="op">==</span><span class="st"> </span><span class="dv">0</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">Re</span>(q) <span class="op">&lt;=</span><span class="st"> </span><span class="dv">0</span>)) <span class="kw">return</span>(bkgcol)</span>
<span id="cb2-7">  z &lt;-<span class="st"> </span><span class="kw">En</span>(<span class="dv">4</span>, q)</span>
<span id="cb2-8">  <span class="kw">colormap1</span>(<span class="dv">1</span><span class="op">/</span>z)</span>
<span id="cb2-9">})</span>
<span id="cb2-10"></span>
<span id="cb2-11">x &lt;-<span class="st"> </span>y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>, <span class="dt">len =</span> <span class="dv">2000</span>)</span>
<span id="cb2-12">image &lt;-<span class="st"> </span><span class="kw">outer</span>(x, y, f)</span>
<span id="cb2-13"></span>
<span id="cb2-14">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>), <span class="dt">bg =</span> bkgcol)</span>
<span id="cb2-15"><span class="kw">plot</span>(</span>
<span id="cb2-16">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="dt">type =</span> <span class="st">"n"</span>, </span>
<span id="cb2-17">  <span class="dt">xlab =</span> <span class="st">""</span>, <span class="dt">ylab =</span> <span class="st">""</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">asp =</span> <span class="dv">1</span></span>
<span id="cb2-18">)</span>
<span id="cb2-19"><span class="kw">rasterImage</span>(image, <span class="dv">-100</span>, <span class="dv">-100</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb2-20"><span class="kw">par</span>(opar)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Eisenstein4.png"
          style="width: 55%"
        />
      </p>
      <p>It makes me think to a beetle.</p>
      <p>
        And here is the <span class="math inline">\(E_6\)</span> Eisenstein
        series:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">f &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(x, y){</span>
<span id="cb3-2">  q &lt;-<span class="st"> </span>x <span class="op">+</span><span class="st"> </span>1i<span class="op">*</span>y</span>
<span id="cb3-3">  <span class="cf">if</span>(<span class="kw">Mod</span>(q) <span class="op">&gt;=</span><span class="st"> </span><span class="fl">0.99</span> <span class="op">||</span><span class="st"> </span>(<span class="kw">Im</span>(q) <span class="op">==</span><span class="st"> </span><span class="dv">0</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">Re</span>(q) <span class="op">&lt;=</span><span class="st"> </span><span class="dv">0</span>)) <span class="kw">return</span>(bkgcol)</span>
<span id="cb3-4">  z &lt;-<span class="st"> </span><span class="kw">En</span>(<span class="dv">6</span>, q)</span>
<span id="cb3-5">  <span class="kw">colormap2</span>(z)</span>
<span id="cb3-6">})</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Eisenstein6.png"
          style="width: 55%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 20 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/beautifulComplexFunctions.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Scrollbar for the Shiny sidebar</title>
      <link>https://laustep.github.io/stlahblog/posts/shinySidebarScrollbar.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        It is easy to have a scrollbar for the sidebar of a Shiny app: one just
        has to use the CSS <code>height: 90vh; overflow-y: auto;</code>:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">library</span>(shinyWidgets)</span>
<span id="cb1-3"></span>
<span id="cb1-4">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb1-5">  <span class="kw">titlePanel</span>(<span class="st">"Sidebar with scrollbar"</span>),</span>
<span id="cb1-6">  <span class="kw">sidebarLayout</span>(</span>
<span id="cb1-7">    <span class="kw">sidebarPanel</span>(</span>
<span id="cb1-8">      <span class="dt">style =</span> <span class="st">"height: 90vh; overflow-y: auto;"</span>, </span>
<span id="cb1-9">      <span class="kw">sliderInput</span>(<span class="st">"bins"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-10">      <span class="kw">br</span>(),</span>
<span id="cb1-11">      <span class="kw">dropdown</span>(</span>
<span id="cb1-12">        tags<span class="op">$</span><span class="kw">h1</span>(<span class="st">"A very large dropdown"</span>),</span>
<span id="cb1-13">        <span class="dt">status =</span> <span class="st">"danger"</span>,</span>
<span id="cb1-14">        <span class="dt">size   =</span> <span class="st">"lg"</span>,</span>
<span id="cb1-15">        <span class="dt">label  =</span> <span class="st">"Open me!"</span>,</span>
<span id="cb1-16">        <span class="dt">width  =</span> <span class="st">"500px"</span></span>
<span id="cb1-17">      ),</span>
<span id="cb1-18">      <span class="kw">br</span>(),</span>
<span id="cb1-19">      <span class="kw">sliderInput</span>(<span class="st">"bins2"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-20">      <span class="kw">br</span>(),</span>
<span id="cb1-21">      <span class="kw">sliderInput</span>(<span class="st">"bins3"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-22">      <span class="kw">br</span>(),</span>
<span id="cb1-23">      <span class="kw">sliderInput</span>(<span class="st">"bins4"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-24">      <span class="kw">br</span>(),</span>
<span id="cb1-25">      <span class="kw">sliderInput</span>(<span class="st">"bins5"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-26">      <span class="kw">br</span>(),</span>
<span id="cb1-27">      <span class="kw">sliderInput</span>(<span class="st">"bins6"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-28">      <span class="kw">br</span>(),</span>
<span id="cb1-29">      <span class="kw">sliderInput</span>(<span class="st">"bins7"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-30">    ),</span>
<span id="cb1-31">    </span>
<span id="cb1-32">    <span class="kw">mainPanel</span>(</span>
<span id="cb1-33">      <span class="kw">plotOutput</span>(<span class="st">"distPlot"</span>)</span>
<span id="cb1-34">    )</span>
<span id="cb1-35">    </span>
<span id="cb1-36">  )</span>
<span id="cb1-37">)</span>
<span id="cb1-38"></span>
<span id="cb1-39">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output) {</span>
<span id="cb1-40">  output[[<span class="st">"distPlot"</span>]] &lt;-<span class="st"> </span><span class="kw">renderPlot</span>({</span>
<span id="cb1-41">    x    &lt;-<span class="st"> </span>faithful[, <span class="dv">2</span>] </span>
<span id="cb1-42">    bins &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="kw">min</span>(x), <span class="kw">max</span>(x), <span class="dt">length.out =</span> input[[<span class="st">"bins"</span>]] <span class="op">+</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb1-43">    <span class="kw">hist</span>(x, <span class="dt">breaks =</span> bins, <span class="dt">col =</span> <span class="st">"darkred"</span>, <span class="dt">border =</span> <span class="st">"white"</span>)</span>
<span id="cb1-44">  })</span>
<span id="cb1-45">}</span>
<span id="cb1-46"></span>
<span id="cb1-47"><span class="kw">shinyApp</span>(<span class="dt">ui =</span> ui, <span class="dt">server =</span> server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/shiny_sidebar_scrollbar1.gif"
          style="width: 70%"
        />
      </p>
      <p>
        But, as you can see, there is an issue with the
        <code>shinyWidgets::dropdown</code>: when one opens it, the part outside
        the sidebar is hidden. Here is a JavaScript solution for this issue:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(shiny)</span>
<span id="cb2-2"><span class="kw">library</span>(shinyWidgets)</span>
<span id="cb2-3"></span>
<span id="cb2-4">js &lt;-<span class="st"> '</span></span>
<span id="cb2-5"><span class="st">$(document).ready(function(){</span></span>
<span id="cb2-6"><span class="st">  $("[id^=sw-content-]").on("shown", function(){</span></span>
<span id="cb2-7"><span class="st">    $(".sidebar").css({"overflow-y": "visible"});</span></span>
<span id="cb2-8"><span class="st">  }).on("hidden", function(){</span></span>
<span id="cb2-9"><span class="st">    $(".sidebar").css({"overflow-y": "auto"});</span></span>
<span id="cb2-10"><span class="st">  });</span></span>
<span id="cb2-11"><span class="st">});</span></span>
<span id="cb2-12"><span class="st">'</span></span>
<span id="cb2-13"></span>
<span id="cb2-14">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb2-15">  tags<span class="op">$</span><span class="kw">head</span>(tags<span class="op">$</span><span class="kw">script</span>(<span class="kw">HTML</span>(js))),</span>
<span id="cb2-16">  <span class="kw">titlePanel</span>(<span class="st">"Sidebar with scrollbar"</span>),</span>
<span id="cb2-17">  <span class="kw">sidebarLayout</span>(</span>
<span id="cb2-18">    <span class="kw">sidebarPanel</span>(</span>
<span id="cb2-19">      <span class="dt">class =</span> <span class="st">"sidebar"</span>,</span>
<span id="cb2-20">      <span class="dt">style =</span> <span class="st">"height: 90vh; overflow-y: auto;"</span>, </span>
<span id="cb2-21">      <span class="kw">sliderInput</span>(<span class="st">"bins"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb2-22">      ......</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/shiny_sidebar_scrollbar2.gif"
          style="width: 70%"
        />
      </p>
      <p>
        I find the native HTML scrollbars a bit ugly. It is possible to
        customize them:
        <a
          href="https://css-tricks.com/the-current-state-of-styling-scrollbars-in-css/"
          >Styling scrollbars in CSS</a
        >.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 17 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/shinySidebarScrollbar.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>SVG to PNG</title>
      <link>https://laustep.github.io/stlahblog/posts/SVG2PNG.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Here is a way to get a high-quality PNG image with R: save it as SVG
        first, then convert the SVG file to a PNG file, with the
        <strong>rsvg</strong> package.
      </p>
      <p>
        Let’s see. I construct a hyperbolic Delaunay triangulation with the
        <strong>gyro</strong> package:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(gyro)</span>
<span id="cb1-2"></span>
<span id="cb1-3">phi &lt;-<span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">5</span>)) <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb1-4">theta &lt;-<span class="st"> </span><span class="kw">head</span>(<span class="kw">seq</span>(<span class="dv">0</span>, pi<span class="op">/</span><span class="dv">2</span>, <span class="dt">length.out =</span> <span class="dv">11</span>), <span class="op">-</span>1L)</span>
<span id="cb1-5">a &lt;-<span class="st"> </span>phi<span class="op">^</span>((<span class="dv">2</span><span class="op">*</span>theta<span class="op">/</span>pi)<span class="op">^</span><span class="fl">0.8</span> <span class="op">-</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb1-6">u &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(theta)</span>
<span id="cb1-7">v &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(theta)</span>
<span id="cb1-8">x &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, u, <span class="op">-</span>v, <span class="op">-</span>u, v)</span>
<span id="cb1-9">y &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, v, u, <span class="op">-</span>v, <span class="op">-</span>u)</span>
<span id="cb1-10">pts &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y) <span class="op">/</span><span class="st"> </span><span class="fl">1.07</span></span>
<span id="cb1-11"></span>
<span id="cb1-12">hdel &lt;-<span class="st"> </span><span class="kw">hdelaunay</span>(pts, <span class="dt">model =</span> <span class="st">"U"</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14">fcolor &lt;-<span class="st"> </span><span class="cf">function</span>(t){</span>
<span id="cb1-15">  RGB &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(<span class="kw">hcl.colors</span>(20L, <span class="st">"Berlin"</span>))(t)</span>
<span id="cb1-16">  <span class="kw">rgb</span>(RGB[, 1L], RGB[, 2L], RGB[, 3L], <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb1-17">}</span></code></pre>
      </div>
      <p>Now let’s save the plot as a PNG, directly:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">png</span>(<span class="st">"hdelaunayU.png"</span>, <span class="dt">width =</span> <span class="dv">512</span>, <span class="dt">height =</span> <span class="dv">512</span>)</span>
<span id="cb2-2"><span class="kw">plotHdelaunay</span>(</span>
<span id="cb2-3">  hdel, <span class="dt">vertices =</span> <span class="ot">FALSE</span>, <span class="dt">color =</span> fcolor</span>
<span id="cb2-4">)</span>
<span id="cb2-5"><span class="kw">dev.off</span>()</span></code></pre>
      </div>
      <p>And now let’s save it as SVG then convert it to PNG:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">svg</span>(<span class="st">"hdelaunayU.svg"</span>)</span>
<span id="cb3-2"><span class="kw">plotHdelaunay</span>(</span>
<span id="cb3-3">  hdel, <span class="dt">vertices =</span> <span class="ot">FALSE</span>, <span class="dt">color =</span> fcolor</span>
<span id="cb3-4">)</span>
<span id="cb3-5"><span class="kw">dev.off</span>()</span>
<span id="cb3-6"></span>
<span id="cb3-7">rsvg<span class="op">::</span><span class="kw">rsvg_png</span>(</span>
<span id="cb3-8">  <span class="st">"hdelaunayU.svg"</span>, <span class="st">"hdelaunayU_from_svg.png"</span>,</span>
<span id="cb3-9">  <span class="dt">width =</span> <span class="dv">512</span>, <span class="dt">height =</span> <span class="dv">512</span></span>
<span id="cb3-10">)</span></code></pre>
      </div>
      <p>Observe the difference:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hdelaunayU.png"
          style="width: 95%"
        />
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hdelaunayU_from_svg.png"
          style="width: 95%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 17 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/SVG2PNG.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Hopf torus, circle by circle</title>
      <link>https://laustep.github.io/stlahblog/posts/HopfTorusCircleByCircle.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Remember my
        <a
          href="https://laustep.github.io/stlahblog/posts/HopfTorus_3over3.html"
          >first post</a
        >
        on the Hopf torus? I constructed it circle by circle. Below are some
        animations of this construction. I save the image each time a circle is
        added. The <strong>rgl</strong> package automatically centers the plot,
        and this gives a nice effect.
      </p>
      <p>
        First animation, three lobes, using a
        <a
          href="https://laustep.github.io/stlahblog/posts/ModifiedStereographicProjection.html"
          >modified stereographic projection</a
        >:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HopfTorusCircleByCircle_3lobes.gif"
        />
      </p>
      <p>Here is the code producing this animation:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># Hopf fiber</span></span>
<span id="cb1-2">HopfFiber &lt;-<span class="st"> </span><span class="cf">function</span>(q, t){ </span>
<span id="cb1-3">  <span class="dv">1</span><span class="op">/</span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">*</span>(<span class="dv">1</span><span class="op">+</span>q[1L])) <span class="op">*</span><span class="st"> </span><span class="kw">c</span>(q[3L]<span class="op">*</span><span class="kw">cos</span>(t) <span class="op">+</span><span class="st"> </span>q[2L]<span class="op">*</span><span class="kw">sin</span>(t),</span>
<span id="cb1-4">                          q[2L]<span class="op">*</span><span class="kw">cos</span>(t) <span class="op">-</span><span class="st"> </span>q[3L]<span class="op">*</span><span class="kw">sin</span>(t),</span>
<span id="cb1-5">                          <span class="kw">sin</span>(t)<span class="op">*</span>(<span class="dv">1</span><span class="op">+</span>q[1L]),</span>
<span id="cb1-6">                          <span class="kw">cos</span>(t)<span class="op">*</span>(<span class="dv">1</span><span class="op">+</span>q[1L])) </span>
<span id="cb1-7">}</span>
<span id="cb1-8"><span class="co"># Modified stereographic projection</span></span>
<span id="cb1-9">mstereog &lt;-<span class="st"> </span><span class="cf">function</span>(x){</span>
<span id="cb1-10">  <span class="kw">acos</span>(x[4L])<span class="op">/</span><span class="kw">sqrt</span>(<span class="dv">1</span><span class="op">-</span>x[4L]<span class="op">^</span><span class="dv">2</span>) <span class="op">*</span><span class="st"> </span>x[1L<span class="op">:</span>3L]</span>
<span id="cb1-11">}</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co"># plot</span></span>
<span id="cb1-14"><span class="kw">library</span>(rgl)</span>
<span id="cb1-15"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb1-16"><span class="kw">bg3d</span>(<span class="st">"#666970"</span>)</span>
<span id="cb1-17"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.9</span>)</span>
<span id="cb1-18">t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">len =</span> 200L) <span class="co"># 200 subdivisions per circle</span></span>
<span id="cb1-19">u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">len =</span> 300L) <span class="co"># 300 circles</span></span>
<span id="cb1-20">nlobes &lt;-<span class="st"> </span>3L <span class="co"># number of lobes of the Hopf torus</span></span>
<span id="cb1-21">colors &lt;-<span class="st"> </span><span class="kw">colorRampPalette</span>( <span class="co"># colors</span></span>
<span id="cb1-22">  <span class="kw">head</span>(trekcolors<span class="op">::</span><span class="kw">trek_pal</span>(<span class="st">"klingon"</span>), <span class="op">-</span>2L),</span>
<span id="cb1-23">  <span class="dt">interpolate =</span> <span class="st">"spline"</span>, <span class="dt">bias =</span> <span class="fl">0.15</span></span>
<span id="cb1-24">)(150L)</span>
<span id="cb1-25">colors &lt;-<span class="st"> </span><span class="kw">c</span>(colors, <span class="kw">rev</span>(colors))</span>
<span id="cb1-26"><span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="kw">length</span>(u_)){</span>
<span id="cb1-27">  u &lt;-<span class="st"> </span>u_[i]</span>
<span id="cb1-28">  x &lt;-<span class="st">  </span><span class="kw">cos</span>(pi<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>(pi<span class="op">/</span><span class="dv">2</span><span class="fl">-0.44</span>)<span class="op">*</span><span class="kw">cos</span>(nlobes<span class="op">*</span>u))</span>
<span id="cb1-29">  z &lt;-<span class="st">  </span><span class="kw">sin</span>(pi<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>(pi<span class="op">/</span><span class="dv">2</span><span class="fl">-0.44</span>)<span class="op">*</span><span class="kw">cos</span>(nlobes<span class="op">*</span>u)) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u<span class="fl">+0.44</span><span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>nlobes))</span>
<span id="cb1-30">  y &lt;-<span class="st"> </span><span class="op">-</span><span class="kw">sin</span>(pi<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>(pi<span class="op">/</span><span class="dv">2</span><span class="fl">-0.44</span>)<span class="op">*</span><span class="kw">cos</span>(nlobes<span class="op">*</span>u)) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u<span class="fl">+0.44</span><span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>nlobes))</span>
<span id="cb1-31">  circle4d &lt;-<span class="st"> </span><span class="kw">vapply</span>(t_, <span class="cf">function</span>(t){</span>
<span id="cb1-32">    <span class="kw">HopfFiber</span>(<span class="kw">c</span>(x, y, z), t)  </span>
<span id="cb1-33">  }, <span class="kw">numeric</span>(4L))</span>
<span id="cb1-34">  circle3d &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(circle4d, 2L, mstereog))</span>
<span id="cb1-35">  <span class="kw">shade3d</span>(</span>
<span id="cb1-36">    <span class="kw">cylinder3d</span>(circle3d, <span class="dt">radius =</span> <span class="fl">0.1</span>, <span class="dt">sides =</span> <span class="dv">15</span>), </span>
<span id="cb1-37">    <span class="dt">color =</span> colors[i]</span>
<span id="cb1-38">  )</span>
<span id="cb1-39">  <span class="kw">rgl.snapshot</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, i)) <span class="co"># save</span></span>
<span id="cb1-40">}</span>
<span id="cb1-41"></span>
<span id="cb1-42"><span class="co"># duplicate last pic to make a pause at the end of the animation</span></span>
<span id="cb1-43"><span class="cf">for</span>(i <span class="cf">in</span> 301L<span class="op">:</span>350L){</span>
<span id="cb1-44">  <span class="kw">file.copy</span>(<span class="st">"pic300.png"</span>, <span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, i))</span>
<span id="cb1-45">}</span>
<span id="cb1-46"><span class="co"># make animation</span></span>
<span id="cb1-47">pngFiles &lt;-<span class="st"> </span><span class="kw">list.files</span>(<span class="dt">pattern =</span> <span class="st">"^pic?.*png$"</span>)</span>
<span id="cb1-48"><span class="kw">library</span>(gifski)</span>
<span id="cb1-49"><span class="kw">gifski</span>(</span>
<span id="cb1-50">  pngFiles,</span>
<span id="cb1-51">  <span class="dt">gif_file =</span> <span class="st">"HopfTorusCircleByCircle_3lobes.gif"</span>,</span>
<span id="cb1-52">  <span class="dt">width    =</span> <span class="dv">512</span>, <span class="dt">height   =</span> <span class="dv">512</span>,</span>
<span id="cb1-53">  <span class="dt">delay    =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">9</span> <span class="co"># 9 pics per second</span></span>
<span id="cb1-54">)</span>
<span id="cb1-55"><span class="co"># delete png files</span></span>
<span id="cb1-56"><span class="kw">file.remove</span>(pngFiles)</span></code></pre>
      </div>
      <p>
        Four lobes, modified stereographic projection, with the ‘rocket’ color
        palette (in <strong>grDevices</strong> package):
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HopfTorusCircleByCircle_4lobes.gif"
        />
      </p>
      <p>Two lobes, classical stereographic projection:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HopfTorusCircleByCircle_2lobes.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 13 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HopfTorusCircleByCircle.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>An example of the Minkowski addition</title>
      <link>https://laustep.github.io/stlahblog/posts/MinkowskiSumLeonardo.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Now the <strong>MeshesOperations</strong> package can construct the
        <a href="https://www.wikiwand.com/en/Minkowski_addition"
          >Minkowski sum</a
        >
        of two polyhedra, thanks to the C++ library <strong>CGAL</strong> and
        the R package <strong>RcppCGAL</strong>. Let’s see an example: the
        Minkowski sum of Leonardo da Vinci’s 72-sided sphere and a truncated
        icosahedron. Here are these two polyhedra:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/LeonardoAndTruncIco.png"
        />
      </p>
      <p>
        The mesh of the truncated icosahedron is provided by the
        <strong>MeshesOperations</strong> package. Here are the (rounded)
        vertices and the faces of da Vinci’s 72-sided sphere:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">vertices &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-2">  <span class="kw">c</span>( <span class="fl">1.61352</span>, <span class="fl">-0.43234</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-3">  <span class="kw">c</span>( <span class="fl">1.18118</span>, <span class="fl">-1.18118</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-4">  <span class="kw">c</span>( <span class="fl">0.43234</span>, <span class="fl">-1.61352</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-5">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.43234</span>, <span class="fl">-1.61352</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-6">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.18118</span>, <span class="fl">-1.18118</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-7">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.61352</span>, <span class="fl">-0.43234</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-8">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.61352</span>,  <span class="fl">0.43234</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-9">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.18118</span>,  <span class="fl">1.18118</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-10">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.43234</span>,  <span class="fl">1.61352</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-11">  <span class="kw">c</span>( <span class="fl">0.43234</span>,  <span class="fl">1.61352</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-12">  <span class="kw">c</span>( <span class="fl">1.18118</span>,  <span class="fl">1.18118</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-13">  <span class="kw">c</span>( <span class="fl">1.61352</span>,  <span class="fl">0.43234</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-14">  <span class="kw">c</span>( <span class="fl">1.61352</span>, <span class="fl">-0.43234</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-15">  <span class="kw">c</span>( <span class="fl">1.61352</span>,  <span class="fl">0.43234</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-16">  <span class="kw">c</span>( <span class="fl">1.18118</span>,  <span class="fl">1.18118</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-17">  <span class="kw">c</span>( <span class="fl">0.43234</span>,  <span class="fl">1.61352</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-18">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.43234</span>,  <span class="fl">1.61352</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-19">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.18118</span>,  <span class="fl">1.18118</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-20">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.61352</span>,  <span class="fl">0.43234</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-21">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.61352</span>, <span class="fl">-0.43234</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-22">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.18118</span>, <span class="fl">-1.18118</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-23">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.43234</span>, <span class="fl">-1.61352</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-24">  <span class="kw">c</span>( <span class="fl">0.43234</span>, <span class="fl">-1.61352</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-25">  <span class="kw">c</span>( <span class="fl">1.18118</span>, <span class="fl">-1.18118</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-26">  <span class="kw">c</span>( <span class="fl">2.01020</span>,  <span class="fl">0.53863</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-27">  <span class="kw">c</span>( <span class="fl">1.47157</span>,  <span class="fl">1.47157</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-28">  <span class="kw">c</span>( <span class="fl">0.53863</span>,  <span class="fl">2.01020</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-29">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.53863</span>,  <span class="fl">2.01020</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-30">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.47157</span>,  <span class="fl">1.47157</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-31">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">2.01020</span>,  <span class="fl">0.53863</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-32">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">2.01020</span>, <span class="fl">-0.53863</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-33">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.47157</span>, <span class="fl">-1.47157</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-34">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.53863</span>, <span class="fl">-2.01020</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-35">  <span class="kw">c</span>( <span class="fl">0.53863</span>, <span class="fl">-2.01020</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-36">  <span class="kw">c</span>( <span class="fl">1.47157</span>, <span class="fl">-1.47157</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-37">  <span class="kw">c</span>( <span class="fl">2.01020</span>, <span class="fl">-0.53863</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-38">  <span class="kw">c</span>( <span class="fl">0.89068</span>,  <span class="fl">0.23866</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-39">  <span class="kw">c</span>( <span class="fl">0.89068</span>, <span class="fl">-0.23866</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-40">  <span class="kw">c</span>( <span class="fl">0.65202</span>, <span class="fl">-0.65202</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-41">  <span class="kw">c</span>( <span class="fl">0.23866</span>, <span class="fl">-0.89068</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-42">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.23866</span>, <span class="fl">-0.89068</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-43">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.65202</span>, <span class="fl">-0.65202</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-44">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.89068</span>, <span class="fl">-0.23866</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-45">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.89068</span>,  <span class="fl">0.23866</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-46">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.65202</span>,  <span class="fl">0.65202</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-47">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.23866</span>,  <span class="fl">0.89068</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-48">  <span class="kw">c</span>( <span class="fl">0.23866</span>,  <span class="fl">0.89068</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-49">  <span class="kw">c</span>( <span class="fl">0.65202</span>,  <span class="fl">0.65202</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-50">  <span class="kw">c</span>( <span class="fl">0.65202</span>, <span class="fl">-0.65202</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-51">  <span class="kw">c</span>( <span class="fl">0.89068</span>, <span class="fl">-0.23866</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-52">  <span class="kw">c</span>( <span class="fl">0.89068</span>,  <span class="fl">0.23866</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-53">  <span class="kw">c</span>( <span class="fl">0.65202</span>,  <span class="fl">0.65202</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-54">  <span class="kw">c</span>( <span class="fl">0.23866</span>,  <span class="fl">0.89068</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-55">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.23866</span>,  <span class="fl">0.89068</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-56">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.65202</span>,  <span class="fl">0.65202</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-57">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.89068</span>,  <span class="fl">0.23866</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-58">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.89068</span>, <span class="fl">-0.23866</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-59">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.65202</span>, <span class="fl">-0.65202</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-60">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.23866</span>, <span class="fl">-0.89068</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-61">  <span class="kw">c</span>( <span class="fl">0.23866</span>, <span class="fl">-0.89068</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-62">  <span class="kw">c</span>( <span class="fl">0.00000</span>,  <span class="fl">0.00000</span>,  <span class="fl">2.04922</span>),</span>
<span id="cb1-63">  <span class="kw">c</span>( <span class="fl">0.00000</span>,  <span class="fl">0.00000</span>, <span class="fl">-2.04922</span>)</span>
<span id="cb1-64">)</span>
<span id="cb1-65"></span>
<span id="cb1-66">triangles &lt;-<span class="st"> </span><span class="kw">lapply</span>(<span class="kw">list</span>(</span>
<span id="cb1-67">  <span class="kw">c</span>(<span class="dv">36</span>, <span class="dv">60</span>, <span class="dv">47</span>), </span>
<span id="cb1-68">  <span class="kw">c</span>(<span class="dv">37</span>, <span class="dv">60</span>, <span class="dv">36</span>), </span>
<span id="cb1-69">  <span class="kw">c</span>(<span class="dv">38</span>, <span class="dv">60</span>, <span class="dv">37</span>), </span>
<span id="cb1-70">  <span class="kw">c</span>(<span class="dv">39</span>, <span class="dv">60</span>, <span class="dv">38</span>), </span>
<span id="cb1-71">  <span class="kw">c</span>(<span class="dv">40</span>, <span class="dv">60</span>, <span class="dv">39</span>), </span>
<span id="cb1-72">  <span class="kw">c</span>(<span class="dv">41</span>, <span class="dv">60</span>, <span class="dv">40</span>), </span>
<span id="cb1-73">  <span class="kw">c</span>(<span class="dv">42</span>, <span class="dv">60</span>, <span class="dv">41</span>), </span>
<span id="cb1-74">  <span class="kw">c</span>(<span class="dv">43</span>, <span class="dv">60</span>, <span class="dv">42</span>), </span>
<span id="cb1-75">  <span class="kw">c</span>(<span class="dv">44</span>, <span class="dv">60</span>, <span class="dv">43</span>), </span>
<span id="cb1-76">  <span class="kw">c</span>(<span class="dv">45</span>, <span class="dv">60</span>, <span class="dv">44</span>), </span>
<span id="cb1-77">  <span class="kw">c</span>(<span class="dv">46</span>, <span class="dv">60</span>, <span class="dv">45</span>), </span>
<span id="cb1-78">  <span class="kw">c</span>(<span class="dv">47</span>, <span class="dv">60</span>, <span class="dv">46</span>), </span>
<span id="cb1-79">  <span class="kw">c</span>(<span class="dv">48</span>, <span class="dv">61</span>, <span class="dv">59</span>), </span>
<span id="cb1-80">  <span class="kw">c</span>(<span class="dv">49</span>, <span class="dv">61</span>, <span class="dv">48</span>), </span>
<span id="cb1-81">  <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">61</span>, <span class="dv">49</span>), </span>
<span id="cb1-82">  <span class="kw">c</span>(<span class="dv">51</span>, <span class="dv">61</span>, <span class="dv">50</span>), </span>
<span id="cb1-83">  <span class="kw">c</span>(<span class="dv">52</span>, <span class="dv">61</span>, <span class="dv">51</span>), </span>
<span id="cb1-84">  <span class="kw">c</span>(<span class="dv">53</span>, <span class="dv">61</span>, <span class="dv">52</span>), </span>
<span id="cb1-85">  <span class="kw">c</span>(<span class="dv">54</span>, <span class="dv">61</span>, <span class="dv">53</span>), </span>
<span id="cb1-86">  <span class="kw">c</span>(<span class="dv">55</span>, <span class="dv">61</span>, <span class="dv">54</span>), </span>
<span id="cb1-87">  <span class="kw">c</span>(<span class="dv">56</span>, <span class="dv">61</span>, <span class="dv">55</span>), </span>
<span id="cb1-88">  <span class="kw">c</span>(<span class="dv">57</span>, <span class="dv">61</span>, <span class="dv">56</span>), </span>
<span id="cb1-89">  <span class="kw">c</span>(<span class="dv">58</span>, <span class="dv">61</span>, <span class="dv">57</span>), </span>
<span id="cb1-90">  <span class="kw">c</span>(<span class="dv">59</span>, <span class="dv">61</span>, <span class="dv">58</span>)</span>
<span id="cb1-91">), <span class="cf">function</span>(x) x <span class="op">+</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb1-92">quads &lt;-<span class="st"> </span><span class="kw">lapply</span>(<span class="kw">list</span>(</span>
<span id="cb1-93">  <span class="kw">c</span>( <span class="dv">0</span>, <span class="dv">11</span>, <span class="dv">24</span>, <span class="dv">35</span>), </span>
<span id="cb1-94">  <span class="kw">c</span>(<span class="dv">10</span>, <span class="dv">25</span>, <span class="dv">24</span>, <span class="dv">11</span>), </span>
<span id="cb1-95">  <span class="kw">c</span>( <span class="dv">9</span>, <span class="dv">26</span>, <span class="dv">25</span>, <span class="dv">10</span>), </span>
<span id="cb1-96">  <span class="kw">c</span>( <span class="dv">8</span>, <span class="dv">27</span>, <span class="dv">26</span>,  <span class="dv">9</span>), </span>
<span id="cb1-97">  <span class="kw">c</span>( <span class="dv">7</span>, <span class="dv">28</span>, <span class="dv">27</span>,  <span class="dv">8</span>), </span>
<span id="cb1-98">  <span class="kw">c</span>( <span class="dv">6</span>, <span class="dv">29</span>, <span class="dv">28</span>,  <span class="dv">7</span>), </span>
<span id="cb1-99">  <span class="kw">c</span>( <span class="dv">5</span>, <span class="dv">30</span>, <span class="dv">29</span>,  <span class="dv">6</span>), </span>
<span id="cb1-100">  <span class="kw">c</span>( <span class="dv">4</span>, <span class="dv">31</span>, <span class="dv">30</span>,  <span class="dv">5</span>), </span>
<span id="cb1-101">  <span class="kw">c</span>( <span class="dv">3</span>, <span class="dv">32</span>, <span class="dv">31</span>,  <span class="dv">4</span>), </span>
<span id="cb1-102">  <span class="kw">c</span>( <span class="dv">2</span>, <span class="dv">33</span>, <span class="dv">32</span>,  <span class="dv">3</span>), </span>
<span id="cb1-103">  <span class="kw">c</span>( <span class="dv">1</span>, <span class="dv">34</span>, <span class="dv">33</span>,  <span class="dv">2</span>), </span>
<span id="cb1-104">  <span class="kw">c</span>( <span class="dv">0</span>, <span class="dv">35</span>, <span class="dv">34</span>,  <span class="dv">1</span>), </span>
<span id="cb1-105">  <span class="kw">c</span>(<span class="dv">12</span>, <span class="dv">35</span>, <span class="dv">24</span>, <span class="dv">13</span>), </span>
<span id="cb1-106">  <span class="kw">c</span>(<span class="dv">13</span>, <span class="dv">24</span>, <span class="dv">25</span>, <span class="dv">14</span>), </span>
<span id="cb1-107">  <span class="kw">c</span>(<span class="dv">14</span>, <span class="dv">25</span>, <span class="dv">26</span>, <span class="dv">15</span>), </span>
<span id="cb1-108">  <span class="kw">c</span>(<span class="dv">15</span>, <span class="dv">26</span>, <span class="dv">27</span>, <span class="dv">16</span>), </span>
<span id="cb1-109">  <span class="kw">c</span>(<span class="dv">16</span>, <span class="dv">27</span>, <span class="dv">28</span>, <span class="dv">17</span>), </span>
<span id="cb1-110">  <span class="kw">c</span>(<span class="dv">17</span>, <span class="dv">28</span>, <span class="dv">29</span>, <span class="dv">18</span>), </span>
<span id="cb1-111">  <span class="kw">c</span>(<span class="dv">18</span>, <span class="dv">29</span>, <span class="dv">30</span>, <span class="dv">19</span>), </span>
<span id="cb1-112">  <span class="kw">c</span>(<span class="dv">19</span>, <span class="dv">30</span>, <span class="dv">31</span>, <span class="dv">20</span>), </span>
<span id="cb1-113">  <span class="kw">c</span>(<span class="dv">20</span>, <span class="dv">31</span>, <span class="dv">32</span>, <span class="dv">21</span>), </span>
<span id="cb1-114">  <span class="kw">c</span>(<span class="dv">21</span>, <span class="dv">32</span>, <span class="dv">33</span>, <span class="dv">22</span>), </span>
<span id="cb1-115">  <span class="kw">c</span>(<span class="dv">22</span>, <span class="dv">33</span>, <span class="dv">34</span>, <span class="dv">23</span>), </span>
<span id="cb1-116">  <span class="kw">c</span>(<span class="dv">12</span>, <span class="dv">23</span>, <span class="dv">34</span>, <span class="dv">35</span>), </span>
<span id="cb1-117">  <span class="kw">c</span>( <span class="dv">0</span>, <span class="dv">37</span>, <span class="dv">36</span>, <span class="dv">11</span>), </span>
<span id="cb1-118">  <span class="kw">c</span>( <span class="dv">0</span>,  <span class="dv">1</span>, <span class="dv">38</span>, <span class="dv">37</span>), </span>
<span id="cb1-119">  <span class="kw">c</span>( <span class="dv">1</span>,  <span class="dv">2</span>, <span class="dv">39</span>, <span class="dv">38</span>), </span>
<span id="cb1-120">  <span class="kw">c</span>( <span class="dv">2</span>,  <span class="dv">3</span>, <span class="dv">40</span>, <span class="dv">39</span>), </span>
<span id="cb1-121">  <span class="kw">c</span>( <span class="dv">3</span>,  <span class="dv">4</span>, <span class="dv">41</span>, <span class="dv">40</span>), </span>
<span id="cb1-122">  <span class="kw">c</span>( <span class="dv">4</span>,  <span class="dv">5</span>, <span class="dv">42</span>, <span class="dv">41</span>), </span>
<span id="cb1-123">  <span class="kw">c</span>( <span class="dv">5</span>,  <span class="dv">6</span>, <span class="dv">43</span>, <span class="dv">42</span>), </span>
<span id="cb1-124">  <span class="kw">c</span>( <span class="dv">6</span>,  <span class="dv">7</span>, <span class="dv">44</span>, <span class="dv">43</span>), </span>
<span id="cb1-125">  <span class="kw">c</span>( <span class="dv">7</span>,  <span class="dv">8</span>, <span class="dv">45</span>, <span class="dv">44</span>), </span>
<span id="cb1-126">  <span class="kw">c</span>( <span class="dv">8</span>,  <span class="dv">9</span>, <span class="dv">46</span>, <span class="dv">45</span>), </span>
<span id="cb1-127">  <span class="kw">c</span>( <span class="dv">9</span>, <span class="dv">10</span>, <span class="dv">47</span>, <span class="dv">46</span>), </span>
<span id="cb1-128">  <span class="kw">c</span>(<span class="dv">10</span>, <span class="dv">11</span>, <span class="dv">36</span>, <span class="dv">47</span>), </span>
<span id="cb1-129">  <span class="kw">c</span>(<span class="dv">12</span>, <span class="dv">49</span>, <span class="dv">48</span>, <span class="dv">23</span>), </span>
<span id="cb1-130">  <span class="kw">c</span>(<span class="dv">12</span>, <span class="dv">13</span>, <span class="dv">50</span>, <span class="dv">49</span>), </span>
<span id="cb1-131">  <span class="kw">c</span>(<span class="dv">13</span>, <span class="dv">14</span>, <span class="dv">51</span>, <span class="dv">50</span>), </span>
<span id="cb1-132">  <span class="kw">c</span>(<span class="dv">14</span>, <span class="dv">15</span>, <span class="dv">52</span>, <span class="dv">51</span>), </span>
<span id="cb1-133">  <span class="kw">c</span>(<span class="dv">15</span>, <span class="dv">16</span>, <span class="dv">53</span>, <span class="dv">52</span>), </span>
<span id="cb1-134">  <span class="kw">c</span>(<span class="dv">16</span>, <span class="dv">17</span>, <span class="dv">54</span>, <span class="dv">53</span>), </span>
<span id="cb1-135">  <span class="kw">c</span>(<span class="dv">17</span>, <span class="dv">18</span>, <span class="dv">55</span>, <span class="dv">54</span>), </span>
<span id="cb1-136">  <span class="kw">c</span>(<span class="dv">18</span>, <span class="dv">19</span>, <span class="dv">56</span>, <span class="dv">55</span>), </span>
<span id="cb1-137">  <span class="kw">c</span>(<span class="dv">19</span>, <span class="dv">20</span>, <span class="dv">57</span>, <span class="dv">56</span>), </span>
<span id="cb1-138">  <span class="kw">c</span>(<span class="dv">20</span>, <span class="dv">21</span>, <span class="dv">58</span>, <span class="dv">57</span>), </span>
<span id="cb1-139">  <span class="kw">c</span>(<span class="dv">21</span>, <span class="dv">22</span>, <span class="dv">59</span>, <span class="dv">58</span>), </span>
<span id="cb1-140">  <span class="kw">c</span>(<span class="dv">22</span>, <span class="dv">23</span>, <span class="dv">48</span>, <span class="dv">59</span>)</span>
<span id="cb1-141">), <span class="cf">function</span>(x) x <span class="op">+</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb1-142">faces &lt;-<span class="st"> </span><span class="kw">c</span>(triangles, quads)</span>
<span id="cb1-143"></span>
<span id="cb1-144">Leonardo &lt;-<span class="st"> </span><span class="kw">list</span>(<span class="dt">vertices =</span> vertices, <span class="dt">faces =</span> faces)</span></code></pre>
      </div>
      <p>
        In order to produce the above plot with <strong>rgl</strong>, I
        triangulated the two meshes. Actually this is not necessary for the
        Leonardo mesh, since <strong>rgl</strong> allows meshes with triangles
        and quads. This is necessary for the mesh of the truncated icosahedron,
        because it has some faces with more than four sides.
      </p>
      <p>
        To triangulate a mesh with <strong>MeshesOperations</strong>, I
        recommend to use the option <code>numbersType = "lazyExact"</code>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(MeshesOperations)</span>
<span id="cb2-2">tLeonardo &lt;-<span class="st"> </span><span class="kw">Mesh</span>(</span>
<span id="cb2-3">  <span class="dt">mesh =</span> Leonardo, <span class="dt">triangulate =</span> <span class="ot">TRUE</span>,</span>
<span id="cb2-4">  <span class="dt">numbersType =</span> <span class="st">"lazyExact"</span></span>
<span id="cb2-5">)</span>
<span id="cb2-6">tmesh     &lt;-<span class="st"> </span><span class="kw">Mesh</span>(</span>
<span id="cb2-7">  <span class="dt">mesh =</span> truncatedIcosahedron, <span class="dt">triangulate =</span> <span class="ot">TRUE</span>,</span>
<span id="cb2-8">  <span class="dt">numbersType =</span> <span class="st">"lazyExact"</span></span>
<span id="cb2-9">)</span></code></pre>
      </div>
      <p>Now, here is the code which generates the picture shown before:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(rgl)</span>
<span id="cb3-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">850</span>, <span class="dv">450</span>))</span>
<span id="cb3-3"><span class="kw">mfrow3d</span>(1L, 2L)</span>
<span id="cb3-4"><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb3-5"><span class="kw">shade3d</span>(<span class="kw">toRGL</span>(tLeonardo), <span class="dt">color =</span> <span class="st">"navy"</span>)</span>
<span id="cb3-6"><span class="kw">plotEdges</span>(</span>
<span id="cb3-7">  tLeonardo[[<span class="st">"vertices"</span>]], tLeonardo[[<span class="st">"exteriorEdges"</span>]], </span>
<span id="cb3-8">  <span class="dt">color =</span> <span class="st">"gold"</span>, <span class="dt">tubesRadius =</span> <span class="fl">0.06</span>, <span class="dt">spheresRadius =</span> <span class="fl">0.08</span></span>
<span id="cb3-9">)</span>
<span id="cb3-10"><span class="kw">next3d</span>()</span>
<span id="cb3-11"><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb3-12"><span class="kw">shade3d</span>(<span class="kw">toRGL</span>(tmesh), <span class="dt">color =</span> <span class="st">"navy"</span>)</span>
<span id="cb3-13"><span class="kw">plotEdges</span>(</span>
<span id="cb3-14">  tmesh[[<span class="st">"vertices"</span>]], tmesh[[<span class="st">"exteriorEdges"</span>]], </span>
<span id="cb3-15">  <span class="dt">color =</span> <span class="st">"gold"</span>, <span class="dt">tubesRadius =</span> <span class="fl">0.06</span>, <span class="dt">spheresRadius =</span> <span class="fl">0.08</span></span>
<span id="cb3-16">)</span></code></pre>
      </div>
      <p>Now let’s see the Minkowski sum of these two polyhedra:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">MinkMesh &lt;-<span class="st"> </span><span class="kw">MinkowskiSum</span>(Leonardo, truncatedIcosahedron) </span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb4-4"><span class="kw">shade3d</span>(<span class="kw">toRGL</span>(MinkMesh), <span class="dt">color=</span><span class="st">"navy"</span>)</span>
<span id="cb4-5"><span class="kw">plotEdges</span>(</span>
<span id="cb4-6">  MinkMesh[[<span class="st">"vertices"</span>]], MinkMesh[[<span class="st">"exteriorEdges"</span>]], </span>
<span id="cb4-7">  <span class="dt">color =</span> <span class="st">"gold"</span>, <span class="dt">tubesRadius =</span> <span class="fl">0.06</span>, <span class="dt">spheresRadius =</span> <span class="fl">0.08</span></span>
<span id="cb4-8">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DaVinciPlusTruncIco.gif"
        />
      </p>
      <p>
        Beautiful. The generation of the Minkowski sum is fast for this example.
        But it can be very slow for meshes with numerous vertices.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 11 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/MinkowskiSumLeonardo.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Expanding a polynomial with 'caracas'</title>
      <link>https://laustep.github.io/stlahblog/posts/caracas01.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I wanted to plot an algebraic isosurface with
        <strong>POV-Ray</strong> but the expression of the polynomial defining
        the isosurface was very long (the polynomial had degree 12). Moreover
        there was a square root in the coefficients (<span class="math inline"
          >\(\sqrt{3}\)</span
        >) as well as <span class="math inline">\(\cos t\)</span> and
        <span class="math inline">\(\sin t\)</span>, where
        <span class="math inline">\(t\)</span> is a parameter I wanted to vary
        in order to make an animation. So I needed a tool able to expand a
        polynomial with some literal values in the coefficients. This is not
        possible with the <strong>Ryacas</strong> package.
      </p>
      <p>
        I finally found this tool: the <strong>caracas</strong> package. It
        allows to use the Python library <strong>SymPy</strong> in R. I didn’t
        carefully read its documentation yet, I don’t know whether it has other
        features. But this feature is a great one.
      </p>
      <p>Here is a small example:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(caracas)</span>
<span id="cb1-2"><span class="kw">def_sym</span>(x, y, z, a, b) <span class="co"># symbolic values</span></span>
<span id="cb1-3">poly &lt;-<span class="st"> </span><span class="kw">sympy_func</span>(</span>
<span id="cb1-4">  x<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>a<span class="op">*</span>x<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">/</span><span class="dv">3</span><span class="op">*</span>y <span class="op">+</span><span class="st"> </span>b<span class="op">*</span>y <span class="op">+</span><span class="st"> </span>x<span class="op">*</span>z <span class="op">+</span><span class="st"> </span>a<span class="op">*</span>x<span class="op">*</span>z, <span class="st">"Poly"</span>, <span class="dt">domain =</span> <span class="st">"QQ[a,b]"</span></span>
<span id="cb1-5">)</span>
<span id="cb1-6"><span class="kw">as.character</span>(poly)</span></code></pre>
      </div>
      <p>This gives:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="st">"Poly((a + 1)*x^2 + (a + 1)*x*z + (b + 2/3)*y, x, y, z, domain='QQ[a,b]')"</span></span></code></pre>
      </div>
      <p>
        That is great. Here <code>QQ[a,b]</code> is the field
        <span class="math inline">\(\mathbb{Q}[a,b]\)</span>. I lost a
        significant part of my knowledge in mathematics but I think this is a
        field. It doesn’t matter. Roughly speaking, this is the set of rational
        numbers to which we add the two elements
        <span class="math inline">\(a\)</span> and
        <span class="math inline">\(b\)</span>. So there are treated as
        constants, as if they were some numbers.
      </p>
      <p>
        To get a coefficient, for example the one of
        <span class="math inline">\(xz = x^1y^0z^1\)</span>:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">sympy &lt;-<span class="st"> </span><span class="kw">get_sympy</span>()</span>
<span id="cb3-2">sympy<span class="op">$</span>Poly<span class="op">$</span><span class="kw">nth</span>(poly<span class="op">$</span>pyobj, 1L, 0L, 1L)</span></code></pre>
      </div>
      <p>This gives:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">a <span class="op">+</span><span class="st"> </span><span class="dv">1</span></span></code></pre>
      </div>
      <p>
        Everything needed for writing the POV-Ray code was there. I wrote a
        small script in addition to generate this code. I show it below with the
        above small example:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">library</span>(caracas)</span>
<span id="cb5-2"><span class="kw">library</span>(partitions) <span class="co"># to get the compositions of an integer, </span></span>
<span id="cb5-3">                    <span class="co"># representing the degrees with a given total</span></span>
<span id="cb5-4"><span class="kw">def_sym</span>(x, y, z, a, b) </span>
<span id="cb5-5">poly &lt;-<span class="st"> </span><span class="kw">sympy_func</span>(</span>
<span id="cb5-6">  x<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>a<span class="op">*</span>x<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">/</span><span class="dv">3</span><span class="op">*</span>y <span class="op">+</span><span class="st"> </span>b<span class="op">*</span>y <span class="op">+</span><span class="st"> </span>x<span class="op">*</span>z <span class="op">+</span><span class="st"> </span>a<span class="op">*</span>x<span class="op">*</span>z, <span class="st">"Poly"</span>, <span class="dt">domain =</span> <span class="st">"QQ[a,b]"</span></span>
<span id="cb5-7">)</span>
<span id="cb5-8">sympy &lt;-<span class="st"> </span><span class="kw">get_sympy</span>()</span>
<span id="cb5-9">f &lt;-<span class="st"> </span><span class="cf">function</span>(comp){</span>
<span id="cb5-10">  xyz &lt;-<span class="st"> </span><span class="kw">sprintf</span>(<span class="st">"xyz(%s): "</span>, <span class="kw">toString</span>(comp))</span>
<span id="cb5-11">  coef &lt;-<span class="st"> </span>sympy<span class="op">$</span>Poly<span class="op">$</span><span class="kw">nth</span>(poly<span class="op">$</span>pyobj, comp[1L], comp[2L], comp[3L])</span>
<span id="cb5-12">  <span class="cf">if</span>(coef <span class="op">==</span><span class="st"> </span><span class="dv">0</span>) <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb5-13">  <span class="kw">paste0</span>(xyz, coef, <span class="st">","</span>)</span>
<span id="cb5-14">}</span>
<span id="cb5-15"><span class="cf">for</span>(deg <span class="cf">in</span> 0L<span class="op">:</span>2L){</span>
<span id="cb5-16">  comps &lt;-<span class="st"> </span><span class="kw">compositions</span>(deg, 3L)</span>
<span id="cb5-17">  povray &lt;-<span class="st"> </span><span class="kw">apply</span>(comps, 2L, f, <span class="dt">simplify =</span> <span class="ot">FALSE</span>)</span>
<span id="cb5-18">  <span class="kw">cat</span>(</span>
<span id="cb5-19">    <span class="kw">unlist</span>(povray), <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span>, <span class="dt">file =</span> <span class="st">"povray.txt"</span>, <span class="dt">append =</span> deg <span class="op">&gt;</span><span class="st"> </span>0L</span>
<span id="cb5-20">  )</span>
<span id="cb5-21">}</span></code></pre>
      </div>
      <p>
        And here is the <strong>povray.txt</strong> file generated by this
        script:
      </p>
      <pre><code>xyz(0, 1, 0): b + 2/3,
xyz(2, 0, 0): a + 1,
xyz(1, 0, 1): a + 1,</code></pre>
      <p>
        One just has to remove the trailing comma, and this the desired POV-Ray
        code.
      </p>
      <p>I won’t leave you without showing the animation:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ICN5D_01.gif"
        />
      </p>
      <p>Credit to ‘<strong>ICN5D</strong>’ for the isosurface.</p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Tue, 07 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/caracas01.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Update of 'gyro'</title>
      <link>https://laustep.github.io/stlahblog/posts/gyroUpdate.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I updated the <strong>gyro</strong> package (soon on CRAN). Here are the
        new features.
      </p>
      <h2 id="hyperbolic-polyhedra-in-the-poincaré-model">
        Hyperbolic polyhedra in the Poincaré model
      </h2>
      <p>
        The previous version of the package only dealt with hyperbolic polyhedra
        in the Minkowski model. Now it is possible to get hyperbolic polyhedra
        in the Poincaré model. I don’t provide some example, because they look
        similar to the polyhedra in the Minkowski model (see
        <a
          href="https://laustep.github.io/stlahblog/posts/hyperbolicPolyhedra.html"
          >this post</a
        >). I prefer the Minkowski model because one can change the hyperbolic
        curvature in this model.
      </p>
      <h2 id="hyperbolic-tilings-of-the-poincaré-disk">
        Hyperbolic tilings of the Poincaré disk
      </h2>
      <p>
        The package now provides the <code>tiling</code> function, which draws a
        hyperbolic tiling of the Poincaré disk.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(gyro)</span>
<span id="cb1-2"><span class="kw">tiling</span>(<span class="dv">7</span>, <span class="dv">4</span>, <span class="dt">depth =</span> <span class="dv">4</span>, <span class="dt">border =</span> <span class="st">"darkred"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/htiling_7-4.png"
        />
      </p>
      <h2 id="hyperbolic-delaunay-tessellations">
        Hyperbolic Delaunay tessellations
      </h2>
      <p>
        The package now provides the <code>hdelaunay</code> function, which
        constructs a hyperbolic Delaunay triangulation in the Poincaré disk
        thanks to the C++ library <strong>CGAL</strong>, and the
        <code>plotHdelaunay</code> function, which plots such a triangulation.
      </p>
      <p>
        Unfortunately, this new feature will not be included in the CRAN
        version, because of a C++ issue spotted by Valgrind. If you want to use
        it, you have to install the <strong>hdelaunay</strong> branch of the
        Github repo:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">remotes<span class="op">::</span><span class="kw">install_github</span>(<span class="st">"stla/gyro@hdelaunay"</span>, <span class="dt">build_vignettes =</span> <span class="ot">TRUE</span>)</span></code></pre>
      </div>
      <p>Here is a first example:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(gyro)</span>
<span id="cb3-2"><span class="kw">library</span>(uniformly)</span>
<span id="cb3-3"><span class="kw">set.seed</span>(<span class="dv">666</span>)</span>
<span id="cb3-4">points &lt;-<span class="st"> </span><span class="kw">runif_in_sphere</span>(50L, <span class="dt">d =</span> <span class="dv">2</span>)</span>
<span id="cb3-5">hdel &lt;-<span class="st"> </span><span class="kw">hdelaunay</span>(points)</span>
<span id="cb3-6"><span class="kw">plotHdelaunay</span>(hdel, <span class="dt">color=</span><span class="st">"random"</span>, <span class="dt">luminosity=</span><span class="st">"bright"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hdelaunay1.png"
        />
      </p>
      <p>
        Actually the faces of the hyperbolic Delaunay triangulation are the same
        as the ones of the Euclidean Delaunay triangulation, except that they
        are hyperbolic, up to this point: as you can see on the above plot,
        there are some edges without incident face; this occurs when the
        circumcircle of the missing Euclidean Delaunay face is not contained in
        the unit disk.
      </p>
      <p>Here is a second example, not random:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(gyro)</span>
<span id="cb4-2"><span class="kw">library</span>(trekcolors)</span>
<span id="cb4-3">phi &lt;-<span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">5</span>)) <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb4-4">theta &lt;-<span class="st"> </span><span class="kw">head</span>(<span class="kw">seq</span>(<span class="dv">0</span>, pi<span class="op">/</span><span class="dv">2</span>, <span class="dt">length.out =</span> 11L), <span class="op">-</span>1L)</span>
<span id="cb4-5">a &lt;-<span class="st"> </span>phi<span class="op">^</span>((<span class="dv">2</span><span class="op">*</span>theta<span class="op">/</span>pi)<span class="op">^</span><span class="fl">0.8</span> <span class="op">-</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb4-6">u &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(theta)</span>
<span id="cb4-7">v &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(theta)</span>
<span id="cb4-8">x &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, u, <span class="op">-</span>v, <span class="op">-</span>u, v)</span>
<span id="cb4-9">y &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, v, u, <span class="op">-</span>v, <span class="op">-</span>u)</span>
<span id="cb4-10">pts &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y) <span class="op">/</span><span class="st"> </span><span class="fl">1.03</span></span>
<span id="cb4-11">hdel &lt;-<span class="st"> </span><span class="kw">hdelaunay</span>(pts, <span class="dt">centroids =</span> <span class="ot">TRUE</span>, <span class="dt">exact =</span> <span class="ot">TRUE</span>)</span>
<span id="cb4-12">fcolor &lt;-<span class="st"> </span><span class="cf">function</span>(t){</span>
<span id="cb4-13">    RGB &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(<span class="kw">trek_pal</span>(<span class="st">"klingon"</span>))(t)</span>
<span id="cb4-14">    <span class="kw">rgb</span>(RGB[, 1L], RGB[, 2L], RGB[, 3L], <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb4-15">}</span>
<span id="cb4-16"><span class="kw">plotHdelaunay</span>(</span>
<span id="cb4-17">        hdel, <span class="dt">vertices =</span> <span class="ot">FALSE</span>, <span class="dt">circle =</span> <span class="ot">FALSE</span>, <span class="dt">color =</span> fcolor</span>
<span id="cb4-18">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hdelaunay2.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 04 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/gyroUpdate.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Splitting RCGAL... and the connected components</title>
      <link>https://laustep.github.io/stlahblog/posts/splittingRCGAL.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I published two posts here about my package <strong>RCGAL</strong>, the
        <a
          href="https://laustep.github.io/stlahblog/posts/SurfaceReconstruction.html"
          >first one</a
        >
        about surface reconstruction, and the
        <a
          href="https://laustep.github.io/stlahblog/posts/BooleanOpsOnMeshes.html"
          >second one</a
        >
        about Boolean operations on 3D meshes.
      </p>
      <p>
        Now I decided to split this package into two packages:
        <a href="https://github.com/stla/SurfaceReconstruction"
          >SurfaceReconstruction</a
        >, and
        <a href="https://github.com/stla/MeshesOperations">MeshesOperations</a>.
      </p>
      <p>
        I think <strong>MeshesOperations</strong> is almost ready for submission
        to CRAN. I have just started
        <strong>SurfaceReconstruction</strong> today, but it already works.
      </p>
      <h2 id="dealing-with-a-r-cmd-check-issue">
        Dealing with a ‘R CMD check’ issue
      </h2>
      <p>
        A technical note before playing with the
        <strong>MeshesOperations</strong> package. Feel free to skip this
        section.
      </p>
      <p>
        I faced a ‘R CMD check’ issue on ‘win-builder’ with
        <strong>MeshesOperations</strong>. Namely, this so-called significant
        warning:
      </p>
      <pre><code>C:/.../BH/include/boost/container/detail/copy_move_algo.hpp:184:19: warning: 
'void* memmove(void*, const void*, size_t)' writing to an object of type 'value_type' 
{aka 'struct std::pair, std::allocator &gt;, long long unsigned int&gt; &gt; &gt;, 
std::allocator, std::allocator &gt;, long long unsigned int&gt; &gt; &gt; &gt; &gt;,
CGAL::internal::In_place_list_iterator, std::allocator &gt;, 
long long unsigned int&gt; &gt; &gt;, std::allocator, std::allocator &gt;, 
long long unsigned int&gt; &gt; &gt; &gt; &gt; &gt;'} 
with no trivial copy-assignment; use copy-assignment or copy-initialization 
instead [-Wclass-memaccess]</code></pre>
      <p>
        This is a warning from the <strong>BH</strong> package (which allows to
        use the C++ library <strong>Boost</strong> with <strong>Rcpp</strong>).
        On Linux, the ‘R CMD check’ report was clean.
      </p>
      <p>
        I found a solution to this issue. I describe it here, in case it could
        help someone.
      </p>
      <p>
        In order to use the <strong>BH</strong> package, I included it in the
        <strong>LinkingTo</strong> field of the
        <strong>DESCRIPTION</strong> file. Then I discovered that this was not
        necessary with R-4.2.0, and that’s because
        <strong>Rtools42</strong> contains the <strong>Boost</strong> library.
      </p>
      <p>
        So this solved the problem for Windows, but created a new problem for
        the other OSs. Then I solved this new problem by:
      </p>
      <ul>
        <li>
          <p>
            putting <strong>BH</strong> in the <strong>Suggests</strong> field
            of <strong>DESCRIPTION</strong> (and only in this field)
          </p>
        </li>
        <li>
          <p>
            adding the following lines in the <strong>Makevars</strong> file in
            the <strong>src</strong> folder of the package (breaking the first
            line for display here):
          </p>
        </li>
      </ul>
      <!-- -->
      <pre><code>BH_PATH = `echo 'cat(system.file("include", package = "BH", mustWork=TRUE))' \ 
| "${R_HOME}/bin/R" --vanilla --no-echo`
PKG_CXXFLAGS = -I$(BH_PATH)</code></pre>
      <p>
        The first line allows to call R to get the path of the
        <strong>include</strong> folder of the <strong>BH</strong> package, and
        this path is set to the variable <strong>BH_PATH</strong>.
      </p>
      <p>
        Of course I didn’t change the <strong>Makevars.win</strong> file. This
        works, but I don’t know yet whether this is acceptable for CRAN. However
        I am optimistic, since such a technique can be found in
        <em>‘Writing R extensions’</em>.
      </p>
      <h2 id="connected-components">Connected components</h2>
      <p>
        There’s something new in <strong>MeshesOperations</strong> as compared
        to <strong>RCGAL</strong>: the computation of the connected components
        of a mesh. I’m going to show you an example. Note that the mesh in this
        example is triangle (i.e. it only has triangular faces), and then one
        could alternatively use my package
        <a href="https://github.com/stla/concomp">MeshesOperations</a> (not
        submitted to CRAN yet) to get the connected components of this mesh.
      </p>
      <p>
        So let’s try this feature. Our example is an isosurface called the
        <em>C8 surface</em>. Unfortunately I do not remember where I found it.
        I’m using the <strong>rmarchingcubes</strong> to construct a mesh of
        this isosurface.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">f &lt;-<span class="st"> </span><span class="cf">function</span>(x, y, z){</span>
<span id="cb3-2">  <span class="dv">64</span><span class="op">*</span>x<span class="op">**</span><span class="dv">8</span> <span class="op">-</span><span class="st"> </span><span class="dv">128</span><span class="op">*</span>x<span class="op">**</span><span class="dv">6</span> <span class="op">+</span><span class="st"> </span><span class="dv">80</span><span class="op">*</span>x<span class="op">**</span><span class="dv">4</span> <span class="op">-</span><span class="st"> </span><span class="dv">16</span><span class="op">*</span>x<span class="op">**</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span><span class="dv">64</span><span class="op">*</span>y<span class="op">**</span><span class="dv">8</span> <span class="op">-</span><span class="st"> </span><span class="dv">128</span><span class="op">*</span>y<span class="op">**</span><span class="dv">6</span> <span class="op">+</span></span>
<span id="cb3-3"><span class="st">    </span><span class="dv">80</span><span class="op">*</span>y<span class="op">**</span><span class="dv">4</span> <span class="op">-</span><span class="st"> </span><span class="dv">16</span><span class="op">*</span>y<span class="op">**</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span><span class="dv">64</span><span class="op">*</span>z<span class="op">**</span><span class="dv">8</span> <span class="op">-</span><span class="st"> </span><span class="dv">128</span><span class="op">*</span>z<span class="op">**</span><span class="dv">6</span> <span class="op">+</span><span class="st"> </span><span class="dv">80</span><span class="op">*</span>z<span class="op">**</span><span class="dv">4</span> <span class="op">-</span><span class="st"> </span><span class="dv">16</span><span class="op">*</span>z<span class="op">**</span><span class="dv">2</span></span>
<span id="cb3-4">}</span>
<span id="cb3-5"></span>
<span id="cb3-6">ngrid &lt;-<span class="st"> </span>150L</span>
<span id="cb3-7">x &lt;-<span class="st"> </span>y &lt;-<span class="st"> </span>z &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">1.1</span>, <span class="fl">1.1</span>, <span class="dt">len =</span> ngrid)</span>
<span id="cb3-8">Grid &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">X =</span> x, <span class="dt">Y =</span> y, <span class="dt">Z =</span> z)</span>
<span id="cb3-9">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(</span>
<span id="cb3-10">  <span class="kw">with</span>(Grid, <span class="kw">f</span>(X, Y, Z)), <span class="dt">dim =</span> <span class="kw">c</span>(ngrid, ngrid, ngrid)</span>
<span id="cb3-11">)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="kw">library</span>(rmarchingcubes)</span>
<span id="cb3-14">contour_shape &lt;-<span class="st"> </span><span class="kw">contour3d</span>(</span>
<span id="cb3-15">  <span class="dt">griddata =</span> voxel, <span class="dt">level =</span> <span class="fl">-0.1</span>,</span>
<span id="cb3-16">  <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z</span>
<span id="cb3-17">)</span></code></pre>
      </div>
      <p>Now let’s plot it with rgl:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(rgl)</span>
<span id="cb4-2">tmesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb4-3">  <span class="dt">vertices =</span> <span class="kw">t</span>(contour_shape[[<span class="st">"vertices"</span>]]),</span>
<span id="cb4-4">  <span class="dt">indices =</span> <span class="kw">t</span>(contour_shape[[<span class="st">"triangles"</span>]]),</span>
<span id="cb4-5">  <span class="dt">normals =</span> contour_shape[[<span class="st">"normals"</span>]],</span>
<span id="cb4-6">  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb4-7">)</span>
<span id="cb4-8"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb4-9"><span class="kw">shade3d</span>(tmesh, <span class="dt">color =</span> <span class="st">"darkred"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/C8surface.gif"
        />
      </p>
      <p>
        As you can see, it has many isolated parts, the so-called
        <em>connected components</em>.
      </p>
      <p>
        Now we use the <strong>MeshesOperations</strong> package to extract
        these connected components, while requesting the vertex normals of each
        component:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">library</span>(MeshesOperations)</span>
<span id="cb5-2">meshes &lt;-<span class="st"> </span><span class="kw">connectedComponents</span>(</span>
<span id="cb5-3">  <span class="dt">vertices =</span> contour_shape[[<span class="st">"vertices"</span>]],</span>
<span id="cb5-4">  <span class="dt">faces    =</span> contour_shape[[<span class="st">"triangles"</span>]],</span>
<span id="cb5-5">  <span class="dt">normals  =</span> <span class="ot">TRUE</span></span>
<span id="cb5-6">)</span>
<span id="cb5-7"><span class="co"># Found 64 components.</span></span></code></pre>
      </div>
      <p>Now let’s plot all theses meshes, one color per mesh:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">ncc &lt;-<span class="st"> </span><span class="kw">length</span>(meshes)</span>
<span id="cb6-2"><span class="kw">library</span>(randomcoloR)</span>
<span id="cb6-3">colors &lt;-<span class="st"> </span><span class="kw">randomColor</span>(ncc, <span class="dt">hue =</span> <span class="st">"random"</span>, <span class="dt">luminosity =</span> <span class="st">"dark"</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb6-6"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>ncc){</span>
<span id="cb6-7">  cc &lt;-<span class="st"> </span>meshes[[i]]</span>
<span id="cb6-8">  tmesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb6-9">    <span class="dt">vertices =</span> <span class="kw">t</span>(cc[[<span class="st">"vertices"</span>]]),</span>
<span id="cb6-10">    <span class="dt">indices  =</span> <span class="kw">t</span>(cc[[<span class="st">"faces"</span>]]),</span>
<span id="cb6-11">    <span class="dt">normals  =</span> cc[[<span class="st">"normals"</span>]],</span>
<span id="cb6-12">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb6-13">  )</span>
<span id="cb6-14">  <span class="kw">shade3d</span>(tmesh, <span class="dt">color =</span> colors[i])</span>
<span id="cb6-15">}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/C8_components.gif"
        />
      </p>
      <p>
        Nice. However there is one problem: compare the smoothness of these
        meshes to the smoothness of our first plot. It is not as smooth.
      </p>
      <p>
        I think I know why. The smoothness depends on the vertex normals. Here
        we computed the normals with CGAL, then each vertex normal is obtained
        by averaging the normals of the surrounding faces of this vertex. We
        could have used <code>rgl::addNormals</code> instead, the result would
        be the same. But there is a convenient way to get the “true” vertex
        normals of an isosurface: the normal associated to a vertex is the
        gradient of the isosurface function evaluated at the coordinates of this
        vertex. So my guess is that <strong>rmarchingcubes</strong> uses the
        gradient. I am still thinking of having the possibility to preserve the
        original normals when computing the connected components, I didn’t have
        the time yet to find how to do that. This is not a problem, we will
        compute the true normals with R. In fact we will probably do better than
        <strong>rmarchingcubes</strong>: surely this package numerically
        computes the gradient, while we will use the <em>exact</em> gradient.
        How? Look at the isosurface function <code>f</code>: this is a
        multivariate polynomial. So it is easy to calculate its derivatives.
        This would be tedious to calculate them by hand however, so let’s use
        the <strong>spray</strong> package:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(spray)</span>
<span id="cb7-2"><span class="co"># define the polynomial corresponding to f:</span></span>
<span id="cb7-3">P &lt;-<span class="st"> </span><span class="kw">f</span>(<span class="kw">lone</span>(<span class="dv">1</span>,<span class="dv">3</span>), <span class="kw">lone</span>(<span class="dv">2</span>,<span class="dv">3</span>), <span class="kw">lone</span>(<span class="dv">3</span>,<span class="dv">3</span>))</span>
<span id="cb7-4"><span class="co"># and its derivatives:</span></span>
<span id="cb7-5">dfx &lt;-<span class="st"> </span><span class="kw">as.function</span>(<span class="kw">deriv</span>(P, 1L))</span>
<span id="cb7-6">dfy &lt;-<span class="st"> </span><span class="kw">as.function</span>(<span class="kw">deriv</span>(P, 2L))</span>
<span id="cb7-7">dfz &lt;-<span class="st"> </span><span class="kw">as.function</span>(<span class="kw">deriv</span>(P, 3L))</span>
<span id="cb7-8"><span class="co"># the gradient is:</span></span>
<span id="cb7-9">gradient &lt;-<span class="st"> </span><span class="cf">function</span>(xyz){</span>
<span id="cb7-10">  <span class="kw">cbind</span>(<span class="kw">dfx</span>(xyz), <span class="kw">dfy</span>(xyz), <span class="kw">dfz</span>(xyz))</span>
<span id="cb7-11">}</span></code></pre>
      </div>
      <p>
        Just a couple of lines of code… Now let’s do the plot with the true
        normals:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb8-2"><span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>ncc){</span>
<span id="cb8-3">  cc &lt;-<span class="st"> </span>meshes[[i]]</span>
<span id="cb8-4">  tmesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb8-5">    <span class="dt">vertices =</span> <span class="kw">t</span>(cc<span class="op">$</span>vertices),</span>
<span id="cb8-6">    <span class="dt">indices  =</span> <span class="kw">t</span>(cc<span class="op">$</span>faces),</span>
<span id="cb8-7">    <span class="dt">normals  =</span> <span class="kw">gradient</span>(cc<span class="op">$</span>vertices),</span>
<span id="cb8-8">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb8-9">  )</span>
<span id="cb8-10">  <span class="kw">shade3d</span>(tmesh, <span class="dt">color =</span> colors[i])</span>
<span id="cb8-11">}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/C8_components_trueNormals.gif"
        />
      </p>
      <p>A perfect smoothness!</p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 27 May 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/splittingRCGAL.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Animated multibarchart with (R)nvd3</title>
      <link>https://laustep.github.io/stlahblog/posts/Rnvd3.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I really like the animated multibarchart of the JavaScript library
        <a href="https://nvd3.org/">NVD3</a>. That’s why I did the ‘Rnvd3’
        package.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(Rnvd3)</span>
<span id="cb1-2"></span>
<span id="cb1-3">dat &lt;-<span class="st"> </span>reshape2<span class="op">::</span><span class="kw">melt</span>(</span>
<span id="cb1-4">  <span class="kw">apply</span>(HairEyeColor, <span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">2</span>), sum), <span class="dt">value.name =</span> <span class="st">"Count"</span></span>
<span id="cb1-5">)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co"># style axis titles with CSS ####</span></span>
<span id="cb1-8"><span class="kw">library</span>(htmltools)</span>
<span id="cb1-9">CSS &lt;-<span class="st"> </span><span class="kw">HTML</span>(</span>
<span id="cb1-10">  <span class="st">".nvd3 .nv-axis.nv-x text.nv-axislabel,</span></span>
<span id="cb1-11"><span class="st">   .nvd3 .nv-axis.nv-y text.nv-axislabel {</span></span>
<span id="cb1-12"><span class="st">     font-size: 2rem;</span></span>
<span id="cb1-13"><span class="st">     fill: red;</span></span>
<span id="cb1-14"><span class="st">  }"</span></span>
<span id="cb1-15">)</span>
<span id="cb1-16"></span>
<span id="cb1-17">widget &lt;-<span class="st"> </span><span class="kw">multiBarChart</span>(</span>
<span id="cb1-18">  dat, Count <span class="op">~</span><span class="st"> </span>Eye, <span class="st">"Hair"</span>, <span class="dt">palette =</span> <span class="st">"turbo"</span></span>
<span id="cb1-19">)</span>
<span id="cb1-20"><span class="kw">prependContent</span>(</span>
<span id="cb1-21">  widget,</span>
<span id="cb1-22">  tags<span class="op">$</span><span class="kw">style</span>(CSS)</span>
<span id="cb1-23">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Rnvd3.gif"
        />
      </p>
      <p>
        This chart is also available in the ‘rCharts’ package, but this package
        is not maintained.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 20 May 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/Rnvd3.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Hierarchical data visualization with Shiny and D3</title>
      <link>https://laustep.github.io/stlahblog/posts/HierarchicalDataViz.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I refreshed my old package ‘<strong>dir2json</strong>’ (5 years old). It
        uses a Haskell DLL and can only work on Windows. You can install it from
        Github:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">remotes<span class="op">::</span><span class="kw">install_github</span>(<span class="st">"stla/dir2json"</span>)</span></code></pre>
      </div>
      <p>
        This package contains two Shiny apps. The first one allows to represent
        a folder structure as a tree network diagram (called a
        <em>Reingold-Tilford</em> tree), thanks to the amazing JavaScript
        library ‘<strong>D3</strong>’:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(dir2json)</span>
<span id="cb2-2"><span class="co"># don't forget to limit the depth if the folder is deep!</span></span>
<span id="cb2-3"><span class="kw">shinyDirTree</span>(<span class="dt">dir =</span> <span class="st">"inst"</span>, <span class="dt">depth =</span> <span class="dv">3</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/shinyDirTree.gif"
          style="width: 95%"
        />
      </p>
      <p>
        As you can see, it also allows to search a file in the tree. And it is
        possible to zoom and to drag.
      </p>
      <p>
        This Shiny app was already included in the original version of the
        package. The second Shiny app is new. It is similar to the first one,
        but instead of a folder, it allows to represent any dataset with a
        hierarchical structure:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(dir2json)</span>
<span id="cb3-2">dat &lt;-<span class="st"> </span>tibble<span class="op">::</span><span class="kw">tribble</span>(</span>
<span id="cb3-3">  <span class="op">~</span>level1, <span class="op">~</span>level2, <span class="op">~</span>level3, <span class="op">~</span>level4, </span>
<span id="cb3-4">  <span class="st">"Beverages"</span>, <span class="st">"Water"</span>, <span class="st">""</span>, <span class="st">""</span>, </span>
<span id="cb3-5">  <span class="st">"Beverages"</span>, <span class="st">"Coffee"</span>, <span class="st">""</span>, <span class="st">""</span>, </span>
<span id="cb3-6">  <span class="st">"Beverages"</span>, <span class="st">"Tea"</span>, <span class="st">"Black tea"</span>, <span class="st">""</span>, </span>
<span id="cb3-7">  <span class="st">"Beverages"</span>, <span class="st">"Tea"</span>, <span class="st">"White tea"</span>, <span class="st">""</span>, </span>
<span id="cb3-8">  <span class="st">"Beverages"</span>, <span class="st">"Tea"</span>, <span class="st">"Green tea"</span>, <span class="st">"Sencha"</span>, </span>
<span id="cb3-9">  <span class="st">"Beverages"</span>, <span class="st">"Tea"</span>, <span class="st">"Green tea"</span>, <span class="st">"Gyokuro"</span>, </span>
<span id="cb3-10">  <span class="st">"Beverages"</span>, <span class="st">"Tea"</span>, <span class="st">"Green tea"</span>, <span class="st">"Matcha"</span>, </span>
<span id="cb3-11">  <span class="st">"Beverages"</span>, <span class="st">"Tea"</span>, <span class="st">"Green tea"</span>, <span class="st">"Pi Lo Chun"</span></span>
<span id="cb3-12">)</span>
<span id="cb3-13"><span class="kw">shinyDataTree</span>(dat, <span class="dt">root =</span> <span class="ot">FALSE</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/shinyDataTree.gif"
          style="width: 95%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 20 May 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HierarchicalDataViz.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The 'rAmCharts4' package</title>
      <link>https://laustep.github.io/stlahblog/posts/rAmCharts4.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        My package
        <a href="https://github.com/stla/rAmCharts4">rAmCharts4</a> has a
        moderate success on Github (twenty stars). So I decided to present it
        here.
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/rAmCharts4.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 15 May 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/rAmCharts4.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Boolean operations on meshes with R(CGAL)</title>
      <link>https://laustep.github.io/stlahblog/posts/BooleanOpsOnMeshes.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I’m still working on my package <strong>RCGAL</strong>, that I already
        present in <a href="./SurfaceReconstruction.html">a previous post</a>.
      </p>
      <p>
        This previous post was about the reconstruction of surfaces. Now I
        implemented the <em>Boolean operations on meshes</em>. Here are some
        simple examples.
      </p>
      <h4 id="union-of-two-cubes">Union of two cubes:</h4>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cubesUnion.png"
        />
      </p>
      <h4 id="intersection-of-two-cubes-one-rotated">
        Intersection of two cubes (one rotated):
      </h4>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/interCubeRotatedCube.gif"
        />
      </p>
      <h4 id="difference-of-two-cubes">Difference of two cubes:</h4>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cubesDifference.png"
        />
      </p>
      <h4 id="intersection-of-a-cube-and-a-truncated-icosahedron">
        Intersection of a cube and a truncated icosahedron:
      </h4>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cubesIntersection.png"
        />
      </p>
      <p>The code generating these plots is given in the RCGAL examples.</p>
      <p>Now let’s turn to a more interesting example.</p>
      <h2 id="the-compound-of-five-tetrahedra">
        The compound of five tetrahedra
      </h2>
      <p>
        The compound of five tetrahedra is provided by <strong>RCGAL</strong>.
        These are five tetrahedra in a pretty configuration, each centered at
        the origin. You can get their meshes by typing
        <code>tetrahedraCompound</code>. This is a list with two components: a
        field <code>meshes</code> providing for each tetrahderon its vertices
        and its faces, and a field <code>rglmeshes</code>, similar to
        <code>meshes</code> but these meshes are ready for plotting with the
        <strong>rgl</strong> package. Here it is:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(RCGAL)</span>
<span id="cb1-2"><span class="kw">library</span>(rgl)</span>
<span id="cb1-3">rglmeshes &lt;-<span class="st"> </span>tetrahedraCompound[[<span class="st">"rglmeshes"</span>]]</span>
<span id="cb1-4"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb1-5"><span class="kw">bg3d</span>(<span class="st">"#363940"</span>)</span>
<span id="cb1-6">colors &lt;-<span class="st"> </span><span class="kw">hcl.colors</span>(<span class="dv">5</span>, <span class="dt">palette =</span> <span class="st">"Spectral"</span>)</span>
<span id="cb1-7"><span class="kw">invisible</span>(<span class="kw">lapply</span>(</span>
<span id="cb1-8">  <span class="dv">1</span><span class="op">:</span><span class="dv">5</span>, <span class="cf">function</span>(i) <span class="kw">shade3d</span>(rglmeshes[[i]], <span class="dt">color =</span> colors[i])</span>
<span id="cb1-9">))</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tetrahedraCompound.gif"
        />
      </p>
      <p>
        I wondered for a long time what is the intersection of these five
        tetrahedra. But I didn’t have any tool to compute it. Now I have. Let’s
        see.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># compute the intersection ####</span></span>
<span id="cb2-2">inter &lt;-<span class="st"> </span><span class="kw">MeshesIntersection</span>(</span>
<span id="cb2-3">  tetrahedraCompound[[<span class="st">"meshes"</span>]], <span class="dt">numbersType =</span> <span class="st">"lazyExact"</span>, <span class="dt">clean =</span> <span class="ot">TRUE</span></span>
<span id="cb2-4">)</span>
<span id="cb2-5"><span class="co"># plot ####</span></span>
<span id="cb2-6"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb2-7"><span class="kw">bg3d</span>(<span class="st">"#363940"</span>)</span>
<span id="cb2-8"><span class="co"># first the five tetrahedra with transparency ####</span></span>
<span id="cb2-9"><span class="kw">invisible</span>(<span class="kw">lapply</span>(</span>
<span id="cb2-10">  rglmeshes, shade3d, <span class="dt">color =</span> <span class="st">"yellow"</span>, <span class="dt">alpha =</span> <span class="fl">0.1</span></span>
<span id="cb2-11">))</span>
<span id="cb2-12"><span class="co"># now the intersection ####</span></span>
<span id="cb2-13">rglinter &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb2-14">  <span class="st">"vertices"</span>    =<span class="st"> </span><span class="kw">t</span>(inter[[<span class="st">"vertices"</span>]]),</span>
<span id="cb2-15">  <span class="st">"indices"</span>     =<span class="st"> </span><span class="kw">t</span>(inter[[<span class="st">"faces"</span>]]),</span>
<span id="cb2-16">  <span class="st">"homogeneous"</span> =<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb2-17">)</span>
<span id="cb2-18"><span class="kw">shade3d</span>(rglinter, <span class="dt">color =</span> <span class="st">"gainsboro"</span>)</span>
<span id="cb2-19"><span class="co"># and finally the edges ####</span></span>
<span id="cb2-20"><span class="kw">plotEdges</span>(</span>
<span id="cb2-21">  inter[[<span class="st">"vertices"</span>]], inter[[<span class="st">"exteriorEdges"</span>]],</span>
<span id="cb2-22">  <span class="dt">only =</span> inter[[<span class="st">"exteriorVertices"</span>]], <span class="dt">color =</span> <span class="st">"darkmagenta"</span></span>
<span id="cb2-23">)</span></code></pre>
      </div>
      <p>Here is the result:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tetrahedraCompoundIntersection.gif"
        />
      </p>
      <p>This is an icosahedron, I think.</p>
      <p>
        Unfortunately, R CMD CHECK still throws some warnings which prevent me
        to publish this package on CRAN. I hope this issue will be solved.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 14 May 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/BooleanOpsOnMeshes.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Copy 'plotly' image to the clipboard</title>
      <link>https://laustep.github.io/stlahblog/posts/plotly_copyToClipboard.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        The R code below shows how to get a <em>“Copy to clipboard”</em> button
        in the <code>plotly</code> toolbar.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(plotly)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw">set.seed</span>(666L)</span>
<span id="cb1-4">asd &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb1-5">  <span class="dt">week =</span> <span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">8</span>), </span>
<span id="cb1-6">  <span class="dt">a    =</span> <span class="kw">rpois</span>(8L, <span class="dv">30</span>), </span>
<span id="cb1-7">  <span class="dt">b    =</span> <span class="kw">rpois</span>(8L, <span class="dv">25</span>)</span>
<span id="cb1-8">)</span>
<span id="cb1-9"></span>
<span id="cb1-10">js &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb1-11">  <span class="st">'function(gd) {'</span>,</span>
<span id="cb1-12">  <span class="st">'  Plotly.Snapshot.toImage(gd, {format: "png"}).once('</span>,</span>
<span id="cb1-13">  <span class="st">'    "success",'</span>,</span>
<span id="cb1-14">  <span class="st">'    async function(url) {'</span>,</span>
<span id="cb1-15">  <span class="st">'      try {'</span>,</span>
<span id="cb1-16">  <span class="st">'        const data = await fetch(url);'</span>,</span>
<span id="cb1-17">  <span class="st">'        const blob = await data.blob();'</span>,</span>
<span id="cb1-18">  <span class="st">'        await navigator.clipboard.write(['</span>,</span>
<span id="cb1-19">  <span class="st">'          new ClipboardItem({'</span>,</span>
<span id="cb1-20">  <span class="st">'            [blob.type]: blob'</span>,</span>
<span id="cb1-21">  <span class="st">'          })'</span>,</span>
<span id="cb1-22">  <span class="st">'        ]);'</span>,</span>
<span id="cb1-23">  <span class="st">'        console.log("Image copied.");'</span>,</span>
<span id="cb1-24">  <span class="st">'        var $div = $("&lt;div&gt;Image copied to clipboard&lt;/div&gt;");'</span>,</span>
<span id="cb1-25">  <span class="st">'        $div.css({'</span>,</span>
<span id="cb1-26">  <span class="st">'          display: "none",'</span>,</span>
<span id="cb1-27">  <span class="st">'          position: "absolute",'</span>,</span>
<span id="cb1-28">  <span class="st">'          top: "5%",'</span>,</span>
<span id="cb1-29">  <span class="st">'          left: "50%",'</span>,</span>
<span id="cb1-30">  <span class="st">'          transform: "translate(-50%, 0)",'</span>,</span>
<span id="cb1-31">  <span class="st">'          "font-size": "30px",'</span>,</span>
<span id="cb1-32">  <span class="st">'          "font-family": "Tahoma, sans-serif",'</span>,</span>
<span id="cb1-33">  <span class="st">'          "font-style": "italic",'</span>,</span>
<span id="cb1-34">  <span class="st">'          "background-color": "seashell",'</span>,</span>
<span id="cb1-35">  <span class="st">'          padding: "10px",'</span>,</span>
<span id="cb1-36">  <span class="st">'          border: "2px solid black",'</span>,</span>
<span id="cb1-37">  <span class="st">'          "border-radius": "5px"'</span>,</span>
<span id="cb1-38">  <span class="st">'        });'</span>,</span>
<span id="cb1-39">  <span class="st">'        $div.appendTo("body");'</span>,</span>
<span id="cb1-40">  <span class="st">'        $div.fadeIn(3000, function() {'</span>,</span>
<span id="cb1-41">  <span class="st">'          $div.fadeOut(3000);'</span>,</span>
<span id="cb1-42">  <span class="st">'        });'</span>,</span>
<span id="cb1-43">  <span class="st">'      } catch(err) {'</span>,</span>
<span id="cb1-44">  <span class="st">'        console.error(err.name, err.message);'</span>,</span>
<span id="cb1-45">  <span class="st">'      }'</span>,</span>
<span id="cb1-46">  <span class="st">'    }'</span>,</span>
<span id="cb1-47">  <span class="st">'  );'</span>,</span>
<span id="cb1-48">  <span class="st">'}'</span></span>
<span id="cb1-49">)</span>
<span id="cb1-50"></span>
<span id="cb1-51">SVGicon_path &lt;-<span class="st"> </span><span class="kw">paste0</span>(</span>
<span id="cb1-52">  <span class="st">"M97.67,20.81L97.67,20.81l0.01,0.02c3.7,0.01,7.04,1.51,9.46,3.93c2.4,2."</span>,</span>
<span id="cb1-53">  <span class="st">"41,3.9,5.74,3.9,9.42h0.02v0.02v75.28 v0.01h-0.02c-0.01,3.68-1.51,7.03-"</span>,</span>
<span id="cb1-54">  <span class="st">"3.93,9.46c-2.41,2.4-5.74,3.9-9.42,3.9v0.02h-0.02H38.48h-0.01v-0.02 c-3"</span>,</span>
<span id="cb1-55">  <span class="st">".69-0.01-7.04-1.5-9.46-3.93c-2.4-2.41-3.9-5.74-3.91-9.42H25.1c0-25.96,"</span>,</span>
<span id="cb1-56">  <span class="st">"0-49.34,0-75.3v-0.01h0.02 c0.01-3.69,1.52-7.04,3.94-9.46c2.41-2.4,5.73"</span>,</span>
<span id="cb1-57">  <span class="st">"-3.9,9.42-3.91v-0.02h0.02C58.22,20.81,77.95,20.81,97.67,20.81L97.67,20"</span>,</span>
<span id="cb1-58">  <span class="st">".81z M0.02,75.38L0,13.39v-0.01h0.02c0.01-3.69,1.52-7.04,3.93-9.46c2.41"</span>,</span>
<span id="cb1-59">  <span class="st">"-2.4,5.74-3.9,9.42-3.91V0h0.02h59.19 c7.69,0,8.9,9.96,0.01,10.16H13.4h"</span>,</span>
<span id="cb1-60">  <span class="st">"-0.02v-0.02c-0.88,0-1.68,0.37-2.27,0.97c-0.59,0.58-0.96,1.4-0.96,2.27h"</span>,</span>
<span id="cb1-61">  <span class="st">"0.02v0.01v3.17 c0,19.61,0,39.21,0,58.81C10.17,83.63,0.02,84.09,0.02,75"</span>,</span>
<span id="cb1-62">  <span class="st">".38L0.02,75.38z M100.91,109.49V34.2v-0.02h0.02 c0-0.87-0.37-1.68-0.97-"</span>,</span>
<span id="cb1-63">  <span class="st">"2.27c-0.59-0.58-1.4-0.96-2.28-0.96v0.02h-0.01H38.48h-0.02v-0.02c-0.88,"</span>,</span>
<span id="cb1-64">  <span class="st">"0-1.68,0.38-2.27,0.97 c-0.59,0.58-0.96,1.4-0.96,2.27h0.02v0.01v75.28v0"</span>,</span>
<span id="cb1-65">  <span class="st">".02h-0.02c0,0.88,0.38,1.68,0.97,2.27c0.59,0.59,1.4,0.96,2.27,0.96v-0.0"</span>,</span>
<span id="cb1-66">  <span class="st">"2h0.01 h59.19h0.02v0.02c0.87,0,1.68-0.38,2.27-0.97c0.59-0.58,0.96-1.4,"</span>,</span>
<span id="cb1-67">  <span class="st">"0.96-2.27L100.91,109.49L100.91,109.49L100.91,109.49 L100.91,109.49z"</span></span>
<span id="cb1-68">)</span>
<span id="cb1-69"></span>
<span id="cb1-70">CopyToClipboard &lt;-<span class="st"> </span><span class="kw">list</span>(</span>
<span id="cb1-71">  <span class="dt">name =</span> <span class="st">"Copy"</span>,</span>
<span id="cb1-72">  <span class="dt">icon =</span> <span class="kw">list</span>(</span>
<span id="cb1-73">    <span class="dt">path   =</span> SVGicon_path,</span>
<span id="cb1-74">    <span class="dt">width  =</span> <span class="dv">111</span>,</span>
<span id="cb1-75">    <span class="dt">height =</span> <span class="dv">123</span></span>
<span id="cb1-76">  ),</span>
<span id="cb1-77">  <span class="dt">click =</span> htmlwidgets<span class="op">::</span><span class="kw">JS</span>(js)</span>
<span id="cb1-78">)</span>
<span id="cb1-79"></span>
<span id="cb1-80"><span class="kw">plot_ly</span>(</span>
<span id="cb1-81">  asd, <span class="dt">x =</span> <span class="op">~</span>week, <span class="dt">y =</span> <span class="op">~</span>a, <span class="dt">name =</span> <span class="st">"a"</span>, <span class="dt">type =</span> <span class="st">"scatter"</span>, <span class="dt">mode =</span> <span class="st">"lines"</span></span>
<span id="cb1-82">) <span class="op">%&gt;%</span></span>
<span id="cb1-83"><span class="st">  </span><span class="kw">add_trace</span>(<span class="dt">y =</span> <span class="op">~</span>b, <span class="dt">name =</span> <span class="st">"b"</span>, <span class="dt">mode =</span> <span class="st">"lines"</span>) <span class="op">%&gt;%</span></span>
<span id="cb1-84"><span class="st">  </span><span class="kw">layout</span>(</span>
<span id="cb1-85">    <span class="dt">margin =</span> <span class="kw">list</span>(<span class="dt">l =</span> <span class="dv">100</span>, <span class="dt">r =</span> <span class="dv">100</span>, <span class="dt">b =</span> <span class="dv">100</span>, <span class="dt">t =</span> <span class="dv">100</span>), </span>
<span id="cb1-86">    <span class="dt">xaxis =</span> <span class="kw">list</span>(</span>
<span id="cb1-87">      <span class="dt">title     =</span> <span class="st">"Week"</span>, </span>
<span id="cb1-88">      <span class="dt">showgrid  =</span> <span class="ot">FALSE</span>, </span>
<span id="cb1-89">      <span class="dt">rangemode =</span> <span class="st">"normal"</span></span>
<span id="cb1-90">    ),</span>
<span id="cb1-91">    <span class="dt">yaxis =</span> <span class="kw">list</span>(</span>
<span id="cb1-92">      <span class="dt">title     =</span> <span class="st">""</span>, </span>
<span id="cb1-93">      <span class="dt">showgrid  =</span> <span class="ot">FALSE</span>, </span>
<span id="cb1-94">      <span class="dt">rangemode =</span> <span class="st">"tozero"</span></span>
<span id="cb1-95">    ),</span>
<span id="cb1-96">    <span class="dt">hovermode =</span> <span class="st">"x unified"</span></span>
<span id="cb1-97">  ) <span class="op">%&gt;%</span></span>
<span id="cb1-98"><span class="st">  </span><span class="kw">config</span>(<span class="dt">modeBarButtonsToAdd =</span> <span class="kw">list</span>(CopyToClipboard))</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/plotly_copyToClipboard.gif"
          style="width: 75%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 16 Mar 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/plotly_copyToClipboard.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The E8 root polytope</title>
      <link>https://laustep.github.io/stlahblog/posts/E8rootPolytope.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <h2 id="the-e8-root-polytope-its-vertices-and-its-edges">
        The E8 root polytope, its vertices and its edges
      </h2>
      <p>
        The <em>E8 root polytope</em>, also known as the
        <a href="https://en.wikipedia.org/wiki/4_21_polytope"
          ><span class="math inline">\(4_{21}\)</span> polytope</a
        >
        is a 8-dimensional polytope. The Cartesian coordinates of its vertices
        are described in the above linked Wikipedia page. It has 240 vertices,
        that can be separated in two sets. The first set is obtained from
        <span class="math inline">\((\pm 2, \pm 2, 0, 0, 0, 0, 0, 0)\)</span> by
        taking an arbitrary combination of the signs and an arbitrary
        permutation of the coordinates. This gives
        <span class="math inline">\(2^2 \tbinom{8}{2} = 112\)</span> vertices,
        that one can obtain as follows in R:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">combs &lt;-<span class="st"> </span>arrangements<span class="op">::</span><span class="kw">combinations</span>(8L, 2L)</span>
<span id="cb1-2">vertices1 &lt;-<span class="st"> </span><span class="ot">NULL</span></span>
<span id="cb1-3"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(combs)){</span>
<span id="cb1-4">  comb &lt;-<span class="st"> </span>combs[i, ]</span>
<span id="cb1-5">  <span class="cf">for</span>(x <span class="cf">in</span> <span class="kw">c</span>(<span class="op">-</span><span class="dv">2</span>, <span class="dv">2</span>)){</span>
<span id="cb1-6">    <span class="cf">for</span>(y <span class="cf">in</span> <span class="kw">c</span>(<span class="op">-</span><span class="dv">2</span>, <span class="dv">2</span>)){</span>
<span id="cb1-7">      zeros &lt;-<span class="st"> </span><span class="kw">rep</span>(<span class="dv">0</span>, 8L)</span>
<span id="cb1-8">      zeros[comb[1L]] &lt;-<span class="st"> </span>x</span>
<span id="cb1-9">      zeros[comb[2L]] &lt;-<span class="st"> </span>y</span>
<span id="cb1-10">      vertices1 &lt;-<span class="st"> </span><span class="kw">rbind</span>(vertices1, zeros)</span>
<span id="cb1-11">    }</span>
<span id="cb1-12">  }</span>
<span id="cb1-13">}</span></code></pre>
      </div>
      <p>
        Indeed we get <span class="math inline">\(112\)</span> vertices, in a
        matrix with stupid row names:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">str</span>(vertices1)</span>
<span id="cb2-2"><span class="co">##  num [1:112, 1:8] -2 -2 2 2 -2 -2 2 2 -2 -2 ...</span></span>
<span id="cb2-3"><span class="co">##  - attr(*, "dimnames")=List of 2</span></span>
<span id="cb2-4"><span class="co">##   ..$ : chr [1:112] "zeros" "zeros" "zeros" "zeros" ...</span></span>
<span id="cb2-5"><span class="co">##   ..$ : NULL</span></span>
<span id="cb2-6"><span class="kw">head</span>(vertices1)</span>
<span id="cb2-7"><span class="co">##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]</span></span>
<span id="cb2-8"><span class="co">## zeros   -2   -2    0    0    0    0    0    0</span></span>
<span id="cb2-9"><span class="co">## zeros   -2    2    0    0    0    0    0    0</span></span>
<span id="cb2-10"><span class="co">## zeros    2   -2    0    0    0    0    0    0</span></span>
<span id="cb2-11"><span class="co">## zeros    2    2    0    0    0    0    0    0</span></span>
<span id="cb2-12"><span class="co">## zeros   -2    0   -2    0    0    0    0    0</span></span>
<span id="cb2-13"><span class="co">## zeros   -2    0    2    0    0    0    0    0</span></span></code></pre>
      </div>
      <p>
        The second set of vertices is obtained from
        <span class="math inline">\((\pm 1, \ldots, \pm 1)\)</span> by taking an
        even number of minus signs. As noted in the Wikipedia article, this
        amounts to say that the sum of the coordinates is a multiple of
        <span class="math inline">\(4\)</span>.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">vertices2 &lt;-<span class="st"> </span><span class="ot">NULL</span></span>
<span id="cb3-2">grd &lt;-<span class="st"> </span><span class="kw">as.matrix</span>(<span class="kw">expand.grid</span>(<span class="kw">rep</span>(<span class="kw">list</span>(<span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>)), 8L)))</span>
<span id="cb3-3"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(grd)){</span>
<span id="cb3-4">  v &lt;-<span class="st"> </span>grd[i, ]</span>
<span id="cb3-5">  <span class="cf">if</span>(<span class="kw">sum</span>(v) <span class="op">%%</span><span class="st"> </span><span class="dv">4</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb3-6">    vertices2 &lt;-<span class="st"> </span><span class="kw">rbind</span>(vertices2, v)</span>
<span id="cb3-7">  }</span>
<span id="cb3-8">}</span></code></pre>
      </div>
      <p>
        This gives <span class="math inline">\(128\)</span> vertices, again in a
        matrix with stupid row names:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">str</span>(vertices2)</span>
<span id="cb4-2"><span class="co">##  num [1:128, 1:8] -1 1 1 -1 1 -1 -1 1 1 -1 ...</span></span>
<span id="cb4-3"><span class="co">##  - attr(*, "dimnames")=List of 2</span></span>
<span id="cb4-4"><span class="co">##   ..$ : chr [1:128] "v" "v" "v" "v" ...</span></span>
<span id="cb4-5"><span class="co">##   ..$ : chr [1:8] "Var1" "Var2" "Var3" "Var4" ...</span></span>
<span id="cb4-6"><span class="kw">head</span>(vertices2)</span>
<span id="cb4-7"><span class="co">##   Var1 Var2 Var3 Var4 Var5 Var6 Var7 Var8</span></span>
<span id="cb4-8"><span class="co">## v   -1   -1   -1   -1   -1   -1   -1   -1</span></span>
<span id="cb4-9"><span class="co">## v    1    1   -1   -1   -1   -1   -1   -1</span></span>
<span id="cb4-10"><span class="co">## v    1   -1    1   -1   -1   -1   -1   -1</span></span>
<span id="cb4-11"><span class="co">## v   -1    1    1   -1   -1   -1   -1   -1</span></span>
<span id="cb4-12"><span class="co">## v    1   -1   -1    1   -1   -1   -1   -1</span></span>
<span id="cb4-13"><span class="co">## v   -1    1   -1    1   -1   -1   -1   -1</span></span></code></pre>
      </div>
      <p>
        So here is our matrix of
        <span class="math inline">\(240\)</span> vertices:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">vertices &lt;-<span class="st"> </span><span class="kw">rbind</span>(vertices1, vertices2)</span></code></pre>
      </div>
      <p>
        Well. Now, how to get the <em>edges</em> of the polytope? An edge is a
        pair of connected (adjacent) vertices, and it is better to store them as
        pairs of vertex indices (the row indices of our
        <code>vertices</code> matrix).
      </p>
      <p>
        My first attempt was to resort to my package <strong>cxhull</strong>.
        Indeed, the E8 root polytope is convex, therefore its convex hull is
        itself, and the <code>cxhull</code> function of the
        <strong>cxhull</strong> package provides the edges of the convex hull.
        Therefore, I ran:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">library</span>(cxhull)</span>
<span id="cb6-2">hull &lt;-<span class="st"> </span><span class="kw">cxhull</span>(vertices, <span class="dt">triangulate =</span> <span class="ot">FALSE</span>)</span></code></pre>
      </div>
      <p>
        What a disaster! <strong><em>Do not run this code!</em></strong> It
        totally crashed my laptop. Perhaps that can work with more RAM, I don’t
        know (I have only 8 Gb). I searched and I searched on the web, with no
        luck, I didn’t find these edges. So I decided to search another
        computational geometry library, able to get these edges. I thought of
        the C library
        <a href="https://people.inf.ethz.ch/fukudak/cdd_home/">cddlib</a>. I’m
        not a star in C but this library is wrapped in the Julia library
        <a href="https://github.com/JuliaPolyhedra/CDDLib.jl">CDDLib.jl</a>. No
        luck: this wrapper is incomplete and the vertex adjacency was not
        available in this library. Then I opened an issue on the Github repo to
        request this feature, and I looked at the documentation of the Python
        wrapper of <strong>cddlib</strong>: the
        <strong>pycddlib</strong> library. Very nice: it provides the vertex
        adjacency feature. I didn’t have the courage to program the construction
        of the vertices in Python, so I used
        <a
          href="https://laustep.github.io/stlahblog/posts/Rmatrix2HaskellList.html"
          >my old blog post</a
        >, <em>“A R matrix to a Haskell list”</em>, since it is also usable for
        Python instead of Haskell. But now let’s show how to construct the
        vertices in Python:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb7-1"><span class="im">from</span> itertools <span class="im">import</span> product, combinations</span>
<span id="cb7-2"><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb7-3"></span>
<span id="cb7-4">vertices <span class="op">=</span> []</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co"># our `vertices1` in R:</span></span>
<span id="cb7-7"><span class="cf">for</span> i, j <span class="kw">in</span> combinations(<span class="bu">range</span>(<span class="dv">8</span>), <span class="dv">2</span>):</span>
<span id="cb7-8">    <span class="cf">for</span> x, y <span class="kw">in</span> product([<span class="op">-</span><span class="dv">2</span>, <span class="dv">2</span>], repeat <span class="op">=</span> <span class="dv">2</span>):</span>
<span id="cb7-9">        v <span class="op">=</span> np.zeros(<span class="dv">8</span>)</span>
<span id="cb7-10">        v[i] <span class="op">=</span> x</span>
<span id="cb7-11">        v[j] <span class="op">=</span> y</span>
<span id="cb7-12">        vertices.append(v)</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co"># our `vertices2` in R:</span></span>
<span id="cb7-15"><span class="cf">for</span> v <span class="kw">in</span> product([<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>], repeat <span class="op">=</span> <span class="dv">8</span>):</span>
<span id="cb7-16">    <span class="cf">if</span> <span class="bu">sum</span>(v) <span class="op">%</span> <span class="dv">4</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb7-17">        vertices.append(v)</span></code></pre>
      </div>
      <p>
        Actually I’m not the author of this code (I will come back to this point
        later). I have a long experience with R and a short experience with
        Python, so for me the construction of the vertices is easier in R. But I
        have to be honest: the Python code is more elegant.
      </p>
      <p>
        Now, the edges. In fact <strong>pycddlib</strong> is simply called
        <strong>cdd</strong> in Python:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb8-1"><span class="im">import</span> cdd <span class="im">as</span> pcdd</span></code></pre>
      </div>
      <p>
        We want to do the so-called V-representation of the polytope
        (representation by the vertices), and then (I refer you to the
        documentation for this point), we have to prepend a
        <span class="math inline">\(1\)</span> to each vertex coordinates:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb9-1">vertices <span class="op">=</span> np.hstack((np.ones((<span class="dv">240</span>, <span class="dv">1</span>)), vertices))</span></code></pre>
      </div>
      <p>
        Now we’re ready for using <strong>pycddlib</strong>. Here is how I
        proceeded. I used the <code>get_input_adjacency</code> method to get the
        list of adjacent vertices for each vertex and from this list I
        constructed a two-columns matrix <code>Edges</code> to store the edges
        as pairs of vertex indices:
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb10-1"><span class="co"># make the polytope</span></span>
<span id="cb10-2">mat <span class="op">=</span> pcdd.Matrix(vertices, linear <span class="op">=</span> <span class="va">False</span>, number_type <span class="op">=</span> <span class="st">"fraction"</span>) </span>
<span id="cb10-3">mat.rep_type <span class="op">=</span> pcdd.RepType.GENERATOR</span>
<span id="cb10-4">poly <span class="op">=</span> pcdd.Polyhedron(mat)</span>
<span id="cb10-5"><span class="co"># get the list of adjacencies</span></span>
<span id="cb10-6">adjacencies <span class="op">=</span> [<span class="bu">list</span>(x) <span class="cf">for</span> x <span class="kw">in</span> poly.get_input_adjacency()]</span>
<span id="cb10-7"><span class="co"># construct the matrix of edges</span></span>
<span id="cb10-8">edges <span class="op">=</span> [<span class="va">None</span>]<span class="op">*</span><span class="dv">240</span></span>
<span id="cb10-9"><span class="cf">for</span> i, indices <span class="kw">in</span> <span class="bu">enumerate</span>(adjacencies):</span>
<span id="cb10-10">    indices <span class="op">=</span> <span class="bu">list</span>(<span class="bu">filter</span>(<span class="kw">lambda</span> x: x<span class="op">&gt;</span>i, indices))</span>
<span id="cb10-11">    l <span class="op">=</span> <span class="bu">len</span>(indices)</span>
<span id="cb10-12">    col1 <span class="op">=</span> np.full((l, <span class="dv">1</span>), i)</span>
<span id="cb10-13">    indices <span class="op">=</span> np.reshape(indices, (l, <span class="dv">1</span>))</span>
<span id="cb10-14">    edges[i] <span class="op">=</span> np.hstack((col1, indices))</span>
<span id="cb10-15">Edges <span class="op">=</span> np.vstack(<span class="bu">tuple</span>(edges))</span>
<span id="cb10-16">np.savetxt(<span class="st">"E8_edges.csv"</span>, Edges, fmt <span class="op">=</span> <span class="st">"</span><span class="sc">%d</span><span class="st">"</span>, delimiter <span class="op">=</span> <span class="st">","</span>)</span></code></pre>
      </div>
      <p>
        I saved the edges matrix in a <strong>csv</strong> file to import it in
        R (don’t forget to add <span class="math inline">\(1\)</span> to the
        indices if you do that).
      </p>
      <p>
        In the meantime, the author of the Julia library
        <strong>CDDLib.jl</strong> kindly replied to my feature request, and now
        the vertex adjacencies are available in this library.
      </p>
      <h2 id="projection-on-the-coxeter-plane">
        Projection on the Coxeter plane
      </h2>
      <p>
        That’s fine to have the vertices and the edges of a 8-dimensional
        polytope but it remains to project it in 2D or 3D if we want to
        visualize something. The most known figure of a projection of the E8
        root polytope is the one of its projection to the so-called Coxeter
        plane. No luck, I didn’t find on the web how to do this projection. I
        found another one,
        <a
          href="https://theoryofeverything.org/theToE/2016/03/16/e8-in-e6-petrie-projection/"
          >here</a
        >. The author of this article provides an orthonormal basis of a plane
        in the 8D space, and when one takes the two coordinates of the
        projections of the vertices on this plane, one gets this figure:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/E8_Petrie.png"
        />
      </p>
      <p>Not bad. Of course I did a GIF:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/E8_Petrie.gif"
        />
      </p>
      <p>
        Finally, I found the orthonormal basis of the Coxeter plane in a
        <a
          href="https://github.com/SuperJason/python/blob/96989d1681085a87a0d7f488d926a1677cd7041f/famous_math_graphics/e8.py"
          >Python script on Github</a
        >.
      </p>
      <p>
        Do you recognize the beginning of the code? The author of this script is
        also the author of the Python code I provided earlier. I was astonished:
        he doesn’t use any computational geometry library to get the edges! I
        don’t know why, but two vertices are connected by an edge if and only if
        the squared distance between these vertices is
        <span class="math inline">\(8\)</span>. So you get the edges like this
        in R:
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1">edges &lt;-<span class="st"> </span><span class="ot">NULL</span></span>
<span id="cb11-2"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(<span class="kw">nrow</span>(vertices)<span class="op">-</span>1L)){</span>
<span id="cb11-3">  v1 &lt;-<span class="st"> </span>vertices[i, ]</span>
<span id="cb11-4">  <span class="cf">for</span>(j <span class="cf">in</span> (i<span class="op">+</span>1L)<span class="op">:</span><span class="kw">nrow</span>(vertices)){</span>
<span id="cb11-5">    v2 &lt;-<span class="st"> </span>vertices[j, ]</span>
<span id="cb11-6">    <span class="cf">if</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v1<span class="op">-</span>v2)) <span class="op">==</span><span class="st"> </span><span class="dv">8</span>){</span>
<span id="cb11-7">      edges &lt;-<span class="st"> </span><span class="kw">rbind</span>(edges, <span class="kw">c</span>(i, j))</span>
<span id="cb11-8">    }</span>
<span id="cb11-9">  }</span>
<span id="cb11-10">}</span></code></pre>
      </div>
      <p>
        Also, I don’t understand the derivation of the basis of the Coxeter
        plane that is provided by this Python script. But it is easy to
        translate it in R. Here is the code, where I kept the comments of the
        Python script:
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb12-1"><span class="co"># A set of simple roots, listed by the rows of 'delta'</span></span>
<span id="cb12-2">delta &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb12-3">  <span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">-1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb12-4">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">-1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb12-5">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">-1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb12-6">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">-1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb12-7">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">-1</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb12-8">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">0</span>),</span>
<span id="cb12-9">  <span class="kw">c</span>(<span class="op">-</span>.<span class="dv">5</span>, <span class="fl">-.5</span>, <span class="fl">-.5</span>, <span class="fl">-.5</span>, <span class="fl">-.5</span>, <span class="fl">-.5</span>, <span class="fl">-.5</span>, <span class="fl">-.5</span>),</span>
<span id="cb12-10">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">-1</span>, <span class="dv">0</span>)</span>
<span id="cb12-11">)</span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="co"># Dynkin diagram of E8:</span></span>
<span id="cb12-14"><span class="co"># 1---2---3---4---5---6---7</span></span>
<span id="cb12-15"><span class="co">#                 |</span></span>
<span id="cb12-16"><span class="co">#                 8</span></span>
<span id="cb12-17"><span class="co"># where vertex i is the i-th simple root.</span></span>
<span id="cb12-18"></span>
<span id="cb12-19"><span class="co"># The Cartan matrix:</span></span>
<span id="cb12-20">Cartan &lt;-<span class="st"> </span><span class="kw">tcrossprod</span>(delta)</span>
<span id="cb12-21"></span>
<span id="cb12-22"><span class="co"># Now we split the simple roots into two disjoint sets I and J</span></span>
<span id="cb12-23"><span class="co"># such that the simple roots in each set are pairwise orthogonal.</span></span>
<span id="cb12-24"><span class="co"># It's obvious to see how to find such a partition given the</span></span>
<span id="cb12-25"><span class="co"># Dynkin graph above: I = [1, 3, 5, 7] and J = [2, 4, 6, 8],</span></span>
<span id="cb12-26"><span class="co"># since roots are not connected by an edge if and only if they are orthogonal.</span></span>
<span id="cb12-27"><span class="co"># Then a basis of the Coxeter plane is given by</span></span>
<span id="cb12-28"><span class="co"># u1 = sum (c[i] * delta[i]) for i in I,</span></span>
<span id="cb12-29"><span class="co"># u2 = sum (c[j] * delta[j]) for j in J,</span></span>
<span id="cb12-30"><span class="co"># where c is an eigenvector for the minimal</span></span>
<span id="cb12-31"><span class="co"># eigenvalue of the Cartan matrix.</span></span>
<span id="cb12-32">eig &lt;-<span class="st"> </span><span class="kw">eigen</span>(Cartan)</span>
<span id="cb12-33"></span>
<span id="cb12-34"><span class="co"># The eigenvalues returned by eigen() are in descending order</span></span>
<span id="cb12-35"><span class="co"># and the eigenvectors are listed by columns.</span></span>
<span id="cb12-36">ev &lt;-<span class="st"> </span>eig<span class="op">$</span>vectors[, 8L]</span>
<span id="cb12-37">u1 &lt;-<span class="st"> </span><span class="kw">rowSums</span>(<span class="kw">vapply</span>(<span class="kw">c</span>(1L, 3L, 5L, 7L), <span class="cf">function</span>(i){</span>
<span id="cb12-38">  ev[i] <span class="op">*</span><span class="st"> </span>delta[i, ]</span>
<span id="cb12-39">}, <span class="kw">numeric</span>(8L)))</span>
<span id="cb12-40">u2 &lt;-<span class="st"> </span><span class="kw">rowSums</span>(<span class="kw">vapply</span>(<span class="kw">c</span>(2L, 4L, 6L, 8L), <span class="cf">function</span>(i){</span>
<span id="cb12-41">  ev[i] <span class="op">*</span><span class="st"> </span>delta[i, ]</span>
<span id="cb12-42">}, <span class="kw">numeric</span>(8L)))</span>
<span id="cb12-43"></span>
<span id="cb12-44"><span class="co"># Gram-Schmidt u1, u2 </span></span>
<span id="cb12-45">u1 &lt;-<span class="st"> </span>u1 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(u1)))</span>
<span id="cb12-46">u2 &lt;-<span class="st"> </span>u2 <span class="op">-</span><span class="st"> </span><span class="kw">c</span>(<span class="kw">crossprod</span>(u1, u2)) <span class="op">*</span><span class="st"> </span>u1</span>
<span id="cb12-47">u2 &lt;-<span class="st"> </span>u2 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(u2)))</span></code></pre>
      </div>
      <p>I understand nothing, except the Gram-Schmidt step.</p>
      <p>
        But this works. Let’s project the vertices to the Coxeter plane,
        i.e. the plane with the orthonormal basis
        <span class="math inline">\((u_1, u_2)\)</span>:
      </p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb13-1"><span class="co"># projections on the Coxeter plane</span></span>
<span id="cb13-2">proj &lt;-<span class="st"> </span><span class="cf">function</span>(v){</span>
<span id="cb13-3">  <span class="kw">c</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v, u1)), <span class="kw">c</span>(<span class="kw">crossprod</span>(v, u2)))</span>
<span id="cb13-4">}</span>
<span id="cb13-5">points &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(vertices<span class="op">/</span><span class="dv">2</span>, 1L, proj))</span></code></pre>
      </div>
      <p>
        Now you can represent these 2D points and connect them with the edges.
        But if you do that with an ordinary base R plot, you will not get a
        pretty figure, because there are too many edges. So I do a SVG plot:
      </p>
      <div class="sourceCode" id="cb14">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb14-1"><span class="co"># save plot as SVG</span></span>
<span id="cb14-2"><span class="kw">svg</span>(<span class="dt">filename =</span> <span class="st">"E8_Coxeter.svg"</span>, <span class="dt">onefile =</span> <span class="ot">TRUE</span>)</span>
<span id="cb14-3">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>))</span>
<span id="cb14-4"><span class="kw">plot</span>(</span>
<span id="cb14-5">  points[<span class="op">!</span><span class="kw">duplicated</span>(points), ], <span class="dt">pch =</span> <span class="dv">19</span>, <span class="dt">cex =</span> <span class="fl">0.3</span>, <span class="dt">asp =</span> <span class="dv">1</span>, </span>
<span id="cb14-6">  <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span></span>
<span id="cb14-7">)</span>
<span id="cb14-8"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(edges)){</span>
<span id="cb14-9">  <span class="kw">lines</span>(points[edges[i, ], ], <span class="dt">lwd =</span> <span class="fl">0.1</span>)</span>
<span id="cb14-10">}</span>
<span id="cb14-11"><span class="kw">par</span>(opar)</span>
<span id="cb14-12"><span class="kw">dev.off</span>()</span></code></pre>
      </div>
      <p>
        And then I convert it to a PNG image with the help of the
        <strong>rsvg</strong> package:
      </p>
      <div class="sourceCode" id="cb15">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb15-1">rsvg<span class="op">::</span><span class="kw">rsvg_png</span>(<span class="st">"E8_Coxeter.svg"</span>, <span class="dt">file =</span> <span class="st">"E8_Coxeter.png"</span>)</span></code></pre>
      </div>
      <p>This gives this image:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/E8_Coxeter.png"
        />
      </p>
      <p>
        Rather pretty. But this lacks of colors. And of motion. Well, you see
        what I mean: I did a GIF.
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/E8_Coxeter.gif"
        />
      </p>
      <p>
        If you want to know how I did this GIF, visit
        <a href="https://gist.github.com/stla/19529d44a20bab4420bdd1a213ebcdbc"
          >my gist</a
        >.
      </p>
      <p>
        In this gist, you will also find another basis for Coxeter plane. This
        one does not resort to eigenvectors. I found it in
        <a href="https://vixra.org/pdf/1411.0130v1.pdf">this paper</a>.
      </p>
      <p>
        Consider the matrix
        <span class="math display"
          >\[ H4_{\text{fold}} = \begin{pmatrix} \varphi^2 &amp; 0 &amp; 0 &amp;
          0 &amp; 1/\varphi &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; \varphi
          &amp; 0 &amp; 0 &amp; -1 &amp; \varphi &amp; 0 \\ 0 &amp; \varphi
          &amp; 0 &amp; 1 &amp; 0 &amp; \varphi &amp; 0 &amp; -1 \\ 0 &amp; 0
          &amp; 1 &amp; \varphi &amp; 0 &amp; 0 &amp; -1 &amp; \varphi \\
          1/\varphi &amp; 0 &amp; 0 &amp; 0 &amp; \varphi^2 &amp; 0 &amp; 0
          &amp; 0 \\ 0 &amp; -1 &amp; \varphi &amp; 0 &amp; 0 &amp; 1 &amp;
          \varphi &amp; 0 \\ 0 &amp; \varphi &amp; 0 &amp; -1 &amp; 0 &amp;
          \varphi &amp; 0 &amp; 1 \\ 0 &amp; 0 &amp; -1 &amp; \varphi &amp; 0
          &amp; 0 &amp; 1 &amp; \varphi \end{pmatrix} \]</span
        >
        where <span class="math inline">\(\varphi\)</span> is the golden number,
        and consider the two vectors
        <span class="math display"
          >\[ x = \bigl(0, 2 \varphi \sin(\pi/30), 0, 1, 0, 0, 0, 0\bigr)
          \]</span
        >
        and
        <span class="math display"
          >\[ y = \bigl(2 \varphi \sin(\pi/15), 0, 2 \sin(2\pi/15), 0, 0, 0, 0,
          0\bigr) \]</span
        >
      </p>
      <p>
        Then the other basis of the Coxeter plane is given by the normalized
        columns of
        <span class="math inline"
          >\(H4_{\text{fold}}^{-1}\begin{pmatrix}x &amp; y \end{pmatrix}\)</span
        >.
      </p>
      <div class="sourceCode" id="cb16">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb16-1">phi &lt;-<span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">5</span>)) <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb16-2">H4fold &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb16-3">  <span class="kw">c</span>(phi<span class="op">^</span><span class="dv">2</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span><span class="op">/</span>phi, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb16-4">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>, phi, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">-1</span>, phi, <span class="dv">0</span>),</span>
<span id="cb16-5">  <span class="kw">c</span>(<span class="dv">0</span>, phi, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">0</span>, phi, <span class="dv">0</span>, <span class="dv">-1</span>),</span>
<span id="cb16-6">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, phi, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">-1</span>, phi),</span>
<span id="cb16-7">  <span class="kw">c</span>(<span class="dv">1</span><span class="op">/</span>phi, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, phi<span class="op">^</span><span class="dv">2</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb16-8">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">-1</span>, phi, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, phi, <span class="dv">0</span>),</span>
<span id="cb16-9">  <span class="kw">c</span>(<span class="dv">0</span>, phi, <span class="dv">0</span>, <span class="dv">-1</span>, <span class="dv">0</span>, phi, <span class="dv">0</span>, <span class="dv">1</span>),</span>
<span id="cb16-10">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">-1</span>, phi, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, phi)</span>
<span id="cb16-11">)</span>
<span id="cb16-12">x &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>phi<span class="op">*</span><span class="kw">sin</span>(pi<span class="op">/</span><span class="dv">30</span>), <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>)</span>
<span id="cb16-13">y &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">2</span><span class="op">*</span>phi<span class="op">*</span><span class="kw">sin</span>(pi<span class="op">/</span><span class="dv">15</span>), <span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">15</span>), <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>)</span>
<span id="cb16-14">XY &lt;-<span class="st"> </span><span class="kw">solve</span>(H4fold) <span class="op">%*%</span><span class="st"> </span><span class="kw">cbind</span>(x, y)</span>
<span id="cb16-15">X &lt;-<span class="st"> </span>XY[, 1L]; Y &lt;-<span class="st"> </span>XY[, 2L]</span>
<span id="cb16-16">X &lt;-<span class="st"> </span>X <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(X)))</span>
<span id="cb16-17">Y &lt;-<span class="st"> </span>Y <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(Y)))</span>
<span id="cb16-18"><span class="co"># projections on the plane</span></span>
<span id="cb16-19">proj &lt;-<span class="st"> </span><span class="cf">function</span>(v){</span>
<span id="cb16-20">  <span class="kw">c</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v, X)), <span class="kw">c</span>(<span class="kw">crossprod</span>(v, Y)))</span>
<span id="cb16-21">}</span>
<span id="cb16-22">points &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(vertices<span class="op">/</span><span class="dv">2</span>, 1L, proj))</span></code></pre>
      </div>
      <p>
        Below I show how to do a plot with colors, by assigning to each edge a
        color depending on the lengths of the two vertices of this edge.
      </p>
      <div class="sourceCode" id="cb17">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb17-1"><span class="co"># make colors ####</span></span>
<span id="cb17-2">norms2 &lt;-<span class="st"> </span><span class="kw">unique</span>(<span class="kw">round</span>(<span class="kw">apply</span>(points, 1L, crossprod), 2L))</span>
<span id="cb17-3">grd &lt;-<span class="st"> </span><span class="kw">as.matrix</span>(<span class="kw">expand.grid</span>(norms2, norms2))</span>
<span id="cb17-4">grd &lt;-<span class="st"> </span>grd[grd[, 1L] <span class="op">&lt;=</span><span class="st"> </span>grd[, 2L], ]</span>
<span id="cb17-5">pairs &lt;-<span class="st"> </span><span class="kw">apply</span>(grd, 1L, paste0, <span class="dt">collapse =</span> <span class="st">"-"</span>)</span>
<span id="cb17-6">colors &lt;-<span class="st"> </span>viridisLite<span class="op">::</span><span class="kw">cividis</span>(<span class="kw">length</span>(pairs))</span>
<span id="cb17-7">colors &lt;-<span class="st"> </span>colorspace<span class="op">::</span><span class="kw">darken</span>(colors, <span class="dt">amount =</span> <span class="fl">0.25</span>)</span>
<span id="cb17-8"><span class="kw">names</span>(colors) &lt;-<span class="st"> </span>pairs</span>
<span id="cb17-9"><span class="co"># save plot as SVG with colors</span></span>
<span id="cb17-10"><span class="kw">svg</span>(<span class="dt">filename =</span> <span class="st">"E8_Coxeter_other_basis.svg"</span>, <span class="dt">onefile =</span> <span class="ot">TRUE</span>)</span>
<span id="cb17-11">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>))</span>
<span id="cb17-12"><span class="kw">plot</span>(</span>
<span id="cb17-13">  points[<span class="op">!</span><span class="kw">duplicated</span>(points), ], <span class="dt">pch =</span> <span class="dv">19</span>, <span class="dt">cex =</span> <span class="fl">0.3</span>, <span class="dt">asp =</span> <span class="dv">1</span>, </span>
<span id="cb17-14">  <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span></span>
<span id="cb17-15">)</span>
<span id="cb17-16"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(edges)){</span>
<span id="cb17-17">  twopoints &lt;-<span class="st"> </span>points[edges[i, ], ]</span>
<span id="cb17-18">  pair &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="kw">round</span>(</span>
<span id="cb17-19">    <span class="kw">sort</span>(<span class="kw">apply</span>(twopoints, 1L, crossprod)), 2L</span>
<span id="cb17-20">  ), <span class="dt">collapse =</span> <span class="st">"-"</span>)</span>
<span id="cb17-21">  <span class="kw">lines</span>(twopoints, <span class="dt">lwd =</span> <span class="fl">0.1</span>, <span class="dt">col =</span> colors[pair])</span>
<span id="cb17-22">}</span>
<span id="cb17-23"><span class="kw">par</span>(opar)</span>
<span id="cb17-24"><span class="kw">dev.off</span>()</span>
<span id="cb17-25"><span class="co"># convert to PNG</span></span>
<span id="cb17-26">rsvg<span class="op">::</span><span class="kw">rsvg_png</span>(</span>
<span id="cb17-27">  <span class="st">"E8_Coxeter_other_basis.svg"</span>, <span class="dt">file =</span> <span class="st">"E8_Coxeter_other_basis.png"</span></span>
<span id="cb17-28">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/E8_Coxeter_other_basis.png"
        />
      </p>
      <p>
        If this post pleased you, you might also be interested in
        <a href="https://gist.github.com/stla/2ed8d9f107ce3ae311ed365e83d66dbd"
          >this gist</a
        >, which deals with the projection to a Coxeter plane of the so-called
        *600-cell° polytope. I even provide a hyperbolic version:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/H4_600-cell_hyperbolic.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 14 Mar 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/E8rootPolytope.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The modified stereographic projection</title>
      <link>https://laustep.github.io/stlahblog/posts/ModifiedStereographicProjection.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Some of my 3D animations start with a 4D object (such as a polytope) and
        I project it to the three-dimensional space with a stereographic
        projection. For example, the
        <a
          href="https://laustep.github.io/stlahblog/posts/HyperbolicGircope.html"
          >hyperbolic gircope</a
        >. For this animation, I use the ordinary stereographic projection. But
        sometimes I don’t get a nice result with the ordinary stereographic
        projection, and then I use a “modified” stereographic projection,
        defined by
        <span class="math display"
          >\[ \text{Stereo}_\gamma(x) = \frac{\arccos(x_4/r)}{{\bigl(r^\gamma -
          {|x_4|}^\gamma\bigr)}^{\frac{1}{\gamma}}} \times (x_1, x_2, x_3),
          \]</span
        >
        where <span class="math inline">\(r\)</span> is the radius of the
        centered sphere in
        <span class="math inline">\(\mathbb{R}^4\)</span> that we consider (for
        example <span class="math inline">\(r = \Vert x \Vert\)</span> for a
        polytope whose all vertices have the same norm, otherwise one can take
        the higher norm).
      </p>
      <p>
        In this post, I will show the result of this modified stereographic
        projection on some examples, with various values of
        <span class="math inline">\(\gamma\)</span>.
      </p>
      <h2 id="truncated-tesseract">Truncated tesseract</h2>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(cxhull)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co"># Stereographic-like projection ####</span></span>
<span id="cb1-4">sproj &lt;-<span class="st"> </span><span class="cf">function</span>(v, r, gamma){</span>
<span id="cb1-5">  <span class="kw">acos</span>(v[4L]<span class="op">/</span>r) <span class="op">/</span><span class="st"> </span>(r<span class="op">^</span>gamma <span class="op">-</span><span class="st"> </span><span class="kw">abs</span>(v[4L])<span class="op">^</span>gamma)<span class="op">^</span>(<span class="dv">1</span><span class="op">/</span>gamma) <span class="op">*</span><span class="st"> </span>v[1L<span class="op">:</span>3L]</span>
<span id="cb1-6">}</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co"># vertices ####</span></span>
<span id="cb1-9">sqr2p1 &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span>) <span class="op">+</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb1-10">vertices &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-11">  <span class="kw">c</span>(      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-12">  <span class="kw">c</span>(      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-13">  <span class="kw">c</span>(      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-14">  <span class="kw">c</span>(      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-15">  <span class="kw">c</span>(      <span class="dv">-1</span>,  sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-16">  <span class="kw">c</span>(      <span class="dv">-1</span>,  sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-17">  <span class="kw">c</span>(      <span class="dv">-1</span>,  sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-18">  <span class="kw">c</span>(      <span class="dv">-1</span>,  sqr2p1,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-19">  <span class="kw">c</span>(       <span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-20">  <span class="kw">c</span>(       <span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-21">  <span class="kw">c</span>(       <span class="dv">1</span>, <span class="op">-</span>sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-22">  <span class="kw">c</span>(       <span class="dv">1</span>, <span class="op">-</span>sqr2p1,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-23">  <span class="kw">c</span>(       <span class="dv">1</span>,  sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-24">  <span class="kw">c</span>(       <span class="dv">1</span>,  sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-25">  <span class="kw">c</span>(       <span class="dv">1</span>,  sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-26">  <span class="kw">c</span>(       <span class="dv">1</span>,  sqr2p1,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-27">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-28">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-29">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-30">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-31">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-32">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-33">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,       <span class="dv">1</span>,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-34">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,       <span class="dv">1</span>,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-35">  <span class="kw">c</span>(  sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-36">  <span class="kw">c</span>(  sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-37">  <span class="kw">c</span>(  sqr2p1,      <span class="dv">-1</span>,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-38">  <span class="kw">c</span>(  sqr2p1,      <span class="dv">-1</span>,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-39">  <span class="kw">c</span>(  sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-40">  <span class="kw">c</span>(  sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-41">  <span class="kw">c</span>(  sqr2p1,       <span class="dv">1</span>,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-42">  <span class="kw">c</span>(  sqr2p1,       <span class="dv">1</span>,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-43">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-44">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>,  sqr2p1 ),</span>
<span id="cb1-45">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-46">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span>,  sqr2p1 ),</span>
<span id="cb1-47">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-48">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1,      <span class="dv">-1</span>,  sqr2p1 ),</span>
<span id="cb1-49">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-50">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1,       <span class="dv">1</span>,  sqr2p1 ),</span>
<span id="cb1-51">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-52">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>,  sqr2p1 ),</span>
<span id="cb1-53">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-54">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span>,  sqr2p1 ),</span>
<span id="cb1-55">  <span class="kw">c</span>(  sqr2p1,  sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-56">  <span class="kw">c</span>(  sqr2p1,  sqr2p1,      <span class="dv">-1</span>,  sqr2p1 ),</span>
<span id="cb1-57">  <span class="kw">c</span>(  sqr2p1,  sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-58">  <span class="kw">c</span>(  sqr2p1,  sqr2p1,       <span class="dv">1</span>,  sqr2p1 ),</span>
<span id="cb1-59">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-60">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-61">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-62">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-63">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-64">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-65">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1,  sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-66">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1,  sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-67">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-68">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-69">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-70">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-71">  <span class="kw">c</span>(  sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-72">  <span class="kw">c</span>(  sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-73">  <span class="kw">c</span>(  sqr2p1,  sqr2p1,  sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-74">  <span class="kw">c</span>(  sqr2p1,  sqr2p1,  sqr2p1,       <span class="dv">1</span> )</span>
<span id="cb1-75">)</span>
<span id="cb1-76"></span>
<span id="cb1-77"><span class="co"># convex hull (= truncated tesseract, cause it is convex) ####</span></span>
<span id="cb1-78">hull &lt;-<span class="st"> </span><span class="kw">cxhull</span>(vertices)</span>
<span id="cb1-79">edges  &lt;-<span class="st"> </span>hull[[<span class="st">"edges"</span>]]</span>
<span id="cb1-80">ridges &lt;-<span class="st"> </span>hull[[<span class="st">"ridges"</span>]]</span>
<span id="cb1-81"></span>
<span id="cb1-82"><span class="co"># triangles (of the tetrahedra in the corners) ####</span></span>
<span id="cb1-83">ridgeSizes &lt;-<span class="st"> </span><span class="kw">vapply</span>(ridges, <span class="cf">function</span>(ridge){</span>
<span id="cb1-84">  <span class="kw">length</span>(ridge[[<span class="st">"vertices"</span>]])</span>
<span id="cb1-85">}, <span class="kw">integer</span>(1L))</span>
<span id="cb1-86">triangles &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">vapply</span>(</span>
<span id="cb1-87">  ridges[ridgeSizes <span class="op">==</span><span class="st"> </span>3L], </span>
<span id="cb1-88">  <span class="cf">function</span>(ridge) ridge[[<span class="st">"vertices"</span>]],</span>
<span id="cb1-89">  <span class="kw">integer</span>(3L)</span>
<span id="cb1-90">))</span>
<span id="cb1-91"></span>
<span id="cb1-92"><span class="co"># projected vertices ####</span></span>
<span id="cb1-93"><span class="co">#   we also normalize them so that the higher norm is 1</span></span>
<span id="cb1-94">r &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="dv">3</span><span class="op">*</span>sqr2p1<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb1-95">verts3D &lt;-<span class="st"> </span><span class="cf">function</span>(gamma){</span>
<span id="cb1-96">  verts &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(vertices, 1L, <span class="cf">function</span>(v) <span class="kw">sproj</span>(v, r, gamma)))</span>
<span id="cb1-97">  verts <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">max</span>(<span class="kw">apply</span>(verts, 1L, crossprod)))</span>
<span id="cb1-98">}</span></code></pre>
      </div>
      <p>
        Below is the code for the animation (<span class="math inline"
          >\(\gamma\)</span
        >
        varies from <span class="math inline">\(1.5\)</span> to
        <span class="math inline">\(2.5\)</span>). I use
        <a href="https://laustep.github.io/stlahblog/posts/gifskiBash.html"
          >my ‘gifski’ batch command</a
        >
        to make the GIF.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(rgl)</span>
<span id="cb2-2">gamma_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="fl">1.5</span>, <span class="fl">2.5</span>, <span class="dt">by =</span> <span class="fl">0.025</span>)</span>
<span id="cb2-3"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">100</span>, <span class="dv">100</span>, <span class="dv">612</span>, <span class="dv">612</span>))</span>
<span id="cb2-4"><span class="kw">bg3d</span>(<span class="st">"#363940"</span>)</span>
<span id="cb2-5"><span class="kw">view3d</span>(<span class="dv">15</span>, <span class="dv">25</span>, <span class="dt">zoom =</span> <span class="fl">0.9</span>)</span>
<span id="cb2-6"><span class="cf">for</span>(j <span class="cf">in</span> <span class="kw">seq_along</span>(gamma_)){</span>
<span id="cb2-7">  points &lt;-<span class="st"> </span><span class="kw">verts3D</span>(gamma_[j])</span>
<span id="cb2-8">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(edges)){</span>
<span id="cb2-9">    edge &lt;-<span class="st"> </span>edges[i, ]</span>
<span id="cb2-10">    <span class="kw">shade3d</span>(<span class="kw">cylinder3d</span>(</span>
<span id="cb2-11">      <span class="kw">rbind</span>(</span>
<span id="cb2-12">        points[edge[1L], ], </span>
<span id="cb2-13">        points[edge[2L], ]</span>
<span id="cb2-14">      ), </span>
<span id="cb2-15">      <span class="dt">radius =</span> <span class="fl">0.015</span>, <span class="dt">sides =</span> <span class="dv">90</span></span>
<span id="cb2-16">    ), <span class="dt">color =</span> <span class="st">"gold"</span>)</span>
<span id="cb2-17">  }</span>
<span id="cb2-18">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(triangles)){</span>
<span id="cb2-19">    triangle &lt;-<span class="st"> </span>triangles[i, ]</span>
<span id="cb2-20">    <span class="kw">triangles3d</span>(</span>
<span id="cb2-21">      <span class="kw">rbind</span>(</span>
<span id="cb2-22">        points[triangle[1L], ],</span>
<span id="cb2-23">        points[triangle[2L], ],</span>
<span id="cb2-24">        points[triangle[3L], ]</span>
<span id="cb2-25">      ),</span>
<span id="cb2-26">      <span class="dt">color =</span> <span class="st">"red"</span>, <span class="dt">alpha =</span> <span class="fl">0.4</span></span>
<span id="cb2-27">    )</span>
<span id="cb2-28">  }</span>
<span id="cb2-29">  <span class="kw">spheres3d</span>(points, <span class="dt">radius =</span> <span class="fl">0.025</span>, <span class="dt">color =</span> <span class="st">"orange"</span>)</span>
<span id="cb2-30">  <span class="kw">rgl.snapshot</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, j))</span>
<span id="cb2-31">  <span class="kw">clear3d</span>()</span>
<span id="cb2-32">}</span>
<span id="cb2-33"></span>
<span id="cb2-34">command &lt;-<span class="st"> </span></span>
<span id="cb2-35"><span class="st">  "gifski --frames=pic*.png --fps=9 -b -o ModifStereoTruncTesseract.gif"</span></span>
<span id="cb2-36"><span class="kw">system</span>(command)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ModifStereoTruncatedTesseract.gif"
        />
      </p>
      <p>
        The effect of <span class="math inline">\(\gamma\)</span> is
        interesting: the interior tetrahedra become bigger when it increases
        while the exterior tetrahedra become smaller.
      </p>
      <h2 id="hopf-torus">Hopf torus</h2>
      <p>
        Now, the
        <a href="https://laustep.github.io/stlahblog/posts/HopfTorus2.html"
          >Hopf torus</a
        >. For more efficiency, I modify the <code>parametric3d</code> function
        of the <strong>misc3d</strong> package.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(rgl)</span>
<span id="cb3-2"><span class="kw">library</span>(misc3d)</span>
<span id="cb3-3"></span>
<span id="cb3-4">Stereo &lt;-<span class="st"> </span><span class="cf">function</span>(q, gamma){</span>
<span id="cb3-5">  <span class="kw">acos</span>(q[, 4L]) <span class="op">/</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span><span class="kw">abs</span>(q[, 4L])<span class="op">^</span>gamma)<span class="op">^</span>(<span class="dv">1</span><span class="op">/</span>gamma) <span class="op">*</span><span class="st"> </span>q[, 1L<span class="op">:</span>3L]</span>
<span id="cb3-6">}</span>
<span id="cb3-7"></span>
<span id="cb3-8">parametricMesh3d &lt;-<span class="st"> </span><span class="cf">function</span>(gamma, r1, r2, r3){</span>
<span id="cb3-9">  v1 &lt;-<span class="st"> </span><span class="kw">Stereo</span>(r1, gamma)</span>
<span id="cb3-10">  v2 &lt;-<span class="st"> </span><span class="kw">Stereo</span>(r2, gamma)</span>
<span id="cb3-11">  v3 &lt;-<span class="st"> </span><span class="kw">Stereo</span>(r3, gamma)</span>
<span id="cb3-12">  tris &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(v1, v2, v3)</span>
<span id="cb3-13">  mesh0 &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(tris)</span>
<span id="cb3-14">  <span class="kw">addNormals</span>(</span>
<span id="cb3-15">    <span class="kw">tmesh3d</span>(</span>
<span id="cb3-16">      <span class="dt">vertices =</span> mesh0<span class="op">$</span>vb,</span>
<span id="cb3-17">      <span class="dt">indices  =</span> mesh0<span class="op">$</span>ib</span>
<span id="cb3-18">    )</span>
<span id="cb3-19">  )</span>
<span id="cb3-20">}</span>
<span id="cb3-21"></span>
<span id="cb3-22">A &lt;-<span class="st"> </span><span class="fl">0.44</span></span>
<span id="cb3-23">n &lt;-<span class="st"> </span><span class="dv">3</span></span>
<span id="cb3-24">Hopf4D &lt;-<span class="st"> </span><span class="cf">function</span>(t, phi){ </span>
<span id="cb3-25">  alpha &lt;-<span class="st"> </span>pi<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>(pi<span class="op">/</span><span class="dv">2</span><span class="op">-</span>A)<span class="op">*</span><span class="kw">cos</span>(n<span class="op">*</span>t)</span>
<span id="cb3-26">  beta &lt;-<span class="st"> </span>t <span class="op">+</span><span class="st"> </span>A<span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>n<span class="op">*</span>t)</span>
<span id="cb3-27">  sin_alpha &lt;-<span class="st"> </span><span class="kw">sin</span>(alpha)</span>
<span id="cb3-28">  p1 &lt;-<span class="st"> </span>sin_alpha <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(beta)</span>
<span id="cb3-29">  p2 &lt;-<span class="st"> </span>sin_alpha <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(beta)</span>
<span id="cb3-30">  p3 &lt;-<span class="st"> </span><span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">cos</span>(alpha)</span>
<span id="cb3-31">  cos_phi &lt;-<span class="st"> </span><span class="kw">cos</span>(phi)</span>
<span id="cb3-32">  sin_phi &lt;-<span class="st"> </span><span class="kw">sin</span>(phi)</span>
<span id="cb3-33">  <span class="kw">cbind</span>(</span>
<span id="cb3-34">    cos_phi<span class="op">*</span>p3,</span>
<span id="cb3-35">    sin_phi<span class="op">*</span>p1 <span class="op">-</span><span class="st"> </span>cos_phi<span class="op">*</span>p2, </span>
<span id="cb3-36">    cos_phi<span class="op">*</span>p1 <span class="op">+</span><span class="st"> </span>sin_phi<span class="op">*</span>p2,</span>
<span id="cb3-37">    sin_phi<span class="op">*</span>p3</span>
<span id="cb3-38">  ) <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">*</span>p3)</span>
<span id="cb3-39">}</span>
<span id="cb3-40">u &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi, pi, <span class="dt">length.out =</span> <span class="dv">300</span>)</span>
<span id="cb3-41">v &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> <span class="dv">200</span>)</span>
<span id="cb3-42">tg &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">expandTriangleGrid</span>(u, v)</span>
<span id="cb3-43">h &lt;-<span class="st"> </span><span class="cf">function</span>(uv) <span class="kw">Hopf4D</span>(uv[, 1L], uv[, 2L])</span>
<span id="cb3-44">r1 &lt;-<span class="st"> </span><span class="kw">h</span>(tg<span class="op">$</span>v1); r2 &lt;-<span class="st"> </span><span class="kw">h</span>(tg<span class="op">$</span>v2); r3 &lt;-<span class="st"> </span><span class="kw">h</span>(tg<span class="op">$</span>v3)</span></code></pre>
      </div>
      <p>
        Below is the animation when
        <span class="math inline">\(\gamma\)</span> varies from
        <span class="math inline">\(0.8\)</span> to
        <span class="math inline">\(2\)</span>.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">gamma_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="fl">0.8</span>, <span class="dv">2</span>, <span class="dt">by =</span> <span class="fl">0.025</span>)</span>
<span id="cb4-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">100</span>, <span class="dv">100</span>, <span class="dv">612</span>, <span class="dv">612</span>))</span>
<span id="cb4-3"><span class="kw">bg3d</span>(<span class="st">"#363940"</span>)</span>
<span id="cb4-4"><span class="kw">view3d</span>(<span class="dv">90</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb4-5"><span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_along</span>(gamma_)){</span>
<span id="cb4-6">  mesh &lt;-<span class="st"> </span><span class="kw">parametricMesh3d</span>(<span class="dt">gamma =</span> gamma_[i], r1, r2, r3)</span>
<span id="cb4-7">  <span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"green"</span>)</span>
<span id="cb4-8">  <span class="kw">rgl.snapshot</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, i))</span>
<span id="cb4-9">  <span class="kw">clear3d</span>()</span>
<span id="cb4-10">}</span>
<span id="cb4-11"></span>
<span id="cb4-12">command &lt;-<span class="st"> </span></span>
<span id="cb4-13"><span class="st">  "gifski --frames=pic*.png --fps=9 -b -o ModifStereoHopfTorus.gif"</span></span>
<span id="cb4-14"><span class="kw">system</span>(command)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ModifStereoHopfTorus.gif"
        />
      </p>
      <p>
        So the Hopf torus becomes more compact as
        <span class="math inline">\(\gamma\)</span> increases.
      </p>
      <h2 id="stereographic-duoprism">Stereographic duoprism</h2>
      <p>
        In the post devoted to the
        <a href="https://laustep.github.io/stlahblog/posts/DuoprismStereo.html"
          >stereographic duoprism</a
        >
        I also use the ordinary stereographic projection. Let’s see what happens
        with the modified stereographic projection.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">library</span>(rgl)</span>
<span id="cb5-2"></span>
<span id="cb5-3">A &lt;-<span class="st"> </span>3L</span>
<span id="cb5-4">B &lt;-<span class="st"> </span>24L</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co"># construction of the vertices ####</span></span>
<span id="cb5-7">vertices &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="ot">NA_real_</span>, <span class="dt">dim =</span> <span class="kw">c</span>(A, B, 4L))</span>
<span id="cb5-8"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>A){</span>
<span id="cb5-9">  v1 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">cos</span>(i<span class="op">/</span>A<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi), <span class="kw">sin</span>(i<span class="op">/</span>A<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi))</span>
<span id="cb5-10">  <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>B){</span>
<span id="cb5-11">    v2 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">cos</span>(j<span class="op">/</span>B<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi), <span class="kw">sin</span>(j<span class="op">/</span>B<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi))</span>
<span id="cb5-12">    vertices[i, j, ] &lt;-<span class="st"> </span><span class="kw">c</span>(v1, v2)</span>
<span id="cb5-13">  }</span>
<span id="cb5-14">}</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="co"># construction of the edges ####</span></span>
<span id="cb5-17">edges &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="ot">NA_integer_</span>, <span class="dt">dim =</span> <span class="kw">c</span>(2L, 2L, 2L<span class="op">*</span>A<span class="op">*</span>B))</span>
<span id="cb5-18">dominates &lt;-<span class="st"> </span><span class="cf">function</span>(c1, c2){</span>
<span id="cb5-19">  c2[1L] <span class="op">&gt;</span><span class="st"> </span>c1[1L] <span class="op">||</span><span class="st"> </span>(c2[1L] <span class="op">==</span><span class="st"> </span>c1[1L] <span class="op">&amp;&amp;</span><span class="st"> </span>c2[2L] <span class="op">&gt;</span><span class="st"> </span>c1[2L])</span>
<span id="cb5-20">}</span>
<span id="cb5-21">counter &lt;-<span class="st"> </span>1L</span>
<span id="cb5-22"><span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_len</span>(A)<span class="op">-</span>1L){</span>
<span id="cb5-23">  <span class="cf">for</span>(j <span class="cf">in</span> <span class="kw">seq_len</span>(B)<span class="op">-</span>1L){</span>
<span id="cb5-24">    c1 &lt;-<span class="st"> </span><span class="kw">c</span>(i, j)</span>
<span id="cb5-25">    candidate &lt;-<span class="st"> </span><span class="kw">c</span>(i, (j<span class="op">-</span>1L) <span class="op">%%</span><span class="st"> </span>B)</span>
<span id="cb5-26">    <span class="cf">if</span>(<span class="kw">dominates</span>(c1, candidate)){</span>
<span id="cb5-27">      edges[, , counter] &lt;-<span class="st"> </span><span class="kw">cbind</span>(c1, candidate) <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-28">      counter &lt;-<span class="st"> </span>counter <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-29">    }</span>
<span id="cb5-30">    candidate &lt;-<span class="st"> </span><span class="kw">c</span>(i, (j<span class="op">+</span>1L) <span class="op">%%</span><span class="st"> </span>B)</span>
<span id="cb5-31">    <span class="cf">if</span>(<span class="kw">dominates</span>(c1, candidate)){</span>
<span id="cb5-32">      edges[, , counter] &lt;-<span class="st"> </span><span class="kw">cbind</span>(c1, candidate) <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-33">      counter &lt;-<span class="st"> </span>counter <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-34">    }</span>
<span id="cb5-35">    candidate &lt;-<span class="st"> </span><span class="kw">c</span>((i<span class="op">-</span>1L) <span class="op">%%</span><span class="st"> </span>A, j)</span>
<span id="cb5-36">    <span class="cf">if</span>(<span class="kw">dominates</span>(c1, candidate)){</span>
<span id="cb5-37">      edges[, , counter] &lt;-<span class="st"> </span><span class="kw">cbind</span>(c1, candidate) <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-38">      counter &lt;-<span class="st"> </span>counter <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-39">    }</span>
<span id="cb5-40">    candidate &lt;-<span class="st"> </span><span class="kw">c</span>((i<span class="op">+</span>1L) <span class="op">%%</span><span class="st"> </span>A, j)</span>
<span id="cb5-41">    <span class="cf">if</span>(<span class="kw">dominates</span>(c1, candidate)){</span>
<span id="cb5-42">      edges[, , counter] &lt;-<span class="st"> </span><span class="kw">cbind</span>(c1, candidate) <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-43">      counter &lt;-<span class="st"> </span>counter <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-44">    }</span>
<span id="cb5-45">  }</span>
<span id="cb5-46">}</span>
<span id="cb5-47"></span>
<span id="cb5-48"><span class="co"># stereographic-like projection</span></span>
<span id="cb5-49">stereog &lt;-<span class="st"> </span><span class="cf">function</span>(v, gamma){</span>
<span id="cb5-50">  r &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span>)</span>
<span id="cb5-51">  <span class="kw">acos</span>(v[4L]<span class="op">/</span>r) <span class="op">/</span><span class="st"> </span>(r<span class="op">^</span>gamma <span class="op">-</span><span class="st"> </span><span class="kw">abs</span>(v[4L])<span class="op">^</span>gamma)<span class="op">^</span>(<span class="dv">1</span><span class="op">/</span>gamma) <span class="op">*</span><span class="st"> </span>v[1L<span class="op">:</span>3L]</span>
<span id="cb5-52">}</span>
<span id="cb5-53"></span>
<span id="cb5-54"><span class="co"># spherical segment</span></span>
<span id="cb5-55">sphericalSegment &lt;-<span class="st"> </span><span class="cf">function</span>(P, Q, n){</span>
<span id="cb5-56">  out &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> n <span class="op">+</span><span class="st"> </span>1L, <span class="dt">ncol =</span> 4L)</span>
<span id="cb5-57">  <span class="cf">for</span>(i <span class="cf">in</span> 0L<span class="op">:</span>n){</span>
<span id="cb5-58">    pt &lt;-<span class="st"> </span>P <span class="op">+</span><span class="st"> </span>(i<span class="op">/</span>n)<span class="op">*</span>(Q<span class="op">-</span>P)</span>
<span id="cb5-59">    out[i<span class="op">+</span>1L, ] &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">/</span><span class="kw">c</span>(<span class="kw">crossprod</span>(pt))) <span class="op">*</span><span class="st"> </span>pt</span>
<span id="cb5-60">  }</span>
<span id="cb5-61">  out</span>
<span id="cb5-62">}</span>
<span id="cb5-63"></span>
<span id="cb5-64"><span class="co"># stereographic edge</span></span>
<span id="cb5-65">stereoEdge &lt;-<span class="st"> </span><span class="cf">function</span>(verts, v1, v2, gamma){</span>
<span id="cb5-66">  P &lt;-<span class="st"> </span>verts[v1[1L], v1[2L], ]</span>
<span id="cb5-67">  Q &lt;-<span class="st"> </span>verts[v2[1L], v2[2L], ]</span>
<span id="cb5-68">  PQ &lt;-<span class="st"> </span><span class="kw">sphericalSegment</span>(P, Q, 100L)</span>
<span id="cb5-69">  pq &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(PQ, 1L, stereog, <span class="dt">gamma =</span> gamma))</span>
<span id="cb5-70">  dists &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">apply</span>(pq, 1L, crossprod))</span>
<span id="cb5-71">  <span class="kw">cylinder3d</span>(pq, <span class="dt">radius =</span> dists<span class="op">/</span><span class="dv">15</span>, <span class="dt">sides =</span> <span class="dv">60</span>)</span>
<span id="cb5-72">}</span>
<span id="cb5-73"></span>
<span id="cb5-74"><span class="co"># projected vertices</span></span>
<span id="cb5-75">verts3D &lt;-<span class="st"> </span><span class="cf">function</span>(gamma){</span>
<span id="cb5-76">  <span class="kw">apply</span>(vertices, <span class="kw">c</span>(1L, 2L), stereog, <span class="dt">gamma =</span> gamma)</span>
<span id="cb5-77">}</span></code></pre>
      </div>
      <p>
        The animation for <span class="math inline">\(\gamma\)</span> varying
        from <span class="math inline">\(0.8\)</span> to
        <span class="math inline">\(2\)</span>:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1">gamma_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="fl">0.8</span>, <span class="dv">2</span>, <span class="dt">by =</span> <span class="fl">0.025</span>)</span>
<span id="cb6-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb6-3"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb6-4"><span class="kw">bg3d</span>(<span class="kw">rgb</span>(<span class="dv">54</span>, <span class="dv">57</span>, <span class="dv">64</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>))</span>
<span id="cb6-5"><span class="cf">for</span>(frame <span class="cf">in</span> <span class="kw">seq_along</span>(gamma_)){</span>
<span id="cb6-6">  gamma &lt;-<span class="st"> </span>gamma_[frame]</span>
<span id="cb6-7">  <span class="co">## plot the edges</span></span>
<span id="cb6-8">  <span class="cf">for</span>(k <span class="cf">in</span> 1L<span class="op">:</span>(2L<span class="op">*</span>A<span class="op">*</span>B)){</span>
<span id="cb6-9">    v1 &lt;-<span class="st"> </span>edges[, 1L, k]</span>
<span id="cb6-10">    v2 &lt;-<span class="st"> </span>edges[, 2L, k]</span>
<span id="cb6-11">    edge &lt;-<span class="st"> </span><span class="kw">stereoEdge</span>(vertices, v1, v2, gamma)</span>
<span id="cb6-12">    <span class="kw">shade3d</span>(edge, <span class="dt">color =</span> <span class="st">"gold"</span>)</span>
<span id="cb6-13">  }</span>
<span id="cb6-14">  <span class="co">## plot the vertices</span></span>
<span id="cb6-15">  vs &lt;-<span class="st"> </span><span class="kw">verts3D</span>(gamma)</span>
<span id="cb6-16">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>A){</span>
<span id="cb6-17">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>B){</span>
<span id="cb6-18">      v &lt;-<span class="st"> </span>vs[, i, j]</span>
<span id="cb6-19">      <span class="kw">spheres3d</span>(v, <span class="dt">radius =</span> <span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v)))<span class="op">/</span><span class="dv">10</span>, <span class="dt">color =</span> <span class="st">"gold2"</span>)</span>
<span id="cb6-20">    }</span>
<span id="cb6-21">  }</span>
<span id="cb6-22">  <span class="kw">rgl.snapshot</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, frame))</span>
<span id="cb6-23">  <span class="kw">clear3d</span>()</span>
<span id="cb6-24">}</span>
<span id="cb6-25"></span>
<span id="cb6-26">command &lt;-<span class="st"> </span></span>
<span id="cb6-27"><span class="st">  "gifski --frames=pic*.png --fps=9 -b -o ModifStereoDuoprism.gif"</span></span>
<span id="cb6-28"><span class="kw">system</span>(command)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ModifStereoDuoprism.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Tue, 01 Mar 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ModifiedStereographicProjection.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Hyperbolic gircope - using 'cxhull' and 'gyro'</title>
      <link>https://laustep.github.io/stlahblog/posts/HyperbolicGircope.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        This post is a demonstration of the <strong>cxhull</strong> and
        <strong>gyro</strong> packages. I will use these packages (and others)
        to draw an hyperbolic version of the stereographic projection of a
        convex 4D polytope, the <em>gircope</em> or
        <em>great rhombicuboctahedral prism</em>. The gircope has twenty-eight
        cells, but I will only draw the twelve cubes among them.
      </p>
      <p>
        As said in
        <a
          href="https://polytope.miraheze.org/wiki/Great_rhombicuboctahedral_prism"
          >this wiki</a
        >, the vertices of the gircope are given by all permutations of the
        first three coordinates of:
        <span class="math display"
          >\[ \left(\pm\frac{1+2\sqrt{2}}{2}, \pm\frac{1+\sqrt{2}}{2},
          \pm\frac{1}{2}, \pm\frac{1}{2}\right). \]</span
        >
      </p>
      <p>I define these vertices in R as follows:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(gyro)         <span class="co"># to use the `changesOfSign` function</span></span>
<span id="cb1-2"><span class="kw">library</span>(arrangements) <span class="co"># to use the `permutations` function</span></span>
<span id="cb1-3">x &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb1-4">  (<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span><span class="kw">sqrt</span>(<span class="dv">2</span>)) <span class="op">/</span><span class="st"> </span><span class="dv">2</span>,</span>
<span id="cb1-5">  (<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span>)) <span class="op">/</span><span class="st"> </span><span class="dv">2</span>,</span>
<span id="cb1-6">  <span class="dv">1</span><span class="op">/</span><span class="dv">2</span></span>
<span id="cb1-7">)</span>
<span id="cb1-8">vertices &lt;-<span class="st"> </span><span class="kw">changesOfSign</span>(</span>
<span id="cb1-9">  <span class="kw">cbind</span>(</span>
<span id="cb1-10">    <span class="kw">t</span>(<span class="kw">apply</span>(<span class="kw">permutations</span>(3L), 1L, <span class="cf">function</span>(perm) x[perm])), </span>
<span id="cb1-11">    <span class="dv">1</span><span class="op">/</span><span class="dv">2</span></span>
<span id="cb1-12">  )</span>
<span id="cb1-13">)</span></code></pre>
      </div>
      <p>
        Obviously, the vertices of the gircope lie on a sphere centered at the
        origin:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">apply</span>(vertices, 1L, crossprod)</span>
<span id="cb2-2"><span class="co">##  [1] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-3"><span class="co">## [10] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-4"><span class="co">## [19] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-5"><span class="co">## [28] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-6"><span class="co">## [37] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-7"><span class="co">## [46] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-8"><span class="co">## [55] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-9"><span class="co">## [64] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-10"><span class="co">## [73] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-11"><span class="co">## [82] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-12"><span class="co">## [91] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span></code></pre>
      </div>
      <p>
        We will need the value of the radius of this sphere later, for the
        stereographic projection:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">R &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(vertices[1L, ])))</span></code></pre>
      </div>
      <p>
        The gircope is convex, hence it equals its convex hull. But we have only
        its vertices so far, and we need its edges, its cells, and its ridges
        (faces of the cells). This is why we use <strong>cxhull</strong> now:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(cxhull)</span>
<span id="cb4-2">hull &lt;-<span class="st"> </span><span class="kw">cxhull</span>(vertices)</span>
<span id="cb4-3">edges &lt;-<span class="st"> </span>hull[[<span class="st">"edges"</span>]]</span>
<span id="cb4-4">cells &lt;-<span class="st"> </span>hull[[<span class="st">"facets"</span>]]</span>
<span id="cb4-5">ridges &lt;-<span class="st"> </span>hull[[<span class="st">"ridges"</span>]]</span></code></pre>
      </div>
      <p>
        A cube has eight vertices, and among the cells of the gircope, only the
        cubic ones have eight vertices. So we get all the cubic cells like this:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">cubicCells &lt;-</span>
<span id="cb5-2"><span class="st">  </span><span class="kw">Filter</span>(<span class="cf">function</span>(cell) <span class="kw">length</span>(cell[[<span class="st">"vertices"</span>]]) <span class="op">==</span><span class="st"> </span>8L, cells)</span></code></pre>
      </div>
      <p>
        No we need the faces of the cubes (squares). We can easily get the
        indices of their vertices but we have to order them. That’s what the
        <code>polygonize</code> function below does:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">polygonize &lt;-<span class="st"> </span><span class="cf">function</span>(edges){</span>
<span id="cb6-2">  nedges &lt;-<span class="st"> </span><span class="kw">nrow</span>(edges)</span>
<span id="cb6-3">  indices &lt;-<span class="st"> </span>edges[1L, ]</span>
<span id="cb6-4">  i &lt;-<span class="st"> </span>indices[2L]</span>
<span id="cb6-5">  edges &lt;-<span class="st"> </span>edges[<span class="op">-</span>1L, ]</span>
<span id="cb6-6">  <span class="cf">for</span>(. <span class="cf">in</span> 1L<span class="op">:</span>(nedges<span class="op">-</span>2L)){</span>
<span id="cb6-7">    j &lt;-<span class="st"> </span><span class="kw">which</span>(<span class="kw">apply</span>(edges, 1L, <span class="cf">function</span>(e) i <span class="op">%in%</span><span class="st"> </span>e))</span>
<span id="cb6-8">    i &lt;-<span class="st"> </span>edges[j, ][<span class="kw">which</span>(edges[j, ] <span class="op">!=</span><span class="st"> </span>i)]</span>
<span id="cb6-9">    indices &lt;-<span class="st"> </span><span class="kw">c</span>(indices, i)</span>
<span id="cb6-10">    edges &lt;-<span class="st"> </span>edges[<span class="op">-</span>j, ]</span>
<span id="cb6-11">  }</span>
<span id="cb6-12">  indices</span>
<span id="cb6-13">}</span></code></pre>
      </div>
      <p>Now we can get the indices of the vertices of the squares:</p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1">squares &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">vapply</span>(</span>
<span id="cb7-2">  <span class="kw">do.call</span>(c, <span class="kw">lapply</span>(cubicCells, <span class="st">`</span><span class="dt">[[</span><span class="st">`</span>, <span class="st">"ridges"</span>)),</span>
<span id="cb7-3">  <span class="cf">function</span>(r) <span class="kw">polygonize</span>(ridges[[r]][[<span class="st">"edges"</span>]]),</span>
<span id="cb7-4">  <span class="kw">integer</span>(4L)</span>
<span id="cb7-5">))</span></code></pre>
      </div>
      <p>
        Now, let’s project the 4D vertices to the 3D space, with a stereographic
        projection:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1">verts3D &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(vertices, 1L, <span class="cf">function</span>(v){</span>
<span id="cb8-2">  v[1L<span class="op">:</span>3L] <span class="op">/</span><span class="st"> </span>(R <span class="op">-</span><span class="st"> </span>v[4L])</span>
<span id="cb8-3">}))</span></code></pre>
      </div>
      <p>
        We are ready for plotting. We can’t directly draw hyperbolic squares
        with the <strong>gyro</strong> package. It only allows to draw
        hyperbolic triangles, with the <code>gyrotriangle</code> function. So we
        draw an hyperbolic square by splitting it into two triangles, we merge
        these two triangles with <code>Morpho::mergeMeshes</code> and we remove
        the duplicated vertices of the resulting mesh with
        <code>Rvcg::vcgClean</code>.
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1"><span class="kw">library</span>(rgl)</span>
<span id="cb9-2"><span class="kw">library</span>(Morpho) <span class="co"># to use the `mergeMeshes` function</span></span>
<span id="cb9-3"><span class="kw">library</span>(Rvcg)   <span class="co"># to use the `vcgClean` function</span></span>
<span id="cb9-4">s &lt;-<span class="st"> </span><span class="fl">0.5</span> <span class="co"># hyperbolic curvature</span></span>
<span id="cb9-5"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb9-6"><span class="kw">bg3d</span>(<span class="kw">rgb</span>(<span class="dv">54</span>, <span class="dv">57</span>, <span class="dv">64</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>))</span>
<span id="cb9-7"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(squares)){</span>
<span id="cb9-8">  square &lt;-<span class="st"> </span>squares[i, ]</span>
<span id="cb9-9">  mesh1 &lt;-<span class="st"> </span><span class="kw">gyrotriangle</span>(</span>
<span id="cb9-10">    verts3D[square[1L], ], verts3D[square[2L], ], verts3D[square[3L], ],</span>
<span id="cb9-11">    <span class="dt">s =</span> s</span>
<span id="cb9-12">  )</span>
<span id="cb9-13">  mesh2 &lt;-<span class="st"> </span><span class="kw">gyrotriangle</span>(</span>
<span id="cb9-14">    verts3D[square[1L], ], verts3D[square[3L], ], verts3D[square[4L], ],</span>
<span id="cb9-15">    <span class="dt">s =</span> s</span>
<span id="cb9-16">  )</span>
<span id="cb9-17">  mesh &lt;-<span class="st"> </span><span class="kw">vcgClean</span>(<span class="kw">mergeMeshes</span>(mesh1, mesh2), <span class="dt">sel =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">7</span>), <span class="dt">silent =</span> <span class="ot">TRUE</span>)</span>
<span id="cb9-18">  <span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"violetred"</span>)</span>
<span id="cb9-19">}</span>
<span id="cb9-20"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(edges)){</span>
<span id="cb9-21">  edge &lt;-<span class="st"> </span>edges[i, ]</span>
<span id="cb9-22">  A &lt;-<span class="st"> </span>verts3D[edge[1L], ]; B &lt;-<span class="st"> </span>verts3D[edge[2L], ]</span>
<span id="cb9-23">  tube &lt;-<span class="st"> </span><span class="kw">gyrotube</span>(A, B, <span class="dt">s =</span> s, <span class="dt">radius =</span> <span class="fl">0.025</span>)</span>
<span id="cb9-24">  <span class="kw">shade3d</span>(tube, <span class="dt">color =</span> <span class="st">"whitesmoke"</span>)</span>
<span id="cb9-25">}</span>
<span id="cb9-26"><span class="kw">spheres3d</span>(verts3D, <span class="dt">radius =</span> <span class="fl">0.03</span>, <span class="dt">color =</span> <span class="st">"whitesmoke"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicGircope.gif"
        />
      </p>
      <p>To make the animation, I used the following code.</p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1"><span class="kw">movie3d</span>(</span>
<span id="cb10-2">  <span class="kw">spin3d</span>(<span class="dt">axis =</span> <span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">0</span>), <span class="dt">rpm =</span> <span class="dv">10</span>),</span>
<span id="cb10-3">  <span class="dt">duration =</span> <span class="dv">6</span>, <span class="dt">fps =</span> <span class="dv">10</span>,</span>
<span id="cb10-4">  <span class="dt">movie =</span> <span class="st">"pic"</span>, <span class="dt">dir =</span> <span class="st">"."</span>,</span>
<span id="cb10-5">  <span class="dt">convert =</span> <span class="ot">FALSE</span>,</span>
<span id="cb10-6">  <span class="dt">startTime =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">10</span>,</span>
<span id="cb10-7">  <span class="dt">webshot =</span> <span class="ot">FALSE</span>)</span></code></pre>
      </div>
      <p>
        This code produces the files <strong>pic001.png</strong>, …
        <strong>pic060.png</strong>. Then I assembled them into a GIF with
        <a href="https://laustep.github.io/stlahblog/posts/gifskiBash.html"
          >gifski</a
        >
        (you can use <strong>ImageMagick</strong> instead).
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 28 Feb 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HyperbolicGircope.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Volume under surface from points</title>
      <link>https://laustep.github.io/stlahblog/posts/volumeUnderSurface.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <h2 id="the-problem">The problem</h2>
      <p>
        Suppose you want to get the volume under a surface but you only have
        some points on this surface. For the illustration, I will take the
        surface defined by
        <span class="math inline">\(z = \exp\bigl(-(x^2 + y^2)\bigr)\)</span> on
        the square <span class="math inline">\([-5, 5] \times [-5, 5]\)</span>.
        Then the volume we’re looking for is close to
        <span class="math inline">\(\pi\)</span> (the integral on
        <span class="math inline"
          >\([-\infty, +\infty] \times [-\infty, +\infty]\)</span
        >
        is exactly <span class="math inline">\(\pi\)</span>).
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">f &lt;-<span class="st"> </span><span class="cf">function</span>(x, y){</span>
<span id="cb1-2">  <span class="kw">exp</span>(<span class="op">-</span>(x<span class="op">*</span>x <span class="op">+</span><span class="st"> </span>y<span class="op">*</span>y))</span>
<span id="cb1-3">}</span></code></pre>
      </div>
      <p>
        Now let’s define a grid on
        <span class="math inline">\([-5, 5] \times [-5, 5]\)</span> and the
        value of <span class="math inline">\(z\)</span> for each point on this
        grid:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">length.out =</span> <span class="dv">100</span>)</span>
<span id="cb2-2">y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">length.out =</span> <span class="dv">100</span>)</span>
<span id="cb2-3">grd &lt;-<span class="st"> </span><span class="kw">transform</span>( <span class="co"># data (x_i, y_i, z_i)</span></span>
<span id="cb2-4">  <span class="kw">expand.grid</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y), <span class="dt">z =</span> <span class="kw">f</span>(x, y)</span>
<span id="cb2-5">) </span></code></pre>
      </div>
      <h2 id="elevated-delaunay-tessellation---using-deldir">
        Elevated Delaunay tessellation - using ‘deldir’
      </h2>
      <p>
        A solution consists in constructing a Delaunay tessellation of the
        surface and then to sum the volumes under the Delaunay triangles. The
        <strong>deldir</strong> package allows to construct such a Delaunay
        tessellation (which I call an <em>elevated Delaunay tessellation</em>).
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(deldir)</span>
<span id="cb3-2">del &lt;-<span class="st"> </span><span class="kw">deldir</span>( <span class="co"># Delaunay</span></span>
<span id="cb3-3">  <span class="dt">x =</span> grd[[<span class="st">"x"</span>]], <span class="dt">y =</span> grd[[<span class="st">"y"</span>]], <span class="dt">z =</span> grd[[<span class="st">"z"</span>]],</span>
<span id="cb3-4">  <span class="dt">rw =</span> <span class="kw">c</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dv">-5</span>, <span class="dv">5</span>), <span class="dt">round =</span> <span class="ot">FALSE</span></span>
<span id="cb3-5">) </span>
<span id="cb3-6">trgls &lt;-<span class="st"> </span><span class="kw">triang.list</span>(del) <span class="co"># extracts all triangles</span></span></code></pre>
      </div>
      <p>The function below calculates the volume under a triangle:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">volume_under_triangle &lt;-<span class="st"> </span><span class="cf">function</span>(trgl){</span>
<span id="cb4-2">  <span class="kw">with</span>(</span>
<span id="cb4-3">    trgl, </span>
<span id="cb4-4">    <span class="kw">sum</span>(z) <span class="op">*</span><span class="st"> </span></span>
<span id="cb4-5"><span class="st">      </span>(x[1L]<span class="op">*</span>y[2L] <span class="op">-</span><span class="st"> </span>x[2L]<span class="op">*</span>y[1L] <span class="op">+</span><span class="st"> </span>x[2L]<span class="op">*</span>y[3L] <span class="op">-</span></span>
<span id="cb4-6"><span class="st">         </span>x[3L]<span class="op">*</span>y[2L] <span class="op">+</span><span class="st"> </span>x[3L]<span class="op">*</span>y[1L] <span class="op">-</span><span class="st"> </span>x[1L]<span class="op">*</span>y[3L]) <span class="op">/</span><span class="st"> </span><span class="dv">6</span></span>
<span id="cb4-7">  )</span>
<span id="cb4-8">}</span></code></pre>
      </div>
      <p>So here is our approximation of the volume:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">volumes &lt;-<span class="st"> </span><span class="kw">vapply</span>(trgls, volume_under_triangle, <span class="kw">numeric</span>(1L))</span>
<span id="cb5-2"><span class="kw">sum</span>(volumes)</span>
<span id="cb5-3"><span class="co">## [1] 3.141592</span></span></code></pre>
      </div>
      <h2 id="using-rcgal">Using ‘RCGAL’</h2>
      <p>
        If you ran the above code, you noticed that the
        <code>deldir</code> function as well as the
        <code>triang.list</code> function are a bit slow. My package
        <a
          href="https://laustep.github.io/stlahblog/posts/SurfaceReconstruction.html"
          >RCGAL</a
        >
        (not on CRAN) can construct an elevated Delaunay tessellation, and it is
        faster.
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">library</span>(RCGAL)</span>
<span id="cb6-2">points &lt;-<span class="st"> </span><span class="kw">as.matrix</span>(grd)</span>
<span id="cb6-3">del &lt;-<span class="st"> </span><span class="kw">delaunay</span>(points, <span class="dt">elevation =</span> <span class="ot">TRUE</span>)</span></code></pre>
      </div>
      <p>You can directly get the volume:</p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1">del[[<span class="st">"volume"</span>]]</span>
<span id="cb7-2"><span class="co">## [1] 3.141593</span></span></code></pre>
      </div>
      <p>
        And you can easily plot the elevated Delaunay tessellation with the help
        of the <strong>rgl</strong> package:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1">mesh &lt;-<span class="st"> </span>del[[<span class="st">"mesh"</span>]]</span>
<span id="cb8-2"><span class="kw">library</span>(rgl)</span>
<span id="cb8-3"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">306</span>), <span class="dt">zoom =</span> <span class="fl">0.5</span>)</span>
<span id="cb8-4"><span class="kw">aspect3d</span>(<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">3</span>)</span>
<span id="cb8-5"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"limegreen"</span>)</span>
<span id="cb8-6"><span class="kw">wire3d</span>(mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/rgl_elevated_delaunay.png"
        />
      </p>
      <h2 id="update-2022-03-02-using-tessellation">
        Update 2022-03-02: using ‘tessellation’
      </h2>
      <p>
        The elevated Delaunay tessellation is now available in my package
        <a href="https://github.com/stla/tessellation">tessellation</a>. The
        command to get it is the same as the ‘RCGAL’ command and the output is
        similar.
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1">del &lt;-<span class="st"> </span>tessellation<span class="op">::</span><span class="kw">delaunay</span>(points, <span class="dt">elevation =</span> <span class="ot">TRUE</span>)</span>
<span id="cb9-2">del[[<span class="st">"volume"</span>]]</span>
<span id="cb9-3"><span class="co">## [1] 3.141593</span></span></code></pre>
      </div>
      <h2 id="update-2022-03-10-using-rcdt">Update 2022-03-10: using ‘RCDT’</h2>
      <p>
        The elevated Delaunay triangulation is now available in my package
        <a href="https://github.com/stla/RCDT">RCDT</a>.
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1">del &lt;-<span class="st"> </span>RCDT<span class="op">::</span><span class="kw">delaunay</span>(points, <span class="dt">elevation =</span> <span class="ot">TRUE</span>)</span>
<span id="cb10-2">del[[<span class="st">"volume"</span>]]</span>
<span id="cb10-3"><span class="co">## [1] 3.141593</span></span></code></pre>
      </div>
      <h2 id="interactive-plot-with-deldir">Interactive plot with ‘deldir’</h2>
      <p>
        The <strong>deldir</strong> also allows to get an interactive graphic
        from the elevated Delaunay tessellation. This requires the
        <strong>rgl</strong> package. I do it below with a less fine grid,
        otherwise the visualization is not nice (too dense):
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">3</span>, <span class="dv">3</span>, <span class="dt">length.out =</span> <span class="dv">20</span>)</span>
<span id="cb11-2">y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">3</span>, <span class="dv">3</span>, <span class="dt">length.out =</span> <span class="dv">20</span>)</span>
<span id="cb11-3">grd &lt;-<span class="st"> </span><span class="kw">transform</span>(</span>
<span id="cb11-4">  <span class="kw">expand.grid</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y), <span class="dt">z =</span> <span class="kw">f</span>(x, y)</span>
<span id="cb11-5">) </span>
<span id="cb11-6">del &lt;-<span class="st"> </span><span class="kw">deldir</span>(</span>
<span id="cb11-7">  <span class="dt">x =</span> grd[[<span class="st">"x"</span>]], <span class="dt">y =</span> grd[[<span class="st">"y"</span>]], <span class="dt">z =</span> grd[[<span class="st">"z"</span>]],</span>
<span id="cb11-8">  <span class="dt">rw =</span> <span class="kw">c</span>(<span class="op">-</span><span class="dv">3</span>, <span class="dv">3</span>, <span class="dv">-3</span>, <span class="dv">3</span>), <span class="dt">round =</span> <span class="ot">FALSE</span></span>
<span id="cb11-9">) </span></code></pre>
      </div>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb12-1"><span class="kw">library</span>(rgl)</span>
<span id="cb12-2"><span class="kw">persp3d</span>(del, <span class="dt">front =</span> <span class="st">"lines"</span>, <span class="dt">back =</span> <span class="st">"lines"</span>, <span class="dt">col =</span> <span class="st">"blue"</span>)</span>
<span id="cb12-3"><span class="kw">aspect3d</span>(<span class="dv">2</span>, <span class="dv">2</span>, <span class="dv">1</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/deldir_elevated_delaunay.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 26 Feb 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/volumeUnderSurface.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Nice DT filters</title>
      <link>https://laustep.github.io/stlahblog/posts/DTselect2Filters.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I am not a big fan of the built-in filters of <strong>DT</strong>. I
        prefer the ones below, made with the help of the JavaScript library
        <strong>select2</strong>.
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTselect2Filters.gif"
          style="width: 75%"
        />
      </p>
      <p>
        First, <a href="https://cdnjs.com/libraries/select2">download</a> the
        files <strong>select2.min.js</strong> and
        <strong>select2.min.css</strong>. Now, here is the code:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(DT)</span>
<span id="cb1-2"><span class="kw">library</span>(htmltools)</span>
<span id="cb1-3"></span>
<span id="cb1-4">dat &lt;-<span class="st"> </span>iris</span>
<span id="cb1-5"></span>
<span id="cb1-6">sketch &lt;-<span class="st"> </span>tags<span class="op">$</span><span class="kw">table</span>(</span>
<span id="cb1-7">  tags<span class="op">$</span><span class="kw">thead</span>(</span>
<span id="cb1-8">    tags<span class="op">$</span><span class="kw">tr</span>(</span>
<span id="cb1-9">      tags<span class="op">$</span><span class="kw">th</span>(), <span class="kw">lapply</span>(<span class="kw">names</span>(dat), tags<span class="op">$</span>th)</span>
<span id="cb1-10">    ),</span>
<span id="cb1-11">    tags<span class="op">$</span><span class="kw">tr</span>(</span>
<span id="cb1-12">      <span class="kw">lapply</span>(<span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(dat)), <span class="cf">function</span>(i) tags<span class="op">$</span><span class="kw">th</span>(<span class="dt">id =</span> <span class="kw">paste0</span>(<span class="st">"th"</span>, i)))</span>
<span id="cb1-13">    )</span>
<span id="cb1-14">  )</span>
<span id="cb1-15">)</span>
<span id="cb1-16"></span>
<span id="cb1-17">js &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb1-18">  <span class="st">"function(){"</span>, </span>
<span id="cb1-19">  <span class="st">"  this.api().columns().every(function(i){"</span>,</span>
<span id="cb1-20">  <span class="st">"    var column = this;"</span>,</span>
<span id="cb1-21">  <span class="st">"    var $select ="</span>,</span>
<span id="cb1-22">  <span class="st">"      $('&lt;select multiple=</span><span class="ch">\"</span><span class="st">multiple</span><span class="ch">\"</span><span class="st">&gt;' +"</span>,</span>
<span id="cb1-23">  <span class="st">"         '&lt;option value=</span><span class="ch">\"\"</span><span class="st">&gt;&lt;/option&gt;' +"</span>,</span>
<span id="cb1-24">  <span class="st">"      '&lt;/select&gt;')"</span>,</span>
<span id="cb1-25">  <span class="st">"      .appendTo($('#th'+i).empty())"</span>, </span>
<span id="cb1-26">  <span class="st">"      .on('change', function(){"</span>,</span>
<span id="cb1-27">  <span class="st">"        var vals = $('option:selected', this).map(function(idx, element){"</span>,</span>
<span id="cb1-28">  <span class="st">"          return $.fn.dataTable.util.escapeRegex($(element).val());"</span>,</span>
<span id="cb1-29">  <span class="st">"        }).toArray().join('|');"</span>,</span>
<span id="cb1-30">  <span class="st">"        column.search("</span>,</span>
<span id="cb1-31">  <span class="st">"          vals.length &gt; 0 ? '^(' + vals + ')$' : '', true, false"</span>,</span>
<span id="cb1-32">  <span class="st">"        ).draw();"</span>,</span>
<span id="cb1-33">  <span class="st">"      });"</span>,</span>
<span id="cb1-34">  <span class="st">"    var data = column.data();"</span>,</span>
<span id="cb1-35">  <span class="st">"    if(i == 0){"</span>,</span>
<span id="cb1-36">  <span class="st">"      data.each(function(d, j){"</span>,</span>
<span id="cb1-37">  <span class="st">"        $select.append('&lt;option value=</span><span class="ch">\"</span><span class="st">' + d + '</span><span class="ch">\"</span><span class="st">&gt;' + d + '&lt;/option&gt;');"</span>,</span>
<span id="cb1-38">  <span class="st">"      });"</span>,</span>
<span id="cb1-39">  <span class="st">"    }else{"</span>,</span>
<span id="cb1-40">  <span class="st">"      data.unique().sort().each(function(d, j){"</span>,</span>
<span id="cb1-41">  <span class="st">"        $select.append('&lt;option value=</span><span class="ch">\"</span><span class="st">' + d + '</span><span class="ch">\"</span><span class="st">&gt;' + d + '&lt;/option&gt;');"</span>,</span>
<span id="cb1-42">  <span class="st">"      });"</span>,</span>
<span id="cb1-43">  <span class="st">"    }"</span>,</span>
<span id="cb1-44">  <span class="st">"    $select.select2({width: '100%', closeOnSelect: false});"</span>,</span>
<span id="cb1-45">  <span class="st">"  });"</span>,</span>
<span id="cb1-46">  <span class="st">"}"</span>)</span>
<span id="cb1-47"></span>
<span id="cb1-48">htmlDep &lt;-<span class="st"> </span><span class="kw">htmlDependency</span>(</span>
<span id="cb1-49">  <span class="dt">name =</span> <span class="st">"select2"</span>, </span>
<span id="cb1-50">  <span class="dt">version =</span> <span class="st">"4.0.13"</span>, </span>
<span id="cb1-51">  <span class="dt">src =</span> <span class="st">"path/to/select2"</span>, <span class="co"># path to the folder containing the 'select2' files </span></span>
<span id="cb1-52">  <span class="dt">script =</span> <span class="st">"select2.min.js"</span>, </span>
<span id="cb1-53">  <span class="dt">stylesheet =</span> <span class="st">"select2.min.css"</span>, </span>
<span id="cb1-54">  <span class="dt">all_files =</span> <span class="ot">FALSE</span></span>
<span id="cb1-55">)</span>
<span id="cb1-56"></span>
<span id="cb1-57">dtable &lt;-<span class="st"> </span></span>
<span id="cb1-58"><span class="st">  </span><span class="kw">datatable</span>(</span>
<span id="cb1-59">    dat, </span>
<span id="cb1-60">    <span class="dt">container =</span> sketch, </span>
<span id="cb1-61">    <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb1-62">      <span class="dt">orderCellsTop =</span> <span class="ot">TRUE</span>,</span>
<span id="cb1-63">      <span class="dt">initComplete =</span> <span class="kw">JS</span>(js),</span>
<span id="cb1-64">      <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb1-65">        <span class="kw">list</span>(<span class="dt">targets =</span> <span class="st">"_all"</span>, <span class="dt">className =</span> <span class="st">"dt-center"</span>)</span>
<span id="cb1-66">      )</span>
<span id="cb1-67">    )</span>
<span id="cb1-68">  )</span>
<span id="cb1-69">dtable[[<span class="st">"dependencies"</span>]] &lt;-<span class="st"> </span><span class="kw">c</span>(dtable[[<span class="st">"dependencies"</span>]], <span class="kw">list</span>(htmlDep))</span>
<span id="cb1-70">dtable</span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 11 Feb 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/DTselect2Filters.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Gyrotriangle (aka hyperbolic triangle) with moving colors</title>
      <link>https://laustep.github.io/stlahblog/posts/gyrotriangle.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        My package <a href="https://github.com/stla/gyro">gyro</a> has been
        freshly released on CRAN. I implemented the ideas given in
        <a
          href="https://laustep.github.io/stlahblog/posts/hyperbolicPolyhedra.html"
          >this blog post</a
        >
        in this package. It has a short
        <a
          href="https://cran.r-project.org/web/packages/gyro/vignettes/getstarted.html"
          >vignette</a
        >.
      </p>
      <p>
        The <code>gyrodemos</code> function provides some examples. But none of
        them explains how I did the moving colors on this polyhedra that you can
        see on the Github repo:
      </p>
      <p>
        <img
          src="https://raw.githubusercontent.com/stla/gyro/main/inst/images/icosahedron_dynamic_colors.gif"
        />
      </p>
      <p>
        So I will explain here. In fact, this is similar to the method I
        presented
        <a
          href="https://laustep.github.io/stlahblog/posts/PyVistaDynamicCmap.html"
          >here</a
        >
        for <strong>PyVista</strong> and
        <a
          href="https://laustep.github.io/stlahblog/posts/HopfTorusDynamicColors.html"
          >here</a
        >
        for <strong>rgl</strong>.
      </p>
      <p>
        The <code>gyrotriangle</code> function of the
        <strong>gyro</strong> package has a <code>palette</code> argument, in
        which the user provides a vector of colors. Here is an example:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(gyro)</span>
<span id="cb1-2"><span class="kw">library</span>(rgl)</span>
<span id="cb1-3"></span>
<span id="cb1-4">s &lt;-<span class="st"> </span><span class="fl">0.6</span> <span class="co"># hyperbolic curvature</span></span>
<span id="cb1-5">A &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">0</span>); B &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">0</span>); C &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>)</span>
<span id="cb1-6">ABC &lt;-<span class="st"> </span><span class="kw">gyrotriangle</span>(</span>
<span id="cb1-7">  A, B, C, <span class="dt">s =</span> s,</span>
<span id="cb1-8">  <span class="dt">palette =</span> <span class="kw">hcl.colors</span>(<span class="dt">n =</span> <span class="dv">256</span>, <span class="dt">palette =</span> <span class="st">"Berlin"</span>)</span>
<span id="cb1-9">)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb1-12"><span class="kw">material3d</span>(<span class="dt">lit =</span> <span class="ot">FALSE</span>)</span>
<span id="cb1-13"><span class="kw">view3d</span>(<span class="dv">10</span>, <span class="dv">40</span>, <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb1-14"><span class="kw">shade3d</span>(ABC)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gyrotriangle.png"
        />
      </p>
      <p>
        Under the hood, the <code>gyrotriangle</code> function uses the
        <a
          href="https://www.rdocumentation.org/packages/grDevices/versions/3.6.2/topics/colorRamp"
          >colorRamp</a
        >
        with the vector of colors passed to the <code>palette</code> argument.
        This creates a function, let’s call it <code>fpalette</code>, that
        assigns a color to each number in the interval
        <span class="math inline">\([0, 1]\)</span>. Then,
        <code>gyrotriangle</code> calculates all the distances from the points
        in the mesh forming the triangle to the gyrocentroid of the triangle.
        Finally, it linearly normalizes these distances to the interval
        <span class="math inline">\([0, 1]\)</span>, and it applies the
        <code>fpalette</code> function to the normalized distances.
      </p>
      <p>
        Now, the <code>gyrotriangle</code> function has a
        <code>g</code> argument. This is the key to make the moving colors. This
        argument <code>g</code> must be a function from
        <span class="math inline">\([0, 1]\)</span> to
        <span class="math inline">\([0, 1]\)</span>, by default it is the
        <code>identity</code> function, and <code>fpalette</code> is actually
        applied to the normalized distances transformed by <code>g</code>.
      </p>
      <p>So, here is how we can do to get some moving colors:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">shift_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dt">length.out =</span> <span class="dv">61</span>)[<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb2-2"><span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_along</span>(shift_)){</span>
<span id="cb2-3">  ABC &lt;-<span class="st"> </span><span class="kw">gyrotriangle</span>(</span>
<span id="cb2-4">    A, B, C, s,</span>
<span id="cb2-5">    <span class="dt">palette =</span> <span class="kw">hcl.colors</span>(<span class="dt">n =</span> <span class="dv">256</span>, <span class="dt">palette =</span> <span class="st">"Berlin"</span>), </span>
<span id="cb2-6">    <span class="dt">g =</span> <span class="cf">function</span>(u) (<span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>pi<span class="op">*</span>(u <span class="op">-</span><span class="st"> </span>shift_[i])) <span class="op">+</span><span class="st"> </span><span class="dv">1</span>) <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb2-7">  )</span>
<span id="cb2-8">  <span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb2-9">  <span class="kw">material3d</span>(<span class="dt">lit =</span> <span class="ot">FALSE</span>)</span>
<span id="cb2-10">  <span class="kw">view3d</span>(<span class="dv">10</span>, <span class="dv">40</span>, <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb2-11">  <span class="kw">shade3d</span>(ABC)</span>
<span id="cb2-12">  <span class="kw">rgl.snapshot</span>(<span class="kw">sprintf</span>(<span class="st">"snapshot%03d"</span>, i))</span>
<span id="cb2-13">  <span class="kw">close3d</span>()</span>
<span id="cb2-14">}</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="kw">library</span>(gifski)</span>
<span id="cb2-17">pngs &lt;-<span class="st"> </span><span class="kw">list.files</span>(<span class="dt">pattern =</span> <span class="st">"^snapshot"</span>)</span>
<span id="cb2-18"><span class="kw">gifski</span>(</span>
<span id="cb2-19">  pngs,</span>
<span id="cb2-20">  <span class="dt">gif_file =</span> <span class="st">"gyrotriangle.gif"</span>,</span>
<span id="cb2-21">  <span class="dt">width =</span> <span class="dv">512</span>,</span>
<span id="cb2-22">  <span class="dt">height =</span> <span class="dv">512</span>,</span>
<span id="cb2-23">  <span class="dt">delay =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">8</span></span>
<span id="cb2-24">)</span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="kw">file.remove</span>(pngs)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gyrotriangle.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 05 Feb 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/gyrotriangle.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Some simple RStudio addins</title>
      <link>https://laustep.github.io/stlahblog/posts/rstudioAddins.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In this blog post I introduce three small
        <strong>RStudio</strong> addins I did.
      </p>
      <h2 id="bracketify">‘bracketify’</h2>
      <p>
        I prefer subsetting with the double brackets than with the dollar in R,
        because this is more readable in <strong>RStudio</strong> thanks to the
        syntax highlighting. That’s why I did
        <a href="https://github.com/stla/bracketify">bracketify</a>. This addin
        replaces all occurrences of <code>foo$bar</code> with
        <code>foo[["bar"]]</code>, either in a whole file or only in the current
        selection.
      </p>
      <p>
        <img
          src="https://raw.githubusercontent.com/stla/bracketify/main/inst/screenshots/bracketify.gif"
        />
      </p>
      <p>
        To use carefully: if you have some dollar symbols in your code which are
        not used for subsetting (e.g. in a regular expression), they can be
        transformed by <strong>bracketify</strong>.
      </p>
      <h2 id="pasteascomment">‘pasteAsComment’</h2>
      <p>
        Originally, I made
        <a href="https://github.com/stla/pasteAsComment">pasteAsComment</a> to
        paste the content of the clipboard as a comment:
      </p>
      <p>
        <img
          src="https://raw.githubusercontent.com/stla/pasteAsComment/main/inst/screenshots/pasteAsComment.gif"
          style="width: 75%"
        />
      </p>
      <p>
        I updated this package today. Now it also allows to paste the content of
        the clipboard as <strong>roxygen</strong> lines. This is particularly
        useful to write some code in the <code>@examples</code> field:
      </p>
      <p>
        <img
          src="https://raw.githubusercontent.com/stla/pasteAsComment/main/inst/screenshots/pasteAsRoxygen.gif"
          style="width: 75%"
        />
      </p>
      <h2 id="jsconsole">‘JSconsole’</h2>
      <p>
        <a href="https://github.com/stla/JSconsole">JSconsole</a> is available
        on CRAN. This addin allows to send some selected JavaScript code to the
        V8 console. This is useful when you want to test a function.
      </p>
      <p>
        <img
          src="https://raw.githubusercontent.com/stla/JSconsole/master/inst/screenshots/JSconsole.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 03 Feb 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/rstudioAddins.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Hopf torus with dynamic colors</title>
      <link>https://laustep.github.io/stlahblog/posts/HopfTorusDynamicColors.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In a
        <a
          href="https://laustep.github.io/stlahblog/posts/PyVistaDynamicCmap.html"
          >recent post</a
        >
        I explained how to decorate a surface with moving colors with the Python
        library <strong>PyVista</strong>. Here I expose this method for the R
        package <strong>rgl</strong>.
      </p>
      <p>
        I will take a Hopf torus with fives lobes for the illustration. The
        following R function is a slight modification of the
        <code>parametric3d</code> function of the
        <strong>misc3d</strong> package. It is more efficient for the Hopf torus
        parameterization and it returns a <strong>rgl</strong> object of class
        <code>mesh3d</code>.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(misc3d)</span>
<span id="cb1-2"><span class="kw">library</span>(rgl)</span>
<span id="cb1-3"></span>
<span id="cb1-4">parametricMesh3d &lt;-<span class="st"> </span><span class="cf">function</span>(</span>
<span id="cb1-5">  Fxyz, umin, umax, vmin, vmax, nu, nv </span>
<span id="cb1-6">){</span>
<span id="cb1-7">  u &lt;-<span class="st"> </span><span class="kw">seq</span>(umin, umax, <span class="dt">length.out =</span> nu)</span>
<span id="cb1-8">  v &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, vmax, <span class="dt">length.out =</span> nv)</span>
<span id="cb1-9">  tg &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">expandTriangleGrid</span>(u, v)</span>
<span id="cb1-10">  f &lt;-<span class="st"> </span><span class="cf">function</span>(uv) <span class="kw">Fxyz</span>(uv[, 1L], uv[, 2L])</span>
<span id="cb1-11">  v1 &lt;-<span class="st"> </span><span class="kw">f</span>(tg<span class="op">$</span>v1)</span>
<span id="cb1-12">  v2 &lt;-<span class="st"> </span><span class="kw">f</span>(tg<span class="op">$</span>v2)</span>
<span id="cb1-13">  v3 &lt;-<span class="st"> </span><span class="kw">f</span>(tg<span class="op">$</span>v3)</span>
<span id="cb1-14">  tris &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(v1, v2, v3)</span>
<span id="cb1-15">  mesh0 &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(tris)</span>
<span id="cb1-16">  <span class="kw">addNormals</span>(</span>
<span id="cb1-17">    <span class="kw">tmesh3d</span>(</span>
<span id="cb1-18">      <span class="dt">vertices =</span> mesh0<span class="op">$</span>vb,</span>
<span id="cb1-19">      <span class="dt">indices  =</span> mesh0<span class="op">$</span>ib</span>
<span id="cb1-20">    )</span>
<span id="cb1-21">  )</span>
<span id="cb1-22">}</span></code></pre>
      </div>
      <p>The R function below is the parameterization of the Hopf torus.</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">HTxyz &lt;-<span class="st"> </span><span class="cf">function</span>(u, v, <span class="dt">nlobes =</span> <span class="dv">5</span>, <span class="dt">A =</span> <span class="fl">0.38</span>){</span>
<span id="cb2-2">  C &lt;-<span class="st"> </span>pi<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>(pi<span class="op">/</span><span class="dv">2</span><span class="op">-</span>A)<span class="op">*</span><span class="kw">cos</span>(u<span class="op">*</span>nlobes)</span>
<span id="cb2-3">  sinC &lt;-<span class="st"> </span><span class="kw">sin</span>(C)</span>
<span id="cb2-4">  D &lt;-<span class="st"> </span>u <span class="op">+</span><span class="st"> </span>A<span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>u<span class="op">*</span>nlobes)</span>
<span id="cb2-5">  p1 &lt;-<span class="st"> </span><span class="kw">cos</span>(C) <span class="op">+</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb2-6">  p2 &lt;-<span class="st"> </span>sinC <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(D)</span>
<span id="cb2-7">  p3 &lt;-<span class="st"> </span>sinC <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(D)</span>
<span id="cb2-8">  cos_v &lt;-<span class="st"> </span><span class="kw">cos</span>(v)</span>
<span id="cb2-9">  sin_v &lt;-<span class="st"> </span><span class="kw">sin</span>(v)</span>
<span id="cb2-10">  x1 &lt;-<span class="st"> </span>cos_v<span class="op">*</span>p3 <span class="op">+</span><span class="st"> </span>sin_v<span class="op">*</span>p2</span>
<span id="cb2-11">  x2 &lt;-<span class="st"> </span>cos_v<span class="op">*</span>p2 <span class="op">-</span><span class="st"> </span>sin_v<span class="op">*</span>p3</span>
<span id="cb2-12">  x3 &lt;-<span class="st"> </span>sin_v <span class="op">*</span><span class="st"> </span>p1</span>
<span id="cb2-13">  xden &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">*</span>p1) <span class="op">-</span><span class="st"> </span>cos_v<span class="op">*</span>p1</span>
<span id="cb2-14">  <span class="kw">cbind</span>(x1<span class="op">/</span>xden, x2<span class="op">/</span>xden, x3<span class="op">/</span>xden)</span>
<span id="cb2-15">}</span></code></pre>
      </div>
      <p>Let’s make the Hopf torus mesh now.</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">mesh &lt;-<span class="st"> </span><span class="kw">parametricMesh3d</span>(</span>
<span id="cb3-2">  HTxyz, <span class="dt">umin =</span> <span class="dv">0</span>, <span class="dt">umax =</span> <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">vmin =</span> <span class="op">-</span>pi, <span class="dt">vmax =</span> pi, <span class="dt">nu =</span> <span class="dv">600</span>, <span class="dt">nv =</span> <span class="dv">400</span></span>
<span id="cb3-3">)</span></code></pre>
      </div>
      <p>
        We will assign a color to each point on the surface, according to the
        distance from the point to the origin. We calculate these distances
        below, and we linearly map them to the interval
        <span class="math inline">\([0, 2\pi]\)</span>.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">d &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">apply</span>(mesh<span class="op">$</span>vb[<span class="op">-</span>4L, ], 2L, crossprod))</span>
<span id="cb4-2">d &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span>pi <span class="op">*</span><span class="st"> </span>(d <span class="op">-</span><span class="st"> </span><span class="kw">min</span>(d)) <span class="op">/</span><span class="st"> </span><span class="kw">diff</span>(<span class="kw">range</span>(d))</span></code></pre>
      </div>
      <p>
        Now we introduce a color palette function. The
        <strong>trekcolors</strong> package has nice color palettes. I’m taking
        the <code>dominion</code> palette.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">library</span>(trekcolors)</span>
<span id="cb5-2">fpalette &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(</span>
<span id="cb5-3">  <span class="kw">trek_pal</span>(<span class="st">"dominion"</span>), <span class="dt">bias =</span> <span class="fl">0.6</span>, <span class="dt">interpolate =</span> <span class="st">"spline"</span></span>
<span id="cb5-4">)</span></code></pre>
      </div>
      <p>
        This function <code>fpalette</code> assign a color, given by its RGB
        values, to each number between
        <span class="math inline">\(0\)</span> and
        <span class="math inline">\(1\)</span>. As in Python, we will calculate
        <span class="math inline">\(\sin(d -t)\)</span> to move the colors, with
        <span class="math inline">\(t\)</span> varying from
        <span class="math inline">\(0\)</span> to
        <span class="math inline">\(2\pi\)</span>. The sine function takes its
        values in <span class="math inline">\([-1, 1]\)</span> so we will map
        this interval to <span class="math inline">\([0,1]\)</span> with the
        affine function
        <span class="math inline">\(x \mapsto \frac{x+1}{2}\)</span> in order to
        apply the <code>fpalette</code> function.
      </p>
      <p>
        We will also rotate the Hopf torus around the
        <span class="math inline">\(z\)</span>-axis. By the symmetry of the Hopf
        torus, it suffices to make the rotation with an angle varying from
        <span class="math inline">\(0\)</span> to
        <span class="math inline">\(2\pi/5\)</span>.
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> <span class="dv">73</span>)[<span class="op">-</span>1L]</span>
<span id="cb6-2">angle_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">5</span>, <span class="dt">length.out =</span> <span class="dv">73</span>)[<span class="op">-</span>1L]</span>
<span id="cb6-3"><span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_along</span>(t_)){</span>
<span id="cb6-4">  RGB &lt;-<span class="st"> </span><span class="kw">fpalette</span>( (<span class="kw">sin</span>(d<span class="op">-</span>t_[i])<span class="op">+</span><span class="dv">1</span>)<span class="op">/</span><span class="dv">2</span> )</span>
<span id="cb6-5">  mesh[[<span class="st">"material"</span>]] &lt;-<span class="st"> </span></span>
<span id="cb6-6"><span class="st">    </span><span class="kw">list</span>(<span class="dt">color =</span> <span class="kw">rgb</span>(RGB[, 1L], RGB[, 2L], RGB[, 3L], <span class="dt">maxColorValue =</span> <span class="dv">255</span>))</span>
<span id="cb6-7">  rmesh &lt;-<span class="st"> </span><span class="kw">rotate3d</span>(mesh, angle_[i], <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>)</span>
<span id="cb6-8">  <span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb6-9">  <span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.55</span>)</span>
<span id="cb6-10">  <span class="kw">spheres3d</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dt">radius =</span> <span class="dv">11</span>, <span class="dt">color =</span> <span class="st">"white"</span>, <span class="dt">alpha =</span> <span class="dv">0</span>) <span class="co"># to fix the view</span></span>
<span id="cb6-11">  <span class="kw">shade3d</span>(rmesh)</span>
<span id="cb6-12">  <span class="kw">rgl.snapshot</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, i))</span>
<span id="cb6-13">  <span class="kw">close3d</span>()</span>
<span id="cb6-14">}</span></code></pre>
      </div>
      <p>
        This code generates a series of <code>png</code> files
        <code>pic001.png</code>, …, <code>pic072.png</code>. Using
        <strong>ImageMagick</strong> or <strong>gifski</strong>, we obtain this
        <code>gif</code> animation from these files:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HTdominion.gif"
        />
      </p>
      <p>
        Very well. But these are not my favorite colors. And I prefer the Hopf
        torus with three lobes. Below it is, decorated with the
        <code>klingon</code> color palette of <strong>trekcolors</strong>; I
        prefer this one.
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HTklingon2.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 29 Jan 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HopfTorusDynamicColors.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>'gifski' as a bash command using R</title>
      <link>https://laustep.github.io/stlahblog/posts/gifskiBash.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        The <a href="https://gif.ski/">gifski</a> command-line utility is a
        great tool to make a GIF animation from a series of
        <code>png</code> files. At my work I’m using a laptop with Windows 10
        and I don’t have admin rights. I don’t know how to install
        <strong>gifski</strong> on this laptop.
      </p>
      <p>
        But <strong>gifski</strong> is also the name of a R package which wraps
        the <strong>gifski</strong> command-line utility, and this package can
        be installed without difficulty. So I used this package and the
        <strong>optparse</strong> package to make my own bash command
        <strong>gifski</strong>, which is more convenient than the package.
      </p>
      <p>Here is the script:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">suppressPackageStartupMessages</span>(<span class="kw">library</span>(<span class="st">"optparse"</span>))</span>
<span id="cb1-2"><span class="kw">suppressPackageStartupMessages</span>(<span class="kw">library</span>(<span class="st">"gifski"</span>))</span>
<span id="cb1-3"></span>
<span id="cb1-4">option_list &lt;-<span class="st"> </span><span class="kw">list</span>( </span>
<span id="cb1-5">  <span class="kw">make_option</span>(</span>
<span id="cb1-6">    <span class="st">"--frames"</span>, <span class="dt">type =</span> <span class="st">"character"</span>, </span>
<span id="cb1-7">    <span class="dt">help =</span> <span class="st">"png files given by a glob (e.g. pic*.png)"</span></span>
<span id="cb1-8">  ),</span>
<span id="cb1-9">  <span class="kw">make_option</span>(</span>
<span id="cb1-10">    <span class="st">"--fps"</span>, <span class="dt">type =</span> <span class="st">"integer"</span>, <span class="dt">default =</span> 20L,</span>
<span id="cb1-11">    <span class="dt">help =</span> <span class="st">"frames per second (default 20)"</span></span>
<span id="cb1-12">  ),</span>
<span id="cb1-13">  <span class="kw">make_option</span>(</span>
<span id="cb1-14">    <span class="kw">c</span>(<span class="st">"-l"</span>, <span class="st">"--loop"</span>), <span class="dt">type =</span> <span class="st">"integer"</span>, <span class="dt">default =</span> 0L, </span>
<span id="cb1-15">    <span class="dt">help =</span> <span class="st">"number of loops, 0 for infinite (the default)"</span>,</span>
<span id="cb1-16">    <span class="dt">metavar =</span> <span class="st">"number"</span></span>
<span id="cb1-17">  ),</span>
<span id="cb1-18">  <span class="kw">make_option</span>(</span>
<span id="cb1-19">    <span class="kw">c</span>(<span class="st">"-s"</span>, <span class="st">"--size"</span>), <span class="dt">type =</span> <span class="st">"character"</span>, <span class="dt">default =</span> <span class="st">"512x512"</span>, </span>
<span id="cb1-20">    <span class="dt">help =</span> <span class="kw">paste0</span>(</span>
<span id="cb1-21">      <span class="st">"size of the gif given in the form WxH where W is the width in pixels "</span>, </span>
<span id="cb1-22">      <span class="st">"and H is the height in pixels (default 512x512)"</span></span>
<span id="cb1-23">    ),</span>
<span id="cb1-24">    <span class="dt">metavar =</span> <span class="st">"WxH"</span></span>
<span id="cb1-25">  ),</span>
<span id="cb1-26">  <span class="kw">make_option</span>(</span>
<span id="cb1-27">    <span class="kw">c</span>(<span class="st">"-b"</span>, <span class="st">"--backward"</span>), <span class="dt">action =</span> <span class="st">"store_true"</span>, <span class="dt">default =</span> <span class="ot">FALSE</span>, </span>
<span id="cb1-28">    <span class="dt">help =</span> <span class="st">"loop forward and backward"</span></span>
<span id="cb1-29">  ),</span>
<span id="cb1-30">  <span class="kw">make_option</span>(</span>
<span id="cb1-31">    <span class="kw">c</span>(<span class="st">"-o"</span>, <span class="st">"--output"</span>), <span class="dt">type =</span> <span class="st">"character"</span>, <span class="dt">default =</span> <span class="st">"animation.gif"</span>, </span>
<span id="cb1-32">    <span class="dt">help =</span> <span class="st">"output gif file (default animation.gif)"</span>, </span>
<span id="cb1-33">    <span class="dt">metavar =</span> <span class="st">"output.gif"</span></span>
<span id="cb1-34">  )</span>
<span id="cb1-35">)</span>
<span id="cb1-36"></span>
<span id="cb1-37">opt &lt;-<span class="st"> </span><span class="kw">parse_args</span>(<span class="kw">OptionParser</span>(</span>
<span id="cb1-38">  <span class="dt">option_list =</span> option_list, <span class="dt">prog =</span> <span class="st">"gifski"</span></span>
<span id="cb1-39">))</span>
<span id="cb1-40"></span>
<span id="cb1-41"><span class="co"># check options are correct</span></span>
<span id="cb1-42">size_ok &lt;-<span class="st"> </span><span class="kw">grepl</span>(<span class="st">"^</span><span class="ch">\\</span><span class="st">d.*x</span><span class="ch">\\</span><span class="st">d.*$"</span>, opt<span class="op">$</span>size)</span>
<span id="cb1-43"><span class="cf">if</span>(<span class="op">!</span>size_ok)</span>
<span id="cb1-44">  <span class="kw">stop</span>(<span class="st">"Invalid 'size' option."</span>)</span>
<span id="cb1-45"><span class="cf">if</span>(opt<span class="op">$</span>fps <span class="op">&lt;=</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-46">  <span class="kw">stop</span>(<span class="st">"Invalid 'fps' option."</span>)</span>
<span id="cb1-47"><span class="cf">if</span>(opt<span class="op">$</span>loop <span class="op">&lt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-48">  <span class="kw">stop</span>(<span class="st">"Invalid 'loop' option."</span>)</span>
<span id="cb1-49">png_files &lt;-<span class="st"> </span><span class="kw">Sys.glob</span>(opt<span class="op">$</span>frames)</span>
<span id="cb1-50"><span class="cf">if</span>(<span class="kw">length</span>(png_files) <span class="op">==</span><span class="st"> </span>0L)</span>
<span id="cb1-51">  <span class="kw">stop</span>(<span class="st">"Invalid 'frames' option."</span>)</span>
<span id="cb1-52"></span>
<span id="cb1-53"><span class="co"># if the user chooses the 'backward' option we duplicate the files </span></span>
<span id="cb1-54"><span class="co">#   in a temporary directory</span></span>
<span id="cb1-55"><span class="cf">if</span>(opt<span class="op">$</span>backward){</span>
<span id="cb1-56">  npngs &lt;-<span class="st"> </span>2L <span class="op">*</span><span class="st"> </span><span class="kw">length</span>(png_files)</span>
<span id="cb1-57">  fmt &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="st">"pic%0"</span>, <span class="kw">floor</span>(<span class="kw">log10</span>(npngs) <span class="op">+</span><span class="st"> </span><span class="dv">1</span>), <span class="st">"d.png"</span>)</span>
<span id="cb1-58">  new_png_files &lt;-<span class="st"> </span><span class="kw">file.path</span>(<span class="kw">tempdir</span>(), <span class="kw">sprintf</span>(fmt, 1L<span class="op">:</span>npngs))</span>
<span id="cb1-59">  <span class="kw">file.copy</span>(<span class="kw">c</span>(png_files, <span class="kw">rev</span>(png_files)), new_png_files)</span>
<span id="cb1-60">  png_files &lt;-<span class="st"> </span>new_png_files</span>
<span id="cb1-61">}</span>
<span id="cb1-62"></span>
<span id="cb1-63"><span class="co"># get width and height</span></span>
<span id="cb1-64">wh &lt;-<span class="st"> </span><span class="kw">as.numeric</span>(<span class="kw">strsplit</span>(opt<span class="op">$</span>size, <span class="st">"x"</span>)[[1L]])</span>
<span id="cb1-65"></span>
<span id="cb1-66"><span class="co"># a function to avoid some printed messages</span></span>
<span id="cb1-67">quiet &lt;-<span class="st"> </span><span class="cf">function</span>(x) {</span>
<span id="cb1-68">  <span class="kw">sink</span>(<span class="kw">tempfile</span>())</span>
<span id="cb1-69">  <span class="kw">on.exit</span>(<span class="kw">sink</span>())</span>
<span id="cb1-70">  <span class="kw">invisible</span>(<span class="kw">force</span>(x))</span>
<span id="cb1-71">}</span>
<span id="cb1-72"></span>
<span id="cb1-73"><span class="co"># run gifski</span></span>
<span id="cb1-74"><span class="kw">quiet</span>(<span class="kw">gifski</span>(</span>
<span id="cb1-75">  <span class="dt">png_files =</span> png_files,</span>
<span id="cb1-76">  <span class="dt">gif_file =</span> opt<span class="op">$</span>output,</span>
<span id="cb1-77">  <span class="dt">width =</span> wh[1L],</span>
<span id="cb1-78">  <span class="dt">height =</span> wh[2L],</span>
<span id="cb1-79">  <span class="dt">delay =</span> <span class="dv">1</span><span class="op">/</span>opt<span class="op">$</span>fps,</span>
<span id="cb1-80">  <span class="dt">loop =</span> <span class="kw">ifelse</span>(opt<span class="op">$</span>loop <span class="op">==</span><span class="st"> </span>0L, <span class="ot">TRUE</span>, opt<span class="op">$</span>loop)</span>
<span id="cb1-81">))</span>
<span id="cb1-82"></span>
<span id="cb1-83"><span class="kw">cat</span>(<span class="st">"Output written to"</span>, opt<span class="op">$</span>output)</span></code></pre>
      </div>
      <p>
        Save this script where you want, say under the name
        <strong>gifski.R</strong>.
      </p>
      <p>
        Now we make a <code>bat</code> file, say <strong>gifski.bat</strong>,
        which will run this script:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode bash"
        ><code class="sourceCode bash"><span id="cb2-1"><span class="ex">@echo</span> off</span>
<span id="cb2-2"><span class="ex">echo.</span></span>
<span id="cb2-3"><span class="ex">C</span>:\path\to\Rscript.exe C:\path\to\gifski.R %*</span></code></pre>
      </div>
      <p>
        That’s all. Put this <code>bat</code> file in a folder available in the
        PATH environment variable and you can use the bash command
        <strong>gifski</strong>. Here is the help which is displayed by the
        command <code>gifski --help</code>:
      </p>
      <pre><code>Usage: gifski [options]


Options:
        --frames=FRAMES
                png files given by a glob (e.g. pic*.png)

        --fps=FPS
                frames per second (default 20)

        -l NUMBER, --loop=NUMBER
                number of loops, 0 for infinite (the default)

        -s WXH, --size=WXH
                size of the gif given in the form WxH where W is the width in pixels 
                and H is the height in pixels (default 512x512)

        -b, --backward
                loop forward and backward

        -o OUTPUT.GIF, --output=OUTPUT.GIF
                output gif file (default animation.gif)

        -h, --help
                Show this help message and exit</code></pre>
      <p>
        Note that there is an additional feature as compared to the original
        <strong>gifski</strong> tool: the <code>--backward</code> option, which
        allows to loop forward and backward.
      </p>
      <p>
        <img
          src="https://github.com/stla/PyVistaMiscellanous/raw/main/C8surface_metamorphosis.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 28 Jan 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/gifskiBash.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Funny 3D Voronoï diagrams</title>
      <link>https://laustep.github.io/stlahblog/posts/Voronoi_tessellation.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Four years ago I wrapped the C library <strong>Qhull</strong> in a
        <a href="https://github.com/stla/qhull">Haskell package</a>. Thanks to
        <strong>Qhull</strong>, this package can do some convex hulls and some
        Delaunay tessellations. The <strong>Qhull</strong> library also allows
        to do some Voronoï tessellations, but I never understood how that works.
        So I programmed the Voronoï tessellation in Haskell, by deriving it from
        the Delaunay tessellation.
      </p>
      <p>
        Recently, I released the R package <strong>tessellation</strong>. It
        uses the C code of my Haskell package to contruct Delaunay
        tessellations, and I programmed the Voronoï tessellation in R.
      </p>
      <p>
        I discovered something interesting with my Haskell package: take a
        classical polyhedron (e.g. a tetrahedron, or a cube), enclose it with
        two or three circles (I mean with some points on the circles), and do
        the Voronoï diagram of all these points (the vertices of the polyhedron
        and the points on the circles). Then you get a funny Voronoï diagram.
        You can see some examples on
        <a href="https://stla.github.io/tessellation/"
          >the website I made for the <strong>tessellation</strong> package</a
        >
        (thanks to the <strong>pkgdown</strong> package).
      </p>
      <p>
        Let’s make another example here. This time, I take a cuboctahedron and I
        enclose it with three circles:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(rgl) <span class="co"># provides `cuboctahedron3d()`</span></span>
<span id="cb1-2">cuboctahedron_vertices &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">cuboctahedron3d</span>()<span class="op">$</span>vb[<span class="op">-</span>4L, ])</span>
<span id="cb1-3">xi_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> <span class="dv">91</span>)[<span class="op">-</span>1L]</span>
<span id="cb1-4">R &lt;-<span class="st"> </span><span class="fl">1.5</span></span>
<span id="cb1-5">circle1 &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">vapply</span>(xi_, <span class="cf">function</span>(xi) R<span class="op">*</span><span class="kw">c</span>(<span class="kw">cos</span>(xi), <span class="kw">sin</span>(xi), <span class="dv">0</span>), <span class="kw">numeric</span>(3L)))</span>
<span id="cb1-6">circle2 &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">vapply</span>(xi_, <span class="cf">function</span>(xi) R<span class="op">*</span><span class="kw">c</span>(<span class="kw">cos</span>(xi), <span class="dv">0</span>, <span class="kw">sin</span>(xi)), <span class="kw">numeric</span>(3L)))</span>
<span id="cb1-7">circle3 &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">vapply</span>(xi_, <span class="cf">function</span>(xi) R<span class="op">*</span><span class="kw">c</span>(<span class="dv">0</span>, <span class="kw">cos</span>(xi), <span class="kw">sin</span>(xi)), <span class="kw">numeric</span>(3L)))</span>
<span id="cb1-8">enclosedCuboctahedron &lt;-<span class="st"> </span></span>
<span id="cb1-9"><span class="st">  </span><span class="kw">rbind</span>(cuboctahedron_vertices, circle1, circle2, circle3)</span></code></pre>
      </div>
      <p>Here is the picture:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb2-2"><span class="kw">view3d</span>(<span class="dv">20</span>, <span class="dt">zoom =</span> <span class="fl">0.65</span>)</span>
<span id="cb2-3"><span class="kw">shade3d</span>(<span class="kw">cuboctahedron3d</span>(), <span class="dt">color =</span> <span class="st">"darkorange"</span>, <span class="dt">shininess =</span> <span class="dv">10</span>)</span>
<span id="cb2-4"><span class="kw">wire3d</span>(<span class="kw">cuboctahedron3d</span>(), <span class="dt">color =</span> <span class="st">"darkslategray4"</span>, <span class="dt">lwd =</span> <span class="dv">4</span>)</span>
<span id="cb2-5"><span class="kw">spheres3d</span>(<span class="kw">rbind</span>(circle1, circle2, circle3), <span class="dt">radius =</span> <span class="fl">0.04</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/enclosedCuboctahedron.png"
        />
      </p>
      <p>
        Now let’s make the Voronoï diagram with the
        <strong>tessellation</strong> package:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(tessellation)</span>
<span id="cb3-2">del &lt;-<span class="st"> </span><span class="kw">delaunay</span>(enclosedCuboctahedron, <span class="dt">degenerate =</span> <span class="ot">TRUE</span>)</span>
<span id="cb3-3">v &lt;-<span class="st"> </span><span class="kw">voronoi</span>(del)</span>
<span id="cb3-4"><span class="co">## Voronoï diagram with twelve bounded cells.</span></span></code></pre>
      </div>
      <p>
        I have not checked whether the option <code>degenerate = TRUE</code> is
        necessary, but it is often necessary in order to get a correct Voronoï
        diagram, and I never understood why. Now let’s plot the Voronoï diagram:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(paletteer) <span class="co"># provides many color palettes</span></span>
<span id="cb4-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb4-3"><span class="kw">bg3d</span>(<span class="st">"palegoldenrod"</span>)</span>
<span id="cb4-4"><span class="kw">plotVoronoiDiagram</span>(v, <span class="dt">colors =</span> <span class="kw">paletteer_c</span>(<span class="st">"grDevices::Dark 3"</span>, 12L))</span></code></pre>
      </div>
      <p>I animated it. Here is the result:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/voronoi_enclosed_cuboctahedron.gif"
        />
      </p>
      <p>
        This is not my favorite one (I prefer the one derived from the cube,
        that you can see on the <strong>tessellation</strong> website), but
        nevertheless it is nice.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 19 Jan 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/Voronoi_tessellation.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Surface reconstruction with R(CGAL)</title>
      <link>https://laustep.github.io/stlahblog/posts/SurfaceReconstruction.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Eric Dunipace recently released a new package on CRAN:
        <strong>RcppCGAL</strong>. It allows to link to the C++ library
        <strong>CGAL</strong> in <strong>Rcpp</strong>. The
        <strong>CGAL</strong> library provides an extensive set of algorithms
        for computational geometry.
      </p>
      <p>
        I made a package based on <strong>RcppCGAL</strong>, which I called
        <strong>RCGAL</strong>. Unfortunately, R CMD CHECK throws some warnings
        on Windows, so the package is not acceptable by CRAN, until this issue
        will be resolved. To install it:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">remotes<span class="op">::</span><span class="kw">install_github</span>(</span>
<span id="cb1-2">  <span class="st">"stla/RCGAL"</span>, <span class="dt">dependencies =</span> <span class="ot">TRUE</span>, <span class="dt">build_opts =</span> <span class="st">"--no-multiarch"</span></span>
<span id="cb1-3">)</span></code></pre>
      </div>
      <p>
        The compilation fails on Windows for R 32-bits, that is why I set the
        option <code>build_opts = "--no-multiarch"</code>. Fortunately, CRAN
        will soon abandon the 32-bits version of R.
      </p>
      <p>
        The <strong>RCGAL</strong> package allows to do convex hulls and
        Delaunay tessellations in 2D or 3D, and provides two techniques of
        surface reconstruction: the
        <em>advanced front surface reconstruction</em> and the
        <em>Poisson surface reconstruction</em>. That is
        <strong>CGAL</strong> which does almost all the job, but the package
        also resorts to pure R programming.
      </p>
      <p>Here we will have a look at the surface reconstruction methods.</p>
      <h1 id="the-solid-möbius-strip-construction-sampling-reconstruction">
        The solid Möbius strip: construction, sampling, reconstruction
      </h1>
      <p>
        The <em>solid Möbius strip</em> is an isosurface I found in
        <a
          href="http://data.imaginary-exhibition.com/IMAGINARY-Moebiusband-Stephan-Klaus.pdf"
          >this paper</a
        >, and I like it.
      </p>
      <p>
        Here is the code I use to construct a <strong>rgl</strong> mesh of the
        solid Möbius strip:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># solid Möbius strip: f(x,y,z)=0</span></span>
<span id="cb2-2">f &lt;-<span class="st"> </span><span class="cf">function</span>(x, y, z, <span class="dt">a =</span> <span class="fl">0.4</span>, <span class="dt">b =</span> <span class="fl">0.1</span>){</span>
<span id="cb2-3">  ((x<span class="op">*</span>x<span class="op">+</span>y<span class="op">*</span>y<span class="op">+</span><span class="dv">1</span>)<span class="op">*</span>(a<span class="op">*</span>x<span class="op">*</span>x<span class="op">+</span>b<span class="op">*</span>y<span class="op">*</span>y)<span class="op">+</span>z<span class="op">*</span>z<span class="op">*</span>(b<span class="op">*</span>x<span class="op">*</span>x<span class="op">+</span>a<span class="op">*</span>y<span class="op">*</span>y)<span class="op">-</span><span class="dv">2</span><span class="op">*</span>(a<span class="op">-</span>b)<span class="op">*</span>x<span class="op">*</span>y<span class="op">*</span>z<span class="op">-</span>a<span class="op">*</span>b<span class="op">*</span>(x<span class="op">*</span>x<span class="op">+</span>y<span class="op">*</span>y))<span class="op">^</span><span class="dv">2</span> <span class="op">-</span></span>
<span id="cb2-4"><span class="st">    </span><span class="dv">4</span><span class="op">*</span>(x<span class="op">*</span>x<span class="op">+</span>y<span class="op">*</span>y)<span class="op">*</span>(a<span class="op">*</span>x<span class="op">*</span>x<span class="op">+</span>b<span class="op">*</span>y<span class="op">*</span>y<span class="op">-</span>x<span class="op">*</span>y<span class="op">*</span>z<span class="op">*</span>(a<span class="op">-</span>b))<span class="op">^</span><span class="dv">2</span></span>
<span id="cb2-5">}</span>
<span id="cb2-6"><span class="co"># run the marching cubes algorithm ####</span></span>
<span id="cb2-7"><span class="kw">library</span>(misc3d)</span>
<span id="cb2-8">nx &lt;-<span class="st"> </span><span class="dv">120</span>; ny &lt;-<span class="st"> </span><span class="dv">120</span>; nz &lt;-<span class="st"> </span><span class="dv">120</span></span>
<span id="cb2-9">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">1.4</span>, <span class="fl">1.4</span>, <span class="dt">length.out =</span> nx)</span>
<span id="cb2-10">y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">1.7</span>, <span class="fl">1.7</span>, <span class="dt">length.out =</span> ny)</span>
<span id="cb2-11">z &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">0.7</span>, <span class="fl">0.7</span>, <span class="dt">length.out =</span> nz)</span>
<span id="cb2-12">G &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z)</span>
<span id="cb2-13">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">with</span>(G, <span class="kw">f</span>(x, y, z)), <span class="dt">dim =</span> <span class="kw">c</span>(nx, ny, nz))</span>
<span id="cb2-14">surface &lt;-<span class="st"> </span><span class="kw">computeContour3d</span>(</span>
<span id="cb2-15">  voxel, <span class="dt">maxvol =</span> <span class="kw">max</span>(voxel), <span class="dt">level =</span> <span class="dv">0</span>, <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z</span>
<span id="cb2-16">)</span>
<span id="cb2-17"><span class="co"># make rgl mesh</span></span>
<span id="cb2-18"><span class="kw">library</span>(rgl)</span>
<span id="cb2-19">mesh0 &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(<span class="kw">makeTriangles</span>(surface))</span>
<span id="cb2-20">mesh &lt;-<span class="st"> </span><span class="kw">addNormals</span>(<span class="kw">tmesh3d</span>(</span>
<span id="cb2-21">  <span class="dt">vertices =</span> mesh0[[<span class="st">"vb"</span>]],</span>
<span id="cb2-22">  <span class="dt">indices =</span> mesh0[[<span class="st">"ib"</span>]]</span>
<span id="cb2-23">))</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_original.gif"
        />
      </p>
      <p>
        This mesh is quite smooth. It has
        <span class="math inline">\(73544\)</span> (non-duplicated) vertices:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">mesh</span>
<span id="cb3-2"><span class="co">##  mesh3d object with 73544 vertices, 147088 triangles.</span></span></code></pre>
      </div>
      <h2 id="sampling-the-solid-möbius-strip">
        Sampling the solid Möbius strip
      </h2>
      <p>
        Here we sample a subset of the vertices of the solid Möbius strip mesh,
        and later we will reconstruct the surface from this sample. I could
        select some vertices at random, but I prefer to use the uniform sampling
        performed by the <code>vcgUniformRemesh</code> function of the
        <strong>Rvcg</strong> package:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(Rvcg)</span>
<span id="cb4-2"><span class="co">## </span></span>
<span id="cb4-3"><span class="co">## Attaching package: 'Rvcg'</span></span>
<span id="cb4-4"><span class="co">## The following object is masked _by_ '.GlobalEnv':</span></span>
<span id="cb4-5"><span class="co">## </span></span>
<span id="cb4-6"><span class="co">##     nverts</span></span>
<span id="cb4-7">resample_mesh &lt;-<span class="st"> </span><span class="kw">vcgUniformRemesh</span>(mesh, <span class="dt">voxelSize =</span> <span class="fl">0.06</span>)</span>
<span id="cb4-8"><span class="co">##      Resampling mesh using a volume of 58 x 69 x 35</span></span>
<span id="cb4-9"><span class="co">##      VoxelSize is 0.060000, offset is 0.000000</span></span>
<span id="cb4-10"><span class="co">##      Mesh Box is 2.630913 3.263203 1.264488</span></span>
<span id="cb4-11"><span class="kw">str</span>(resample_mesh)</span>
<span id="cb4-12"><span class="co">## List of 3</span></span>
<span id="cb4-13"><span class="co">##  $ vb     : num [1:4, 1:7948] -0.302 -1.59 -0.118 1 -0.322 ...</span></span>
<span id="cb4-14"><span class="co">##  $ it     : int [1:3, 1:15896] 1 2 3 3 2 4 1 5 6 3 ...</span></span>
<span id="cb4-15"><span class="co">##  $ normals: num [1:4, 1:7948] 0.207 0.951 0.23 1 0.271 ...</span></span>
<span id="cb4-16"><span class="co">##  - attr(*, "class")= chr "mesh3d"</span></span>
<span id="cb4-17">SolidMobiusStrip_cloud &lt;-<span class="st"> </span><span class="kw">t</span>(resample_mesh[[<span class="st">"vb"</span>]][<span class="op">-</span>4L, ])</span></code></pre>
      </div>
      <p>Here is our points cloud (I mean the sample):</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb5-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb5-3"><span class="kw">spheres3d</span>(SolidMobiusStrip_cloud, <span class="dt">radius =</span> <span class="fl">0.015</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_cloud.png"
        />
      </p>
      <p>It has <span class="math inline">\(7948\)</span> points:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">nrow</span>(SolidMobiusStrip_cloud)</span>
<span id="cb6-2"><span class="co">## [1] 7948</span></span></code></pre>
      </div>
      <h2 id="advanced-front-surface-reconstruction">
        Advanced front surface reconstruction
      </h2>
      <p>
        We run the first surface reconstruction algorithm, the
        <em>advanced front surface reconstruction</em>. Is is performed by the
        <code>AFSreconstruction</code> function of the
        <strong>RCGAL</strong> package, which has no parameters arguments; it
        only takes the points cloud as argument:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(RCGAL)</span>
<span id="cb7-2">afs_mesh &lt;-<span class="st"> </span><span class="kw">AFSreconstruction</span>(SolidMobiusStrip_cloud)</span></code></pre>
      </div>
      <p>
        Let’s plot this mesh (this is a triangular <strong>rgl</strong> mesh, of
        class <code>mesh3d</code>):
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb8-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb8-3"><span class="kw">shade3d</span>(afs_mesh, <span class="dt">color =</span> <span class="st">"darkred"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_AFS.png"
        />
      </p>
      <p>
        Well it is not very smooth, but not too bad. Note that the advanced
        front surface reconstruction algorithm does not alter the vertices of
        the given points cloud, it doesn’t change them at all. So this mesh has
        <span class="math inline">\(7948\)</span> vertices:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1">afs_mesh</span>
<span id="cb9-2"><span class="co">##  mesh3d object with 7948 vertices, 15896 triangles.</span></span></code></pre>
      </div>
      <p>
        Remember that the original mesh had
        <span class="math inline">\(73544\)</span> vertices.
      </p>
      <p>
        Let’s compare with the <em>ball-pivoting</em> algorithm provided by the
        <strong>Rvcg</strong> package:
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1">bp_mesh &lt;-<span class="st"> </span><span class="kw">addNormals</span>(<span class="kw">vcgBallPivoting</span>(</span>
<span id="cb10-2">  SolidMobiusStrip_cloud, <span class="dt">angle =</span> pi<span class="op">/</span><span class="dv">6</span>, <span class="dt">clustering =</span> <span class="fl">0.01</span></span>
<span id="cb10-3">))</span></code></pre>
      </div>
      <p>
        The smoothness is similar but there is a couple of holes in the mesh:
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb11-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb11-3"><span class="kw">shade3d</span>(bp_mesh, <span class="dt">color =</span> <span class="st">"firebrick"</span>) </span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_BP.png"
        />
      </p>
      <p>
        We can get a smoother mesh and get rid of these holes by applying a mesh
        smoothing technique, such as the ones offered by the
        <code>vcgSmooth</code> function of the <strong>Rvcg</strong> package:
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb12-1">smooth_bp_mesh &lt;-<span class="st"> </span><span class="kw">vcgSmooth</span>(bp_mesh, <span class="dt">iteration =</span> <span class="dv">50</span>)</span></code></pre>
      </div>
      <p>This is indeed better:</p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb13-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb13-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb13-3"><span class="kw">shade3d</span>(smooth_bp_mesh, <span class="dt">color =</span> <span class="st">"firebrick1"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_BP_smooth.png"
        />
      </p>
      <p>
        The smooth mesh still has
        <span class="math inline">\(7948\)</span> vertices:
      </p>
      <div class="sourceCode" id="cb14">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb14-1">smooth_bp_mesh</span>
<span id="cb14-2"><span class="co">##  mesh3d object with 7948 vertices, 15822 triangles.</span></span></code></pre>
      </div>
      <p>
        Of course we could apply <code>vcgSmooth</code> to our
        <code>afs_mesh</code> as well.
      </p>
      <h2 id="poisson-reconstruction-of-the-solid-möbius-strip">
        Poisson reconstruction of the solid Möbius strip
      </h2>
      <p>
        Now let’s try the <em>Poisson surface reconstruction</em>, available in
        <strong>RCGAL</strong>.
      </p>
      <div class="sourceCode" id="cb15">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb15-1">psr_mesh &lt;-<span class="st"> </span><span class="kw">PoissonReconstruction</span>(SolidMobiusStrip_cloud)</span>
<span id="cb15-2"><span class="co">## Poisson reconstruction using average spacing: 0.04682.</span></span></code></pre>
      </div>
      <div class="sourceCode" id="cb16">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb16-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb16-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb16-3"><span class="kw">shade3d</span>(psr_mesh, <span class="dt">color =</span> <span class="st">"orangered"</span>)</span>
<span id="cb16-4"><span class="kw">wire3d</span>(psr_mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_Poisson_default.png"
        />
      </p>
      <p>
        Clearly, that’s not smooth! But wait, there are only
        <span class="math inline">\(604\)</span> vertices in this mesh:
      </p>
      <div class="sourceCode" id="cb17">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb17-1">psr_mesh</span>
<span id="cb17-2"><span class="co">##  mesh3d object with 604 vertices, 1208 triangles.</span></span></code></pre>
      </div>
      <p>
        The Poisson reconstruction algorithm takes some parameters as input, and
        we can reduce the <code>spacing</code> parameter to get a more precise
        mesh, at the cost of a higher computation time:
      </p>
      <div class="sourceCode" id="cb18">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb18-1">psr_mesh &lt;-<span class="st"> </span><span class="kw">PoissonReconstruction</span>(SolidMobiusStrip_cloud, <span class="dt">spacing =</span> <span class="fl">0.005</span>)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb19">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb19-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb19-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb19-3"><span class="kw">shade3d</span>(psr_mesh, <span class="dt">color =</span> <span class="st">"orangered"</span>)</span>
<span id="cb19-4"><span class="kw">wire3d</span>(psr_mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_Poisson_spacing005.png"
        />
      </p>
      <p>
        On one hand, the mesh is better, but on the other hand it has some small
        defaults (not highly visible on this view, try to reproduce the mesh and
        rotate it, you’ll see). It has
        <span class="math inline">\(28726\)</span> vertices:
      </p>
      <div class="sourceCode" id="cb20">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb20-1">psr_mesh</span>
<span id="cb20-2"><span class="co">##  mesh3d object with 28726 vertices, 57556 triangles.</span></span></code></pre>
      </div>
      <p>
        It has some defaults because, I think, some triangles are too small. We
        can increase the trianges while keeping the
        <code>spacing</code> parameter by increasing the
        <code>sm_distance</code> parameter (whose defaut value is
        <span class="math inline">\(0.375\)</span>):
      </p>
      <div class="sourceCode" id="cb21">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb21-1">psr_mesh &lt;-<span class="st"> </span><span class="kw">PoissonReconstruction</span>(</span>
<span id="cb21-2">  SolidMobiusStrip_cloud, <span class="dt">spacing =</span> <span class="fl">0.005</span>, <span class="dt">sm_distance =</span> <span class="fl">0.9</span></span>
<span id="cb21-3">)</span></code></pre>
      </div>
      <p>This reduces the computation time. Here is the result:</p>
      <div class="sourceCode" id="cb22">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb22-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb22-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb22-3"><span class="kw">shade3d</span>(psr_mesh, <span class="dt">color =</span> <span class="st">"darkorange"</span>)</span>
<span id="cb22-4"><span class="kw">wire3d</span>(psr_mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_Poisson_spacing005_smdistance09.png"
        />
      </p>
      <p>
        Quite good! And the mesh has only
        <span class="math inline">\(3055\)</span> vertices:
      </p>
      <div class="sourceCode" id="cb23">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb23-1">psr_mesh</span>
<span id="cb23-2"><span class="co">##  mesh3d object with 3055 vertices, 6110 triangles.</span></span></code></pre>
      </div>
      <h1 id="the-stanford-bunny">The Stanford bunny</h1>
      <p>
        Now let’s try these surface reconstruction techniques to another points
        cloud, a famous one: the <em>Stanford bunny</em> points cloud. It has
        <span class="math inline">\(35947\)</span> points:
      </p>
      <div class="sourceCode" id="cb24">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb24-1"><span class="kw">data</span>(bunny, <span class="dt">package =</span> <span class="st">"onion"</span>)</span>
<span id="cb24-2"><span class="kw">nrow</span>(bunny)</span>
<span id="cb24-3"><span class="co">## [1] 35947</span></span></code></pre>
      </div>
      <p>
        This set of points is dense. Plotting it almost gives a totally black
        shape:
      </p>
      <div class="sourceCode" id="cb25">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb25-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb25-2"><span class="kw">view3d</span>(<span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb25-3"><span class="kw">points3d</span>(bunny)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Bunny_cloud.png"
        />
      </p>
      <p>Firstly, let’s try the advanced front surface reconstruction:</p>
      <div class="sourceCode" id="cb26">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb26-1">afs_mesh &lt;-<span class="st"> </span><span class="kw">AFSreconstruction</span>(bunny)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb27">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb27-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb27-2"><span class="kw">view3d</span>(<span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb27-3"><span class="kw">shade3d</span>(afs_mesh, <span class="dt">color =</span> <span class="st">"violetred"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Bunny_AFS.png"
        />
      </p>
      <p>
        Quite nice. Now here is a Poisson reconstruction, with some parameters
        chosen by myself (the mesh is not precise enough with the default values
        of the parameters):
      </p>
      <div class="sourceCode" id="cb28">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb28-1">psr_mesh &lt;-<span class="st"> </span><span class="kw">PoissonReconstruction</span>(bunny, <span class="dt">spacing =</span> <span class="fl">0.0001</span>, <span class="dt">sm_distance =</span> <span class="fl">0.9</span>)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb29">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb29-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb29-2"><span class="kw">view3d</span>(<span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb29-3"><span class="kw">shade3d</span>(psr_mesh, <span class="dt">color =</span> <span class="st">"darkviolet"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Bunny_Poisson.png"
        />
      </p>
      <p>
        The mesh has less details than the previous one but it has only
        <span class="math inline">\(20693\)</span> vertices:
      </p>
      <div class="sourceCode" id="cb30">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb30-1">psr_mesh</span>
<span id="cb30-2"><span class="co">##  mesh3d object with 20693 vertices, 41382 triangles.</span></span></code></pre>
      </div>
      <h1 id="the-stanford-dragon">The Stanford dragon</h1>
      <p>
        Finally, let’s play with the <em>Stanford dragon</em>. I found a points
        cloud of it containing
        <span class="math inline">\(100250\)</span> points. It is so dense that
        its plot is a totally black shape:
      </p>
      <div class="sourceCode" id="cb31">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb31-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb31-2"><span class="kw">view3d</span>(<span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb31-3"><span class="kw">points3d</span>(StanfordDragon)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/StanfordDragon_cloud.png"
        />
      </p>
      <p>
        Let’s start with the advanced front surface reconstruction (the
        <code>StanfordDragon</code> matrix is provided by
        <strong>RCGAL</strong>):
      </p>
      <div class="sourceCode" id="cb32">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb32-1">afs_mesh &lt;-<span class="st"> </span><span class="kw">AFSreconstruction</span>(StanfordDragon)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb33">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb33-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb33-2"><span class="kw">view3d</span>(<span class="op">-</span><span class="dv">20</span>, <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb33-3"><span class="kw">shade3d</span>(afs_mesh, <span class="dt">color =</span> <span class="st">"darkolivegreen4"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/StanfordDragon_AFS.png"
        />
      </p>
      <p>Very nice. And to finish, let’s try a Poisson reconstruction.</p>
      <div class="sourceCode" id="cb34">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb34-1">psr_mesh &lt;-<span class="st"> </span><span class="kw">PoissonReconstruction</span>(StanfordDragon, <span class="dt">spacing =</span> <span class="fl">0.0003</span>)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb35">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb35-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb35-2"><span class="kw">view3d</span>(<span class="op">-</span><span class="dv">20</span>, <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb35-3"><span class="kw">shade3d</span>(psr_mesh, <span class="dt">color =</span> <span class="st">"forestgreen"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/StanfordDragon_Poisson.png"
        />
      </p>
      <p>Less vertices, less details!</p>
      <div class="sourceCode" id="cb36">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb36-1">psr_mesh</span>
<span id="cb36-2"><span class="co">##  mesh3d object with 32064 vertices, 64152 triangles.</span></span></code></pre>
      </div>
      <h1 id="acknowledgments">Acknowledgments</h1>
      <p>
        I am grateful to the <strong>CGAL</strong> members, especially
        <strong
          ><span class="citation" data-cites="sloriot">@sloriot</span></strong
        >
        and
        <strong
          ><span class="citation" data-cites="afabri">@afabri</span></strong
        >, for the help they provided to me and for the attention they pay to my
        questions.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 15 Jan 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/SurfaceReconstruction.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
  </channel>
</rss>


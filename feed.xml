<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>Saturn Elephant</title>
    <link>https://laustep.github.io/stlahblog</link>
    <description><![CDATA[A blog about R and more.]]></description>
    <atom:link href="https://laustep.github.io/stlahblog/feed.xml" rel="self" type="application/rss+xml"/>
    <lastBuildDate>Mon, 12 Sep 2022 00:00:00 UT</lastBuildDate>
    <item>
      <title>Kantorovich distance with the 'ompr' package</title>
      <link>https://laustep.github.io/stlahblog/posts/kantorovichWithOMPR.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Do you know
        <a href="http://stla.github.io/stlapblog/index.html">my former blog</a>?
        It contains four posts about the computation of the Kantorovich
        distance:
      </p>
      <ul>
        <li>
          <p>
            <a
              href="https://stla.github.io/stlapblog/posts/KantorovichWithJulia.html"
              >Using Julia to compute the Kantorovich distance</a
            >
          </p>
        </li>
        <li>
          <p>
            <a
              href="http://stla.github.io/stlapblog/posts/KantorovichWithR.html"
              >Using R to compute the Kantorovich distance</a
            >
          </p>
        </li>
        <li>
          <p>
            <a
              href="http://stla.github.io/stlapblog/posts/KantorovichWithScala.html"
              >Using Scala to compute the Kantorovich distance</a
            >
          </p>
        </li>
        <li>
          <p>
            <a
              href="http://stla.github.io/stlapblog/posts/kantorovich-package.html"
              >The ‘kantorovich’ package for R</a
            >
          </p>
        </li>
      </ul>
      <p>
        The Julia way using the <strong>JumP</strong> library has the most
        convenient syntax:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb1-1"><span class="kw">using</span> JuMP </span>
<span id="cb1-2">mu <span class="op">=</span> [<span class="fl">1</span><span class="op">/</span><span class="fl">7</span><span class="op">,</span> <span class="fl">2</span><span class="op">/</span><span class="fl">7</span><span class="op">,</span> <span class="fl">4</span><span class="op">/</span><span class="fl">7</span>]</span>
<span id="cb1-3">nu <span class="op">=</span> [<span class="fl">1</span><span class="op">/</span><span class="fl">4</span><span class="op">,</span> <span class="fl">1</span><span class="op">/</span><span class="fl">4</span><span class="op">,</span> <span class="fl">1</span><span class="op">/</span><span class="fl">2</span>]</span>
<span id="cb1-4">n <span class="op">=</span> length(mu)</span>
<span id="cb1-5">m <span class="op">=</span> Model()</span>
<span id="cb1-6"><span class="pp">@defVar</span>(m<span class="op">,</span> p[<span class="fl">1</span><span class="op">:</span>n<span class="op">,</span> <span class="fl">1</span><span class="op">:</span>n] <span class="op">&gt;=</span> <span class="fl">0</span>)</span>
<span id="cb1-7"><span class="pp">@setObjective</span>(m<span class="op">,</span> Min<span class="op">,</span> sum{p[i<span class="op">,</span> j]<span class="op">,</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n<span class="op">,</span> j <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n<span class="op">;</span> i <span class="op">!=</span> j})</span>
<span id="cb1-8"><span class="kw">for</span> k <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n</span>
<span id="cb1-9">  <span class="pp">@addConstraint</span>(m<span class="op">,</span> sum(p[k<span class="op">,</span> <span class="op">:</span>]) <span class="op">==</span> mu[k])</span>
<span id="cb1-10">  <span class="pp">@addConstraint</span>(m<span class="op">,</span> sum(p[<span class="op">:,</span> k]) <span class="op">==</span> nu[k])</span>
<span id="cb1-11"><span class="kw">end</span></span>
<span id="cb1-12">solve(m)</span></code></pre>
      </div>
      <p>
        This allows to get the Kantorovich distance between the two
        probabilities <code>mu</code> and <code>nu</code> corresponding to the
        0-1 distance (assuming <code>mu</code> and <code>nu</code> have the same
        support). This is totally useless because one can straightforwardly get
        this distance: it is one minus the total weight of the infimum measure
        of the two probability measures (<code>1 - sum(pmin(mu, nu))</code> in
        R). But this is just for a simple illustration purpose. This problem is
        not trivial for another distance on the support of <code>mu</code> and
        <code>nu</code>. Encoding this distance as a matrix <code>D</code>, the
        linear programming model allowing to get the corresponding Kantorovich
        distance is obtained by replacing
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb2-1">sum{p[i<span class="op">,</span> j]<span class="op">,</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n<span class="op">,</span> j <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n<span class="op">;</span> i <span class="op">!=</span> j}</span></code></pre>
      </div>
      <p>with</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode julia"
        ><code class="sourceCode julia"><span id="cb3-1">sum{p[i<span class="op">,</span> j] <span class="op">*</span> D[i<span class="op">,</span> j]<span class="op">,</span> i <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n<span class="op">,</span> j <span class="kw">in</span> <span class="fl">1</span><span class="op">:</span>n<span class="op">;</span> i <span class="op">!=</span> j}</span></code></pre>
      </div>
      <p>
        Now I want to show again how to compute the Kantorovich distance with R,
        but using another package I discovered yesterday: the
        <strong>ompr</strong> package. It allows to write the model with a
        convenient syntax, close to the mathematical language, similar to the
        one above with <strong>JumP</strong>. Here is the model:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(ompr)</span>
<span id="cb4-2"><span class="kw">library</span>(ompr.roi)</span>
<span id="cb4-3"><span class="kw">library</span>(ROI.plugin.glpk)</span>
<span id="cb4-4"></span>
<span id="cb4-5">mu &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span><span class="op">/</span><span class="dv">7</span>, <span class="dv">2</span><span class="op">/</span><span class="dv">7</span>, <span class="dv">4</span><span class="op">/</span><span class="dv">7</span>)</span>
<span id="cb4-6">nu &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span><span class="op">/</span><span class="dv">4</span>, <span class="dv">1</span><span class="op">/</span><span class="dv">4</span>, <span class="dv">1</span><span class="op">/</span><span class="dv">2</span>)</span>
<span id="cb4-7">n &lt;-<span class="st"> </span><span class="kw">length</span>(mu)</span>
<span id="cb4-8"></span>
<span id="cb4-9">model &lt;-<span class="st"> </span><span class="kw">MIPModel</span>() <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb4-10"><span class="st">  </span><span class="kw">add_variable</span>(p[i, j], <span class="dt">i =</span> <span class="dv">1</span><span class="op">:</span>n, <span class="dt">j =</span> <span class="dv">1</span><span class="op">:</span>n, <span class="dt">type =</span> <span class="st">"continuous"</span>) <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb4-11"><span class="st">  </span><span class="kw">add_constraint</span>(p[i, j] <span class="op">&gt;=</span><span class="st"> </span><span class="dv">0</span>, <span class="dt">i =</span> <span class="dv">1</span><span class="op">:</span>n, <span class="dt">j =</span> <span class="dv">1</span><span class="op">:</span>n) <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb4-12"><span class="st">  </span><span class="kw">add_constraint</span>(<span class="kw">sum_over</span>(p[i, j], <span class="dt">j =</span> <span class="dv">1</span><span class="op">:</span>n) <span class="op">==</span><span class="st"> </span>mu[i], <span class="dt">i =</span> <span class="dv">1</span><span class="op">:</span>n) <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb4-13"><span class="st">  </span><span class="kw">add_constraint</span>(<span class="kw">sum_over</span>(p[i, j], <span class="dt">i =</span> <span class="dv">1</span><span class="op">:</span>n) <span class="op">==</span><span class="st"> </span>nu[j], <span class="dt">j =</span> <span class="dv">1</span><span class="op">:</span>n) <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb4-14"><span class="st">  </span><span class="kw">set_objective</span>(<span class="kw">sum_over</span>(p[i, j], <span class="dt">i =</span> <span class="dv">1</span><span class="op">:</span>n, <span class="dt">j =</span> <span class="dv">1</span><span class="op">:</span>n, i <span class="op">!=</span><span class="st"> </span>j), <span class="st">"min"</span>) </span></code></pre>
      </div>
      <p>This is nicely readable. Now we solve the problem:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">optimization &lt;-<span class="st"> </span>model <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb5-2"><span class="st">  </span><span class="kw">solve_model</span>(<span class="kw">with_ROI</span>(<span class="dt">solver =</span> <span class="st">"glpk"</span>))</span></code></pre>
      </div>
      <p>And we get the Kantorovich distance:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">objective_value</span>(optimization)</span>
<span id="cb6-2"><span class="co">## [1] 0.1071429</span></span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 12 Sep 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/kantorovichWithOMPR.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The compound of five tetrahedra</title>
      <link>https://laustep.github.io/stlahblog/posts/tetrahedraCompound.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In
        <a
          href="https://laustep.github.io/stlahblog/posts/BooleanOpsOnMeshes.html"
          >this previous post</a
        >
        I was wrong when I said I didn’t have a tool to compute the intersection
        of the compound of five tetrahedra:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tetrahedraCompoundIntersection.gif"
          style="width: 50%"
        />
      </p>
      <p>
        This can be achieved with the help of the <strong>rcdd</strong> package
        in R.
      </p>
      <p>
        This package is a wrapper of the C library <strong>cddlib</strong>. It
        implements the <em>double description</em> of convex polyhedra:
      </p>
      <ul>
        <li>
          <p>
            the <em>V-description</em> is the description by the vertices of the
            polyhedron;
          </p>
        </li>
        <li>
          <p>
            the <em>H-description</em> is the description by a set of linear
            inequalities.
          </p>
        </li>
      </ul>
      <p>
        Once we get the H-description of two or more polyhedra, it is
        straightforward to get the H-description of their intersection: it
        suffices to join all the linear inequalities. Then,
        <strong>cddlib</strong> will give us the corresponding V-representation.
        That’s it.
      </p>
      <p>
        The <strong>cddlib</strong> library is also usable in Python, with the
        <strong>pycddlib</strong> library. I’m going to show how to compute the
        intersection of the five tetrahedra forming the compound with R and with
        Python.
      </p>
      <h2 id="the-r-way">The R way</h2>
      <p>Here are the vertices of the five tetrahedra:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># the twenty vertices ####</span></span>
<span id="cb1-2">phi &lt;-<span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">5</span>)) <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb1-3">a &lt;-<span class="st"> </span><span class="dv">1</span> <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">3</span>)</span>
<span id="cb1-4">b &lt;-<span class="st"> </span>a <span class="op">/</span><span class="st"> </span>phi</span>
<span id="cb1-5">c &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span>phi</span>
<span id="cb1-6">vertices &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-7">  <span class="kw">c</span>( a,  a,  a),</span>
<span id="cb1-8">  <span class="kw">c</span>( a,  a, <span class="op">-</span>a),</span>
<span id="cb1-9">  <span class="kw">c</span>( a, <span class="op">-</span>a,  a),</span>
<span id="cb1-10">  <span class="kw">c</span>(<span class="op">-</span>a, <span class="op">-</span>a,  a),</span>
<span id="cb1-11">  <span class="kw">c</span>(<span class="op">-</span>a,  a, <span class="op">-</span>a),</span>
<span id="cb1-12">  <span class="kw">c</span>(<span class="op">-</span>a,  a,  a),</span>
<span id="cb1-13">  <span class="kw">c</span>( <span class="dv">0</span>,  b, <span class="op">-</span>c),</span>
<span id="cb1-14">  <span class="kw">c</span>( <span class="dv">0</span>, <span class="op">-</span>b, <span class="op">-</span>c),</span>
<span id="cb1-15">  <span class="kw">c</span>( <span class="dv">0</span>, <span class="op">-</span>b,  c),</span>
<span id="cb1-16">  <span class="kw">c</span>( c,  <span class="dv">0</span>, <span class="op">-</span>b),</span>
<span id="cb1-17">  <span class="kw">c</span>(<span class="op">-</span>c,  <span class="dv">0</span>, <span class="op">-</span>b),</span>
<span id="cb1-18">  <span class="kw">c</span>(<span class="op">-</span>c,  <span class="dv">0</span>,  b),</span>
<span id="cb1-19">  <span class="kw">c</span>( b,  c,  <span class="dv">0</span>),</span>
<span id="cb1-20">  <span class="kw">c</span>( b, <span class="op">-</span>c,  <span class="dv">0</span>),</span>
<span id="cb1-21">  <span class="kw">c</span>(<span class="op">-</span>b, <span class="op">-</span>c,  <span class="dv">0</span>),</span>
<span id="cb1-22">  <span class="kw">c</span>(<span class="op">-</span>b,  c,  <span class="dv">0</span>),</span>
<span id="cb1-23">  <span class="kw">c</span>( <span class="dv">0</span>,  b,  c),</span>
<span id="cb1-24">  <span class="kw">c</span>( a, <span class="op">-</span>a, <span class="op">-</span>a),</span>
<span id="cb1-25">  <span class="kw">c</span>( c,  <span class="dv">0</span>,  b),</span>
<span id="cb1-26">  <span class="kw">c</span>(<span class="op">-</span>a, <span class="op">-</span>a, <span class="op">-</span>a)</span>
<span id="cb1-27">)</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co"># the five tetrahedra ####</span></span>
<span id="cb1-30">th1 &lt;-<span class="st"> </span>vertices[<span class="kw">c</span>(17L, 14L,  2L, 11L), ]</span>
<span id="cb1-31">th2 &lt;-<span class="st"> </span>vertices[<span class="kw">c</span>(18L,  1L,  4L,  5L), ]</span>
<span id="cb1-32">th3 &lt;-<span class="st"> </span>vertices[<span class="kw">c</span>(19L,  6L, 15L,  7L), ]</span>
<span id="cb1-33">th4 &lt;-<span class="st"> </span>vertices[<span class="kw">c</span>( 3L, 13L, 12L,  8L), ]</span>
<span id="cb1-34">th5 &lt;-<span class="st"> </span>vertices[<span class="kw">c</span>(20L, 16L, 10L,  9L), ]</span></code></pre>
      </div>
      <p>
        To make a V-description with <strong>rcdd</strong>, one uses the
        function <code>makeV</code>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(rcdd)</span>
<span id="cb2-2">V1 &lt;-<span class="st"> </span><span class="kw">makeV</span>(th1)</span>
<span id="cb2-3">V2 &lt;-<span class="st"> </span><span class="kw">makeV</span>(th2)</span>
<span id="cb2-4">V3 &lt;-<span class="st"> </span><span class="kw">makeV</span>(th3)</span>
<span id="cb2-5">V4 &lt;-<span class="st"> </span><span class="kw">makeV</span>(th4)</span>
<span id="cb2-6">V5 &lt;-<span class="st"> </span><span class="kw">makeV</span>(th5)</span></code></pre>
      </div>
      <p>Let’s look at a V-description in R:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">V1</span>
<span id="cb3-2"><span class="co">##      [,1] [,2]       [,3]       [,4]       [,5]</span></span>
<span id="cb3-3"><span class="co">## [1,]    0    1  0.0000000  0.3568221  0.9341724</span></span>
<span id="cb3-4"><span class="co">## [2,]    0    1  0.3568221 -0.9341724  0.0000000</span></span>
<span id="cb3-5"><span class="co">## [3,]    0    1  0.5773503  0.5773503 -0.5773503</span></span>
<span id="cb3-6"><span class="co">## [4,]    0    1 -0.9341724  0.0000000 -0.3568221</span></span>
<span id="cb3-7"><span class="co">## attr(,"representation")</span></span>
<span id="cb3-8"><span class="co">## [1] "V"</span></span></code></pre>
      </div>
      <p>
        Each row starts with a zero and a one, followed by the coordinates of
        the vertex. I don’t remember what the zero means. The one means that the
        subsequent numbers represent a vertex (it is also possible to encode
        rays and lines in a V-description).
      </p>
      <p>
        Now we get the H-representations with the help of the
        <code>scdd</code> function:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">H1 &lt;-<span class="st"> </span><span class="kw">scdd</span>(V1)</span>
<span id="cb4-2">H2 &lt;-<span class="st"> </span><span class="kw">scdd</span>(V2)</span>
<span id="cb4-3">H3 &lt;-<span class="st"> </span><span class="kw">scdd</span>(V3)</span>
<span id="cb4-4">H4 &lt;-<span class="st"> </span><span class="kw">scdd</span>(V4)</span>
<span id="cb4-5">H5 &lt;-<span class="st"> </span><span class="kw">scdd</span>(V5)</span></code></pre>
      </div>
      <p>Let’s look at a H-description:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">H1</span>
<span id="cb5-2"><span class="co">## $output</span></span>
<span id="cb5-3"><span class="co">##      [,1] [,2]          [,3]          [,4]          [,5]</span></span>
<span id="cb5-4"><span class="co">## [1,]    0    1 -2.802517e+00 -2.220446e-16 -1.070466e+00</span></span>
<span id="cb5-5"><span class="co">## [2,]    0    1 -8.881784e-16  1.070466e+00  2.802517e+00</span></span>
<span id="cb5-6"><span class="co">## [3,]    0    1  1.070466e+00 -2.802517e+00  9.614813e-17</span></span>
<span id="cb5-7"><span class="co">## [4,]    0    1  1.732051e+00  1.732051e+00 -1.732051e+00</span></span>
<span id="cb5-8"><span class="co">## attr(,"representation")</span></span>
<span id="cb5-9"><span class="co">## [1] "H"</span></span></code></pre>
      </div>
      <p>
        In the first column, a zero indicates that the corresponding rows
        represents an inequality. The number in the second column is the right
        hand side of the inequality, and the subsequent three numbers are the
        coefficients of the linear inequality.
      </p>
      <p>
        Now, let’s join all the linear inequalities. That is, we stack the five
        matrices:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">H &lt;-<span class="st"> </span><span class="kw">rbind</span>(H1<span class="op">$</span>output, H2<span class="op">$</span>output, H3<span class="op">$</span>output, H4<span class="op">$</span>output, H5<span class="op">$</span>output)</span></code></pre>
      </div>
      <p>
        The <code>scdd</code> function converts from the V-representation to the
        H-representation and vice-versa. Hence we get the vertices of the
        intersection by applying this function to the above H-representation:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1">(V &lt;-<span class="st"> </span><span class="kw">scdd</span>(H) )</span></code></pre>
      </div>
      <pre><code>## $output
##       [,1] [,2]          [,3]          [,4]          [,5]
##  [1,]    0    1 -2.205282e-01 -8.212094e-16  3.568221e-01
##  [2,]    0    1  4.240675e-16 -3.568221e-01  2.205282e-01
##  [3,]    0    1  5.654233e-16  3.568221e-01  2.205282e-01
##  [4,]    0    1  2.205282e-01  0.000000e+00  3.568221e-01
##  [5,]    0    1  3.568221e-01 -2.205282e-01  4.574370e-17
##  [6,]    0    1  3.568221e-01  2.205282e-01 -4.574370e-17
##  [7,]    0    1  2.205282e-01  3.202059e-16 -3.568221e-01
##  [8,]    0    1  1.017762e-15  3.568221e-01 -2.205282e-01
##  [9,]    0    1  6.785079e-16 -3.568221e-01 -2.205282e-01
## [10,]    0    1 -2.205282e-01 -5.010035e-16 -3.568221e-01
## [11,]    0    1 -3.568221e-01  2.205282e-01  2.795606e-16
## [12,]    0    1 -3.568221e-01 -2.205282e-01 -9.718761e-17
## attr(,"representation")
## [1] "V"</code></pre>
      <p>
        The vertices are given in the last three columns. Let’s extract them:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1">vertices &lt;-<span class="st"> </span>V<span class="op">$</span>output[, <span class="kw">c</span>(3L, 4L, 5L)]</span></code></pre>
      </div>
      <p>
        There are twelve vertices. The intersection is a regular icosahedron.
        Now we will plot it. First, we compute the convex hull of these vertices
        with the <strong>cxhull</strong> package. The icosahedron is convex, so
        its convex hull is itself. But <strong>cxhull</strong> also provides the
        faces and the edges that are used for plotting.
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1"><span class="kw">library</span>(cxhull)</span>
<span id="cb10-2">icosahedron &lt;-<span class="st"> </span><span class="kw">cxhull</span>(vertices, <span class="dt">triangulate =</span> <span class="ot">TRUE</span>)</span></code></pre>
      </div>
      <p>
        There’s a convenient function in <strong>cxhull</strong> to plot a
        convex hull with <strong>rgl</strong>, namely
        <code>plotConvexHull3d</code>:
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1"><span class="kw">library</span>(rgl)</span>
<span id="cb11-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb11-3"><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">80</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb11-4"><span class="kw">plotConvexHull3d</span>(</span>
<span id="cb11-5">  icosahedron, <span class="dt">palette =</span> <span class="kw">hcl.colors</span>(<span class="dv">256</span>, <span class="st">"BuPu"</span>), <span class="dt">bias =</span> <span class="fl">0.25</span>, </span>
<span id="cb11-6">  <span class="dt">edgesColor =</span> <span class="st">"yellow"</span>, <span class="dt">tubesRadius =</span> <span class="fl">0.015</span>, <span class="dt">spheresRadius =</span> <span class="fl">0.02</span></span>
<span id="cb11-7">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/icosahedron2.png"
          style="width: 50%"
        />
      </p>
      <h2 id="the-python-way">The Python way</h2>
      <p>
        Here is the Python code computing the intersection of the five
        tetrahedra:
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode numberSource python numberLines"
        ><code class="sourceCode python"><span id="cb12-1"><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb12-2"><span class="im">import</span> cdd <span class="im">as</span> cdd</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co"># the twenty vertices </span></span>
<span id="cb12-5">phi <span class="op">=</span> (<span class="dv">1</span> <span class="op">+</span> np.sqrt(<span class="dv">5</span>)) <span class="op">/</span> <span class="dv">2</span></span>
<span id="cb12-6">a <span class="op">=</span> <span class="dv">1</span> <span class="op">/</span> np.sqrt(<span class="dv">3</span>)</span>
<span id="cb12-7">b <span class="op">=</span> a <span class="op">/</span> phi</span>
<span id="cb12-8">c <span class="op">=</span> a <span class="op">*</span> phi</span>
<span id="cb12-9"></span>
<span id="cb12-10">vertices <span class="op">=</span> np.vstack(</span>
<span id="cb12-11">    (</span>
<span id="cb12-12">        np.array([a, a, a]),</span>
<span id="cb12-13">        np.array([a, a, <span class="op">-</span>a]),</span>
<span id="cb12-14">        np.array([a, <span class="op">-</span>a, a]),</span>
<span id="cb12-15">        np.array([<span class="op">-</span>a, <span class="op">-</span>a, a]),</span>
<span id="cb12-16">        np.array([<span class="op">-</span>a, a, <span class="op">-</span>a]),</span>
<span id="cb12-17">        np.array([<span class="op">-</span>a, a, a]),</span>
<span id="cb12-18">        np.array([<span class="dv">0</span>, b, <span class="op">-</span>c]),</span>
<span id="cb12-19">        np.array([<span class="dv">0</span>, <span class="op">-</span>b, <span class="op">-</span>c]),</span>
<span id="cb12-20">        np.array([<span class="dv">0</span>, <span class="op">-</span>b, c]),</span>
<span id="cb12-21">        np.array([c, <span class="dv">0</span>, <span class="op">-</span>b]),</span>
<span id="cb12-22">        np.array([<span class="op">-</span>c, <span class="dv">0</span>, <span class="op">-</span>b]),</span>
<span id="cb12-23">        np.array([<span class="op">-</span>c, <span class="dv">0</span>, b]),</span>
<span id="cb12-24">        np.array([b, c, <span class="dv">0</span>]),</span>
<span id="cb12-25">        np.array([b, <span class="op">-</span>c, <span class="dv">0</span>]),</span>
<span id="cb12-26">        np.array([<span class="op">-</span>b, <span class="op">-</span>c, <span class="dv">0</span>]),</span>
<span id="cb12-27">        np.array([<span class="op">-</span>b, c, <span class="dv">0</span>]),</span>
<span id="cb12-28">        np.array([<span class="dv">0</span>, b, c]),</span>
<span id="cb12-29">        np.array([a, <span class="op">-</span>a, <span class="op">-</span>a]),</span>
<span id="cb12-30">        np.array([c, <span class="dv">0</span>, b]),</span>
<span id="cb12-31">        np.array([<span class="op">-</span>a, <span class="op">-</span>a, <span class="op">-</span>a]),</span>
<span id="cb12-32">    )</span>
<span id="cb12-33">)</span>
<span id="cb12-34"></span>
<span id="cb12-35"><span class="co"># tetrahedra vertices </span></span>
<span id="cb12-36">tetra1Idxs <span class="op">=</span> [<span class="dv">16</span>, <span class="dv">13</span>, <span class="dv">1</span>, <span class="dv">10</span>]</span>
<span id="cb12-37">tetra2Idxs <span class="op">=</span> [<span class="dv">17</span>, <span class="dv">0</span>, <span class="dv">3</span>, <span class="dv">4</span>]</span>
<span id="cb12-38">tetra3Idxs <span class="op">=</span> [<span class="dv">18</span>, <span class="dv">5</span>, <span class="dv">14</span>, <span class="dv">6</span>]</span>
<span id="cb12-39">tetra4Idxs <span class="op">=</span> [<span class="dv">2</span>, <span class="dv">12</span>, <span class="dv">11</span>, <span class="dv">7</span>]</span>
<span id="cb12-40">tetra5Idxs <span class="op">=</span> [<span class="dv">19</span>, <span class="dv">15</span>, <span class="dv">9</span>, <span class="dv">8</span>]</span>
<span id="cb12-41">th1 <span class="op">=</span> vertices[tetra1Idxs, :]</span>
<span id="cb12-42">th2 <span class="op">=</span> vertices[tetra2Idxs, :]</span>
<span id="cb12-43">th3 <span class="op">=</span> vertices[tetra3Idxs, :]</span>
<span id="cb12-44">th4 <span class="op">=</span> vertices[tetra4Idxs, :]</span>
<span id="cb12-45">th5 <span class="op">=</span> vertices[tetra5Idxs, :]</span>
<span id="cb12-46"></span>
<span id="cb12-47"><span class="co"># make the V-representation of each tetrahedron; you have to prepend the </span></span>
<span id="cb12-48"><span class="co"># vertices array with a column of ones</span></span>
<span id="cb12-49">v <span class="op">=</span> np.column_stack((np.ones(<span class="dv">4</span>), th1))</span>
<span id="cb12-50">mat <span class="op">=</span> cdd.Matrix(v, number_type<span class="op">=</span><span class="st">'float'</span>) </span>
<span id="cb12-51">mat.rep_type <span class="op">=</span> cdd.RepType.GENERATOR</span>
<span id="cb12-52">poly1 <span class="op">=</span> cdd.Polyhedron(mat)</span>
<span id="cb12-53">v <span class="op">=</span> np.column_stack((np.ones(<span class="dv">4</span>), th2))</span>
<span id="cb12-54">mat <span class="op">=</span> cdd.Matrix(v, number_type<span class="op">=</span><span class="st">'float'</span>) </span>
<span id="cb12-55">mat.rep_type <span class="op">=</span> cdd.RepType.GENERATOR</span>
<span id="cb12-56">poly2 <span class="op">=</span> cdd.Polyhedron(mat)</span>
<span id="cb12-57">v <span class="op">=</span> np.column_stack((np.ones(<span class="dv">4</span>), th3))</span>
<span id="cb12-58">mat <span class="op">=</span> cdd.Matrix(v, number_type<span class="op">=</span><span class="st">'float'</span>) </span>
<span id="cb12-59">mat.rep_type <span class="op">=</span> cdd.RepType.GENERATOR</span>
<span id="cb12-60">poly3 <span class="op">=</span> cdd.Polyhedron(mat)</span>
<span id="cb12-61">v <span class="op">=</span> np.column_stack((np.ones(<span class="dv">4</span>), th4))</span>
<span id="cb12-62">mat <span class="op">=</span> cdd.Matrix(v, number_type<span class="op">=</span><span class="st">'float'</span>) </span>
<span id="cb12-63">mat.rep_type <span class="op">=</span> cdd.RepType.GENERATOR</span>
<span id="cb12-64">poly4 <span class="op">=</span> cdd.Polyhedron(mat)</span>
<span id="cb12-65">v <span class="op">=</span> np.column_stack((np.ones(<span class="dv">4</span>), th5))</span>
<span id="cb12-66">mat <span class="op">=</span> cdd.Matrix(v, number_type<span class="op">=</span><span class="st">'float'</span>) </span>
<span id="cb12-67">mat.rep_type <span class="op">=</span> cdd.RepType.GENERATOR</span>
<span id="cb12-68">poly5 <span class="op">=</span> cdd.Polyhedron(mat)</span>
<span id="cb12-69"></span>
<span id="cb12-70"><span class="co"># H-representations of the tetrahedra</span></span>
<span id="cb12-71">h1 <span class="op">=</span> poly1.get_inequalities()</span>
<span id="cb12-72">h2 <span class="op">=</span> poly2.get_inequalities()</span>
<span id="cb12-73">h3 <span class="op">=</span> poly3.get_inequalities()</span>
<span id="cb12-74">h4 <span class="op">=</span> poly4.get_inequalities()</span>
<span id="cb12-75">h5 <span class="op">=</span> poly5.get_inequalities()</span>
<span id="cb12-76"></span>
<span id="cb12-77"><span class="co"># join the five sets of linear inequalities; this will give the intersection</span></span>
<span id="cb12-78">hintersection <span class="op">=</span> np.vstack((h1, h2, h3, h4, h5))</span>
<span id="cb12-79"></span>
<span id="cb12-80"><span class="co"># make the V-representation of the intersection</span></span>
<span id="cb12-81">mat <span class="op">=</span> cdd.Matrix(hintersection, number_type<span class="op">=</span><span class="st">'float'</span>)</span>
<span id="cb12-82">mat.rep_type <span class="op">=</span> cdd.RepType.INEQUALITY</span>
<span id="cb12-83">polyintersection <span class="op">=</span> cdd.Polyhedron(mat)</span>
<span id="cb12-84"></span>
<span id="cb12-85"><span class="co"># get the vertices; they are given in a matrix prepended by a column of ones</span></span>
<span id="cb12-86">vintersection <span class="op">=</span> polyintersection.get_generators()</span>
<span id="cb12-87"></span>
<span id="cb12-88"><span class="co"># get rid of the column of ones</span></span>
<span id="cb12-89">n_inequalities <span class="op">=</span> vintersection.row_size</span>
<span id="cb12-90">intersection <span class="op">=</span> np.array([</span>
<span id="cb12-91">    vintersection[i][<span class="dv">1</span>:<span class="dv">4</span>] <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(n_inequalities)    </span>
<span id="cb12-92">])</span></code></pre>
      </div>
      <p>Results are the same as the ones we got with R:</p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb13-1">array([[<span class="op">-</span><span class="fl">2.20528179e-01</span>, <span class="op">-</span><span class="fl">8.21209393e-16</span>,  <span class="fl">3.56822090e-01</span>],</span>
<span id="cb13-2">       [ <span class="fl">4.24067460e-16</span>, <span class="op">-</span><span class="fl">3.56822090e-01</span>,  <span class="fl">2.20528179e-01</span>],</span>
<span id="cb13-3">       [ <span class="fl">5.65423280e-16</span>,  <span class="fl">3.56822090e-01</span>,  <span class="fl">2.20528179e-01</span>],</span>
<span id="cb13-4">       [ <span class="fl">2.20528179e-01</span>,  <span class="fl">0.00000000e+00</span>,  <span class="fl">3.56822090e-01</span>],</span>
<span id="cb13-5">       [ <span class="fl">3.56822090e-01</span>, <span class="op">-</span><span class="fl">2.20528179e-01</span>,  <span class="fl">4.57437043e-17</span>],</span>
<span id="cb13-6">       [ <span class="fl">3.56822090e-01</span>,  <span class="fl">2.20528179e-01</span>, <span class="op">-</span><span class="fl">4.57437043e-17</span>],</span>
<span id="cb13-7">       [ <span class="fl">2.20528179e-01</span>,  <span class="fl">3.20205930e-16</span>, <span class="op">-</span><span class="fl">3.56822090e-01</span>],</span>
<span id="cb13-8">       [ <span class="fl">1.01776190e-15</span>,  <span class="fl">3.56822090e-01</span>, <span class="op">-</span><span class="fl">2.20528179e-01</span>],</span>
<span id="cb13-9">       [ <span class="fl">6.78507937e-16</span>, <span class="op">-</span><span class="fl">3.56822090e-01</span>, <span class="op">-</span><span class="fl">2.20528179e-01</span>],</span>
<span id="cb13-10">       [<span class="op">-</span><span class="fl">2.20528179e-01</span>, <span class="op">-</span><span class="fl">5.01003463e-16</span>, <span class="op">-</span><span class="fl">3.56822090e-01</span>],</span>
<span id="cb13-11">       [<span class="op">-</span><span class="fl">3.56822090e-01</span>,  <span class="fl">2.20528179e-01</span>,  <span class="fl">2.79560644e-16</span>],</span>
<span id="cb13-12">       [<span class="op">-</span><span class="fl">3.56822090e-01</span>, <span class="op">-</span><span class="fl">2.20528179e-01</span>, <span class="op">-</span><span class="fl">9.71876138e-17</span>]])</span></code></pre>
      </div>
      <p>
        It is possible to get the edges of the polyhedron with
        <strong>pycddlib</strong>; see how I did in
        <a href="https://laustep.github.io/stlahblog/posts/E8rootPolytope.html"
          >this post</a
        >. And to get the convex hull with its faces, one can use
        <code>scipy.spatial.ConvexHull(intersection)</code>.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 10 Sep 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/tetrahedraCompound.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Labelling the points of a 'ggplot' with Shiny</title>
      <link>https://laustep.github.io/stlahblog/posts/ggplot2_labelling.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        The Shiny app below allows to attribute a label to the points of a
        ‘ggplot’ by double-clicking on the points.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">library</span>(rhandsontable)</span>
<span id="cb1-3"><span class="kw">library</span>(htmlwidgets)</span>
<span id="cb1-4"><span class="kw">library</span>(colourpicker)</span>
<span id="cb1-5"><span class="kw">library</span>(ggplot2)</span>
<span id="cb1-6"><span class="kw">library</span>(ggrepel)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co">#' Add labels to points on a ggplot2 scatterplot</span></span>
<span id="cb1-9"><span class="co">#' @param gg the ggplot</span></span>
<span id="cb1-10"><span class="co">#' @param X name of the x-variable</span></span>
<span id="cb1-11"><span class="co">#' @param Y names of the y-variable</span></span>
<span id="cb1-12"><span class="co">#' @param labels named list like \code{list("10" = c("mylabel", "blue"))}; </span></span>
<span id="cb1-13"><span class="co">#' the names of the list are the row names, each component of the list is </span></span>
<span id="cb1-14"><span class="co">#' a character vector of length two: the label and its color</span></span>
<span id="cb1-15"><span class="co">#' @importFrom ggrepel geom_text_repel</span></span>
<span id="cb1-16">addLabels &lt;-<span class="st"> </span><span class="cf">function</span>(gg, X, Y, labels){</span>
<span id="cb1-17">  <span class="cf">if</span>(<span class="kw">is.null</span>(labels)){</span>
<span id="cb1-18">    <span class="kw">return</span>(gg)</span>
<span id="cb1-19">  }</span>
<span id="cb1-20">  dat &lt;-<span class="st"> </span>gg<span class="op">$</span>data</span>
<span id="cb1-21">  indices &lt;-<span class="st"> </span><span class="kw">intersect</span>(<span class="kw">names</span>(labels), <span class="kw">rownames</span>(dat)) </span>
<span id="cb1-22">  dat[[<span class="st">"..labels"</span>]] &lt;-<span class="st"> ""</span></span>
<span id="cb1-23">  dat[[<span class="st">"..colors"</span>]] &lt;-<span class="st"> "black"</span></span>
<span id="cb1-24">  dat[indices, <span class="st">"..labels"</span>] &lt;-<span class="st"> </span><span class="kw">sapply</span>(labels[indices], <span class="st">"[["</span>, 1L)</span>
<span id="cb1-25">  dat[indices, <span class="st">"..colors"</span>] &lt;-<span class="st"> </span><span class="kw">sapply</span>(labels[indices], <span class="st">"[["</span>, 2L)</span>
<span id="cb1-26">  range_x &lt;-<span class="st"> </span><span class="kw">diff</span>(<span class="kw">range</span>(dat[[X]], <span class="dt">na.rm =</span> <span class="ot">TRUE</span>))</span>
<span id="cb1-27">  range_y &lt;-<span class="st"> </span><span class="kw">diff</span>(<span class="kw">range</span>(dat[[Y]], <span class="dt">na.rm =</span> <span class="ot">TRUE</span>))</span>
<span id="cb1-28">  gg <span class="op">+</span><span class="st"> </span><span class="kw">geom_text_repel</span>(</span>
<span id="cb1-29">    <span class="kw">aes_</span>(<span class="dt">x =</span> <span class="kw">as.name</span>(X), <span class="dt">y =</span> <span class="kw">as.name</span>(Y), <span class="dt">label =</span> <span class="kw">as.name</span>(<span class="st">"..labels"</span>)), </span>
<span id="cb1-30">    <span class="dt">color =</span> dat[[<span class="st">"..colors"</span>]], <span class="dt">size =</span> <span class="dv">9</span>, <span class="dt">max.overlaps =</span> 100L, </span>
<span id="cb1-31">    <span class="dt">data =</span> dat, <span class="dt">inherit.aes =</span> <span class="ot">FALSE</span>,   </span>
<span id="cb1-32">    <span class="dt">segment.size =</span> <span class="fl">0.2</span>, <span class="dt">min.segment.length =</span> <span class="kw">unit</span>(<span class="dv">0</span>, <span class="st">'lines'</span>), </span>
<span id="cb1-33">    <span class="dt">nudge_x =</span> range_x<span class="op">/</span><span class="dv">15</span>, <span class="dt">nudge_y =</span> range_y<span class="op">/</span><span class="dv">15</span></span>
<span id="cb1-34">  )</span>
<span id="cb1-35">}</span>
<span id="cb1-36"></span>
<span id="cb1-37">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb1-38">  <span class="kw">br</span>(),</span>
<span id="cb1-39">  <span class="kw">fluidRow</span>(</span>
<span id="cb1-40">    <span class="kw">column</span>(</span>
<span id="cb1-41">      <span class="dv">8</span>,</span>
<span id="cb1-42">      <span class="kw">plotOutput</span>(<span class="st">"ggplot"</span>, <span class="dt">dblclick =</span> <span class="st">"plotClick"</span>)</span>
<span id="cb1-43">    ),</span>
<span id="cb1-44">    <span class="kw">column</span>(</span>
<span id="cb1-45">      <span class="dv">4</span>,</span>
<span id="cb1-46">      tags<span class="op">$</span><span class="kw">div</span>(</span>
<span id="cb1-47">        <span class="dt">style =</span> <span class="st">"max-height: 400px; overflow: auto;"</span>,</span>
<span id="cb1-48">        <span class="kw">rHandsontableOutput</span>(<span class="st">"hot_pointLabels"</span>)  </span>
<span id="cb1-49">      )</span>
<span id="cb1-50">    )</span>
<span id="cb1-51">  )</span>
<span id="cb1-52">)</span>
<span id="cb1-53"></span>
<span id="cb1-54">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session){</span>
<span id="cb1-55">  </span>
<span id="cb1-56">  Ggplot &lt;-<span class="st"> </span><span class="kw">reactive</span>({</span>
<span id="cb1-57">    gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(iris) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-58"><span class="st">      </span><span class="kw">geom_point</span>(<span class="kw">aes</span>(<span class="dt">x =</span> Petal.Width, <span class="dt">y =</span> Petal.Length, <span class="dt">color =</span> Species))</span>
<span id="cb1-59">    gg</span>
<span id="cb1-60">  })</span>
<span id="cb1-61">  </span>
<span id="cb1-62">  output[[<span class="st">"ggplot"</span>]] &lt;-<span class="st"> </span><span class="kw">renderPlot</span>({</span>
<span id="cb1-63">    <span class="kw">addLabels</span>(<span class="kw">Ggplot</span>(), <span class="st">"Petal.Width"</span>, <span class="st">"Petal.Length"</span>, <span class="kw">Labels</span>())</span>
<span id="cb1-64">  })</span>
<span id="cb1-65">  </span>
<span id="cb1-66">  output[[<span class="st">"hot_pointLabels"</span>]] &lt;-<span class="st"> </span><span class="kw">renderRHandsontable</span>({</span>
<span id="cb1-67">    <span class="cf">if</span>(<span class="op">!</span><span class="kw">is.null</span>(hot &lt;-<span class="st"> </span>input[[<span class="st">"hot_pointLabels"</span>]])){</span>
<span id="cb1-68">      DF &lt;-<span class="st"> </span><span class="kw">hot_to_r</span>(hot)</span>
<span id="cb1-69">    } <span class="cf">else</span> {</span>
<span id="cb1-70">      DF &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb1-71">        <span class="dt">index =</span> <span class="kw">rownames</span>(iris), </span>
<span id="cb1-72">        <span class="dt">label =</span> <span class="st">""</span>, </span>
<span id="cb1-73">        <span class="dt">color =</span> <span class="st">"black"</span>,</span>
<span id="cb1-74">        <span class="dt">stringsAsFactors =</span> <span class="ot">FALSE</span></span>
<span id="cb1-75">      )</span>
<span id="cb1-76">    }</span>
<span id="cb1-77">    <span class="kw">rhandsontable</span>(DF, <span class="dt">rowHeaders =</span> <span class="ot">NULL</span>) <span class="op">%&gt;%</span><span class="st"> </span></span>
<span id="cb1-78"><span class="st">      </span><span class="kw">hot_col</span>(<span class="st">"index"</span>, <span class="dt">readOnly =</span> <span class="ot">TRUE</span>) <span class="op">%&gt;%</span></span>
<span id="cb1-79"><span class="st">      </span><span class="kw">hot_cols</span>(<span class="dt">colWidths =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">200</span>, <span class="dv">100</span>)) <span class="op">%&gt;%</span><span class="st"> </span></span>
<span id="cb1-80"><span class="st">      </span><span class="kw">hot_table</span>(</span>
<span id="cb1-81">        <span class="dt">highlightRow =</span> <span class="ot">TRUE</span>, <span class="dt">contextMenu =</span> <span class="ot">FALSE</span>, <span class="dt">fillHandle =</span> <span class="ot">TRUE</span></span>
<span id="cb1-82">      ) <span class="op">%&gt;%</span></span>
<span id="cb1-83"><span class="st">      </span><span class="kw">onRender</span>(</span>
<span id="cb1-84">        <span class="st">"function(el, x){</span></span>
<span id="cb1-85"><span class="st">          var hot = this.hot;</span></span>
<span id="cb1-86"><span class="st">          Shiny.addCustomMessageHandler('handler_hot', function(msg){</span></span>
<span id="cb1-87"><span class="st">            hot.setDataAtCell(msg.row, 1, msg.label);</span></span>
<span id="cb1-88"><span class="st">            hot.setDataAtCell(msg.row, 2, msg.color);</span></span>
<span id="cb1-89"><span class="st">          });</span></span>
<span id="cb1-90"><span class="st">        }"</span></span>
<span id="cb1-91">      )</span>
<span id="cb1-92">  })</span>
<span id="cb1-93">  </span>
<span id="cb1-94">  Index &lt;-<span class="st"> </span><span class="kw">reactiveVal</span>()</span>
<span id="cb1-95">  <span class="kw">observeEvent</span>(input[[<span class="st">"plotClick"</span>]], {</span>
<span id="cb1-96">    dat &lt;-<span class="st"> </span><span class="kw">droplevels</span>(<span class="kw">Ggplot</span>()<span class="op">$</span>data)</span>
<span id="cb1-97">    point &lt;-<span class="st"> </span><span class="kw">nearPoints</span>(</span>
<span id="cb1-98">      dat, input[[<span class="st">"plotClick"</span>]], <span class="dt">threshold =</span> <span class="dv">15</span>, <span class="dt">maxpoints =</span> 1L</span>
<span id="cb1-99">    )</span>
<span id="cb1-100">    <span class="cf">if</span>(<span class="kw">nrow</span>(point)){</span>
<span id="cb1-101">      <span class="kw">Index</span>(<span class="kw">as.integer</span>(<span class="kw">rownames</span>(point)))</span>
<span id="cb1-102">      <span class="kw">showModal</span>(<span class="kw">modalDialog</span>(</span>
<span id="cb1-103">        <span class="dt">title =</span> <span class="st">"Set a label for this point and its color"</span>,</span>
<span id="cb1-104">        <span class="kw">textInput</span>(<span class="st">"pointLabel"</span>, <span class="ot">NULL</span>, <span class="dt">placeholder =</span> <span class="st">"label"</span>),</span>
<span id="cb1-105">        <span class="kw">colourInput</span>(<span class="st">"pointLabelCol"</span>, <span class="ot">NULL</span>, <span class="dt">value =</span> <span class="st">"black"</span>),</span>
<span id="cb1-106">        <span class="dt">footer =</span> <span class="kw">tagList</span>(</span>
<span id="cb1-107">          <span class="kw">modalButton</span>(<span class="st">"Cancel"</span>),</span>
<span id="cb1-108">          <span class="kw">actionButton</span>(<span class="st">"ok"</span>, <span class="st">"OK"</span>)</span>
<span id="cb1-109">        ), </span>
<span id="cb1-110">        <span class="dt">size =</span> <span class="st">"s"</span></span>
<span id="cb1-111">      ))</span>
<span id="cb1-112">    }</span>
<span id="cb1-113">  })</span>
<span id="cb1-114">  </span>
<span id="cb1-115">  <span class="kw">observeEvent</span>(input[[<span class="st">"ok"</span>]], {</span>
<span id="cb1-116">    session<span class="op">$</span><span class="kw">sendCustomMessage</span>(</span>
<span id="cb1-117">      <span class="st">"handler_hot"</span>, </span>
<span id="cb1-118">      <span class="kw">list</span>(</span>
<span id="cb1-119">        <span class="st">"row"</span>   =<span class="st"> </span><span class="kw">Index</span>() <span class="op">-</span><span class="st"> </span>1L, </span>
<span id="cb1-120">        <span class="st">"label"</span> =<span class="st"> </span>input[[<span class="st">"pointLabel"</span>]], </span>
<span id="cb1-121">        <span class="st">"color"</span> =<span class="st"> </span>input[[<span class="st">"pointLabelCol"</span>]]</span>
<span id="cb1-122">      )</span>
<span id="cb1-123">    )</span>
<span id="cb1-124">    <span class="kw">Index</span>(<span class="ot">NULL</span>)</span>
<span id="cb1-125">    <span class="kw">removeModal</span>()</span>
<span id="cb1-126">  })</span>
<span id="cb1-127">  </span>
<span id="cb1-128">  pointsLabelsTable &lt;-<span class="st"> </span><span class="kw">reactive</span>({</span>
<span id="cb1-129">    <span class="cf">if</span>(<span class="op">!</span><span class="kw">is.null</span>(hot &lt;-<span class="st"> </span>input[[<span class="st">"hot_pointsLabels"</span>]])){</span>
<span id="cb1-130">      <span class="kw">hot_to_r</span>(hot)</span>
<span id="cb1-131">    }<span class="cf">else</span>{</span>
<span id="cb1-132">      <span class="ot">NULL</span></span>
<span id="cb1-133">    }</span>
<span id="cb1-134">  })</span>
<span id="cb1-135">  </span>
<span id="cb1-136">  Labels &lt;-<span class="st"> </span><span class="kw">eventReactive</span>(input[[<span class="st">"hot_pointLabels"</span>]], {</span>
<span id="cb1-137">    dat &lt;-<span class="st"> </span><span class="kw">hot_to_r</span>(input[[<span class="st">"hot_pointLabels"</span>]])</span>
<span id="cb1-138">    indices &lt;-<span class="st"> </span>dat[[<span class="st">"index"</span>]]</span>
<span id="cb1-139">    labels  &lt;-<span class="st"> </span>dat[[<span class="st">"label"</span>]]</span>
<span id="cb1-140">    colors  &lt;-<span class="st"> </span>dat[[<span class="st">"color"</span>]]</span>
<span id="cb1-141">    keep &lt;-<span class="st"> </span>labels <span class="op">!=</span><span class="st"> ""</span></span>
<span id="cb1-142">    <span class="cf">if</span>(<span class="kw">any</span>(keep)){</span>
<span id="cb1-143">      L &lt;-<span class="st"> </span><span class="kw">mapply</span>(</span>
<span id="cb1-144">        c, labels[keep], colors[keep], </span>
<span id="cb1-145">        <span class="dt">SIMPLIFY =</span> <span class="ot">FALSE</span>, <span class="dt">USE.NAMES =</span> <span class="ot">FALSE</span></span>
<span id="cb1-146">      )</span>
<span id="cb1-147">      <span class="kw">setNames</span>(L, indices[keep])</span>
<span id="cb1-148">    }<span class="cf">else</span>{</span>
<span id="cb1-149">      <span class="ot">NULL</span></span>
<span id="cb1-150">    }</span>
<span id="cb1-151">  })</span>
<span id="cb1-152">  </span>
<span id="cb1-153">}</span>
<span id="cb1-154"></span>
<span id="cb1-155"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ggLabels.gif"
          style="width: 65%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 08 Aug 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ggplot2_labelling.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Expanding a polynomial with 'caracas', part 2</title>
      <link>https://laustep.github.io/stlahblog/posts/caracas02.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Last month, I posted an
        <a href="https://laustep.github.io/stlahblog/posts/caracas01.html"
          >article</a
        >
        showing a way to expand a polynomial in R when the coefficients of the
        polynomial contain some literal values, with the help of the
        <strong>caracas</strong> package. Today I wanted to apply it with a
        polynomial expression having about 500 characters, and highly
        factorized. The method took more than 30 minutes, so I looked for a more
        efficient one.
      </p>
      <p>
        Thanks to some help on StackOverflow, I came to the following method
        which is more efficient. It consists in splitting the expression
        according to its additive terms and to work on each term, instead of
        expanding the whole polynomial. In the example below I take the
        polynomial expression defining the isosurface equation of a Solid Möbius
        strip.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(caracas)</span>
<span id="cb1-2">sympy &lt;-<span class="st"> </span><span class="kw">get_sympy</span>()</span>
<span id="cb1-3"><span class="co"># define the variables x,y,z and the constants a,b</span></span>
<span id="cb1-4"><span class="kw">def_sym</span>(x, y, z, a, b)</span>
<span id="cb1-5"><span class="co"># define expression </span></span>
<span id="cb1-6">expr &lt;-<span class="st"> </span>sympy<span class="op">$</span><span class="kw">parse_expr</span>(</span>
<span id="cb1-7">  <span class="st">"((x*x+y*y+1)*(a*x*x+b*y*y)+z*z*(b*x*x+a*y*y)-2*(a-b)*x*y*z-a*b*(x*x+y*y))**2-4*(x*x+y*y)*(a*x*x+b*y*y-x*y*z*(a-b))**2"</span></span>
<span id="cb1-8">) </span>
<span id="cb1-9"><span class="co"># extraction of monomials in the 'povray' list</span></span>
<span id="cb1-10">povray &lt;-<span class="st"> </span><span class="kw">list</span>()</span>
<span id="cb1-11">terms &lt;-<span class="st"> </span>sympy<span class="op">$</span>Add<span class="op">$</span><span class="kw">make_args</span>(expr)</span>
<span id="cb1-12"><span class="cf">for</span>(term <span class="cf">in</span> terms){</span>
<span id="cb1-13">  f &lt;-<span class="st"> </span>term<span class="op">$</span><span class="kw">expand</span>()</span>
<span id="cb1-14">  fterms &lt;-<span class="st"> </span>sympy<span class="op">$</span>Add<span class="op">$</span><span class="kw">make_args</span>(f)</span>
<span id="cb1-15">  <span class="cf">for</span>(fterm <span class="cf">in</span> fterms){</span>
<span id="cb1-16">    decomp  &lt;-<span class="st"> </span>fterm<span class="op">$</span><span class="kw">as_coeff_mul</span>(x<span class="op">$</span>pyobj, y<span class="op">$</span>pyobj, z<span class="op">$</span>pyobj)</span>
<span id="cb1-17">    coef    &lt;-<span class="st"> </span>decomp[[<span class="dv">1</span>]]</span>
<span id="cb1-18">    mono    &lt;-<span class="st"> </span>decomp[[<span class="dv">2</span>]]</span>
<span id="cb1-19">    polexpr &lt;-<span class="st"> </span>sympy<span class="op">$</span>Mul<span class="op">$</span><span class="kw">fromiter</span>(mono)</span>
<span id="cb1-20">    poly    &lt;-<span class="st"> </span>polexpr<span class="op">$</span><span class="kw">as_poly</span>(x<span class="op">$</span>pyobj, y<span class="op">$</span>pyobj, z<span class="op">$</span>pyobj)</span>
<span id="cb1-21">    degree  &lt;-<span class="st"> </span><span class="kw">toString</span>(poly<span class="op">$</span><span class="kw">monoms</span>()[[<span class="dv">1</span>]])</span>
<span id="cb1-22">    <span class="cf">if</span>(degree <span class="op">%in%</span><span class="st"> </span><span class="kw">names</span>(povray)){</span>
<span id="cb1-23">      povray[[degree]] &lt;-<span class="st"> </span>sympy<span class="op">$</span><span class="kw">Add</span>(povray[[degree]], coef)</span>
<span id="cb1-24">    }<span class="cf">else</span>{</span>
<span id="cb1-25">      povray[[degree]] &lt;-<span class="st"> </span>coef</span>
<span id="cb1-26">    }</span>
<span id="cb1-27">  }</span>
<span id="cb1-28">}</span>
<span id="cb1-29">polynomial &lt;-<span class="st"> </span><span class="kw">vapply</span>(<span class="kw">names</span>(povray), <span class="cf">function</span>(degree){</span>
<span id="cb1-30">  coeff &lt;-<span class="st"> </span>povray[[degree]] <span class="op">|</span><span class="er">&gt;</span></span>
<span id="cb1-31"><span class="st">    </span><span class="kw">gsub</span>(<span class="st">"([ab])</span><span class="ch">\\</span><span class="st">*</span><span class="ch">\\</span><span class="st">*(</span><span class="ch">\\</span><span class="st">d+)"</span>, <span class="st">"pow(</span><span class="ch">\\</span><span class="st">1,</span><span class="ch">\\</span><span class="st">2)"</span>, <span class="dt">x =</span> _)</span>
<span id="cb1-32">  <span class="kw">sprintf</span>(<span class="st">"xyz(%s): %s,"</span>, degree, coeff)</span>
<span id="cb1-33">}, <span class="kw">character</span>(1L))</span>
<span id="cb1-34"><span class="kw">cat</span>(polynomial, <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span>, <span class="dt">file =</span> <span class="st">"SolidMobiusStrip.txt"</span>)</span></code></pre>
      </div>
      <p>
        At the last step I use <code>gsub</code> to replace the powers like
        <code>a**2</code> to their POV-Ray syntax <code>pow(a,2)</code>. The
        above code writes this POV-Ray code:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode povray"
        ><code class="sourceCode povray"><span id="cb2-1">xyz(<span class="fl">4</span>, <span class="fl">0</span>, <span class="fl">0</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>)*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b + <span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb2-2">xyz(<span class="fl">8</span>, <span class="fl">0</span>, <span class="fl">0</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb2-3">xyz(<span class="fl">0</span>, <span class="fl">4</span>, <span class="fl">0</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>)*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">2</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) + <span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-4">xyz(<span class="fl">0</span>, <span class="fl">8</span>, <span class="fl">0</span>): <span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-5">xyz(<span class="fl">6</span>, <span class="fl">0</span>, <span class="fl">0</span>): <span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b - <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb2-6">xyz(<span class="fl">0</span>, <span class="fl">6</span>, <span class="fl">0</span>): <span class="fl">-2</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-7">xyz(<span class="fl">4</span>, <span class="fl">4</span>, <span class="fl">0</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>) + <span class="fl">4</span>*a*b + <span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-8">xyz(<span class="fl">0</span>, <span class="fl">4</span>, <span class="fl">4</span>): <span class="kw">pow</span>(a,<span class="fl">2</span>),</span>
<span id="cb2-9">xyz(<span class="fl">4</span>, <span class="fl">0</span>, <span class="fl">4</span>): <span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-10">xyz(<span class="fl">4</span>, <span class="fl">2</span>, <span class="fl">0</span>): <span class="fl">-4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b - <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) - <span class="fl">2</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">4</span>*a*b,</span>
<span id="cb2-11">xyz(<span class="fl">6</span>, <span class="fl">2</span>, <span class="fl">0</span>): <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) + <span class="fl">2</span>*a*b,</span>
<span id="cb2-12">xyz(<span class="fl">2</span>, <span class="fl">4</span>, <span class="fl">0</span>): <span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b - <span class="fl">4</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">4</span>*a*b - <span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-13">xyz(<span class="fl">2</span>, <span class="fl">6</span>, <span class="fl">0</span>): <span class="fl">2</span>*a*b + <span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-14">xyz(<span class="fl">1</span>, <span class="fl">3</span>, <span class="fl">3</span>): <span class="fl">-4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) + <span class="fl">4</span>*a*b,</span>
<span id="cb2-15">xyz(<span class="fl">3</span>, <span class="fl">1</span>, <span class="fl">1</span>): <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b - <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) - <span class="fl">4</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) + <span class="fl">4</span>*a*b,</span>
<span id="cb2-16">xyz(<span class="fl">5</span>, <span class="fl">1</span>, <span class="fl">1</span>): <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) - <span class="fl">4</span>*a*b,</span>
<span id="cb2-17">xyz(<span class="fl">3</span>, <span class="fl">3</span>, <span class="fl">1</span>): <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) - <span class="fl">4</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-18">xyz(<span class="fl">2</span>, <span class="fl">2</span>, <span class="fl">0</span>): <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b - <span class="fl">2</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) + <span class="fl">2</span>*a*b,</span>
<span id="cb2-19">xyz(<span class="fl">4</span>, <span class="fl">0</span>, <span class="fl">2</span>): <span class="fl">-2</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) + <span class="fl">2</span>*a*b,</span>
<span id="cb2-20">xyz(<span class="fl">0</span>, <span class="fl">4</span>, <span class="fl">2</span>): <span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b + <span class="fl">2</span>*a*b,</span>
<span id="cb2-21">xyz(<span class="fl">6</span>, <span class="fl">0</span>, <span class="fl">2</span>): <span class="fl">2</span>*a*b,</span>
<span id="cb2-22">xyz(<span class="fl">0</span>, <span class="fl">6</span>, <span class="fl">2</span>): <span class="fl">2</span>*a*b,</span>
<span id="cb2-23">xyz(<span class="fl">2</span>, <span class="fl">4</span>, <span class="fl">2</span>): <span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) + <span class="fl">10</span>*a*b - <span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-24">xyz(<span class="fl">4</span>, <span class="fl">2</span>, <span class="fl">2</span>): <span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) + <span class="fl">10</span>*a*b - <span class="fl">2</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-25">xyz(<span class="fl">1</span>, <span class="fl">3</span>, <span class="fl">1</span>): <span class="fl">4</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b - <span class="fl">4</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">4</span>*a*b + <span class="fl">4</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-26">xyz(<span class="fl">1</span>, <span class="fl">5</span>, <span class="fl">1</span>): <span class="fl">4</span>*a*b - <span class="fl">4</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-27">xyz(<span class="fl">3</span>, <span class="fl">1</span>, <span class="fl">3</span>): <span class="fl">-4</span>*a*b + <span class="fl">4</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-28">xyz(<span class="fl">2</span>, <span class="fl">2</span>, <span class="fl">2</span>): <span class="fl">-2</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>)*b + <span class="fl">6</span>*<span class="kw">pow</span>(a,<span class="fl">2</span>) - <span class="fl">2</span>*a*<span class="kw">pow</span>(b,<span class="fl">2</span>) - <span class="fl">8</span>*a*b + <span class="fl">6</span>*<span class="kw">pow</span>(b,<span class="fl">2</span>),</span>
<span id="cb2-29">xyz(<span class="fl">2</span>, <span class="fl">2</span>, <span class="fl">4</span>): <span class="fl">2</span>*a*b,</span></code></pre>
      </div>
      <p>
        This is very fast for this example, but it still took 20 minutes with my
        case, which is a slight modification of an animation by ‘ICN5D’; here it
        is:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ICN5D_02.gif"
        />
      </p>
      <p>
        The difference with the original animation is that this one uses an
        <a
          href="https://laustep.github.io/stlahblog/posts/slicedImplicitHypersurface.html"
          >isoclinic rotation</a
        >
        for the animation.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 16 Jul 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/caracas02.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Slices of an implicit hypersurface with R</title>
      <link>https://laustep.github.io/stlahblog/posts/slicedImplicitHypersurface.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In a
        <a
          href="https://laustep.github.io/stlahblog/posts/slicedHypersurface.html"
          >previous post</a
        >, I showed how to draw a 3D slice of a 4D hypersurface when a
        parameterization of this hypersurface is available. Here we deal with
        the case when an implicit equation of the hypersurface is available. For
        the illustration, we again consider the
        <a href="http://hi.gher.space/wiki/Tiger"><em>tiger</em></a
        >. It is given by the implicit equation
        <span class="math display"
          >\[ {\bigl(\sqrt{x^2 + y^2} - R_1\bigr)}^2 + {\bigl(\sqrt{z^2 + w^2} -
          R_2\bigr)}^2 = r^2. \]</span
        >
        We will fix a value of the fourth coordinate
        <span class="math inline">\(w\)</span>, say
        <span class="math inline">\(w_0\)</span>. That is to say we deal with
        the cross-section with the hyperplane
        <span class="math inline">\(\{w = w_0\}\)</span>. And we will rotate the
        hypersurface in the 4D space. We use a
        <a
          href="https://en.wikipedia.org/wiki/Rotations_in_4-dimensional_Euclidean_space"
          ><em>right-isoclinic</em></a
        >
        rotation. The function below performs such a rotation, allowing to pass
        several input vectors as a matrix.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># right-isoclinic rotation in 4D space </span></span>
<span id="cb1-2"><span class="co"># xi is the angle of rotation</span></span>
<span id="cb1-3">rotate4d &lt;-<span class="st"> </span><span class="cf">function</span>(alpha, beta, xi, vec){</span>
<span id="cb1-4">  a &lt;-<span class="st"> </span><span class="kw">cos</span>(xi)</span>
<span id="cb1-5">  b &lt;-<span class="st"> </span><span class="kw">sin</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(beta) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(xi)</span>
<span id="cb1-6">  c &lt;-<span class="st"> </span><span class="kw">sin</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(beta) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(xi)</span>
<span id="cb1-7">  d &lt;-<span class="st"> </span><span class="kw">cos</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(xi)</span>
<span id="cb1-8">  x &lt;-<span class="st"> </span>vec[, 1L]; y &lt;-<span class="st"> </span>vec[, 2L]; z &lt;-<span class="st"> </span>vec[, 3L]; w &lt;-<span class="st"> </span>vec[, 4L]</span>
<span id="cb1-9">  <span class="kw">cbind</span>(</span>
<span id="cb1-10">    a<span class="op">*</span>x <span class="op">-</span><span class="st"> </span>b<span class="op">*</span>y <span class="op">-</span><span class="st"> </span>c<span class="op">*</span>z <span class="op">-</span><span class="st"> </span>d<span class="op">*</span>w,</span>
<span id="cb1-11">    a<span class="op">*</span>y <span class="op">+</span><span class="st"> </span>b<span class="op">*</span>x <span class="op">+</span><span class="st"> </span>c<span class="op">*</span>w <span class="op">-</span><span class="st"> </span>d<span class="op">*</span>z,</span>
<span id="cb1-12">    a<span class="op">*</span>z <span class="op">-</span><span class="st"> </span>b<span class="op">*</span>w <span class="op">+</span><span class="st"> </span>c<span class="op">*</span>x <span class="op">+</span><span class="st"> </span>d<span class="op">*</span>y,</span>
<span id="cb1-13">    a<span class="op">*</span>w <span class="op">+</span><span class="st"> </span>b<span class="op">*</span>z <span class="op">-</span><span class="st"> </span>c<span class="op">*</span>y <span class="op">+</span><span class="st"> </span>d<span class="op">*</span>x</span>
<span id="cb1-14">  )</span>
<span id="cb1-15">}</span></code></pre>
      </div>
      <p>
        So, in the implicit equation we fix
        <span class="math inline">\(w=w_0\)</span> and we perform the rotation,
        taking arbitrary values for
        <span class="math inline">\(\alpha\)</span> and
        <span class="math inline">\(\beta\)</span>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1">f &lt;-<span class="st"> </span><span class="cf">function</span>(xyz, w0, xi, <span class="dt">R1 =</span> <span class="dv">3</span>, <span class="dt">R2 =</span> <span class="dv">2</span>, <span class="dt">r =</span> <span class="dv">1</span>){</span>
<span id="cb2-2">  rxyzw &lt;-<span class="st"> </span><span class="kw">rotate4d</span>(pi<span class="op">/</span><span class="dv">4</span>, pi<span class="op">/</span><span class="dv">4</span>, xi, <span class="kw">cbind</span>(xyz, w0))</span>
<span id="cb2-3">  x &lt;-<span class="st"> </span>rxyzw[, 1L]</span>
<span id="cb2-4">  y &lt;-<span class="st"> </span>rxyzw[, 2L]</span>
<span id="cb2-5">  z &lt;-<span class="st"> </span>rxyzw[, 3L]</span>
<span id="cb2-6">  w &lt;-<span class="st"> </span>rxyzw[, 4L]</span>
<span id="cb2-7">  (<span class="kw">sqrt</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>) <span class="op">-</span><span class="st"> </span>R1)<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>(<span class="kw">sqrt</span>(z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>w<span class="op">^</span><span class="dv">2</span>) <span class="op">-</span><span class="st"> </span>R2)<span class="op">^</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>r<span class="op">^</span><span class="dv">2</span></span>
<span id="cb2-8">}</span></code></pre>
      </div>
      <p>
        To plot the isosurface, we will use the
        <strong>rmarchingcubes</strong> package, not only for its speed, but
        also because it computes an excellent approximation of the per-vertex
        normals (it approximates the gradient of
        <span class="math inline">\(f\)</span>). So taking a
        <span class="math inline">\(150 \times 150 \times 150\)</span> grid is
        enough to get a smooth surface:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="co"># make grid ####</span></span>
<span id="cb3-2">n &lt;-<span class="st"> </span>150L</span>
<span id="cb3-3">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">len =</span> n)</span>
<span id="cb3-4">y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">len =</span> n)</span>
<span id="cb3-5">z &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">len =</span> n)</span>
<span id="cb3-6">Grid &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">X =</span> x, <span class="dt">Y =</span> y, <span class="dt">Z =</span> z)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co"># run the marching cubes #### </span></span>
<span id="cb3-9"><span class="kw">library</span>(rmarchingcubes)</span>
<span id="cb3-10">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">f</span>(Grid, <span class="dt">w_0 =</span> <span class="fl">0.3</span>, <span class="dt">xi =</span> pi<span class="op">/</span><span class="dv">3</span>), <span class="dt">dim =</span> <span class="kw">c</span>(n, n, n))</span>
<span id="cb3-11">cont &lt;-<span class="st"> </span><span class="kw">contour3d</span>(voxel, <span class="dt">level =</span> <span class="dv">0</span>, <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co"># plot #### </span></span>
<span id="cb3-14"><span class="kw">library</span>(rgl)</span>
<span id="cb3-15">mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb3-16">  <span class="dt">vertices =</span> <span class="kw">t</span>(cont[[<span class="st">"vertices"</span>]]),</span>
<span id="cb3-17">  <span class="dt">indices  =</span> <span class="kw">t</span>(cont[[<span class="st">"triangles"</span>]]),</span>
<span id="cb3-18">  <span class="dt">normals  =</span> cont[[<span class="st">"normals"</span>]],</span>
<span id="cb3-19">  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb3-20">)</span>
<span id="cb3-21"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb3-22"><span class="kw">bg3d</span>(</span>
<span id="cb3-23">  <span class="dt">sphere =</span> <span class="ot">FALSE</span>, <span class="dt">texture =</span> <span class="st">"SpaceBackground.png"</span>, <span class="dt">col =</span> <span class="st">"white"</span></span>
<span id="cb3-24">)</span>
<span id="cb3-25"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"maroon"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tiger01(implicit).png"
          style="width: 50%"
        />
      </p>
      <p>
        Now let’s make an animation by varying the angle of rotation
        <span class="math inline">\(\xi\)</span> from
        <span class="math inline">\(0\)</span> to
        <span class="math inline">\(\pi\)</span>.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1"><span class="co"># vector of angles #### </span></span>
<span id="cb4-2">nframes &lt;-<span class="st"> </span>60L</span>
<span id="cb4-3">xi_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, pi, <span class="dt">length.out =</span> nframes)</span>
<span id="cb4-4"><span class="co"># open the 3D engine #### </span></span>
<span id="cb4-5"><span class="kw">open3d</span>(</span>
<span id="cb4-6">  <span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>),</span>
<span id="cb4-7">  <span class="dt">zoom       =</span> <span class="fl">0.85</span>,</span>
<span id="cb4-8">  <span class="dt">userMatrix =</span> <span class="kw">rbind</span>(</span>
<span id="cb4-9">    <span class="kw">c</span>(<span class="fl">0.93</span>, <span class="fl">-0.16</span>, <span class="fl">-0.33</span>, <span class="dv">0</span>),</span>
<span id="cb4-10">    <span class="kw">c</span>(<span class="fl">0.35</span>,  <span class="fl">0.66</span>,  <span class="fl">0.67</span>, <span class="dv">0</span>),</span>
<span id="cb4-11">    <span class="kw">c</span>(<span class="fl">0.11</span>, <span class="fl">-0.74</span>,  <span class="fl">0.67</span>, <span class="dv">0</span>),</span>
<span id="cb4-12">    <span class="kw">c</span>(   <span class="dv">0</span>,     <span class="dv">0</span>,     <span class="dv">0</span>, <span class="dv">1</span>)</span>
<span id="cb4-13">  )</span>
<span id="cb4-14">)</span>
<span id="cb4-15"><span class="kw">bg3d</span>(</span>
<span id="cb4-16">  <span class="dt">sphere =</span> <span class="ot">FALSE</span>, <span class="dt">texture =</span> <span class="st">"SpaceBackground.png"</span>, <span class="dt">col =</span> <span class="st">"white"</span></span>
<span id="cb4-17">)</span>
<span id="cb4-18"><span class="co"># save the frames in png files #### </span></span>
<span id="cb4-19"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nframes){</span>
<span id="cb4-20">  v &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">f</span>(Grid, <span class="dt">w0 =</span> <span class="fl">0.3</span>, <span class="dt">xi =</span> xi_[i]), <span class="dt">dim =</span> <span class="kw">c</span>(n, n, n))</span>
<span id="cb4-21">  cont &lt;-<span class="st"> </span><span class="kw">contour3d</span>(v, <span class="dt">level =</span> <span class="dv">0</span>, <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z)</span>
<span id="cb4-22">  mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb4-23">    <span class="dt">vertices =</span> <span class="kw">t</span>(cont[[<span class="st">"vertices"</span>]]),</span>
<span id="cb4-24">    <span class="dt">indices  =</span> <span class="kw">t</span>(cont[[<span class="st">"triangles"</span>]]),</span>
<span id="cb4-25">    <span class="dt">normals  =</span> cont[[<span class="st">"normals"</span>]],</span>
<span id="cb4-26">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb4-27">  )</span>
<span id="cb4-28">  <span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"maroon"</span>)</span>
<span id="cb4-29">  <span class="kw">snapshot3d</span>(<span class="kw">sprintf</span>(<span class="st">"zzpic%03d.png"</span>, i), <span class="dt">webshot =</span> <span class="ot">FALSE</span>)</span>
<span id="cb4-30">  <span class="kw">clear3d</span>()</span>
<span id="cb4-31">}</span>
<span id="cb4-32"><span class="co"># make the animation with ImageMagick #### </span></span>
<span id="cb4-33"><span class="co"># option '-duplicate 1,-2-1' to get a forward-backward animation</span></span>
<span id="cb4-34">command &lt;-<span class="st"> </span><span class="kw">paste0</span>(</span>
<span id="cb4-35">  <span class="st">"magick convert -dispose previous -delay 10 "</span>,</span>
<span id="cb4-36">  <span class="st">"-duplicate 1,-2-1 zzpic*.png tiger.gif"</span></span>
<span id="cb4-37">)</span>
<span id="cb4-38"><span class="kw">system</span>(command)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tiger01(implicit).gif"
          style="width: 50%"
        />
      </p>
      <p>
        A similar animation with a more complex surface can be found on
        <a
          href="https://www.youtube.com/channel/UCQ2hC8ETS9FFm2pzzyZCVUw/videos"
          >my youtube channel</a
        >.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 15 Jul 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/slicedImplicitHypersurface.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Pretty tooltips for 'ggplot2'</title>
      <link>https://laustep.github.io/stlahblog/posts/ggplot2_qTipTooltips.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Below is a simple example of a ‘ggplot2’ graphic with tooltips in a
        Shiny application. The tooltips are constructed with the help of the
        <a href="https://github.com/qTip2/qTip2">qTip2</a> JavaScript library.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="kw">library</span>(shinyjs)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw">set.seed</span>(<span class="dv">666</span>)</span>
<span id="cb1-6">dat &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb1-7">  <span class="dt">x =</span> <span class="kw">rnorm</span>(<span class="dv">10</span>),</span>
<span id="cb1-8">  <span class="dt">y =</span> <span class="kw">rnorm</span>(<span class="dv">10</span>),</span>
<span id="cb1-9">  <span class="dt">f =</span> <span class="kw">gl</span>(<span class="dv">2</span>, <span class="dv">5</span>, <span class="dt">labels =</span> <span class="kw">c</span>(<span class="st">"A"</span>, <span class="st">"B"</span>))</span>
<span id="cb1-10">)</span>
<span id="cb1-11"></span>
<span id="cb1-12">qTipTemplate &lt;-<span class="st"> "</span></span>
<span id="cb1-13"><span class="st">$('#hoverinfo').qtip({</span></span>
<span id="cb1-14"><span class="st">  overwrite: true,</span></span>
<span id="cb1-15"><span class="st">  content: {</span></span>
<span id="cb1-16"><span class="st">    text: $('#tooltiptext').clone()</span></span>
<span id="cb1-17"><span class="st">  },</span></span>
<span id="cb1-18"><span class="st">  position: {</span></span>
<span id="cb1-19"><span class="st">    my: '%s',</span></span>
<span id="cb1-20"><span class="st">    at: '%s',</span></span>
<span id="cb1-21"><span class="st">    target: [%s, %s],</span></span>
<span id="cb1-22"><span class="st">    container: $('#ggplot')</span></span>
<span id="cb1-23"><span class="st">  },</span></span>
<span id="cb1-24"><span class="st">  show: {</span></span>
<span id="cb1-25"><span class="st">    ready: true</span></span>
<span id="cb1-26"><span class="st">  },</span></span>
<span id="cb1-27"><span class="st">  hide: {</span></span>
<span id="cb1-28"><span class="st">    event: false,</span></span>
<span id="cb1-29"><span class="st">    inactive: 4000</span></span>
<span id="cb1-30"><span class="st">  },</span></span>
<span id="cb1-31"><span class="st">  style: {</span></span>
<span id="cb1-32"><span class="st">    classes: 'myqtip'</span></span>
<span id="cb1-33"><span class="st">  }</span></span>
<span id="cb1-34"><span class="st">});</span></span>
<span id="cb1-35"><span class="st">"</span></span>
<span id="cb1-36"></span>
<span id="cb1-37">ui &lt;-<span class="st"> </span><span class="kw">basicPage</span>(</span>
<span id="cb1-38">  <span class="kw">useShinyjs</span>(),</span>
<span id="cb1-39">  tags<span class="op">$</span><span class="kw">head</span>(</span>
<span id="cb1-40">    tags<span class="op">$</span><span class="kw">link</span>(<span class="dt">rel =</span> <span class="st">"stylesheet"</span>, <span class="dt">href =</span> <span class="st">"jquery.qtip.css"</span>),</span>
<span id="cb1-41">    tags<span class="op">$</span><span class="kw">script</span>(<span class="dt">src =</span> <span class="st">"jquery.qtip.js"</span>),</span>
<span id="cb1-42">    tags<span class="op">$</span><span class="kw">style</span>(<span class="st">"</span></span>
<span id="cb1-43"><span class="st">      .myqtip {</span></span>
<span id="cb1-44"><span class="st">        font-size: 15px;</span></span>
<span id="cb1-45"><span class="st">        line-height: 18px;</span></span>
<span id="cb1-46"><span class="st">        background-color: rgba(245, 245, 245, 0.8);</span></span>
<span id="cb1-47"><span class="st">        border-color: rgb(54, 57, 64);</span></span>
<span id="cb1-48"><span class="st">      }"</span>)</span>
<span id="cb1-49">  ),</span>
<span id="cb1-50">  <span class="kw">div</span>(</span>
<span id="cb1-51">    <span class="dt">id =</span> <span class="st">"tooltiptext"</span>, <span class="dt">style =</span> <span class="st">"display: none;"</span></span>
<span id="cb1-52">  ),</span>
<span id="cb1-53">  <span class="kw">br</span>(),</span>
<span id="cb1-54">  <span class="kw">div</span>(</span>
<span id="cb1-55">    <span class="dt">style =</span> <span class="st">"position: relative;"</span>,</span>
<span id="cb1-56">    <span class="kw">plotOutput</span>(<span class="st">"ggplot"</span>, <span class="dt">hover =</span> <span class="kw">hoverOpts</span>(<span class="st">"plot_hover"</span>)),</span>
<span id="cb1-57">    <span class="kw">div</span>(<span class="dt">id =</span> <span class="st">"hoverinfo"</span>, <span class="dt">style =</span> <span class="st">"position: absolute;"</span>)</span>
<span id="cb1-58">  )</span>
<span id="cb1-59">)</span>
<span id="cb1-60"></span>
<span id="cb1-61">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session) {</span>
<span id="cb1-62">  output<span class="op">$</span>ggplot &lt;-<span class="st"> </span><span class="kw">renderPlot</span>(</span>
<span id="cb1-63">    <span class="kw">ggplot</span>(dat, <span class="kw">aes</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y)) <span class="op">+</span></span>
<span id="cb1-64"><span class="st">      </span><span class="kw">geom_point</span>(<span class="dt">size =</span> <span class="dv">6</span>) <span class="op">+</span></span>
<span id="cb1-65"><span class="st">      </span><span class="kw">theme</span>(</span>
<span id="cb1-66">        <span class="dt">panel.background =</span> <span class="kw">element_rect</span>(<span class="dt">fill =</span> <span class="st">"#FFCF9E"</span>),</span>
<span id="cb1-67">        <span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">19</span>),</span>
<span id="cb1-68">        <span class="dt">axis.text =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">16</span>)</span>
<span id="cb1-69">      )</span>
<span id="cb1-70">  )</span>
<span id="cb1-71"></span>
<span id="cb1-72">  <span class="kw">observeEvent</span>(input[[<span class="st">"plot_hover"</span>]], {</span>
<span id="cb1-73">    <span class="cf">if</span>(<span class="kw">is.null</span>(hover &lt;-<span class="st"> </span>input[[<span class="st">"plot_hover"</span>]])) {</span>
<span id="cb1-74">      <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb1-75">    }</span>
<span id="cb1-76">    point &lt;-<span class="st"> </span><span class="kw">nearPoints</span>(dat, hover, <span class="dt">threshold =</span> <span class="dv">15</span>, <span class="dt">maxpoints =</span> 1L)</span>
<span id="cb1-77">    <span class="cf">if</span>(<span class="kw">nrow</span>(point) <span class="op">==</span><span class="st"> </span>0L) {</span>
<span id="cb1-78">      <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb1-79">    }</span>
<span id="cb1-80">    left_pct &lt;-</span>
<span id="cb1-81"><span class="st">      </span>(point[[<span class="st">"x"</span>]] <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>left) <span class="op">/</span></span>
<span id="cb1-82"><span class="st">        </span>(hover<span class="op">$</span>domain<span class="op">$</span>right <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>left)</span>
<span id="cb1-83">    top_pct &lt;-</span>
<span id="cb1-84"><span class="st">      </span>(hover<span class="op">$</span>domain<span class="op">$</span>top <span class="op">-</span><span class="st"> </span>point[[<span class="st">"y"</span>]]) <span class="op">/</span></span>
<span id="cb1-85"><span class="st">        </span>(hover<span class="op">$</span>domain<span class="op">$</span>top <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>bottom)</span>
<span id="cb1-86">    left_px &lt;-</span>
<span id="cb1-87"><span class="st">      </span>(hover<span class="op">$</span>range<span class="op">$</span>left <span class="op">+</span><span class="st"> </span>left_pct <span class="op">*</span><span class="st"> </span>(hover<span class="op">$</span>range<span class="op">$</span>right <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>range<span class="op">$</span>left)) <span class="op">/</span></span>
<span id="cb1-88"><span class="st">        </span>hover<span class="op">$</span>img_css_ratio<span class="op">$</span>x</span>
<span id="cb1-89">    top_px &lt;-</span>
<span id="cb1-90"><span class="st">      </span>(hover<span class="op">$</span>range<span class="op">$</span>top <span class="op">+</span><span class="st"> </span>top_pct <span class="op">*</span><span class="st"> </span>(hover<span class="op">$</span>range<span class="op">$</span>bottom <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>range<span class="op">$</span>top)) <span class="op">/</span></span>
<span id="cb1-91"><span class="st">        </span>hover<span class="op">$</span>img_css_ratio<span class="op">$</span>y</span>
<span id="cb1-92">    pos &lt;-<span class="st"> </span><span class="kw">ifelse</span>(left_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb1-93">      <span class="kw">ifelse</span>(top_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb1-94">        <span class="st">"top left"</span>,</span>
<span id="cb1-95">        <span class="st">"bottom left"</span></span>
<span id="cb1-96">      ),</span>
<span id="cb1-97">      <span class="kw">ifelse</span>(top_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb1-98">        <span class="st">"top right"</span>,</span>
<span id="cb1-99">        <span class="st">"bottom right"</span></span>
<span id="cb1-100">      )</span>
<span id="cb1-101">    )</span>
<span id="cb1-102">    tooltip &lt;-<span class="st"> </span><span class="kw">paste0</span>(</span>
<span id="cb1-103">      <span class="st">"&lt;b&gt; x: &lt;/b&gt;"</span>, <span class="kw">formatC</span>(point[[<span class="st">"x"</span>]]), <span class="st">"&lt;br/&gt;"</span>,</span>
<span id="cb1-104">      <span class="st">"&lt;b&gt; y: &lt;/b&gt;"</span>, <span class="kw">formatC</span>(point[[<span class="st">"y"</span>]]), <span class="st">"&lt;br/&gt;"</span>,</span>
<span id="cb1-105">      <span class="st">"&lt;b&gt; f: &lt;/b&gt;"</span>, <span class="kw">as.character</span>(point[[<span class="st">"f"</span>]])</span>
<span id="cb1-106">    )</span>
<span id="cb1-107">    <span class="kw">runjs</span>(</span>
<span id="cb1-108">      <span class="kw">paste0</span>(</span>
<span id="cb1-109">        <span class="kw">sprintf</span>(</span>
<span id="cb1-110">          <span class="st">"$('#tooltiptext').html('%s');"</span>, tooltip</span>
<span id="cb1-111">        ),</span>
<span id="cb1-112">        <span class="kw">sprintf</span>(qTipTemplate, pos, pos, left_px, top_px)</span>
<span id="cb1-113">      )</span>
<span id="cb1-114">    )</span>
<span id="cb1-115">  })</span>
<span id="cb1-116">}</span>
<span id="cb1-117"></span>
<span id="cb1-118"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ggplot2_qTipTooltips.gif"
          style="width: 65%"
        />
      </p>
      <p>We can easily set some colors with the help of CSS classes:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">set.seed</span>(<span class="dv">666</span>)</span>
<span id="cb2-2">dat &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb2-3">  <span class="dt">x =</span> <span class="kw">c</span>(<span class="kw">rnorm</span>(<span class="dv">10</span>, <span class="dv">0</span>), <span class="kw">rnorm</span>(<span class="dv">10</span>, <span class="dv">2</span>), <span class="kw">rnorm</span>(<span class="dv">10</span>, <span class="dv">4</span>)),</span>
<span id="cb2-4">  <span class="dt">y =</span> <span class="kw">c</span>(<span class="kw">rnorm</span>(<span class="dv">10</span>, <span class="dv">0</span>), <span class="kw">rnorm</span>(<span class="dv">10</span>, <span class="dv">2</span>), <span class="kw">rnorm</span>(<span class="dv">10</span>, <span class="dv">4</span>)),</span>
<span id="cb2-5">  <span class="dt">f =</span> <span class="kw">gl</span>(<span class="dv">3</span>, <span class="dv">10</span>, <span class="dt">labels =</span> <span class="kw">c</span>(<span class="st">"A"</span>, <span class="st">"B"</span>, <span class="st">"C"</span>))</span>
<span id="cb2-6">)</span>
<span id="cb2-7"></span>
<span id="cb2-8">qTipTemplate &lt;-<span class="st"> "</span></span>
<span id="cb2-9"><span class="st">$('#hoverinfo').qtip({</span></span>
<span id="cb2-10"><span class="st">  overwrite: true,</span></span>
<span id="cb2-11"><span class="st">  content: {</span></span>
<span id="cb2-12"><span class="st">    text: $('#tooltiptext').clone()</span></span>
<span id="cb2-13"><span class="st">  },</span></span>
<span id="cb2-14"><span class="st">  position: {</span></span>
<span id="cb2-15"><span class="st">    my: '%s',</span></span>
<span id="cb2-16"><span class="st">    at: '%s',</span></span>
<span id="cb2-17"><span class="st">    target: [%s, %s],</span></span>
<span id="cb2-18"><span class="st">    container: $('#ggplot')</span></span>
<span id="cb2-19"><span class="st">  },</span></span>
<span id="cb2-20"><span class="st">  show: {</span></span>
<span id="cb2-21"><span class="st">    ready: true</span></span>
<span id="cb2-22"><span class="st">  },</span></span>
<span id="cb2-23"><span class="st">  hide: {</span></span>
<span id="cb2-24"><span class="st">    event: false,</span></span>
<span id="cb2-25"><span class="st">    inactive: 4000</span></span>
<span id="cb2-26"><span class="st">  },</span></span>
<span id="cb2-27"><span class="st">  style: {</span></span>
<span id="cb2-28"><span class="st">    classes: 'myqtip %s'</span></span>
<span id="cb2-29"><span class="st">  }</span></span>
<span id="cb2-30"><span class="st">});</span></span>
<span id="cb2-31"><span class="st">"</span></span>
<span id="cb2-32"></span>
<span id="cb2-33">ui &lt;-<span class="st"> </span><span class="kw">basicPage</span>(</span>
<span id="cb2-34">  <span class="kw">useShinyjs</span>(),</span>
<span id="cb2-35">  tags<span class="op">$</span><span class="kw">head</span>(</span>
<span id="cb2-36">    tags<span class="op">$</span><span class="kw">link</span>(<span class="dt">rel =</span> <span class="st">"stylesheet"</span>, <span class="dt">href =</span> <span class="st">"jquery.qtip.css"</span>),</span>
<span id="cb2-37">    tags<span class="op">$</span><span class="kw">script</span>(<span class="dt">src =</span> <span class="st">"jquery.qtip.js"</span>),</span>
<span id="cb2-38">    tags<span class="op">$</span><span class="kw">style</span>(<span class="st">"</span></span>
<span id="cb2-39"><span class="st">      .myqtip {</span></span>
<span id="cb2-40"><span class="st">        font-size: 15px;</span></span>
<span id="cb2-41"><span class="st">        line-height: 18px;</span></span>
<span id="cb2-42"><span class="st">        color: white;</span></span>
<span id="cb2-43"><span class="st">        border-color: rgb(54, 57, 64);</span></span>
<span id="cb2-44"><span class="st">      }</span></span>
<span id="cb2-45"><span class="st">      .darkred {</span></span>
<span id="cb2-46"><span class="st">        background-color: rgba(139, 0, 0, 0.8);</span></span>
<span id="cb2-47"><span class="st">      }</span></span>
<span id="cb2-48"><span class="st">      .darkgreen {</span></span>
<span id="cb2-49"><span class="st">        background-color: rgba(0, 100, 0, 0.8);</span></span>
<span id="cb2-50"><span class="st">      }</span></span>
<span id="cb2-51"><span class="st">      .darkblue {</span></span>
<span id="cb2-52"><span class="st">        background-color: rgba(0, 0, 139, 0.8);</span></span>
<span id="cb2-53"><span class="st">      }</span></span>
<span id="cb2-54"><span class="st">      "</span>)</span>
<span id="cb2-55">  ),</span>
<span id="cb2-56">  <span class="kw">div</span>(</span>
<span id="cb2-57">    <span class="dt">id =</span> <span class="st">"tooltiptext"</span>, <span class="dt">style =</span> <span class="st">"display: none;"</span></span>
<span id="cb2-58">  ),</span>
<span id="cb2-59">  <span class="kw">br</span>(),</span>
<span id="cb2-60">  <span class="kw">div</span>(</span>
<span id="cb2-61">    <span class="dt">style =</span> <span class="st">"position: relative;"</span>,</span>
<span id="cb2-62">    <span class="kw">plotOutput</span>(<span class="st">"ggplot"</span>, <span class="dt">hover =</span> <span class="kw">hoverOpts</span>(<span class="st">"plot_hover"</span>)),</span>
<span id="cb2-63">    <span class="kw">div</span>(<span class="dt">id =</span> <span class="st">"hoverinfo"</span>, <span class="dt">style =</span> <span class="st">"position: absolute;"</span>)</span>
<span id="cb2-64">  )</span>
<span id="cb2-65">)</span>
<span id="cb2-66"></span>
<span id="cb2-67">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session) {</span>
<span id="cb2-68">  output<span class="op">$</span>ggplot &lt;-<span class="st"> </span><span class="kw">renderPlot</span>(</span>
<span id="cb2-69">    <span class="kw">ggplot</span>(dat, <span class="kw">aes</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">color =</span> f)) <span class="op">+</span><span class="st"> </span><span class="kw">geom_point</span>(<span class="dt">size =</span> <span class="dv">4</span>) <span class="op">+</span></span>
<span id="cb2-70"><span class="st">      </span><span class="kw">scale_color_manual</span>(</span>
<span id="cb2-71">        <span class="dt">values =</span> <span class="kw">c</span>(<span class="st">"darkred"</span>, <span class="st">"darkgreen"</span>, <span class="st">"darkblue"</span>)</span>
<span id="cb2-72">      ) <span class="op">+</span></span>
<span id="cb2-73"><span class="st">      </span><span class="kw">theme</span>(</span>
<span id="cb2-74">        <span class="dt">panel.background =</span> <span class="kw">element_rect</span>(<span class="dt">fill =</span> <span class="st">"gainsboro"</span>),</span>
<span id="cb2-75">        <span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">19</span>),</span>
<span id="cb2-76">        <span class="dt">axis.text =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">16</span>),</span>
<span id="cb2-77">        <span class="dt">legend.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">18</span>),</span>
<span id="cb2-78">        <span class="dt">legend.text =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">15</span>),</span>
<span id="cb2-79">        <span class="dt">legend.key.size =</span> <span class="kw">unit</span>(<span class="dv">4</span>, <span class="st">"points"</span>)</span>
<span id="cb2-80">      )</span>
<span id="cb2-81">  )</span>
<span id="cb2-82"></span>
<span id="cb2-83">  <span class="kw">observeEvent</span>(input[[<span class="st">"plot_hover"</span>]], {</span>
<span id="cb2-84">    <span class="cf">if</span>(<span class="kw">is.null</span>(hover &lt;-<span class="st"> </span>input[[<span class="st">"plot_hover"</span>]])) {</span>
<span id="cb2-85">      <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb2-86">    }</span>
<span id="cb2-87">    point &lt;-<span class="st"> </span><span class="kw">nearPoints</span>(dat, hover, <span class="dt">threshold =</span> <span class="dv">15</span>, <span class="dt">maxpoints =</span> 1L)</span>
<span id="cb2-88">    <span class="cf">if</span>(<span class="kw">nrow</span>(point) <span class="op">==</span><span class="st"> </span>0L) {</span>
<span id="cb2-89">      <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb2-90">    }</span>
<span id="cb2-91">    left_pct &lt;-</span>
<span id="cb2-92"><span class="st">      </span>(point[[<span class="st">"x"</span>]] <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>left) <span class="op">/</span></span>
<span id="cb2-93"><span class="st">        </span>(hover<span class="op">$</span>domain<span class="op">$</span>right <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>left)</span>
<span id="cb2-94">    top_pct &lt;-</span>
<span id="cb2-95"><span class="st">      </span>(hover<span class="op">$</span>domain<span class="op">$</span>top <span class="op">-</span><span class="st"> </span>point[[<span class="st">"y"</span>]]) <span class="op">/</span></span>
<span id="cb2-96"><span class="st">        </span>(hover<span class="op">$</span>domain<span class="op">$</span>top <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>bottom)</span>
<span id="cb2-97">    left_px &lt;-</span>
<span id="cb2-98"><span class="st">      </span>(hover<span class="op">$</span>range<span class="op">$</span>left <span class="op">+</span><span class="st"> </span>left_pct <span class="op">*</span><span class="st"> </span>(hover<span class="op">$</span>range<span class="op">$</span>right <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>range<span class="op">$</span>left)) <span class="op">/</span></span>
<span id="cb2-99"><span class="st">        </span>hover<span class="op">$</span>img_css_ratio<span class="op">$</span>x</span>
<span id="cb2-100">    top_px &lt;-</span>
<span id="cb2-101"><span class="st">      </span>(hover<span class="op">$</span>range<span class="op">$</span>top <span class="op">+</span><span class="st"> </span>top_pct <span class="op">*</span><span class="st"> </span>(hover<span class="op">$</span>range<span class="op">$</span>bottom <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>range<span class="op">$</span>top)) <span class="op">/</span></span>
<span id="cb2-102"><span class="st">        </span>hover<span class="op">$</span>img_css_ratio<span class="op">$</span>y</span>
<span id="cb2-103">    pos &lt;-<span class="st"> </span><span class="kw">ifelse</span>(left_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb2-104">      <span class="kw">ifelse</span>(top_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb2-105">        <span class="st">"top left"</span>,</span>
<span id="cb2-106">        <span class="st">"bottom left"</span></span>
<span id="cb2-107">      ),</span>
<span id="cb2-108">      <span class="kw">ifelse</span>(top_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb2-109">        <span class="st">"top right"</span>,</span>
<span id="cb2-110">        <span class="st">"bottom right"</span></span>
<span id="cb2-111">      )</span>
<span id="cb2-112">    )</span>
<span id="cb2-113">    f &lt;-<span class="st"> </span><span class="kw">as.character</span>(point[[<span class="st">"f"</span>]])</span>
<span id="cb2-114">    color &lt;-<span class="st"> </span><span class="cf">switch</span>(f,</span>
<span id="cb2-115">      <span class="dt">A =</span> <span class="st">"darkred"</span>,</span>
<span id="cb2-116">      <span class="dt">B =</span> <span class="st">"darkgreen"</span>,</span>
<span id="cb2-117">      <span class="dt">C =</span> <span class="st">"darkblue"</span></span>
<span id="cb2-118">    )</span>
<span id="cb2-119">    tooltip &lt;-<span class="st"> </span><span class="kw">paste0</span>(</span>
<span id="cb2-120">      <span class="st">"&lt;b&gt; x: &lt;/b&gt;"</span>, <span class="kw">formatC</span>(point[[<span class="st">"x"</span>]]), <span class="st">"&lt;br/&gt;"</span>,</span>
<span id="cb2-121">      <span class="st">"&lt;b&gt; y: &lt;/b&gt;"</span>, <span class="kw">formatC</span>(point[[<span class="st">"y"</span>]]), <span class="st">"&lt;br/&gt;"</span>,</span>
<span id="cb2-122">      <span class="st">"&lt;b&gt; f: &lt;/b&gt;"</span>, f</span>
<span id="cb2-123">    )</span>
<span id="cb2-124">    <span class="kw">runjs</span>(</span>
<span id="cb2-125">      <span class="kw">paste0</span>(</span>
<span id="cb2-126">        <span class="kw">sprintf</span>(</span>
<span id="cb2-127">          <span class="st">"$('#tooltiptext').html('%s');"</span>, tooltip</span>
<span id="cb2-128">        ),</span>
<span id="cb2-129">        <span class="kw">sprintf</span>(qTipTemplate, pos, pos, left_px, top_px, color)</span>
<span id="cb2-130">      )</span>
<span id="cb2-131">    )</span>
<span id="cb2-132">  })</span>
<span id="cb2-133">}</span>
<span id="cb2-134"></span>
<span id="cb2-135"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ggplot2_qTipTooltips2.gif"
          style="width: 65%"
        />
      </p>
      <p>
        Let’s do something a bit more complicated now, with a continuous color
        scale. The idea is to define a CSS class for each point.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(shiny)</span>
<span id="cb3-2"><span class="kw">library</span>(shinyjs)</span>
<span id="cb3-3"><span class="kw">library</span>(ggplot2)</span>
<span id="cb3-4"><span class="kw">library</span>(viridisLite)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw">set.seed</span>(666L)</span>
<span id="cb3-7">n &lt;-<span class="st"> </span>200L</span>
<span id="cb3-8">dat &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb3-9">  <span class="dt">x =</span> <span class="dv">1</span><span class="op">:</span>n,</span>
<span id="cb3-10">  <span class="dt">y =</span> <span class="kw">runif</span>(n)</span>
<span id="cb3-11">)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co"># font color given background color:</span></span>
<span id="cb3-14">black_or_white &lt;-<span class="st"> </span><span class="cf">function</span>(color) {</span>
<span id="cb3-15">  rgb &lt;-<span class="st"> </span><span class="kw">col2rgb</span>(color)</span>
<span id="cb3-16">  <span class="cf">if</span>(rgb[<span class="dv">1</span>]<span class="op">*</span><span class="fl">0.299</span> <span class="op">+</span><span class="st"> </span>rgb[<span class="dv">2</span>]<span class="op">*</span><span class="fl">0.587</span> <span class="op">+</span><span class="st"> </span>rgb[<span class="dv">3</span>]<span class="op">*</span><span class="fl">0.114</span> <span class="op">&gt;</span><span class="st"> </span><span class="dv">186</span>)</span>
<span id="cb3-17">    <span class="st">"black"</span> <span class="co"># background color is light</span></span>
<span id="cb3-18">  <span class="cf">else</span></span>
<span id="cb3-19">    <span class="st">"white"</span> <span class="co"># background color is dark</span></span>
<span id="cb3-20">}</span>
<span id="cb3-21"></span>
<span id="cb3-22">ramp &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(<span class="kw">viridis</span>(255L))</span>
<span id="cb3-23"></span>
<span id="cb3-24">bkgs    &lt;-<span class="st"> </span><span class="kw">rgb</span>(<span class="kw">ramp</span>(dat<span class="op">$</span>y), <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb3-25">colors  &lt;-<span class="st"> </span><span class="kw">vapply</span>(bkgs, black_or_white, <span class="kw">character</span>(1L))</span>
<span id="cb3-26">classes &lt;-<span class="st"> </span><span class="kw">sprintf</span>(<span class="st">"color%03d"</span>, <span class="dv">1</span><span class="op">:</span>n)</span>
<span id="cb3-27">dat<span class="op">$</span>class &lt;-<span class="st"> </span>classes</span>
<span id="cb3-28"></span>
<span id="cb3-29">CSSclass &lt;-<span class="st"> </span><span class="cf">function</span>(i) {</span>
<span id="cb3-30">  <span class="kw">paste0</span>(</span>
<span id="cb3-31">    <span class="st">"."</span>, classes[i], <span class="st">" {"</span>,</span>
<span id="cb3-32">    <span class="st">"color: "</span>, colors[i], <span class="st">"; "</span>,</span>
<span id="cb3-33">    <span class="st">"background-color: "</span>, bkgs[i], <span class="st">";"</span>,</span>
<span id="cb3-34">    <span class="st">"}"</span></span>
<span id="cb3-35">  )</span>
<span id="cb3-36">}</span>
<span id="cb3-37">CSS &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="kw">vapply</span>(<span class="dv">1</span><span class="op">:</span>n, CSSclass, <span class="kw">character</span>(1L)), <span class="dt">collapse =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span>)</span>
<span id="cb3-38"></span>
<span id="cb3-39">qTipTemplate &lt;-<span class="st"> "</span></span>
<span id="cb3-40"><span class="st">$('#hoverinfo').qtip({</span></span>
<span id="cb3-41"><span class="st">  overwrite: true,</span></span>
<span id="cb3-42"><span class="st">  content: {</span></span>
<span id="cb3-43"><span class="st">    text: $('#tooltiptext').clone()</span></span>
<span id="cb3-44"><span class="st">  },</span></span>
<span id="cb3-45"><span class="st">  position: {</span></span>
<span id="cb3-46"><span class="st">    my: '%s',</span></span>
<span id="cb3-47"><span class="st">    at: '%s',</span></span>
<span id="cb3-48"><span class="st">    target: [%s, %s],</span></span>
<span id="cb3-49"><span class="st">    container: $('#ggplot')</span></span>
<span id="cb3-50"><span class="st">  },</span></span>
<span id="cb3-51"><span class="st">  show: {</span></span>
<span id="cb3-52"><span class="st">    ready: true</span></span>
<span id="cb3-53"><span class="st">  },</span></span>
<span id="cb3-54"><span class="st">  hide: {</span></span>
<span id="cb3-55"><span class="st">    event: false,</span></span>
<span id="cb3-56"><span class="st">    inactive: 4000</span></span>
<span id="cb3-57"><span class="st">  },</span></span>
<span id="cb3-58"><span class="st">  style: {</span></span>
<span id="cb3-59"><span class="st">    classes: 'myqtip %s'</span></span>
<span id="cb3-60"><span class="st">  }</span></span>
<span id="cb3-61"><span class="st">});</span></span>
<span id="cb3-62"><span class="st">"</span></span>
<span id="cb3-63"></span>
<span id="cb3-64">ui &lt;-<span class="st"> </span><span class="kw">basicPage</span>(</span>
<span id="cb3-65">  <span class="kw">useShinyjs</span>(),</span>
<span id="cb3-66">  tags<span class="op">$</span><span class="kw">head</span>(</span>
<span id="cb3-67">    tags<span class="op">$</span><span class="kw">link</span>(<span class="dt">rel =</span> <span class="st">"stylesheet"</span>, <span class="dt">href =</span> <span class="st">"jquery.qtip.css"</span>),</span>
<span id="cb3-68">    tags<span class="op">$</span><span class="kw">script</span>(<span class="dt">src =</span> <span class="st">"jquery.qtip.js"</span>),</span>
<span id="cb3-69">    tags<span class="op">$</span><span class="kw">style</span>(<span class="st">"</span></span>
<span id="cb3-70"><span class="st">      .myqtip {</span></span>
<span id="cb3-71"><span class="st">        font-size: 15px;</span></span>
<span id="cb3-72"><span class="st">        line-height: 18px;</span></span>
<span id="cb3-73"><span class="st">        color: white;</span></span>
<span id="cb3-74"><span class="st">        border-color: rgb(54, 57, 64);</span></span>
<span id="cb3-75"><span class="st">      }</span></span>
<span id="cb3-76"><span class="st">    "</span>),</span>
<span id="cb3-77">    tags<span class="op">$</span><span class="kw">style</span>(CSS)</span>
<span id="cb3-78">  ),</span>
<span id="cb3-79">  <span class="kw">div</span>(</span>
<span id="cb3-80">    <span class="dt">id =</span> <span class="st">"tooltiptext"</span>, <span class="dt">style =</span> <span class="st">"display: none;"</span></span>
<span id="cb3-81">  ),</span>
<span id="cb3-82">  <span class="kw">br</span>(),</span>
<span id="cb3-83">  <span class="kw">div</span>(</span>
<span id="cb3-84">    <span class="dt">style =</span> <span class="st">"position: relative;"</span>,</span>
<span id="cb3-85">    <span class="kw">plotOutput</span>(<span class="st">"ggplot"</span>, <span class="dt">hover =</span> <span class="kw">hoverOpts</span>(<span class="st">"plot_hover"</span>)),</span>
<span id="cb3-86">    <span class="kw">div</span>(<span class="dt">id =</span> <span class="st">"hoverinfo"</span>, <span class="dt">style =</span> <span class="st">"position: absolute;"</span>)</span>
<span id="cb3-87">  )</span>
<span id="cb3-88">)</span>
<span id="cb3-89"></span>
<span id="cb3-90">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session) {</span>
<span id="cb3-91">  output<span class="op">$</span>ggplot &lt;-<span class="st"> </span><span class="kw">renderPlot</span>(</span>
<span id="cb3-92">    <span class="kw">ggplot</span>(dat, <span class="kw">aes</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">color =</span> y)) <span class="op">+</span><span class="st"> </span><span class="kw">geom_point</span>(<span class="dt">size =</span> <span class="dv">3</span>) <span class="op">+</span></span>
<span id="cb3-93"><span class="st">      </span><span class="kw">scale_color_viridis_c</span>() <span class="op">+</span></span>
<span id="cb3-94"><span class="st">      </span><span class="kw">theme</span>(</span>
<span id="cb3-95">        <span class="dt">panel.background =</span> <span class="kw">element_rect</span>(<span class="dt">fill =</span> <span class="st">"gainsboro"</span>),</span>
<span id="cb3-96">        <span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">19</span>),</span>
<span id="cb3-97">        <span class="dt">axis.text =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">16</span>),</span>
<span id="cb3-98">        <span class="dt">legend.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">18</span>)</span>
<span id="cb3-99">      )</span>
<span id="cb3-100">  )</span>
<span id="cb3-101"></span>
<span id="cb3-102">  <span class="kw">observeEvent</span>(input[[<span class="st">"plot_hover"</span>]], {</span>
<span id="cb3-103">    <span class="cf">if</span>(<span class="kw">is.null</span>(hover &lt;-<span class="st"> </span>input[[<span class="st">"plot_hover"</span>]])) {</span>
<span id="cb3-104">      <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb3-105">    }</span>
<span id="cb3-106">    point &lt;-<span class="st"> </span><span class="kw">nearPoints</span>(dat, hover, <span class="dt">threshold =</span> <span class="dv">15</span>, <span class="dt">maxpoints =</span> 1L)</span>
<span id="cb3-107">    <span class="cf">if</span>(<span class="kw">nrow</span>(point) <span class="op">==</span><span class="st"> </span>0L) {</span>
<span id="cb3-108">      <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb3-109">    }</span>
<span id="cb3-110">    left_pct &lt;-</span>
<span id="cb3-111"><span class="st">      </span>(point[[<span class="st">"x"</span>]] <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>left) <span class="op">/</span></span>
<span id="cb3-112"><span class="st">        </span>(hover<span class="op">$</span>domain<span class="op">$</span>right <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>left)</span>
<span id="cb3-113">    top_pct &lt;-</span>
<span id="cb3-114"><span class="st">      </span>(hover<span class="op">$</span>domain<span class="op">$</span>top <span class="op">-</span><span class="st"> </span>point[[<span class="st">"y"</span>]]) <span class="op">/</span></span>
<span id="cb3-115"><span class="st">        </span>(hover<span class="op">$</span>domain<span class="op">$</span>top <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>domain<span class="op">$</span>bottom)</span>
<span id="cb3-116">    left_px &lt;-</span>
<span id="cb3-117"><span class="st">      </span>(hover<span class="op">$</span>range<span class="op">$</span>left <span class="op">+</span><span class="st"> </span>left_pct <span class="op">*</span><span class="st"> </span>(hover<span class="op">$</span>range<span class="op">$</span>right <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>range<span class="op">$</span>left)) <span class="op">/</span></span>
<span id="cb3-118"><span class="st">        </span>hover<span class="op">$</span>img_css_ratio<span class="op">$</span>x</span>
<span id="cb3-119">    top_px &lt;-</span>
<span id="cb3-120"><span class="st">      </span>(hover<span class="op">$</span>range<span class="op">$</span>top <span class="op">+</span><span class="st"> </span>top_pct <span class="op">*</span><span class="st"> </span>(hover<span class="op">$</span>range<span class="op">$</span>bottom <span class="op">-</span><span class="st"> </span>hover<span class="op">$</span>range<span class="op">$</span>top)) <span class="op">/</span></span>
<span id="cb3-121"><span class="st">        </span>hover<span class="op">$</span>img_css_ratio<span class="op">$</span>y</span>
<span id="cb3-122">    pos &lt;-<span class="st"> </span><span class="kw">ifelse</span>(left_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb3-123">      <span class="kw">ifelse</span>(top_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb3-124">        <span class="st">"top left"</span>,</span>
<span id="cb3-125">        <span class="st">"bottom left"</span></span>
<span id="cb3-126">      ),</span>
<span id="cb3-127">      <span class="kw">ifelse</span>(top_pct <span class="op">&lt;</span><span class="st"> </span><span class="fl">0.5</span>,</span>
<span id="cb3-128">        <span class="st">"top right"</span>,</span>
<span id="cb3-129">        <span class="st">"bottom right"</span></span>
<span id="cb3-130">      )</span>
<span id="cb3-131">    )</span>
<span id="cb3-132">    cssClass &lt;-<span class="st"> </span>point[[<span class="st">"class"</span>]]</span>
<span id="cb3-133">    tooltip &lt;-<span class="st"> </span><span class="kw">paste0</span>(</span>
<span id="cb3-134">      <span class="st">"&lt;b&gt; x: &lt;/b&gt;"</span>, <span class="kw">formatC</span>(point[[<span class="st">"x"</span>]]), <span class="st">"&lt;br/&gt;"</span>,</span>
<span id="cb3-135">      <span class="st">"&lt;b&gt; y: &lt;/b&gt;"</span>, <span class="kw">formatC</span>(point[[<span class="st">"y"</span>]]), <span class="st">"&lt;br/&gt;"</span></span>
<span id="cb3-136">    )</span>
<span id="cb3-137">    <span class="kw">runjs</span>(</span>
<span id="cb3-138">      <span class="kw">paste0</span>(</span>
<span id="cb3-139">        <span class="kw">sprintf</span>(</span>
<span id="cb3-140">          <span class="st">"$('#tooltiptext').html('%s');"</span>, tooltip</span>
<span id="cb3-141">        ),</span>
<span id="cb3-142">        <span class="kw">sprintf</span>(qTipTemplate, pos, pos, left_px, top_px, cssClass)</span>
<span id="cb3-143">      )</span>
<span id="cb3-144">    )</span>
<span id="cb3-145">  })</span>
<span id="cb3-146">}</span>
<span id="cb3-147"></span>
<span id="cb3-148"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ggplot2_qTipTooltips3.gif"
          style="width: 65%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 03 Jul 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ggplot2_qTipTooltips.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Search in a 'DT' table w/ or w/o a regular expression</title>
      <link>https://laustep.github.io/stlahblog/posts/DT_SearchBuilder.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>It is possible to search in a ‘DT’ table with a regular expression:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">datatable</span>(</span>
<span id="cb1-2">  <span class="dt">data =</span> dat,</span>
<span id="cb1-3">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb1-4">    <span class="dt">search =</span> <span class="kw">list</span>(<span class="dt">regex =</span> <span class="ot">TRUE</span>)</span>
<span id="cb1-5">  )</span>
<span id="cb1-6">)</span></code></pre>
      </div>
      <p>
        But it could be desirable to have the possibility to search either with
        a regular expression or with an ordinary string.
      </p>
      <p>
        The <strong>SearchBuilder</strong> extension allows to search in a table
        using numerous useful criteria, such as <em>“contains”</em>,
        <em>“starts with”</em>, <em>“ends with”</em>, etc:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(DT)</span>
<span id="cb2-2"></span>
<span id="cb2-3">dat &lt;-<span class="st"> </span>iris[<span class="kw">c</span>(<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>, <span class="dv">51</span><span class="op">:</span><span class="dv">53</span>, <span class="dv">101</span><span class="op">:</span><span class="dv">103</span>), ]</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw">datatable</span>(</span>
<span id="cb2-6">  dat,</span>
<span id="cb2-7">  <span class="dt">extensions =</span> <span class="st">"SearchBuilder"</span>,</span>
<span id="cb2-8">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb2-9">    <span class="dt">dom =</span> <span class="st">"Qlfrtip"</span>,</span>
<span id="cb2-10">    <span class="dt">searchBuilder =</span> <span class="ot">TRUE</span></span>
<span id="cb2-11">  )</span>
<span id="cb2-12">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DT_SearchBuilder1.gif"
          style="width: 65%"
        />
      </p>
      <p>
        In general, this is enough. But if really needed, it is possible to add
        a custom search criterion. Here is how to add a
        <em>“matches regexp”</em> criterion, to search with a regular
        expression:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">datatable</span>(</span>
<span id="cb3-2">  dat,</span>
<span id="cb3-3">  <span class="dt">extensions =</span> <span class="st">"SearchBuilder"</span>,</span>
<span id="cb3-4">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb3-5">    <span class="dt">dom =</span> <span class="st">"Qlfrtip"</span>,</span>
<span id="cb3-6">    <span class="dt">searchBuilder =</span> <span class="kw">list</span>(</span>
<span id="cb3-7">      <span class="dt">conditions =</span> <span class="kw">list</span>(</span>
<span id="cb3-8">        <span class="dt">string =</span> <span class="kw">list</span>(</span>
<span id="cb3-9">          <span class="dt">regexp =</span> <span class="kw">list</span>(</span>
<span id="cb3-10">            <span class="dt">conditionName =</span> <span class="st">"Matches Regexp"</span>,</span>
<span id="cb3-11">            <span class="dt">init =</span> <span class="kw">JS</span>(</span>
<span id="cb3-12">              <span class="st">"function (that, fn, preDefined = null) {"</span>,</span>
<span id="cb3-13">              <span class="st">"  var el = $('&lt;input/&gt;').on('input', function() {"</span>,</span>
<span id="cb3-14">              <span class="st">"    fn(that, this);"</span>,</span>
<span id="cb3-15">              <span class="st">"   });"</span>,</span>
<span id="cb3-16">              <span class="st">"  if (preDefined !== null) {"</span>,</span>
<span id="cb3-17">              <span class="st">"     $(el).val(preDefined[0]);"</span>,</span>
<span id="cb3-18">              <span class="st">"  }"</span>,</span>
<span id="cb3-19">              <span class="st">"  return el;"</span>,</span>
<span id="cb3-20">              <span class="st">"}"</span></span>
<span id="cb3-21">            ),</span>
<span id="cb3-22">            <span class="dt">inputValue =</span> <span class="kw">JS</span>(</span>
<span id="cb3-23">              <span class="st">"function (el) {"</span>,</span>
<span id="cb3-24">              <span class="st">"  return $(el[0]).val();"</span>,</span>
<span id="cb3-25">              <span class="st">"}"</span></span>
<span id="cb3-26">            ),</span>
<span id="cb3-27">            <span class="dt">isInputValid =</span> <span class="kw">JS</span>(</span>
<span id="cb3-28">              <span class="st">"function (el, that) {"</span>,</span>
<span id="cb3-29">              <span class="st">"  var regexp = $(el[0]).val();"</span>,</span>
<span id="cb3-30">              <span class="st">"  var valid = true;"</span>,</span>
<span id="cb3-31">              <span class="st">"  try {"</span>,</span>
<span id="cb3-32">              <span class="st">"    new RegExp(regexp, 'g');"</span>,</span>
<span id="cb3-33">              <span class="st">"  } catch(e) {"</span>,</span>
<span id="cb3-34">              <span class="st">"    valid = false;"</span>,</span>
<span id="cb3-35">              <span class="st">"  }"</span>,</span>
<span id="cb3-36">              <span class="st">"  return valid;"</span>,</span>
<span id="cb3-37">              <span class="st">"}"</span></span>
<span id="cb3-38">            ),</span>
<span id="cb3-39">            <span class="dt">search =</span> <span class="kw">JS</span>(</span>
<span id="cb3-40">              <span class="st">"function (value, regexp) {"</span>,</span>
<span id="cb3-41">              <span class="st">"  var reg = new RegExp(regexp, 'g');"</span>,</span>
<span id="cb3-42">              <span class="st">"  return reg.test(value);"</span>,</span>
<span id="cb3-43">              <span class="st">"}"</span></span>
<span id="cb3-44">            )</span>
<span id="cb3-45">          )</span>
<span id="cb3-46">        )</span>
<span id="cb3-47">      )</span>
<span id="cb3-48">    )</span>
<span id="cb3-49">  )</span>
<span id="cb3-50">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DT_SearchBuilder2.gif"
          style="width: 65%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 03 Jul 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/DT_SearchBuilder.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Mapping a picture on a donut or a Hopf torus</title>
      <link>https://laustep.github.io/stlahblog/posts/ConformalTorus.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <h1 id="the-donut-torus">The donut torus</h1>
      <p>
        Given a number <span class="math inline">\(s \geqslant 1\)</span>, the
        following map:
        <span class="math display"
          >\[ (u, v) \mapsto (x, y, z) = \frac{\Bigl(s\cos\frac{u}{s},
          s\sin\frac{u}{s}, \sin v\Bigr)}{\sqrt{s^2+1}-\cos v} \]</span
        >
        is a <em>conformal parameterization</em> of the torus (the donut), where
        <span class="math inline">\(-s\pi \leqslant u &lt; s\pi\)</span> and
        <span class="math inline">\(\pi \leqslant v &lt; \pi\)</span>. I found
        it in
        <a
          href="https://static1.bridgesmathart.org/2011/cdrom/proceedings/134/paper_134.pdf"
          >this paper by J.M. Sullivan</a
        >. The number <span class="math inline">\(s\)</span> is the ratio of the
        major radius over the minor radius.
      </p>
      <p>
        The conformality of the map has the following consequence: you can
        easily map a doubly periodic image on the torus in such a way that it
        will perfectly fit on the torus.
      </p>
      <h2 id="mapping-a-checkerboard">Mapping a checkerboard</h2>
      <p>
        Let me show what I mean. The code below generates a mesh of the torus
        with a checkerboard mapped on its surface:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(rgl)</span>
<span id="cb1-2"><span class="kw">library</span>(Rvcg) <span class="co"># to use vcgUpdateNormals()</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">torusMesh &lt;-<span class="st"> </span><span class="cf">function</span>(s, nu, nv){</span>
<span id="cb1-5">  nu &lt;-<span class="st"> </span><span class="kw">as.integer</span>(nu)</span>
<span id="cb1-6">  nv &lt;-<span class="st"> </span><span class="kw">as.integer</span>(nv)</span>
<span id="cb1-7">  nunv &lt;-<span class="st"> </span>nu <span class="op">*</span><span class="st"> </span>nv</span>
<span id="cb1-8">  vs      &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nunv)</span>
<span id="cb1-9">  tris1   &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nunv)</span>
<span id="cb1-10">  tris2   &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nunv)</span>
<span id="cb1-11">  u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi<span class="op">*</span>s, pi<span class="op">*</span>s, <span class="dt">length.out =</span> nu <span class="op">+</span><span class="st"> </span>1L)[<span class="op">-</span>1L]</span>
<span id="cb1-12">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi, pi, <span class="dt">length.out =</span> nv <span class="op">+</span><span class="st"> </span>1L)[<span class="op">-</span>1L]</span>
<span id="cb1-13">  scosu_ &lt;-<span class="st"> </span>s <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_ <span class="op">/</span><span class="st"> </span>s)</span>
<span id="cb1-14">  ssinu_ &lt;-<span class="st"> </span>s <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_ <span class="op">/</span><span class="st"> </span>s)</span>
<span id="cb1-15">  sinv_ &lt;-<span class="st"> </span><span class="kw">sin</span>(v_)</span>
<span id="cb1-16">  w     &lt;-<span class="st"> </span><span class="kw">sqrt</span>(s<span class="op">*</span>s <span class="op">+</span><span class="st"> </span><span class="dv">1</span>) <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(v_)</span>
<span id="cb1-17">  jp1_ &lt;-<span class="st"> </span><span class="kw">c</span>(2L<span class="op">:</span>nv, 1L)</span>
<span id="cb1-18">  j_ &lt;-<span class="st"> </span>1L<span class="op">:</span>nv</span>
<span id="cb1-19">  color &lt;-<span class="st"> </span><span class="ot">NULL</span></span>
<span id="cb1-20">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(nu<span class="op">-</span>1L)){</span>
<span id="cb1-21">    i_nv &lt;-<span class="st"> </span>i<span class="op">*</span>nv</span>
<span id="cb1-22">    rg &lt;-<span class="st"> </span>(i_nv <span class="op">-</span><span class="st"> </span>nv <span class="op">+</span><span class="st"> </span>1L)<span class="op">:</span>i_nv</span>
<span id="cb1-23">    vs[, rg] &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-24">      scosu_[i] <span class="op">/</span><span class="st"> </span>w,</span>
<span id="cb1-25">      ssinu_[i] <span class="op">/</span><span class="st"> </span>w,</span>
<span id="cb1-26">      sinv_     <span class="op">/</span><span class="st"> </span>w</span>
<span id="cb1-27">    )</span>
<span id="cb1-28">    color &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb1-29">      color,</span>
<span id="cb1-30">      <span class="cf">if</span>(<span class="kw">mod</span>(<span class="kw">floor</span>(<span class="dv">5</span> <span class="op">*</span><span class="st"> </span>u_[i] <span class="op">/</span><span class="st"> </span>(pi<span class="op">*</span>s)), <span class="dv">2</span>) <span class="op">==</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb1-31">        <span class="kw">ifelse</span>(</span>
<span id="cb1-32">          <span class="kw">floor</span>(<span class="dv">5</span> <span class="op">*</span><span class="st"> </span>v_ <span class="op">/</span><span class="st"> </span>pi) <span class="op">%%</span><span class="st"> </span><span class="dv">2</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"yellow"</span>, <span class="st">"navy"</span></span>
<span id="cb1-33">        )</span>
<span id="cb1-34">      }<span class="cf">else</span>{</span>
<span id="cb1-35">        <span class="kw">ifelse</span>(</span>
<span id="cb1-36">          <span class="kw">floor</span>(<span class="dv">5</span> <span class="op">*</span><span class="st"> </span>v_ <span class="op">/</span><span class="st"> </span>pi) <span class="op">%%</span><span class="st"> </span><span class="dv">2</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"navy"</span>, <span class="st">"yellow"</span></span>
<span id="cb1-37">        )</span>
<span id="cb1-38">      }</span>
<span id="cb1-39">    )</span>
<span id="cb1-40">    k1 &lt;-<span class="st"> </span>i_nv <span class="op">-</span><span class="st"> </span>nv</span>
<span id="cb1-41">    k_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>j_</span>
<span id="cb1-42">    l_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>jp1_</span>
<span id="cb1-43">    m_ &lt;-<span class="st"> </span>i_nv <span class="op">+</span><span class="st"> </span>j_</span>
<span id="cb1-44">    tris1[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(m_, l_, k_)</span>
<span id="cb1-45">    tris2[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(m_, i_nv <span class="op">+</span><span class="st"> </span>jp1_, l_)</span>
<span id="cb1-46">  }</span>
<span id="cb1-47">  i_nv &lt;-<span class="st"> </span>nunv</span>
<span id="cb1-48">  rg &lt;-<span class="st"> </span>(i_nv <span class="op">-</span><span class="st"> </span>nv <span class="op">+</span><span class="st"> </span>1L)<span class="op">:</span>i_nv</span>
<span id="cb1-49">  vs[, rg] &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-50">    scosu_[nu] <span class="op">/</span><span class="st"> </span>w,</span>
<span id="cb1-51">    ssinu_[nu] <span class="op">/</span><span class="st"> </span>w,</span>
<span id="cb1-52">    sinv_      <span class="op">/</span><span class="st"> </span>w</span>
<span id="cb1-53">  )</span>
<span id="cb1-54">  color &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb1-55">    color,</span>
<span id="cb1-56">    <span class="kw">ifelse</span>(</span>
<span id="cb1-57">      <span class="kw">floor</span>(<span class="dv">5</span> <span class="op">*</span><span class="st"> </span>v_ <span class="op">/</span><span class="st"> </span>pi) <span class="op">%%</span><span class="st"> </span><span class="dv">2</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"yellow"</span>, <span class="st">"navy"</span></span>
<span id="cb1-58">    )</span>
<span id="cb1-59">  )</span>
<span id="cb1-60">  k1 &lt;-<span class="st"> </span>i_nv <span class="op">-</span><span class="st"> </span>nv</span>
<span id="cb1-61">  l_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>jp1_</span>
<span id="cb1-62">  k_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>j_</span>
<span id="cb1-63">  tris1[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(j_, l_, k_)</span>
<span id="cb1-64">  tris2[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(j_, jp1_, l_)</span>
<span id="cb1-65">  tmesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb1-66">    <span class="dt">vertices    =</span> vs,</span>
<span id="cb1-67">    <span class="dt">indices     =</span> <span class="kw">cbind</span>(tris1, tris2),</span>
<span id="cb1-68">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb1-69">    <span class="dt">material    =</span> <span class="kw">list</span>(<span class="st">"color"</span> =<span class="st"> </span>color)</span>
<span id="cb1-70">  )</span>
<span id="cb1-71">  <span class="kw">vcgUpdateNormals</span>(tmesh)</span>
<span id="cb1-72">}</span></code></pre>
      </div>
      <p>Let’s see:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">mesh &lt;-<span class="st"> </span><span class="kw">torusMesh</span>(<span class="dt">s =</span> <span class="kw">sqrt</span>(<span class="dv">2</span>), <span class="dt">nu =</span> <span class="dv">500</span>, <span class="dt">nv =</span> <span class="dv">500</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.85</span>)</span>
<span id="cb2-4"><span class="kw">bg3d</span>(<span class="st">"gainsboro"</span>)</span>
<span id="cb2-5"><span class="kw">shade3d</span>(mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ConformalTorusCheckerboard.gif"
          style="width: 55%"
        />
      </p>
      <p>Now you surely see what I mean.</p>
      <h2 id="mapping-a-gray-scott-picture">Mapping a Gray-Scott picture</h2>
      <p>
        I am a fan of the
        <a href="https://fronkonstin.com/">Fronkonstin blog</a>. Maybe you
        already see
        <a href="https://fronkonstin.com/2019/12/28/reaction-diffusion/"
          >this article about the Gray-Scott reaction-diffusion model</a
        >
        (it appeared on R-bloggers). It shows how to generate some beautiful
        pictures which are doubly periodic. So let’s map such a picture on the
        donut:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">......</span>
<span id="cb3-2"></span>
<span id="cb3-3">fcolor &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(viridisLite<span class="op">::</span><span class="kw">magma</span>(255L))</span>
<span id="cb3-4">getColors &lt;-<span class="st"> </span><span class="cf">function</span>(B){</span>
<span id="cb3-5">  rgbs &lt;-<span class="st"> </span><span class="kw">fcolor</span>(B)</span>
<span id="cb3-6">  <span class="kw">rgb</span>(rgbs[, 1L], rgbs[, 2L], rgbs[, 3L], <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb3-7">}</span>
<span id="cb3-8"></span>
<span id="cb3-9">X &lt;-<span class="st"> </span><span class="kw">iterate_Gray_Scott</span>(X, L, DA, DB, <span class="dv">500</span>)</span>
<span id="cb3-10">Colors &lt;-<span class="st"> </span><span class="kw">getColors</span>(<span class="kw">c</span>(X[,,2L]))</span>
<span id="cb3-11"></span>
<span id="cb3-12">mesh &lt;-<span class="st"> </span><span class="kw">torusMesh</span>(<span class="dt">s =</span> <span class="kw">sqrt</span>(<span class="dv">2</span>), <span class="dt">nu =</span> <span class="dv">600</span>, <span class="dt">nv =</span> <span class="dv">600</span>)</span>
<span id="cb3-13">mesh[[<span class="st">"material"</span>]] &lt;-<span class="st"> </span><span class="kw">list</span>(<span class="st">"color"</span> =<span class="st"> </span>Colors)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.85</span>)</span>
<span id="cb3-16"><span class="kw">bg3d</span>(<span class="st">"gainsboro"</span>)</span>
<span id="cb3-17"><span class="kw">shade3d</span>(mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ConformalTorusGrayScott.gif"
          style="width: 55%"
        />
      </p>
      <p>Beautiful!</p>
      <h1 id="the-hopf-torus">The Hopf torus</h1>
      <p>
        We can similarly map a picture on a Hopf torus, with this conformal
        parameterization:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">HT &lt;-<span class="st"> </span><span class="cf">function</span>(h, nlobes, t, phi){</span>
<span id="cb4-2">  <span class="co"># the spherical curve</span></span>
<span id="cb4-3">  p1 &lt;-<span class="st"> </span><span class="kw">sin</span>(h <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(nlobes<span class="op">*</span>t))</span>
<span id="cb4-4">  p2 &lt;-<span class="st"> </span><span class="kw">cos</span>(t) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(h <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(nlobes<span class="op">*</span>t))</span>
<span id="cb4-5">  p3 &lt;-<span class="st"> </span><span class="kw">sin</span>(t) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(h <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(nlobes<span class="op">*</span>t))</span>
<span id="cb4-6">  <span class="co"># parameterization</span></span>
<span id="cb4-7">  yden &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">*</span>(<span class="dv">1</span><span class="op">+</span>p1))</span>
<span id="cb4-8">  y1 &lt;-<span class="st"> </span>(<span class="dv">1</span><span class="op">+</span>p1)<span class="op">/</span>yden</span>
<span id="cb4-9">  y2 &lt;-<span class="st"> </span>p2<span class="op">/</span>yden</span>
<span id="cb4-10">  y3 &lt;-<span class="st"> </span>p3<span class="op">/</span>yden</span>
<span id="cb4-11">  cosphi &lt;-<span class="st"> </span><span class="kw">cos</span>(phi)</span>
<span id="cb4-12">  sinphi &lt;-<span class="st"> </span><span class="kw">sin</span>(phi)</span>
<span id="cb4-13">  x1 &lt;-<span class="st"> </span>cosphi<span class="op">*</span>y1</span>
<span id="cb4-14">  x2 &lt;-<span class="st"> </span>sinphi<span class="op">*</span>y1</span>
<span id="cb4-15">  x3 &lt;-<span class="st"> </span>cosphi<span class="op">*</span>y2 <span class="op">-</span><span class="st"> </span>sinphi<span class="op">*</span>y3</span>
<span id="cb4-16">  x4 &lt;-<span class="st"> </span>cosphi<span class="op">*</span>y3 <span class="op">+</span><span class="st"> </span>sinphi<span class="op">*</span>y2  </span>
<span id="cb4-17">  <span class="kw">return</span>(<span class="kw">rbind</span>(x1<span class="op">/</span>(<span class="dv">1</span><span class="op">-</span>x4), x2<span class="op">/</span>(<span class="dv">1</span><span class="op">-</span>x4), x3<span class="op">/</span>(<span class="dv">1</span><span class="op">-</span>x4)))</span>
<span id="cb4-18">}</span></code></pre>
      </div>
      <h2 id="checkerboard">Checkerboard</h2>
      <p>
        The code to construct the mesh with the checkerboard is similar to the
        one for the donut torus:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">HopfTorusMesh &lt;-<span class="st"> </span><span class="cf">function</span>(h, nlobes, nu, nv){</span>
<span id="cb5-2">  nu &lt;-<span class="st"> </span><span class="kw">as.integer</span>(nu)</span>
<span id="cb5-3">  nv &lt;-<span class="st"> </span><span class="kw">as.integer</span>(nv)</span>
<span id="cb5-4">  vs    &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb5-5">  tris1 &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb5-6">  tris2 &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb5-7">  u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi, pi, <span class="dt">length.out =</span> nu <span class="op">+</span><span class="st"> </span>1L)[<span class="op">-</span>1L]</span>
<span id="cb5-8">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi, pi, <span class="dt">length.out =</span> nv <span class="op">+</span><span class="st"> </span>1L)[<span class="op">-</span>1L]</span>
<span id="cb5-9">  jp1_ &lt;-<span class="st"> </span><span class="kw">c</span>(2L<span class="op">:</span>nv, 1L)</span>
<span id="cb5-10">  j_ &lt;-<span class="st"> </span>1L<span class="op">:</span>nv</span>
<span id="cb5-11">  color &lt;-<span class="st"> </span><span class="ot">NULL</span></span>
<span id="cb5-12">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(nu<span class="op">-</span>1L)){</span>
<span id="cb5-13">    i_nv &lt;-<span class="st"> </span>i<span class="op">*</span>nv</span>
<span id="cb5-14">    vs[, (i_nv <span class="op">-</span><span class="st"> </span>nv <span class="op">+</span><span class="st"> </span>1L)<span class="op">:</span>i_nv] &lt;-<span class="st"> </span><span class="kw">HT</span>(h, nlobes, u_[i], v_)</span>
<span id="cb5-15">    color &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb5-16">      color,</span>
<span id="cb5-17">      <span class="cf">if</span>(<span class="kw">mod</span>(<span class="kw">floor</span>(<span class="dv">10</span> <span class="op">*</span><span class="st"> </span>u_[i] <span class="op">/</span><span class="st"> </span>pi), <span class="dv">2</span>) <span class="op">==</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb5-18">        <span class="kw">ifelse</span>(</span>
<span id="cb5-19">          <span class="kw">floor</span>(<span class="dv">10</span> <span class="op">*</span><span class="st"> </span>v_ <span class="op">/</span><span class="st"> </span>pi) <span class="op">%%</span><span class="st"> </span><span class="dv">2</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"yellow"</span>, <span class="st">"navy"</span></span>
<span id="cb5-20">        )</span>
<span id="cb5-21">      }<span class="cf">else</span>{</span>
<span id="cb5-22">        <span class="kw">ifelse</span>(</span>
<span id="cb5-23">          <span class="kw">floor</span>(<span class="dv">10</span> <span class="op">*</span><span class="st"> </span>v_ <span class="op">/</span><span class="st"> </span>pi) <span class="op">%%</span><span class="st"> </span><span class="dv">2</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"navy"</span>, <span class="st">"yellow"</span></span>
<span id="cb5-24">        )</span>
<span id="cb5-25">      }</span>
<span id="cb5-26">    )</span>
<span id="cb5-27">    k1 &lt;-<span class="st"> </span>i_nv <span class="op">-</span><span class="st"> </span>nv</span>
<span id="cb5-28">    k_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>j_</span>
<span id="cb5-29">    l_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>jp1_</span>
<span id="cb5-30">    m_ &lt;-<span class="st"> </span>i_nv <span class="op">+</span><span class="st"> </span>j_</span>
<span id="cb5-31">    tris1[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(k_, l_, m_)</span>
<span id="cb5-32">    tris2[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(l_, i_nv <span class="op">+</span><span class="st"> </span>jp1_, m_)</span>
<span id="cb5-33">  }</span>
<span id="cb5-34">  i_nv &lt;-<span class="st"> </span>nu<span class="op">*</span>nv</span>
<span id="cb5-35">  vs[, (i_nv <span class="op">-</span><span class="st"> </span>nv <span class="op">+</span><span class="st"> </span>1L)<span class="op">:</span>i_nv] &lt;-<span class="st"> </span><span class="kw">HT</span>(h, nlobes, pi, v_)</span>
<span id="cb5-36">  color &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb5-37">    color,</span>
<span id="cb5-38">    <span class="kw">ifelse</span>(</span>
<span id="cb5-39">      <span class="kw">floor</span>(<span class="dv">10</span> <span class="op">*</span><span class="st"> </span>v_ <span class="op">/</span><span class="st"> </span>pi) <span class="op">%%</span><span class="st"> </span><span class="dv">2</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"yellow"</span>, <span class="st">"navy"</span></span>
<span id="cb5-40">    )</span>
<span id="cb5-41">  )</span>
<span id="cb5-42">  k1 &lt;-<span class="st"> </span>i_nv <span class="op">-</span><span class="st"> </span>nv</span>
<span id="cb5-43">  k_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>j_</span>
<span id="cb5-44">  l_ &lt;-<span class="st"> </span>k1 <span class="op">+</span><span class="st"> </span>jp1_</span>
<span id="cb5-45">  tris1[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(k_, l_, j_)</span>
<span id="cb5-46">  tris2[, k_] &lt;-<span class="st"> </span><span class="kw">rbind</span>(l_, jp1_, j_)</span>
<span id="cb5-47">  <span class="kw">vcgUpdateNormals</span>(<span class="kw">tmesh3d</span>(</span>
<span id="cb5-48">    <span class="dt">vertices    =</span> vs,</span>
<span id="cb5-49">    <span class="dt">indices     =</span> <span class="kw">cbind</span>(tris1, tris2),</span>
<span id="cb5-50">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb5-51">    <span class="dt">material    =</span> <span class="kw">list</span>(<span class="st">"color"</span> =<span class="st"> </span>color) </span>
<span id="cb5-52">  ))</span>
<span id="cb5-53">}</span>
<span id="cb5-54"></span>
<span id="cb5-55">mesh &lt;-<span class="st"> </span><span class="kw">HopfTorusMesh</span>(<span class="dt">h =</span> <span class="fl">0.4</span>, <span class="dt">nlobes =</span> <span class="dv">4</span>, <span class="dt">nu =</span> <span class="dv">500</span>, <span class="dt">nv =</span> <span class="dv">500</span>)</span>
<span id="cb5-56"></span>
<span id="cb5-57"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.85</span>)</span>
<span id="cb5-58"><span class="kw">bg3d</span>(<span class="st">"gainsboro"</span>)</span>
<span id="cb5-59"><span class="kw">shade3d</span>(mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ConformalHopfTorusCheckerboard.gif"
          style="width: 55%"
        />
      </p>
      <p>I really like it.</p>
      <h2 id="gray-scott-picture">Gray-Scott picture</h2>
      <p>
        To map the Gray-Scott picture, we proceed as for the donut torus. Here
        is the result:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ConformalHopfTorusGrayScott.gif"
          style="width: 55%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 30 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ConformalTorus.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>On a Möbius transformation</title>
      <link>https://laustep.github.io/stlahblog/posts/OnAMobiusTransformation.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Consider a complex number
        <span class="math inline">\(\gamma\)</span> such that
        <span class="math inline">\(|\gamma| &lt; 1\)</span> and the following
        matrix:
        <span class="math display"
          >\[ M = \begin{pmatrix} i &amp; \gamma \\ \bar\gamma &amp; -i
          \end{pmatrix}. \]</span
        >
      </p>
      <p>
        Then the Möbius transformation associated to this matrix is nice. Why?
        Because:
      </p>
      <ul>
        <li><p>it maps the unit disk to itself;</p></li>
        <li>
          <p>it is of order <span class="math inline">\(2\)</span>;</p>
        </li>
        <li><p>its fractional powers have a closed form.</p></li>
      </ul>
      <p>
        For these reasons, I often use this Möbius transformation in
        <a href="https://laustep.github.io/stlahblog/frames/shaders_index.html"
          >my shaders</a
        >.
      </p>
      <p>
        Let us derive the fractional powers of
        <span class="math inline">\(M\)</span>. We set
        <span class="math inline">\(h = \sqrt{1-|\gamma|^2}\)</span>.
      </p>
      <p>
        The eigenvalues of <span class="math inline">\(M\)</span> are
        <span class="math display"
          >\[ \begin{align} \lambda_1 &amp; = -ih \\ \lambda_2 &amp; = ih =
          \bar{\lambda_1} \end{align} \]</span
        >
        with corresponding eigen vectors
        <span class="math display"
          >\[ \begin{align} v_1 &amp; = \begin{pmatrix}
          (1-h)\dfrac{i\gamma}{|\gamma|^2} \\ 1 \end{pmatrix} \\ v_2 &amp; =
          \begin{pmatrix} (1+h)\dfrac{i\gamma}{|\gamma|^2} \\ 1 \end{pmatrix}.
          \end{align} \]</span
        >
        Let
        <span class="math inline"
          >\(P = \begin{pmatrix} v_1 &amp; v_2 \end{pmatrix}\)</span
        >. Then
        <span class="math display"
          >\[ \frac{1}{\det(P)} = \frac{i\bar\gamma}{2h} \]</span
        >
        and for any complex numbers <span class="math inline">\(d_1\)</span> and
        <span class="math inline">\(d_2\)</span>,
        <span class="math display"
          >\[ P \begin{pmatrix} d_1 &amp; 0 \\ 0 &amp; d_2 \end{pmatrix} P^{-1}
          = \frac{1}{2h} \begin{pmatrix} d_2(1+h)-d_1(1-h) &amp;
          i(d_1-d_2)\gamma \\ i(d_1-d_2)\bar\gamma &amp; d_1(1+h)-d_2(1-h)
          \end{pmatrix}. \]</span
        >
      </p>
      <p>
        In particular, <span class="math inline">\(M^t\)</span> is given by
        <span class="math display"
          >\[ \begin{pmatrix} a &amp; b \\ \bar b &amp; \bar a \end{pmatrix}
          \]</span
        >
        where
        <span class="math display"
          >\[ \begin{align} a &amp; = \Re(d_1) - i \dfrac{\Im(d_1)}{h}, \\ b
          &amp; = \gamma \dfrac{\Im(d_2)}{h}, \\ d_1 &amp; = \bar{d_2}, \\ d_2
          &amp; = h^t \exp\left(i\dfrac{t\pi}{2}\right). \end{align} \]</span
        >
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">M_power_t &lt;-<span class="st"> </span><span class="cf">function</span>(gamma, t){</span>
<span id="cb1-2">  h &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">1</span><span class="op">-</span><span class="kw">Mod</span>(gamma)<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb1-3">  d2 &lt;-<span class="st"> </span>h<span class="op">^</span>t <span class="op">*</span><span class="st"> </span>(<span class="kw">cos</span>(t<span class="op">*</span>pi<span class="op">/</span><span class="dv">2</span>) <span class="op">+</span><span class="st"> </span>1i<span class="op">*</span><span class="kw">sin</span>(t<span class="op">*</span>pi<span class="op">/</span><span class="dv">2</span>))</span>
<span id="cb1-4">  d1 &lt;-<span class="st"> </span><span class="kw">Conj</span>(d2)</span>
<span id="cb1-5">  a &lt;-<span class="st"> </span><span class="kw">Re</span>(d1) <span class="op">-</span><span class="st"> </span>1i<span class="op">*</span><span class="kw">Im</span>(d1)<span class="op">/</span>h</span>
<span id="cb1-6">  b &lt;-<span class="st"> </span>gamma <span class="op">*</span><span class="st"> </span><span class="kw">Im</span>(d2)<span class="op">/</span>h</span>
<span id="cb1-7">  c &lt;-<span class="st"> </span><span class="kw">Conj</span>(b)</span>
<span id="cb1-8">  d &lt;-<span class="st"> </span><span class="kw">Conj</span>(a)</span>
<span id="cb1-9">  <span class="kw">c</span>(<span class="dt">a =</span> a, <span class="dt">b =</span> b, <span class="dt">c =</span> c, <span class="dt">d =</span> d)</span>
<span id="cb1-10">}</span></code></pre>
      </div>
      <p>
        Let’s apply this Möbius transformation now. Here is a visualization of
        the <em>Dedekind eta function</em>, a complex function availale in the
        <strong>jacobi</strong> package:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># background color</span></span>
<span id="cb2-2">bkgcol &lt;-<span class="st"> </span><span class="kw">rgb</span>(<span class="dv">21</span>, <span class="dv">25</span>, <span class="dv">30</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">modulo &lt;-<span class="st"> </span><span class="cf">function</span>(a, p) {</span>
<span id="cb2-5">  a <span class="op">-</span><span class="st"> </span>p <span class="op">*</span><span class="st"> </span><span class="kw">ifelse</span>(a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, <span class="kw">floor</span>(a<span class="op">/</span>p), <span class="kw">ceiling</span>(a<span class="op">/</span>p))</span>
<span id="cb2-6">}</span>
<span id="cb2-7"></span>
<span id="cb2-8">colormap &lt;-<span class="st"> </span><span class="cf">function</span>(z){</span>
<span id="cb2-9">  <span class="cf">if</span>(<span class="kw">is.na</span>(z)){</span>
<span id="cb2-10">    <span class="kw">return</span>(bkgcol)</span>
<span id="cb2-11">  }</span>
<span id="cb2-12">  <span class="cf">if</span>(<span class="kw">is.infinite</span>(z) <span class="op">||</span><span class="st"> </span><span class="kw">is.nan</span>(z)){</span>
<span id="cb2-13">    <span class="kw">return</span>(<span class="st">"#000000"</span>)</span>
<span id="cb2-14">  }</span>
<span id="cb2-15">  x &lt;-<span class="st"> </span><span class="kw">Re</span>(z)</span>
<span id="cb2-16">  y &lt;-<span class="st"> </span><span class="kw">Im</span>(z)</span>
<span id="cb2-17">  r &lt;-<span class="st"> </span><span class="kw">modulo</span>(<span class="kw">Mod</span>(z), <span class="dv">1</span>)</span>
<span id="cb2-18">  g &lt;-<span class="st"> </span><span class="dv">2</span> <span class="op">*</span><span class="st"> </span><span class="kw">abs</span>(<span class="kw">modulo</span>(<span class="kw">atan2</span>(y, x), <span class="fl">0.5</span>))</span>
<span id="cb2-19">  b &lt;-<span class="st"> </span><span class="kw">abs</span>(<span class="kw">modulo</span>(x<span class="op">*</span>y, <span class="dv">1</span>))</span>
<span id="cb2-20">  <span class="cf">if</span>(<span class="kw">is.nan</span>(b)){</span>
<span id="cb2-21">    <span class="kw">return</span>(<span class="st">"#000000"</span>)</span>
<span id="cb2-22">  }</span>
<span id="cb2-23">  <span class="kw">rgb</span>(</span>
<span id="cb2-24">    <span class="dv">8</span> <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(r<span class="fl">-0.5</span>)), </span>
<span id="cb2-25">    <span class="dv">8</span> <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(g<span class="fl">-0.5</span>)), </span>
<span id="cb2-26">    <span class="dv">8</span> <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(b<span class="fl">-0.5</span>)),</span>
<span id="cb2-27">    <span class="dt">maxColorValue =</span> <span class="dv">1</span></span>
<span id="cb2-28">  )</span>
<span id="cb2-29">}</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="kw">library</span>(jacobi)</span>
<span id="cb2-32">f &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(x, y){</span>
<span id="cb2-33">  q &lt;-<span class="st"> </span>x <span class="op">+</span><span class="st"> </span>1i<span class="op">*</span>y</span>
<span id="cb2-34">  <span class="cf">if</span>(<span class="kw">Mod</span>(q) <span class="op">&gt;</span><span class="st"> </span><span class="fl">0.9999</span> <span class="op">||</span><span class="st"> </span>(<span class="kw">Im</span>(q) <span class="op">==</span><span class="st"> </span><span class="dv">0</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">Re</span>(q) <span class="op">&lt;=</span><span class="st"> </span><span class="dv">0</span>)){</span>
<span id="cb2-35">    <span class="kw">return</span>(bkgcol)</span>
<span id="cb2-36">  }</span>
<span id="cb2-37">  tau &lt;-<span class="st"> </span><span class="op">-</span>1i <span class="op">*</span><span class="st"> </span><span class="kw">log</span>(q) <span class="op">/</span><span class="st"> </span>pi</span>
<span id="cb2-38">  z &lt;-<span class="st"> </span><span class="kw">eta</span>(tau)</span>
<span id="cb2-39">  <span class="kw">colormap</span>(z)</span>
<span id="cb2-40">})</span>
<span id="cb2-41"></span>
<span id="cb2-42">x &lt;-<span class="st"> </span>y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>, <span class="dt">len =</span> <span class="dv">2000</span>)</span>
<span id="cb2-43">image &lt;-<span class="st"> </span><span class="kw">outer</span>(x, y, f)</span>
<span id="cb2-44"></span>
<span id="cb2-45">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>), <span class="dt">bg =</span> bkgcol)</span>
<span id="cb2-46"><span class="kw">plot</span>(</span>
<span id="cb2-47">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="dt">type =</span> <span class="st">"n"</span>, </span>
<span id="cb2-48">  <span class="dt">xlab =</span> <span class="st">""</span>, <span class="dt">ylab =</span> <span class="st">""</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">asp =</span> <span class="dv">1</span></span>
<span id="cb2-49">)</span>
<span id="cb2-50"><span class="kw">rasterImage</span>(image, <span class="dv">-100</span>, <span class="dv">-100</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb2-51"><span class="kw">par</span>(opar)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Dedekind.png"
          style="width: 55%"
        />
      </p>
      <p>
        Here is how to apply the Möbius transformation for one value of the
        power <span class="math inline">\(t\)</span>:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">Mobius &lt;-<span class="st"> </span><span class="kw">M_power_t</span>(<span class="dt">gamma =</span> <span class="fl">0.7</span> <span class="op">-</span><span class="st"> </span><span class="fl">0.3</span>i, <span class="dt">t =</span> ...)</span>
<span id="cb3-2">a &lt;-<span class="st"> </span>Mobius[<span class="st">"a"</span>]</span>
<span id="cb3-3">b &lt;-<span class="st"> </span>Mobius[<span class="st">"b"</span>]</span>
<span id="cb3-4">c &lt;-<span class="st"> </span>Mobius[<span class="st">"c"</span>]</span>
<span id="cb3-5">d &lt;-<span class="st"> </span>Mobius[<span class="st">"d"</span>]; </span>
<span id="cb3-6">f &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(x, y){</span>
<span id="cb3-7">  q0 &lt;-<span class="st"> </span>x <span class="op">+</span><span class="st"> </span>1i<span class="op">*</span>y</span>
<span id="cb3-8">  q &lt;-<span class="st"> </span>(a<span class="op">*</span>q0 <span class="op">+</span><span class="st"> </span>b) <span class="op">/</span><span class="st"> </span>(c<span class="op">*</span>q0 <span class="op">+</span><span class="st"> </span>d)</span>
<span id="cb3-9">  <span class="cf">if</span>(<span class="kw">Mod</span>(q) <span class="op">&gt;</span><span class="st"> </span><span class="fl">0.9999</span> <span class="op">||</span><span class="st"> </span>(<span class="kw">Im</span>(q) <span class="op">==</span><span class="st"> </span><span class="dv">0</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">Re</span>(q) <span class="op">&lt;=</span><span class="st"> </span><span class="dv">0</span>)){</span>
<span id="cb3-10">    <span class="kw">return</span>(bkgcol)</span>
<span id="cb3-11">  }</span>
<span id="cb3-12">  tau &lt;-<span class="st"> </span><span class="op">-</span>1i <span class="op">*</span><span class="st"> </span><span class="kw">log</span>(q) <span class="op">/</span><span class="st"> </span>pi</span>
<span id="cb3-13">  z &lt;-<span class="st"> </span><span class="kw">eta</span>(tau)</span>
<span id="cb3-14">  <span class="kw">colormap</span>(z)</span>
<span id="cb3-15">})</span>
<span id="cb3-16"></span>
<span id="cb3-17">x &lt;-<span class="st"> </span>y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>, <span class="dt">len =</span> <span class="dv">2000</span>)</span>
<span id="cb3-18">image &lt;-<span class="st"> </span><span class="kw">outer</span>(x, y, f)</span></code></pre>
      </div>
      <p>
        Then it suffices to run this code for
        <span class="math inline">\(t\)</span> varying from
        <span class="math inline">\(0\)</span> to
        <span class="math inline">\(2\)</span>, and to save the image for each
        value of <span class="math inline">\(t\)</span>. But this would be very
        slow. Actually I implemented the image generation with
        <strong>Rcpp</strong>. Here is the result:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Dedekind.gif"
          style="width: 55%"
        />
      </p>
      <p>
        My <strong>Rcpp</strong> code is available in the
        <a href="https://github.com/stla/jacobi">Github version</a> of the
        <strong>jacobi</strong> package. The R code which generates an image for
        one value of <span class="math inline">\(t\)</span> is:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>, <span class="dt">len =</span> 2000L)</span>
<span id="cb4-2">gamma &lt;-<span class="st"> </span><span class="fl">0.7</span> <span class="op">-</span><span class="st"> </span><span class="fl">0.3</span>i</span>
<span id="cb4-3">t &lt;-<span class="st"> </span>...</span>
<span id="cb4-4">image &lt;-<span class="st"> </span>jacobi<span class="op">:::</span><span class="kw">Image_eta</span>(x, gamma, t)</span>
<span id="cb4-5">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>), <span class="dt">bg =</span> bkgcol)</span>
<span id="cb4-6"><span class="kw">plot</span>(</span>
<span id="cb4-7">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="dt">type =</span> <span class="st">"n"</span>, </span>
<span id="cb4-8">  <span class="dt">xlab =</span> <span class="st">""</span>, <span class="dt">ylab =</span> <span class="st">""</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">asp =</span> <span class="dv">1</span></span>
<span id="cb4-9">)</span>
<span id="cb4-10"><span class="kw">rasterImage</span>(image, <span class="dv">-100</span>, <span class="dv">-100</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb4-11"><span class="kw">par</span>(opar)</span></code></pre>
      </div>
      <p>
        You can also play with <code>jacobi:::Image_E4</code> and
        <code>jacobi:::Image_E6</code>, which respectively generate a
        visualization of the Eisenstein series of weight
        <span class="math inline">\(4\)</span> and a visualization of the
        Eisenstein series of weight <span class="math inline">\(6\)</span>.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Tue, 21 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/OnAMobiusTransformation.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Beautiful complex functions</title>
      <link>https://laustep.github.io/stlahblog/posts/beautifulComplexFunctions.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I’ve just submitted a new package to CRAN: <strong>jacobi</strong>. It
        allows to evaluate the Jacobi theta functions as well as some related
        functions. In particular, some Eisenstein series, that you will see
        below.
      </p>
      <p>
        To represent a complex function, a color map is needed, that is to say a
        function which maps each complex number to a color. I’m using two
        different color maps:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">modulo &lt;-<span class="st"> </span><span class="cf">function</span>(a, p) {</span>
<span id="cb1-2">  a <span class="op">-</span><span class="st"> </span>p <span class="op">*</span><span class="st"> </span><span class="kw">ifelse</span>(a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, <span class="kw">floor</span>(a<span class="op">/</span>p), <span class="kw">ceiling</span>(a<span class="op">/</span>p))</span>
<span id="cb1-3">}</span>
<span id="cb1-4"></span>
<span id="cb1-5">colormap1 &lt;-<span class="st"> </span><span class="cf">function</span>(z){</span>
<span id="cb1-6">  <span class="cf">if</span>(<span class="kw">is.infinite</span>(z) <span class="op">||</span><span class="st"> </span><span class="kw">is.nan</span>(z)) <span class="kw">return</span>(<span class="st">"#000000"</span>)</span>
<span id="cb1-7">  x &lt;-<span class="st"> </span><span class="kw">Re</span>(z)</span>
<span id="cb1-8">  y &lt;-<span class="st"> </span><span class="kw">Im</span>(z)</span>
<span id="cb1-9">  a &lt;-<span class="st"> </span><span class="kw">atan2</span>(y, x)</span>
<span id="cb1-10">  r &lt;-<span class="st"> </span><span class="kw">modulo</span>(<span class="kw">Mod</span>(z), <span class="dv">1</span>)</span>
<span id="cb1-11">  g &lt;-<span class="st"> </span><span class="kw">abs</span>(<span class="kw">modulo</span>(a, <span class="fl">0.5</span>)) <span class="op">*</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb1-12">  b &lt;-<span class="st"> </span><span class="kw">abs</span>(<span class="kw">modulo</span>(x<span class="op">*</span>y, <span class="dv">1</span>))</span>
<span id="cb1-13">  <span class="cf">if</span>(<span class="kw">is.nan</span>(b)){</span>
<span id="cb1-14">    <span class="kw">return</span>(<span class="st">"#000000"</span>)</span>
<span id="cb1-15">  }</span>
<span id="cb1-16">  <span class="kw">rgb</span>(</span>
<span id="cb1-17">    (<span class="fl">1.0</span> <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(r<span class="fl">-0.5</span>))<span class="op">*</span><span class="fl">8.0</span>, </span>
<span id="cb1-18">    (<span class="fl">1.0</span> <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(g<span class="fl">-0.5</span>))<span class="op">*</span><span class="fl">8.0</span>, </span>
<span id="cb1-19">    (<span class="fl">1.0</span> <span class="op">-</span><span class="st"> </span><span class="kw">cos</span>(b<span class="fl">-0.5</span>))<span class="op">*</span><span class="fl">8.0</span>,</span>
<span id="cb1-20">    <span class="dt">maxColorValue =</span> <span class="dv">1</span></span>
<span id="cb1-21">  )</span>
<span id="cb1-22">}</span>
<span id="cb1-23"></span>
<span id="cb1-24">colormap2 &lt;-<span class="st"> </span><span class="cf">function</span>(z){</span>
<span id="cb1-25">  <span class="cf">if</span>(<span class="kw">is.infinite</span>(z) <span class="op">||</span><span class="st"> </span><span class="kw">is.nan</span>(z)) <span class="kw">return</span>(<span class="st">"#000000"</span>)</span>
<span id="cb1-26">  arg &lt;-<span class="st"> </span><span class="kw">Arg</span>(z)</span>
<span id="cb1-27">  <span class="cf">if</span>(arg <span class="op">&lt;</span><span class="st"> </span><span class="dv">0</span>) arg &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span>pi <span class="op">+</span><span class="st"> </span>arg</span>
<span id="cb1-28">  h &lt;-<span class="st"> </span>arg <span class="op">/</span><span class="st"> </span><span class="dv">2</span> <span class="op">/</span><span class="st"> </span>pi</span>
<span id="cb1-29">  s &lt;-<span class="st"> </span><span class="kw">sqrt</span>((<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>pi<span class="op">*</span><span class="kw">log</span>(<span class="dv">1</span><span class="op">+</span><span class="kw">Mod</span>(z))))<span class="op">/</span><span class="dv">2</span>)</span>
<span id="cb1-30">  v &lt;-<span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">cos</span>(<span class="dv">2</span><span class="op">*</span>pi<span class="op">*</span><span class="kw">log</span>(<span class="dv">1</span><span class="op">+</span><span class="kw">Mod</span>(z))))<span class="op">/</span><span class="dv">2</span></span>
<span id="cb1-31">  <span class="kw">hsv</span>(h, s, v)</span>
<span id="cb1-32">}</span></code></pre>
      </div>
      <p>
        Here is the <span class="math inline">\(E_4\)</span> Eisenstein series:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># background color</span></span>
<span id="cb2-2">bkgcol &lt;-<span class="st"> </span><span class="kw">rgb</span>(<span class="dv">21</span>, <span class="dv">25</span>, <span class="dv">30</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">f &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(x, y){</span>
<span id="cb2-5">  q &lt;-<span class="st"> </span>x <span class="op">+</span><span class="st"> </span>1i<span class="op">*</span>y</span>
<span id="cb2-6">  <span class="cf">if</span>(<span class="kw">Mod</span>(q) <span class="op">&gt;=</span><span class="st"> </span><span class="fl">0.99</span> <span class="op">||</span><span class="st"> </span>(<span class="kw">Im</span>(q) <span class="op">==</span><span class="st"> </span><span class="dv">0</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">Re</span>(q) <span class="op">&lt;=</span><span class="st"> </span><span class="dv">0</span>)) <span class="kw">return</span>(bkgcol)</span>
<span id="cb2-7">  z &lt;-<span class="st"> </span><span class="kw">En</span>(<span class="dv">4</span>, q)</span>
<span id="cb2-8">  <span class="kw">colormap1</span>(<span class="dv">1</span><span class="op">/</span>z)</span>
<span id="cb2-9">})</span>
<span id="cb2-10"></span>
<span id="cb2-11">x &lt;-<span class="st"> </span>y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>, <span class="dt">len =</span> <span class="dv">2000</span>)</span>
<span id="cb2-12">image &lt;-<span class="st"> </span><span class="kw">outer</span>(x, y, f)</span>
<span id="cb2-13"></span>
<span id="cb2-14">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>), <span class="dt">bg =</span> bkgcol)</span>
<span id="cb2-15"><span class="kw">plot</span>(</span>
<span id="cb2-16">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="kw">c</span>(<span class="op">-</span><span class="dv">100</span>, <span class="dv">100</span>), <span class="dt">type =</span> <span class="st">"n"</span>, </span>
<span id="cb2-17">  <span class="dt">xlab =</span> <span class="st">""</span>, <span class="dt">ylab =</span> <span class="st">""</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">asp =</span> <span class="dv">1</span></span>
<span id="cb2-18">)</span>
<span id="cb2-19"><span class="kw">rasterImage</span>(image, <span class="dv">-100</span>, <span class="dv">-100</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span>
<span id="cb2-20"><span class="kw">par</span>(opar)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Eisenstein4.png"
          style="width: 55%"
        />
      </p>
      <p>It makes me think to a beetle.</p>
      <p>
        And here is the <span class="math inline">\(E_6\)</span> Eisenstein
        series:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">f &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(x, y){</span>
<span id="cb3-2">  q &lt;-<span class="st"> </span>x <span class="op">+</span><span class="st"> </span>1i<span class="op">*</span>y</span>
<span id="cb3-3">  <span class="cf">if</span>(<span class="kw">Mod</span>(q) <span class="op">&gt;=</span><span class="st"> </span><span class="fl">0.99</span> <span class="op">||</span><span class="st"> </span>(<span class="kw">Im</span>(q) <span class="op">==</span><span class="st"> </span><span class="dv">0</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">Re</span>(q) <span class="op">&lt;=</span><span class="st"> </span><span class="dv">0</span>)) <span class="kw">return</span>(bkgcol)</span>
<span id="cb3-4">  z &lt;-<span class="st"> </span><span class="kw">En</span>(<span class="dv">6</span>, q)</span>
<span id="cb3-5">  <span class="kw">colormap2</span>(z)</span>
<span id="cb3-6">})</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Eisenstein6.png"
          style="width: 55%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 20 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/beautifulComplexFunctions.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Scrollbar for the Shiny sidebar</title>
      <link>https://laustep.github.io/stlahblog/posts/shinySidebarScrollbar.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        It is easy to have a scrollbar for the sidebar of a Shiny app: one just
        has to use the CSS <code>height: 90vh; overflow-y: auto;</code>:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">library</span>(shinyWidgets)</span>
<span id="cb1-3"></span>
<span id="cb1-4">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb1-5">  <span class="kw">titlePanel</span>(<span class="st">"Sidebar with scrollbar"</span>),</span>
<span id="cb1-6">  <span class="kw">sidebarLayout</span>(</span>
<span id="cb1-7">    <span class="kw">sidebarPanel</span>(</span>
<span id="cb1-8">      <span class="dt">style =</span> <span class="st">"height: 90vh; overflow-y: auto;"</span>, </span>
<span id="cb1-9">      <span class="kw">sliderInput</span>(<span class="st">"bins"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-10">      <span class="kw">br</span>(),</span>
<span id="cb1-11">      <span class="kw">dropdown</span>(</span>
<span id="cb1-12">        tags<span class="op">$</span><span class="kw">h1</span>(<span class="st">"A very large dropdown"</span>),</span>
<span id="cb1-13">        <span class="dt">status =</span> <span class="st">"danger"</span>,</span>
<span id="cb1-14">        <span class="dt">size   =</span> <span class="st">"lg"</span>,</span>
<span id="cb1-15">        <span class="dt">label  =</span> <span class="st">"Open me!"</span>,</span>
<span id="cb1-16">        <span class="dt">width  =</span> <span class="st">"500px"</span></span>
<span id="cb1-17">      ),</span>
<span id="cb1-18">      <span class="kw">br</span>(),</span>
<span id="cb1-19">      <span class="kw">sliderInput</span>(<span class="st">"bins2"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-20">      <span class="kw">br</span>(),</span>
<span id="cb1-21">      <span class="kw">sliderInput</span>(<span class="st">"bins3"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-22">      <span class="kw">br</span>(),</span>
<span id="cb1-23">      <span class="kw">sliderInput</span>(<span class="st">"bins4"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-24">      <span class="kw">br</span>(),</span>
<span id="cb1-25">      <span class="kw">sliderInput</span>(<span class="st">"bins5"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-26">      <span class="kw">br</span>(),</span>
<span id="cb1-27">      <span class="kw">sliderInput</span>(<span class="st">"bins6"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-28">      <span class="kw">br</span>(),</span>
<span id="cb1-29">      <span class="kw">sliderInput</span>(<span class="st">"bins7"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb1-30">    ),</span>
<span id="cb1-31">    </span>
<span id="cb1-32">    <span class="kw">mainPanel</span>(</span>
<span id="cb1-33">      <span class="kw">plotOutput</span>(<span class="st">"distPlot"</span>)</span>
<span id="cb1-34">    )</span>
<span id="cb1-35">    </span>
<span id="cb1-36">  )</span>
<span id="cb1-37">)</span>
<span id="cb1-38"></span>
<span id="cb1-39">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output) {</span>
<span id="cb1-40">  output[[<span class="st">"distPlot"</span>]] &lt;-<span class="st"> </span><span class="kw">renderPlot</span>({</span>
<span id="cb1-41">    x    &lt;-<span class="st"> </span>faithful[, <span class="dv">2</span>] </span>
<span id="cb1-42">    bins &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="kw">min</span>(x), <span class="kw">max</span>(x), <span class="dt">length.out =</span> input[[<span class="st">"bins"</span>]] <span class="op">+</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb1-43">    <span class="kw">hist</span>(x, <span class="dt">breaks =</span> bins, <span class="dt">col =</span> <span class="st">"darkred"</span>, <span class="dt">border =</span> <span class="st">"white"</span>)</span>
<span id="cb1-44">  })</span>
<span id="cb1-45">}</span>
<span id="cb1-46"></span>
<span id="cb1-47"><span class="kw">shinyApp</span>(<span class="dt">ui =</span> ui, <span class="dt">server =</span> server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/shiny_sidebar_scrollbar1.gif"
          style="width: 70%"
        />
      </p>
      <p>
        But, as you can see, there is an issue with the
        <code>shinyWidgets::dropdown</code>: when one opens it, the part outside
        the sidebar is hidden. Here is a JavaScript solution for this issue:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(shiny)</span>
<span id="cb2-2"><span class="kw">library</span>(shinyWidgets)</span>
<span id="cb2-3"></span>
<span id="cb2-4">js &lt;-<span class="st"> '</span></span>
<span id="cb2-5"><span class="st">$(document).ready(function(){</span></span>
<span id="cb2-6"><span class="st">  $("[id^=sw-content-]").on("shown", function(){</span></span>
<span id="cb2-7"><span class="st">    $(".sidebar").css({"overflow-y": "visible"});</span></span>
<span id="cb2-8"><span class="st">  }).on("hidden", function(){</span></span>
<span id="cb2-9"><span class="st">    $(".sidebar").css({"overflow-y": "auto"});</span></span>
<span id="cb2-10"><span class="st">  });</span></span>
<span id="cb2-11"><span class="st">});</span></span>
<span id="cb2-12"><span class="st">'</span></span>
<span id="cb2-13"></span>
<span id="cb2-14">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb2-15">  tags<span class="op">$</span><span class="kw">head</span>(tags<span class="op">$</span><span class="kw">script</span>(<span class="kw">HTML</span>(js))),</span>
<span id="cb2-16">  <span class="kw">titlePanel</span>(<span class="st">"Sidebar with scrollbar"</span>),</span>
<span id="cb2-17">  <span class="kw">sidebarLayout</span>(</span>
<span id="cb2-18">    <span class="kw">sidebarPanel</span>(</span>
<span id="cb2-19">      <span class="dt">class =</span> <span class="st">"sidebar"</span>,</span>
<span id="cb2-20">      <span class="dt">style =</span> <span class="st">"height: 90vh; overflow-y: auto;"</span>, </span>
<span id="cb2-21">      <span class="kw">sliderInput</span>(<span class="st">"bins"</span>, <span class="st">"Number of bins:"</span>, <span class="dt">min =</span> <span class="dv">1</span>, <span class="dt">max =</span> <span class="dv">50</span>, <span class="dt">value =</span> <span class="dv">30</span>),</span>
<span id="cb2-22">      ......</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/shiny_sidebar_scrollbar2.gif"
          style="width: 70%"
        />
      </p>
      <p>
        I find the native HTML scrollbars a bit ugly. It is possible to
        customize them:
        <a
          href="https://css-tricks.com/the-current-state-of-styling-scrollbars-in-css/"
          >Styling scrollbars in CSS</a
        >.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 17 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/shinySidebarScrollbar.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>SVG to PNG</title>
      <link>https://laustep.github.io/stlahblog/posts/SVG2PNG.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Here is a way to get a high-quality PNG image with R: save it as SVG
        first, then convert the SVG file to a PNG file, with the
        <strong>rsvg</strong> package.
      </p>
      <p>
        Let’s see. I construct a hyperbolic Delaunay triangulation with the
        <strong>gyro</strong> package:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(gyro)</span>
<span id="cb1-2"></span>
<span id="cb1-3">phi &lt;-<span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">5</span>)) <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb1-4">theta &lt;-<span class="st"> </span><span class="kw">head</span>(<span class="kw">seq</span>(<span class="dv">0</span>, pi<span class="op">/</span><span class="dv">2</span>, <span class="dt">length.out =</span> <span class="dv">11</span>), <span class="op">-</span>1L)</span>
<span id="cb1-5">a &lt;-<span class="st"> </span>phi<span class="op">^</span>((<span class="dv">2</span><span class="op">*</span>theta<span class="op">/</span>pi)<span class="op">^</span><span class="fl">0.8</span> <span class="op">-</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb1-6">u &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(theta)</span>
<span id="cb1-7">v &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(theta)</span>
<span id="cb1-8">x &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, u, <span class="op">-</span>v, <span class="op">-</span>u, v)</span>
<span id="cb1-9">y &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, v, u, <span class="op">-</span>v, <span class="op">-</span>u)</span>
<span id="cb1-10">pts &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y) <span class="op">/</span><span class="st"> </span><span class="fl">1.07</span></span>
<span id="cb1-11"></span>
<span id="cb1-12">hdel &lt;-<span class="st"> </span><span class="kw">hdelaunay</span>(pts, <span class="dt">model =</span> <span class="st">"U"</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14">fcolor &lt;-<span class="st"> </span><span class="cf">function</span>(t){</span>
<span id="cb1-15">  RGB &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(<span class="kw">hcl.colors</span>(20L, <span class="st">"Berlin"</span>))(t)</span>
<span id="cb1-16">  <span class="kw">rgb</span>(RGB[, 1L], RGB[, 2L], RGB[, 3L], <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb1-17">}</span></code></pre>
      </div>
      <p>Now let’s save the plot as a PNG, directly:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">png</span>(<span class="st">"hdelaunayU.png"</span>, <span class="dt">width =</span> <span class="dv">512</span>, <span class="dt">height =</span> <span class="dv">512</span>)</span>
<span id="cb2-2"><span class="kw">plotHdelaunay</span>(</span>
<span id="cb2-3">  hdel, <span class="dt">vertices =</span> <span class="ot">FALSE</span>, <span class="dt">color =</span> fcolor</span>
<span id="cb2-4">)</span>
<span id="cb2-5"><span class="kw">dev.off</span>()</span></code></pre>
      </div>
      <p>And now let’s save it as SVG then convert it to PNG:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">svg</span>(<span class="st">"hdelaunayU.svg"</span>)</span>
<span id="cb3-2"><span class="kw">plotHdelaunay</span>(</span>
<span id="cb3-3">  hdel, <span class="dt">vertices =</span> <span class="ot">FALSE</span>, <span class="dt">color =</span> fcolor</span>
<span id="cb3-4">)</span>
<span id="cb3-5"><span class="kw">dev.off</span>()</span>
<span id="cb3-6"></span>
<span id="cb3-7">rsvg<span class="op">::</span><span class="kw">rsvg_png</span>(</span>
<span id="cb3-8">  <span class="st">"hdelaunayU.svg"</span>, <span class="st">"hdelaunayU_from_svg.png"</span>,</span>
<span id="cb3-9">  <span class="dt">width =</span> <span class="dv">512</span>, <span class="dt">height =</span> <span class="dv">512</span></span>
<span id="cb3-10">)</span></code></pre>
      </div>
      <p>Observe the difference:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hdelaunayU.png"
          style="width: 95%"
        />
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hdelaunayU_from_svg.png"
          style="width: 95%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 17 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/SVG2PNG.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Hopf torus, circle by circle</title>
      <link>https://laustep.github.io/stlahblog/posts/HopfTorusCircleByCircle.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Remember my
        <a
          href="https://laustep.github.io/stlahblog/posts/HopfTorus_3over3.html"
          >first post</a
        >
        on the Hopf torus? I constructed it circle by circle. Below are some
        animations of this construction. I save the image each time a circle is
        added. The <strong>rgl</strong> package automatically centers the plot,
        and this gives a nice effect.
      </p>
      <p>
        First animation, three lobes, using a
        <a
          href="https://laustep.github.io/stlahblog/posts/ModifiedStereographicProjection.html"
          >modified stereographic projection</a
        >:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HopfTorusCircleByCircle_3lobes.gif"
        />
      </p>
      <p>Here is the code producing this animation:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="co"># Hopf fiber</span></span>
<span id="cb1-2">HopfFiber &lt;-<span class="st"> </span><span class="cf">function</span>(q, t){ </span>
<span id="cb1-3">  <span class="dv">1</span><span class="op">/</span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">*</span>(<span class="dv">1</span><span class="op">+</span>q[1L])) <span class="op">*</span><span class="st"> </span><span class="kw">c</span>(q[3L]<span class="op">*</span><span class="kw">cos</span>(t) <span class="op">+</span><span class="st"> </span>q[2L]<span class="op">*</span><span class="kw">sin</span>(t),</span>
<span id="cb1-4">                          q[2L]<span class="op">*</span><span class="kw">cos</span>(t) <span class="op">-</span><span class="st"> </span>q[3L]<span class="op">*</span><span class="kw">sin</span>(t),</span>
<span id="cb1-5">                          <span class="kw">sin</span>(t)<span class="op">*</span>(<span class="dv">1</span><span class="op">+</span>q[1L]),</span>
<span id="cb1-6">                          <span class="kw">cos</span>(t)<span class="op">*</span>(<span class="dv">1</span><span class="op">+</span>q[1L])) </span>
<span id="cb1-7">}</span>
<span id="cb1-8"><span class="co"># Modified stereographic projection</span></span>
<span id="cb1-9">mstereog &lt;-<span class="st"> </span><span class="cf">function</span>(x){</span>
<span id="cb1-10">  <span class="kw">acos</span>(x[4L])<span class="op">/</span><span class="kw">sqrt</span>(<span class="dv">1</span><span class="op">-</span>x[4L]<span class="op">^</span><span class="dv">2</span>) <span class="op">*</span><span class="st"> </span>x[1L<span class="op">:</span>3L]</span>
<span id="cb1-11">}</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co"># plot</span></span>
<span id="cb1-14"><span class="kw">library</span>(rgl)</span>
<span id="cb1-15"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb1-16"><span class="kw">bg3d</span>(<span class="st">"#666970"</span>)</span>
<span id="cb1-17"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.9</span>)</span>
<span id="cb1-18">t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">len =</span> 200L) <span class="co"># 200 subdivisions per circle</span></span>
<span id="cb1-19">u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">len =</span> 300L) <span class="co"># 300 circles</span></span>
<span id="cb1-20">nlobes &lt;-<span class="st"> </span>3L <span class="co"># number of lobes of the Hopf torus</span></span>
<span id="cb1-21">colors &lt;-<span class="st"> </span><span class="kw">colorRampPalette</span>( <span class="co"># colors</span></span>
<span id="cb1-22">  <span class="kw">head</span>(trekcolors<span class="op">::</span><span class="kw">trek_pal</span>(<span class="st">"klingon"</span>), <span class="op">-</span>2L),</span>
<span id="cb1-23">  <span class="dt">interpolate =</span> <span class="st">"spline"</span>, <span class="dt">bias =</span> <span class="fl">0.15</span></span>
<span id="cb1-24">)(150L)</span>
<span id="cb1-25">colors &lt;-<span class="st"> </span><span class="kw">c</span>(colors, <span class="kw">rev</span>(colors))</span>
<span id="cb1-26"><span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="kw">length</span>(u_)){</span>
<span id="cb1-27">  u &lt;-<span class="st"> </span>u_[i]</span>
<span id="cb1-28">  x &lt;-<span class="st">  </span><span class="kw">cos</span>(pi<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>(pi<span class="op">/</span><span class="dv">2</span><span class="fl">-0.44</span>)<span class="op">*</span><span class="kw">cos</span>(nlobes<span class="op">*</span>u))</span>
<span id="cb1-29">  z &lt;-<span class="st">  </span><span class="kw">sin</span>(pi<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>(pi<span class="op">/</span><span class="dv">2</span><span class="fl">-0.44</span>)<span class="op">*</span><span class="kw">cos</span>(nlobes<span class="op">*</span>u)) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u<span class="fl">+0.44</span><span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>nlobes))</span>
<span id="cb1-30">  y &lt;-<span class="st"> </span><span class="op">-</span><span class="kw">sin</span>(pi<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>(pi<span class="op">/</span><span class="dv">2</span><span class="fl">-0.44</span>)<span class="op">*</span><span class="kw">cos</span>(nlobes<span class="op">*</span>u)) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u<span class="fl">+0.44</span><span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>nlobes))</span>
<span id="cb1-31">  circle4d &lt;-<span class="st"> </span><span class="kw">vapply</span>(t_, <span class="cf">function</span>(t){</span>
<span id="cb1-32">    <span class="kw">HopfFiber</span>(<span class="kw">c</span>(x, y, z), t)  </span>
<span id="cb1-33">  }, <span class="kw">numeric</span>(4L))</span>
<span id="cb1-34">  circle3d &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(circle4d, 2L, mstereog))</span>
<span id="cb1-35">  <span class="kw">shade3d</span>(</span>
<span id="cb1-36">    <span class="kw">cylinder3d</span>(circle3d, <span class="dt">radius =</span> <span class="fl">0.1</span>, <span class="dt">sides =</span> <span class="dv">15</span>), </span>
<span id="cb1-37">    <span class="dt">color =</span> colors[i]</span>
<span id="cb1-38">  )</span>
<span id="cb1-39">  <span class="kw">rgl.snapshot</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, i)) <span class="co"># save</span></span>
<span id="cb1-40">}</span>
<span id="cb1-41"></span>
<span id="cb1-42"><span class="co"># duplicate last pic to make a pause at the end of the animation</span></span>
<span id="cb1-43"><span class="cf">for</span>(i <span class="cf">in</span> 301L<span class="op">:</span>350L){</span>
<span id="cb1-44">  <span class="kw">file.copy</span>(<span class="st">"pic300.png"</span>, <span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, i))</span>
<span id="cb1-45">}</span>
<span id="cb1-46"><span class="co"># make animation</span></span>
<span id="cb1-47">pngFiles &lt;-<span class="st"> </span><span class="kw">list.files</span>(<span class="dt">pattern =</span> <span class="st">"^pic?.*png$"</span>)</span>
<span id="cb1-48"><span class="kw">library</span>(gifski)</span>
<span id="cb1-49"><span class="kw">gifski</span>(</span>
<span id="cb1-50">  pngFiles,</span>
<span id="cb1-51">  <span class="dt">gif_file =</span> <span class="st">"HopfTorusCircleByCircle_3lobes.gif"</span>,</span>
<span id="cb1-52">  <span class="dt">width    =</span> <span class="dv">512</span>, <span class="dt">height   =</span> <span class="dv">512</span>,</span>
<span id="cb1-53">  <span class="dt">delay    =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">9</span> <span class="co"># 9 pics per second</span></span>
<span id="cb1-54">)</span>
<span id="cb1-55"><span class="co"># delete png files</span></span>
<span id="cb1-56"><span class="kw">file.remove</span>(pngFiles)</span></code></pre>
      </div>
      <p>
        Four lobes, modified stereographic projection, with the ‘rocket’ color
        palette (in <strong>grDevices</strong> package):
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HopfTorusCircleByCircle_4lobes.gif"
        />
      </p>
      <p>Two lobes, classical stereographic projection:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HopfTorusCircleByCircle_2lobes.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 13 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HopfTorusCircleByCircle.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>An example of the Minkowski addition</title>
      <link>https://laustep.github.io/stlahblog/posts/MinkowskiSumLeonardo.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Now the <strong>MeshesOperations</strong> package can construct the
        <a href="https://www.wikiwand.com/en/Minkowski_addition"
          >Minkowski sum</a
        >
        of two polyhedra, thanks to the C++ library <strong>CGAL</strong> and
        the R package <strong>RcppCGAL</strong>. Let’s see an example: the
        Minkowski sum of Leonardo da Vinci’s 72-sided sphere and a truncated
        icosahedron. Here are these two polyhedra:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/LeonardoAndTruncIco.png"
        />
      </p>
      <p>
        The mesh of the truncated icosahedron is provided by the
        <strong>MeshesOperations</strong> package. Here are the (rounded)
        vertices and the faces of da Vinci’s 72-sided sphere:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">vertices &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-2">  <span class="kw">c</span>( <span class="fl">1.61352</span>, <span class="fl">-0.43234</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-3">  <span class="kw">c</span>( <span class="fl">1.18118</span>, <span class="fl">-1.18118</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-4">  <span class="kw">c</span>( <span class="fl">0.43234</span>, <span class="fl">-1.61352</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-5">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.43234</span>, <span class="fl">-1.61352</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-6">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.18118</span>, <span class="fl">-1.18118</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-7">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.61352</span>, <span class="fl">-0.43234</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-8">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.61352</span>,  <span class="fl">0.43234</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-9">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.18118</span>,  <span class="fl">1.18118</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-10">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.43234</span>,  <span class="fl">1.61352</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-11">  <span class="kw">c</span>( <span class="fl">0.43234</span>,  <span class="fl">1.61352</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-12">  <span class="kw">c</span>( <span class="fl">1.18118</span>,  <span class="fl">1.18118</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-13">  <span class="kw">c</span>( <span class="fl">1.61352</span>,  <span class="fl">0.43234</span>,  <span class="fl">1.18620</span>),</span>
<span id="cb1-14">  <span class="kw">c</span>( <span class="fl">1.61352</span>, <span class="fl">-0.43234</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-15">  <span class="kw">c</span>( <span class="fl">1.61352</span>,  <span class="fl">0.43234</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-16">  <span class="kw">c</span>( <span class="fl">1.18118</span>,  <span class="fl">1.18118</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-17">  <span class="kw">c</span>( <span class="fl">0.43234</span>,  <span class="fl">1.61352</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-18">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.43234</span>,  <span class="fl">1.61352</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-19">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.18118</span>,  <span class="fl">1.18118</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-20">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.61352</span>,  <span class="fl">0.43234</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-21">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.61352</span>, <span class="fl">-0.43234</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-22">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.18118</span>, <span class="fl">-1.18118</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-23">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.43234</span>, <span class="fl">-1.61352</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-24">  <span class="kw">c</span>( <span class="fl">0.43234</span>, <span class="fl">-1.61352</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-25">  <span class="kw">c</span>( <span class="fl">1.18118</span>, <span class="fl">-1.18118</span>, <span class="fl">-1.18620</span>),</span>
<span id="cb1-26">  <span class="kw">c</span>( <span class="fl">2.01020</span>,  <span class="fl">0.53863</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-27">  <span class="kw">c</span>( <span class="fl">1.47157</span>,  <span class="fl">1.47157</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-28">  <span class="kw">c</span>( <span class="fl">0.53863</span>,  <span class="fl">2.01020</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-29">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.53863</span>,  <span class="fl">2.01020</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-30">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.47157</span>,  <span class="fl">1.47157</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-31">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">2.01020</span>,  <span class="fl">0.53863</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-32">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">2.01020</span>, <span class="fl">-0.53863</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-33">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.47157</span>, <span class="fl">-1.47157</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-34">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.53863</span>, <span class="fl">-2.01020</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-35">  <span class="kw">c</span>( <span class="fl">0.53863</span>, <span class="fl">-2.01020</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-36">  <span class="kw">c</span>( <span class="fl">1.47157</span>, <span class="fl">-1.47157</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-37">  <span class="kw">c</span>( <span class="fl">2.01020</span>, <span class="fl">-0.53863</span>,  <span class="fl">0.00000</span>),</span>
<span id="cb1-38">  <span class="kw">c</span>( <span class="fl">0.89068</span>,  <span class="fl">0.23866</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-39">  <span class="kw">c</span>( <span class="fl">0.89068</span>, <span class="fl">-0.23866</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-40">  <span class="kw">c</span>( <span class="fl">0.65202</span>, <span class="fl">-0.65202</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-41">  <span class="kw">c</span>( <span class="fl">0.23866</span>, <span class="fl">-0.89068</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-42">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.23866</span>, <span class="fl">-0.89068</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-43">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.65202</span>, <span class="fl">-0.65202</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-44">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.89068</span>, <span class="fl">-0.23866</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-45">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.89068</span>,  <span class="fl">0.23866</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-46">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.65202</span>,  <span class="fl">0.65202</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-47">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.23866</span>,  <span class="fl">0.89068</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-48">  <span class="kw">c</span>( <span class="fl">0.23866</span>,  <span class="fl">0.89068</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-49">  <span class="kw">c</span>( <span class="fl">0.65202</span>,  <span class="fl">0.65202</span>,  <span class="fl">1.77777</span>),</span>
<span id="cb1-50">  <span class="kw">c</span>( <span class="fl">0.65202</span>, <span class="fl">-0.65202</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-51">  <span class="kw">c</span>( <span class="fl">0.89068</span>, <span class="fl">-0.23866</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-52">  <span class="kw">c</span>( <span class="fl">0.89068</span>,  <span class="fl">0.23866</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-53">  <span class="kw">c</span>( <span class="fl">0.65202</span>,  <span class="fl">0.65202</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-54">  <span class="kw">c</span>( <span class="fl">0.23866</span>,  <span class="fl">0.89068</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-55">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.23866</span>,  <span class="fl">0.89068</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-56">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.65202</span>,  <span class="fl">0.65202</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-57">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.89068</span>,  <span class="fl">0.23866</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-58">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.89068</span>, <span class="fl">-0.23866</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-59">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.65202</span>, <span class="fl">-0.65202</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-60">  <span class="kw">c</span>(<span class="op">-</span><span class="fl">0.23866</span>, <span class="fl">-0.89068</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-61">  <span class="kw">c</span>( <span class="fl">0.23866</span>, <span class="fl">-0.89068</span>, <span class="fl">-1.77777</span>),</span>
<span id="cb1-62">  <span class="kw">c</span>( <span class="fl">0.00000</span>,  <span class="fl">0.00000</span>,  <span class="fl">2.04922</span>),</span>
<span id="cb1-63">  <span class="kw">c</span>( <span class="fl">0.00000</span>,  <span class="fl">0.00000</span>, <span class="fl">-2.04922</span>)</span>
<span id="cb1-64">)</span>
<span id="cb1-65"></span>
<span id="cb1-66">triangles &lt;-<span class="st"> </span><span class="kw">lapply</span>(<span class="kw">list</span>(</span>
<span id="cb1-67">  <span class="kw">c</span>(<span class="dv">36</span>, <span class="dv">60</span>, <span class="dv">47</span>), </span>
<span id="cb1-68">  <span class="kw">c</span>(<span class="dv">37</span>, <span class="dv">60</span>, <span class="dv">36</span>), </span>
<span id="cb1-69">  <span class="kw">c</span>(<span class="dv">38</span>, <span class="dv">60</span>, <span class="dv">37</span>), </span>
<span id="cb1-70">  <span class="kw">c</span>(<span class="dv">39</span>, <span class="dv">60</span>, <span class="dv">38</span>), </span>
<span id="cb1-71">  <span class="kw">c</span>(<span class="dv">40</span>, <span class="dv">60</span>, <span class="dv">39</span>), </span>
<span id="cb1-72">  <span class="kw">c</span>(<span class="dv">41</span>, <span class="dv">60</span>, <span class="dv">40</span>), </span>
<span id="cb1-73">  <span class="kw">c</span>(<span class="dv">42</span>, <span class="dv">60</span>, <span class="dv">41</span>), </span>
<span id="cb1-74">  <span class="kw">c</span>(<span class="dv">43</span>, <span class="dv">60</span>, <span class="dv">42</span>), </span>
<span id="cb1-75">  <span class="kw">c</span>(<span class="dv">44</span>, <span class="dv">60</span>, <span class="dv">43</span>), </span>
<span id="cb1-76">  <span class="kw">c</span>(<span class="dv">45</span>, <span class="dv">60</span>, <span class="dv">44</span>), </span>
<span id="cb1-77">  <span class="kw">c</span>(<span class="dv">46</span>, <span class="dv">60</span>, <span class="dv">45</span>), </span>
<span id="cb1-78">  <span class="kw">c</span>(<span class="dv">47</span>, <span class="dv">60</span>, <span class="dv">46</span>), </span>
<span id="cb1-79">  <span class="kw">c</span>(<span class="dv">48</span>, <span class="dv">61</span>, <span class="dv">59</span>), </span>
<span id="cb1-80">  <span class="kw">c</span>(<span class="dv">49</span>, <span class="dv">61</span>, <span class="dv">48</span>), </span>
<span id="cb1-81">  <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">61</span>, <span class="dv">49</span>), </span>
<span id="cb1-82">  <span class="kw">c</span>(<span class="dv">51</span>, <span class="dv">61</span>, <span class="dv">50</span>), </span>
<span id="cb1-83">  <span class="kw">c</span>(<span class="dv">52</span>, <span class="dv">61</span>, <span class="dv">51</span>), </span>
<span id="cb1-84">  <span class="kw">c</span>(<span class="dv">53</span>, <span class="dv">61</span>, <span class="dv">52</span>), </span>
<span id="cb1-85">  <span class="kw">c</span>(<span class="dv">54</span>, <span class="dv">61</span>, <span class="dv">53</span>), </span>
<span id="cb1-86">  <span class="kw">c</span>(<span class="dv">55</span>, <span class="dv">61</span>, <span class="dv">54</span>), </span>
<span id="cb1-87">  <span class="kw">c</span>(<span class="dv">56</span>, <span class="dv">61</span>, <span class="dv">55</span>), </span>
<span id="cb1-88">  <span class="kw">c</span>(<span class="dv">57</span>, <span class="dv">61</span>, <span class="dv">56</span>), </span>
<span id="cb1-89">  <span class="kw">c</span>(<span class="dv">58</span>, <span class="dv">61</span>, <span class="dv">57</span>), </span>
<span id="cb1-90">  <span class="kw">c</span>(<span class="dv">59</span>, <span class="dv">61</span>, <span class="dv">58</span>)</span>
<span id="cb1-91">), <span class="cf">function</span>(x) x <span class="op">+</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb1-92">quads &lt;-<span class="st"> </span><span class="kw">lapply</span>(<span class="kw">list</span>(</span>
<span id="cb1-93">  <span class="kw">c</span>( <span class="dv">0</span>, <span class="dv">11</span>, <span class="dv">24</span>, <span class="dv">35</span>), </span>
<span id="cb1-94">  <span class="kw">c</span>(<span class="dv">10</span>, <span class="dv">25</span>, <span class="dv">24</span>, <span class="dv">11</span>), </span>
<span id="cb1-95">  <span class="kw">c</span>( <span class="dv">9</span>, <span class="dv">26</span>, <span class="dv">25</span>, <span class="dv">10</span>), </span>
<span id="cb1-96">  <span class="kw">c</span>( <span class="dv">8</span>, <span class="dv">27</span>, <span class="dv">26</span>,  <span class="dv">9</span>), </span>
<span id="cb1-97">  <span class="kw">c</span>( <span class="dv">7</span>, <span class="dv">28</span>, <span class="dv">27</span>,  <span class="dv">8</span>), </span>
<span id="cb1-98">  <span class="kw">c</span>( <span class="dv">6</span>, <span class="dv">29</span>, <span class="dv">28</span>,  <span class="dv">7</span>), </span>
<span id="cb1-99">  <span class="kw">c</span>( <span class="dv">5</span>, <span class="dv">30</span>, <span class="dv">29</span>,  <span class="dv">6</span>), </span>
<span id="cb1-100">  <span class="kw">c</span>( <span class="dv">4</span>, <span class="dv">31</span>, <span class="dv">30</span>,  <span class="dv">5</span>), </span>
<span id="cb1-101">  <span class="kw">c</span>( <span class="dv">3</span>, <span class="dv">32</span>, <span class="dv">31</span>,  <span class="dv">4</span>), </span>
<span id="cb1-102">  <span class="kw">c</span>( <span class="dv">2</span>, <span class="dv">33</span>, <span class="dv">32</span>,  <span class="dv">3</span>), </span>
<span id="cb1-103">  <span class="kw">c</span>( <span class="dv">1</span>, <span class="dv">34</span>, <span class="dv">33</span>,  <span class="dv">2</span>), </span>
<span id="cb1-104">  <span class="kw">c</span>( <span class="dv">0</span>, <span class="dv">35</span>, <span class="dv">34</span>,  <span class="dv">1</span>), </span>
<span id="cb1-105">  <span class="kw">c</span>(<span class="dv">12</span>, <span class="dv">35</span>, <span class="dv">24</span>, <span class="dv">13</span>), </span>
<span id="cb1-106">  <span class="kw">c</span>(<span class="dv">13</span>, <span class="dv">24</span>, <span class="dv">25</span>, <span class="dv">14</span>), </span>
<span id="cb1-107">  <span class="kw">c</span>(<span class="dv">14</span>, <span class="dv">25</span>, <span class="dv">26</span>, <span class="dv">15</span>), </span>
<span id="cb1-108">  <span class="kw">c</span>(<span class="dv">15</span>, <span class="dv">26</span>, <span class="dv">27</span>, <span class="dv">16</span>), </span>
<span id="cb1-109">  <span class="kw">c</span>(<span class="dv">16</span>, <span class="dv">27</span>, <span class="dv">28</span>, <span class="dv">17</span>), </span>
<span id="cb1-110">  <span class="kw">c</span>(<span class="dv">17</span>, <span class="dv">28</span>, <span class="dv">29</span>, <span class="dv">18</span>), </span>
<span id="cb1-111">  <span class="kw">c</span>(<span class="dv">18</span>, <span class="dv">29</span>, <span class="dv">30</span>, <span class="dv">19</span>), </span>
<span id="cb1-112">  <span class="kw">c</span>(<span class="dv">19</span>, <span class="dv">30</span>, <span class="dv">31</span>, <span class="dv">20</span>), </span>
<span id="cb1-113">  <span class="kw">c</span>(<span class="dv">20</span>, <span class="dv">31</span>, <span class="dv">32</span>, <span class="dv">21</span>), </span>
<span id="cb1-114">  <span class="kw">c</span>(<span class="dv">21</span>, <span class="dv">32</span>, <span class="dv">33</span>, <span class="dv">22</span>), </span>
<span id="cb1-115">  <span class="kw">c</span>(<span class="dv">22</span>, <span class="dv">33</span>, <span class="dv">34</span>, <span class="dv">23</span>), </span>
<span id="cb1-116">  <span class="kw">c</span>(<span class="dv">12</span>, <span class="dv">23</span>, <span class="dv">34</span>, <span class="dv">35</span>), </span>
<span id="cb1-117">  <span class="kw">c</span>( <span class="dv">0</span>, <span class="dv">37</span>, <span class="dv">36</span>, <span class="dv">11</span>), </span>
<span id="cb1-118">  <span class="kw">c</span>( <span class="dv">0</span>,  <span class="dv">1</span>, <span class="dv">38</span>, <span class="dv">37</span>), </span>
<span id="cb1-119">  <span class="kw">c</span>( <span class="dv">1</span>,  <span class="dv">2</span>, <span class="dv">39</span>, <span class="dv">38</span>), </span>
<span id="cb1-120">  <span class="kw">c</span>( <span class="dv">2</span>,  <span class="dv">3</span>, <span class="dv">40</span>, <span class="dv">39</span>), </span>
<span id="cb1-121">  <span class="kw">c</span>( <span class="dv">3</span>,  <span class="dv">4</span>, <span class="dv">41</span>, <span class="dv">40</span>), </span>
<span id="cb1-122">  <span class="kw">c</span>( <span class="dv">4</span>,  <span class="dv">5</span>, <span class="dv">42</span>, <span class="dv">41</span>), </span>
<span id="cb1-123">  <span class="kw">c</span>( <span class="dv">5</span>,  <span class="dv">6</span>, <span class="dv">43</span>, <span class="dv">42</span>), </span>
<span id="cb1-124">  <span class="kw">c</span>( <span class="dv">6</span>,  <span class="dv">7</span>, <span class="dv">44</span>, <span class="dv">43</span>), </span>
<span id="cb1-125">  <span class="kw">c</span>( <span class="dv">7</span>,  <span class="dv">8</span>, <span class="dv">45</span>, <span class="dv">44</span>), </span>
<span id="cb1-126">  <span class="kw">c</span>( <span class="dv">8</span>,  <span class="dv">9</span>, <span class="dv">46</span>, <span class="dv">45</span>), </span>
<span id="cb1-127">  <span class="kw">c</span>( <span class="dv">9</span>, <span class="dv">10</span>, <span class="dv">47</span>, <span class="dv">46</span>), </span>
<span id="cb1-128">  <span class="kw">c</span>(<span class="dv">10</span>, <span class="dv">11</span>, <span class="dv">36</span>, <span class="dv">47</span>), </span>
<span id="cb1-129">  <span class="kw">c</span>(<span class="dv">12</span>, <span class="dv">49</span>, <span class="dv">48</span>, <span class="dv">23</span>), </span>
<span id="cb1-130">  <span class="kw">c</span>(<span class="dv">12</span>, <span class="dv">13</span>, <span class="dv">50</span>, <span class="dv">49</span>), </span>
<span id="cb1-131">  <span class="kw">c</span>(<span class="dv">13</span>, <span class="dv">14</span>, <span class="dv">51</span>, <span class="dv">50</span>), </span>
<span id="cb1-132">  <span class="kw">c</span>(<span class="dv">14</span>, <span class="dv">15</span>, <span class="dv">52</span>, <span class="dv">51</span>), </span>
<span id="cb1-133">  <span class="kw">c</span>(<span class="dv">15</span>, <span class="dv">16</span>, <span class="dv">53</span>, <span class="dv">52</span>), </span>
<span id="cb1-134">  <span class="kw">c</span>(<span class="dv">16</span>, <span class="dv">17</span>, <span class="dv">54</span>, <span class="dv">53</span>), </span>
<span id="cb1-135">  <span class="kw">c</span>(<span class="dv">17</span>, <span class="dv">18</span>, <span class="dv">55</span>, <span class="dv">54</span>), </span>
<span id="cb1-136">  <span class="kw">c</span>(<span class="dv">18</span>, <span class="dv">19</span>, <span class="dv">56</span>, <span class="dv">55</span>), </span>
<span id="cb1-137">  <span class="kw">c</span>(<span class="dv">19</span>, <span class="dv">20</span>, <span class="dv">57</span>, <span class="dv">56</span>), </span>
<span id="cb1-138">  <span class="kw">c</span>(<span class="dv">20</span>, <span class="dv">21</span>, <span class="dv">58</span>, <span class="dv">57</span>), </span>
<span id="cb1-139">  <span class="kw">c</span>(<span class="dv">21</span>, <span class="dv">22</span>, <span class="dv">59</span>, <span class="dv">58</span>), </span>
<span id="cb1-140">  <span class="kw">c</span>(<span class="dv">22</span>, <span class="dv">23</span>, <span class="dv">48</span>, <span class="dv">59</span>)</span>
<span id="cb1-141">), <span class="cf">function</span>(x) x <span class="op">+</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb1-142">faces &lt;-<span class="st"> </span><span class="kw">c</span>(triangles, quads)</span>
<span id="cb1-143"></span>
<span id="cb1-144">Leonardo &lt;-<span class="st"> </span><span class="kw">list</span>(<span class="dt">vertices =</span> vertices, <span class="dt">faces =</span> faces)</span></code></pre>
      </div>
      <p>
        In order to produce the above plot with <strong>rgl</strong>, I
        triangulated the two meshes. Actually this is not necessary for the
        Leonardo mesh, since <strong>rgl</strong> allows meshes with triangles
        and quads. This is necessary for the mesh of the truncated icosahedron,
        because it has some faces with more than four sides.
      </p>
      <p>
        To triangulate a mesh with <strong>MeshesOperations</strong>, I
        recommend to use the option <code>numbersType = "lazyExact"</code>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(MeshesOperations)</span>
<span id="cb2-2">tLeonardo &lt;-<span class="st"> </span><span class="kw">Mesh</span>(</span>
<span id="cb2-3">  <span class="dt">mesh =</span> Leonardo, <span class="dt">triangulate =</span> <span class="ot">TRUE</span>,</span>
<span id="cb2-4">  <span class="dt">numbersType =</span> <span class="st">"lazyExact"</span></span>
<span id="cb2-5">)</span>
<span id="cb2-6">tmesh     &lt;-<span class="st"> </span><span class="kw">Mesh</span>(</span>
<span id="cb2-7">  <span class="dt">mesh =</span> truncatedIcosahedron, <span class="dt">triangulate =</span> <span class="ot">TRUE</span>,</span>
<span id="cb2-8">  <span class="dt">numbersType =</span> <span class="st">"lazyExact"</span></span>
<span id="cb2-9">)</span></code></pre>
      </div>
      <p>Now, here is the code which generates the picture shown before:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(rgl)</span>
<span id="cb3-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">850</span>, <span class="dv">450</span>))</span>
<span id="cb3-3"><span class="kw">mfrow3d</span>(1L, 2L)</span>
<span id="cb3-4"><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb3-5"><span class="kw">shade3d</span>(<span class="kw">toRGL</span>(tLeonardo), <span class="dt">color =</span> <span class="st">"navy"</span>)</span>
<span id="cb3-6"><span class="kw">plotEdges</span>(</span>
<span id="cb3-7">  tLeonardo[[<span class="st">"vertices"</span>]], tLeonardo[[<span class="st">"exteriorEdges"</span>]], </span>
<span id="cb3-8">  <span class="dt">color =</span> <span class="st">"gold"</span>, <span class="dt">tubesRadius =</span> <span class="fl">0.06</span>, <span class="dt">spheresRadius =</span> <span class="fl">0.08</span></span>
<span id="cb3-9">)</span>
<span id="cb3-10"><span class="kw">next3d</span>()</span>
<span id="cb3-11"><span class="kw">view3d</span>(<span class="dv">30</span>, <span class="dv">30</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb3-12"><span class="kw">shade3d</span>(<span class="kw">toRGL</span>(tmesh), <span class="dt">color =</span> <span class="st">"navy"</span>)</span>
<span id="cb3-13"><span class="kw">plotEdges</span>(</span>
<span id="cb3-14">  tmesh[[<span class="st">"vertices"</span>]], tmesh[[<span class="st">"exteriorEdges"</span>]], </span>
<span id="cb3-15">  <span class="dt">color =</span> <span class="st">"gold"</span>, <span class="dt">tubesRadius =</span> <span class="fl">0.06</span>, <span class="dt">spheresRadius =</span> <span class="fl">0.08</span></span>
<span id="cb3-16">)</span></code></pre>
      </div>
      <p>Now let’s see the Minkowski sum of these two polyhedra:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">MinkMesh &lt;-<span class="st"> </span><span class="kw">MinkowskiSum</span>(Leonardo, truncatedIcosahedron) </span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb4-4"><span class="kw">shade3d</span>(<span class="kw">toRGL</span>(MinkMesh), <span class="dt">color=</span><span class="st">"navy"</span>)</span>
<span id="cb4-5"><span class="kw">plotEdges</span>(</span>
<span id="cb4-6">  MinkMesh[[<span class="st">"vertices"</span>]], MinkMesh[[<span class="st">"exteriorEdges"</span>]], </span>
<span id="cb4-7">  <span class="dt">color =</span> <span class="st">"gold"</span>, <span class="dt">tubesRadius =</span> <span class="fl">0.06</span>, <span class="dt">spheresRadius =</span> <span class="fl">0.08</span></span>
<span id="cb4-8">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DaVinciPlusTruncIco.gif"
        />
      </p>
      <p>
        Beautiful. The generation of the Minkowski sum is fast for this example.
        But it can be very slow for meshes with numerous vertices.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 11 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/MinkowskiSumLeonardo.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Expanding a polynomial with 'caracas'</title>
      <link>https://laustep.github.io/stlahblog/posts/caracas01.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I wanted to plot an algebraic isosurface with
        <strong>POV-Ray</strong> but the expression of the polynomial defining
        the isosurface was very long (the polynomial had degree 12). Moreover
        there was a square root in the coefficients (<span class="math inline"
          >\(\sqrt{3}\)</span
        >) as well as <span class="math inline">\(\cos t\)</span> and
        <span class="math inline">\(\sin t\)</span>, where
        <span class="math inline">\(t\)</span> is a parameter I wanted to vary
        in order to make an animation. So I needed a tool able to expand a
        polynomial with some literal values in the coefficients. This is not
        possible with the <strong>Ryacas</strong> package.
      </p>
      <p>
        I finally found this tool: the <strong>caracas</strong> package. It
        allows to use the Python library <strong>SymPy</strong> in R. I didn’t
        carefully read its documentation yet, I don’t know whether it has other
        features. But this feature is a great one.
      </p>
      <p>Here is a small example:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(caracas)</span>
<span id="cb1-2"><span class="kw">def_sym</span>(x, y, z, a, b) <span class="co"># symbolic values</span></span>
<span id="cb1-3">poly &lt;-<span class="st"> </span><span class="kw">sympy_func</span>(</span>
<span id="cb1-4">  x<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>a<span class="op">*</span>x<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">/</span><span class="dv">3</span><span class="op">*</span>y <span class="op">+</span><span class="st"> </span>b<span class="op">*</span>y <span class="op">+</span><span class="st"> </span>x<span class="op">*</span>z <span class="op">+</span><span class="st"> </span>a<span class="op">*</span>x<span class="op">*</span>z, <span class="st">"Poly"</span>, <span class="dt">domain =</span> <span class="st">"QQ[a,b]"</span></span>
<span id="cb1-5">)</span>
<span id="cb1-6"><span class="kw">as.character</span>(poly)</span></code></pre>
      </div>
      <p>This gives:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="st">"Poly((a + 1)*x^2 + (a + 1)*x*z + (b + 2/3)*y, x, y, z, domain='QQ[a,b]')"</span></span></code></pre>
      </div>
      <p>
        That is great. Here <code>QQ[a,b]</code> is the field
        <span class="math inline">\(\mathbb{Q}[a,b]\)</span>. I lost a
        significant part of my knowledge in mathematics but I think this is a
        field. It doesn’t matter. Roughly speaking, this is the set of rational
        numbers to which we add the two elements
        <span class="math inline">\(a\)</span> and
        <span class="math inline">\(b\)</span>. So there are treated as
        constants, as if they were some numbers.
      </p>
      <p>
        To get a coefficient, for example the one of
        <span class="math inline">\(xz = x^1y^0z^1\)</span>:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">sympy &lt;-<span class="st"> </span><span class="kw">get_sympy</span>()</span>
<span id="cb3-2">sympy<span class="op">$</span>Poly<span class="op">$</span><span class="kw">nth</span>(poly<span class="op">$</span>pyobj, 1L, 0L, 1L)</span></code></pre>
      </div>
      <p>This gives:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">a <span class="op">+</span><span class="st"> </span><span class="dv">1</span></span></code></pre>
      </div>
      <p>
        Everything needed for writing the POV-Ray code was there. I wrote a
        small script in addition to generate this code. I show it below with the
        above small example:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">library</span>(caracas)</span>
<span id="cb5-2"><span class="kw">library</span>(partitions) <span class="co"># to get the compositions of an integer, </span></span>
<span id="cb5-3">                    <span class="co"># representing the degrees with a given total</span></span>
<span id="cb5-4"><span class="kw">def_sym</span>(x, y, z, a, b) </span>
<span id="cb5-5">poly &lt;-<span class="st"> </span><span class="kw">sympy_func</span>(</span>
<span id="cb5-6">  x<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>a<span class="op">*</span>x<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">/</span><span class="dv">3</span><span class="op">*</span>y <span class="op">+</span><span class="st"> </span>b<span class="op">*</span>y <span class="op">+</span><span class="st"> </span>x<span class="op">*</span>z <span class="op">+</span><span class="st"> </span>a<span class="op">*</span>x<span class="op">*</span>z, <span class="st">"Poly"</span>, <span class="dt">domain =</span> <span class="st">"QQ[a,b]"</span></span>
<span id="cb5-7">)</span>
<span id="cb5-8">sympy &lt;-<span class="st"> </span><span class="kw">get_sympy</span>()</span>
<span id="cb5-9">f &lt;-<span class="st"> </span><span class="cf">function</span>(comp){</span>
<span id="cb5-10">  xyz &lt;-<span class="st"> </span><span class="kw">sprintf</span>(<span class="st">"xyz(%s): "</span>, <span class="kw">toString</span>(comp))</span>
<span id="cb5-11">  coef &lt;-<span class="st"> </span>sympy<span class="op">$</span>Poly<span class="op">$</span><span class="kw">nth</span>(poly<span class="op">$</span>pyobj, comp[1L], comp[2L], comp[3L])</span>
<span id="cb5-12">  <span class="cf">if</span>(coef <span class="op">==</span><span class="st"> </span><span class="dv">0</span>) <span class="kw">return</span>(<span class="ot">NULL</span>)</span>
<span id="cb5-13">  <span class="kw">paste0</span>(xyz, coef, <span class="st">","</span>)</span>
<span id="cb5-14">}</span>
<span id="cb5-15"><span class="cf">for</span>(deg <span class="cf">in</span> 0L<span class="op">:</span>2L){</span>
<span id="cb5-16">  comps &lt;-<span class="st"> </span><span class="kw">compositions</span>(deg, 3L)</span>
<span id="cb5-17">  povray &lt;-<span class="st"> </span><span class="kw">apply</span>(comps, 2L, f, <span class="dt">simplify =</span> <span class="ot">FALSE</span>)</span>
<span id="cb5-18">  <span class="kw">cat</span>(</span>
<span id="cb5-19">    <span class="kw">unlist</span>(povray), <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span>, <span class="dt">file =</span> <span class="st">"povray.txt"</span>, <span class="dt">append =</span> deg <span class="op">&gt;</span><span class="st"> </span>0L</span>
<span id="cb5-20">  )</span>
<span id="cb5-21">}</span></code></pre>
      </div>
      <p>
        And here is the <strong>povray.txt</strong> file generated by this
        script:
      </p>
      <pre><code>xyz(0, 1, 0): b + 2/3,
xyz(2, 0, 0): a + 1,
xyz(1, 0, 1): a + 1,</code></pre>
      <p>
        One just has to remove the trailing comma, and this the desired POV-Ray
        code.
      </p>
      <p>I won’t leave you without showing the animation:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ICN5D_01.gif"
        />
      </p>
      <p>Credit to ‘<strong>ICN5D</strong>’ for the isosurface.</p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Tue, 07 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/caracas01.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Update of 'gyro'</title>
      <link>https://laustep.github.io/stlahblog/posts/gyroUpdate.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I updated the <strong>gyro</strong> package (soon on CRAN). Here are the
        new features.
      </p>
      <h2 id="hyperbolic-polyhedra-in-the-poincaré-model">
        Hyperbolic polyhedra in the Poincaré model
      </h2>
      <p>
        The previous version of the package only dealt with hyperbolic polyhedra
        in the Minkowski model. Now it is possible to get hyperbolic polyhedra
        in the Poincaré model. I don’t provide some example, because they look
        similar to the polyhedra in the Minkowski model (see
        <a
          href="https://laustep.github.io/stlahblog/posts/hyperbolicPolyhedra.html"
          >this post</a
        >). I prefer the Minkowski model because one can change the hyperbolic
        curvature in this model.
      </p>
      <h2 id="hyperbolic-tilings-of-the-poincaré-disk">
        Hyperbolic tilings of the Poincaré disk
      </h2>
      <p>
        The package now provides the <code>tiling</code> function, which draws a
        hyperbolic tiling of the Poincaré disk.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(gyro)</span>
<span id="cb1-2"><span class="kw">tiling</span>(<span class="dv">7</span>, <span class="dv">4</span>, <span class="dt">depth =</span> <span class="dv">4</span>, <span class="dt">border =</span> <span class="st">"darkred"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/htiling_7-4.png"
        />
      </p>
      <h2 id="hyperbolic-delaunay-tessellations">
        Hyperbolic Delaunay tessellations
      </h2>
      <p>
        The package now provides the <code>hdelaunay</code> function, which
        constructs a hyperbolic Delaunay triangulation in the Poincaré disk
        thanks to the C++ library <strong>CGAL</strong>, and the
        <code>plotHdelaunay</code> function, which plots such a triangulation.
      </p>
      <p>
        Unfortunately, this new feature will not be included in the CRAN
        version, because of a C++ issue spotted by Valgrind. If you want to use
        it, you have to install the <strong>hdelaunay</strong> branch of the
        Github repo:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">remotes<span class="op">::</span><span class="kw">install_github</span>(<span class="st">"stla/gyro@hdelaunay"</span>, <span class="dt">build_vignettes =</span> <span class="ot">TRUE</span>)</span></code></pre>
      </div>
      <p>Here is a first example:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(gyro)</span>
<span id="cb3-2"><span class="kw">library</span>(uniformly)</span>
<span id="cb3-3"><span class="kw">set.seed</span>(<span class="dv">666</span>)</span>
<span id="cb3-4">points &lt;-<span class="st"> </span><span class="kw">runif_in_sphere</span>(50L, <span class="dt">d =</span> <span class="dv">2</span>)</span>
<span id="cb3-5">hdel &lt;-<span class="st"> </span><span class="kw">hdelaunay</span>(points)</span>
<span id="cb3-6"><span class="kw">plotHdelaunay</span>(hdel, <span class="dt">color=</span><span class="st">"random"</span>, <span class="dt">luminosity=</span><span class="st">"bright"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hdelaunay1.png"
        />
      </p>
      <p>
        Actually the faces of the hyperbolic Delaunay triangulation are the same
        as the ones of the Euclidean Delaunay triangulation, except that they
        are hyperbolic, up to this point: as you can see on the above plot,
        there are some edges without incident face; this occurs when the
        circumcircle of the missing Euclidean Delaunay face is not contained in
        the unit disk.
      </p>
      <p>Here is a second example, not random:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(gyro)</span>
<span id="cb4-2"><span class="kw">library</span>(trekcolors)</span>
<span id="cb4-3">phi &lt;-<span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">5</span>)) <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb4-4">theta &lt;-<span class="st"> </span><span class="kw">head</span>(<span class="kw">seq</span>(<span class="dv">0</span>, pi<span class="op">/</span><span class="dv">2</span>, <span class="dt">length.out =</span> 11L), <span class="op">-</span>1L)</span>
<span id="cb4-5">a &lt;-<span class="st"> </span>phi<span class="op">^</span>((<span class="dv">2</span><span class="op">*</span>theta<span class="op">/</span>pi)<span class="op">^</span><span class="fl">0.8</span> <span class="op">-</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb4-6">u &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(theta)</span>
<span id="cb4-7">v &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(theta)</span>
<span id="cb4-8">x &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, u, <span class="op">-</span>v, <span class="op">-</span>u, v)</span>
<span id="cb4-9">y &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, v, u, <span class="op">-</span>v, <span class="op">-</span>u)</span>
<span id="cb4-10">pts &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y) <span class="op">/</span><span class="st"> </span><span class="fl">1.03</span></span>
<span id="cb4-11">hdel &lt;-<span class="st"> </span><span class="kw">hdelaunay</span>(pts, <span class="dt">centroids =</span> <span class="ot">TRUE</span>, <span class="dt">exact =</span> <span class="ot">TRUE</span>)</span>
<span id="cb4-12">fcolor &lt;-<span class="st"> </span><span class="cf">function</span>(t){</span>
<span id="cb4-13">    RGB &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(<span class="kw">trek_pal</span>(<span class="st">"klingon"</span>))(t)</span>
<span id="cb4-14">    <span class="kw">rgb</span>(RGB[, 1L], RGB[, 2L], RGB[, 3L], <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb4-15">}</span>
<span id="cb4-16"><span class="kw">plotHdelaunay</span>(</span>
<span id="cb4-17">        hdel, <span class="dt">vertices =</span> <span class="ot">FALSE</span>, <span class="dt">circle =</span> <span class="ot">FALSE</span>, <span class="dt">color =</span> fcolor</span>
<span id="cb4-18">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hdelaunay2.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 04 Jun 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/gyroUpdate.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Splitting RCGAL... and the connected components</title>
      <link>https://laustep.github.io/stlahblog/posts/splittingRCGAL.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I published two posts here about my package <strong>RCGAL</strong>, the
        <a
          href="https://laustep.github.io/stlahblog/posts/SurfaceReconstruction.html"
          >first one</a
        >
        about surface reconstruction, and the
        <a
          href="https://laustep.github.io/stlahblog/posts/BooleanOpsOnMeshes.html"
          >second one</a
        >
        about Boolean operations on 3D meshes.
      </p>
      <p>
        Now I decided to split this package into two packages:
        <a href="https://github.com/stla/SurfaceReconstruction"
          >SurfaceReconstruction</a
        >, and
        <a href="https://github.com/stla/MeshesOperations">MeshesOperations</a>.
      </p>
      <p>
        I think <strong>MeshesOperations</strong> is almost ready for submission
        to CRAN. I have just started
        <strong>SurfaceReconstruction</strong> today, but it already works.
      </p>
      <h2 id="dealing-with-a-r-cmd-check-issue">
        Dealing with a ‘R CMD check’ issue
      </h2>
      <p>
        A technical note before playing with the
        <strong>MeshesOperations</strong> package. Feel free to skip this
        section.
      </p>
      <p>
        I faced a ‘R CMD check’ issue on ‘win-builder’ with
        <strong>MeshesOperations</strong>. Namely, this so-called significant
        warning:
      </p>
      <pre><code>C:/.../BH/include/boost/container/detail/copy_move_algo.hpp:184:19: warning: 
'void* memmove(void*, const void*, size_t)' writing to an object of type 'value_type' 
{aka 'struct std::pair, std::allocator &gt;, long long unsigned int&gt; &gt; &gt;, 
std::allocator, std::allocator &gt;, long long unsigned int&gt; &gt; &gt; &gt; &gt;,
CGAL::internal::In_place_list_iterator, std::allocator &gt;, 
long long unsigned int&gt; &gt; &gt;, std::allocator, std::allocator &gt;, 
long long unsigned int&gt; &gt; &gt; &gt; &gt; &gt;'} 
with no trivial copy-assignment; use copy-assignment or copy-initialization 
instead [-Wclass-memaccess]</code></pre>
      <p>
        This is a warning from the <strong>BH</strong> package (which allows to
        use the C++ library <strong>Boost</strong> with <strong>Rcpp</strong>).
        On Linux, the ‘R CMD check’ report was clean.
      </p>
      <p>
        I found a solution to this issue. I describe it here, in case it could
        help someone.
      </p>
      <p>
        In order to use the <strong>BH</strong> package, I included it in the
        <strong>LinkingTo</strong> field of the
        <strong>DESCRIPTION</strong> file. Then I discovered that this was not
        necessary with R-4.2.0, and that’s because
        <strong>Rtools42</strong> contains the <strong>Boost</strong> library.
      </p>
      <p>
        So this solved the problem for Windows, but created a new problem for
        the other OSs. Then I solved this new problem by:
      </p>
      <ul>
        <li>
          <p>
            putting <strong>BH</strong> in the <strong>Suggests</strong> field
            of <strong>DESCRIPTION</strong> (and only in this field)
          </p>
        </li>
        <li>
          <p>
            adding the following lines in the <strong>Makevars</strong> file in
            the <strong>src</strong> folder of the package (breaking the first
            line for display here):
          </p>
        </li>
      </ul>
      <!-- -->
      <pre><code>BH_PATH = `echo 'cat(system.file("include", package = "BH", mustWork=TRUE))' \ 
| "${R_HOME}/bin/R" --vanilla --no-echo`
PKG_CXXFLAGS = -I$(BH_PATH)</code></pre>
      <p>
        The first line allows to call R to get the path of the
        <strong>include</strong> folder of the <strong>BH</strong> package, and
        this path is set to the variable <strong>BH_PATH</strong>.
      </p>
      <p>
        Of course I didn’t change the <strong>Makevars.win</strong> file. This
        works, but I don’t know yet whether this is acceptable for CRAN. However
        I am optimistic, since such a technique can be found in
        <em>‘Writing R extensions’</em>.
      </p>
      <h2 id="connected-components">Connected components</h2>
      <p>
        There’s something new in <strong>MeshesOperations</strong> as compared
        to <strong>RCGAL</strong>: the computation of the connected components
        of a mesh. I’m going to show you an example. Note that the mesh in this
        example is triangle (i.e. it only has triangular faces), and then one
        could alternatively use my package
        <a href="https://github.com/stla/concomp">MeshesOperations</a> (not
        submitted to CRAN yet) to get the connected components of this mesh.
      </p>
      <p>
        So let’s try this feature. Our example is an isosurface called the
        <em>C8 surface</em>. Unfortunately I do not remember where I found it.
        I’m using the <strong>rmarchingcubes</strong> to construct a mesh of
        this isosurface.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">f &lt;-<span class="st"> </span><span class="cf">function</span>(x, y, z){</span>
<span id="cb3-2">  <span class="dv">64</span><span class="op">*</span>x<span class="op">**</span><span class="dv">8</span> <span class="op">-</span><span class="st"> </span><span class="dv">128</span><span class="op">*</span>x<span class="op">**</span><span class="dv">6</span> <span class="op">+</span><span class="st"> </span><span class="dv">80</span><span class="op">*</span>x<span class="op">**</span><span class="dv">4</span> <span class="op">-</span><span class="st"> </span><span class="dv">16</span><span class="op">*</span>x<span class="op">**</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span><span class="dv">64</span><span class="op">*</span>y<span class="op">**</span><span class="dv">8</span> <span class="op">-</span><span class="st"> </span><span class="dv">128</span><span class="op">*</span>y<span class="op">**</span><span class="dv">6</span> <span class="op">+</span></span>
<span id="cb3-3"><span class="st">    </span><span class="dv">80</span><span class="op">*</span>y<span class="op">**</span><span class="dv">4</span> <span class="op">-</span><span class="st"> </span><span class="dv">16</span><span class="op">*</span>y<span class="op">**</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span><span class="dv">64</span><span class="op">*</span>z<span class="op">**</span><span class="dv">8</span> <span class="op">-</span><span class="st"> </span><span class="dv">128</span><span class="op">*</span>z<span class="op">**</span><span class="dv">6</span> <span class="op">+</span><span class="st"> </span><span class="dv">80</span><span class="op">*</span>z<span class="op">**</span><span class="dv">4</span> <span class="op">-</span><span class="st"> </span><span class="dv">16</span><span class="op">*</span>z<span class="op">**</span><span class="dv">2</span></span>
<span id="cb3-4">}</span>
<span id="cb3-5"></span>
<span id="cb3-6">ngrid &lt;-<span class="st"> </span>150L</span>
<span id="cb3-7">x &lt;-<span class="st"> </span>y &lt;-<span class="st"> </span>z &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">1.1</span>, <span class="fl">1.1</span>, <span class="dt">len =</span> ngrid)</span>
<span id="cb3-8">Grid &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">X =</span> x, <span class="dt">Y =</span> y, <span class="dt">Z =</span> z)</span>
<span id="cb3-9">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(</span>
<span id="cb3-10">  <span class="kw">with</span>(Grid, <span class="kw">f</span>(X, Y, Z)), <span class="dt">dim =</span> <span class="kw">c</span>(ngrid, ngrid, ngrid)</span>
<span id="cb3-11">)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="kw">library</span>(rmarchingcubes)</span>
<span id="cb3-14">contour_shape &lt;-<span class="st"> </span><span class="kw">contour3d</span>(</span>
<span id="cb3-15">  <span class="dt">griddata =</span> voxel, <span class="dt">level =</span> <span class="fl">-0.1</span>,</span>
<span id="cb3-16">  <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z</span>
<span id="cb3-17">)</span></code></pre>
      </div>
      <p>Now let’s plot it with rgl:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(rgl)</span>
<span id="cb4-2">tmesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb4-3">  <span class="dt">vertices =</span> <span class="kw">t</span>(contour_shape[[<span class="st">"vertices"</span>]]),</span>
<span id="cb4-4">  <span class="dt">indices =</span> <span class="kw">t</span>(contour_shape[[<span class="st">"triangles"</span>]]),</span>
<span id="cb4-5">  <span class="dt">normals =</span> contour_shape[[<span class="st">"normals"</span>]],</span>
<span id="cb4-6">  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb4-7">)</span>
<span id="cb4-8"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb4-9"><span class="kw">shade3d</span>(tmesh, <span class="dt">color =</span> <span class="st">"darkred"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/C8surface.gif"
        />
      </p>
      <p>
        As you can see, it has many isolated parts, the so-called
        <em>connected components</em>.
      </p>
      <p>
        Now we use the <strong>MeshesOperations</strong> package to extract
        these connected components, while requesting the vertex normals of each
        component:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">library</span>(MeshesOperations)</span>
<span id="cb5-2">meshes &lt;-<span class="st"> </span><span class="kw">connectedComponents</span>(</span>
<span id="cb5-3">  <span class="dt">vertices =</span> contour_shape[[<span class="st">"vertices"</span>]],</span>
<span id="cb5-4">  <span class="dt">faces    =</span> contour_shape[[<span class="st">"triangles"</span>]],</span>
<span id="cb5-5">  <span class="dt">normals  =</span> <span class="ot">TRUE</span></span>
<span id="cb5-6">)</span>
<span id="cb5-7"><span class="co"># Found 64 components.</span></span></code></pre>
      </div>
      <p>Now let’s plot all theses meshes, one color per mesh:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">ncc &lt;-<span class="st"> </span><span class="kw">length</span>(meshes)</span>
<span id="cb6-2"><span class="kw">library</span>(randomcoloR)</span>
<span id="cb6-3">colors &lt;-<span class="st"> </span><span class="kw">randomColor</span>(ncc, <span class="dt">hue =</span> <span class="st">"random"</span>, <span class="dt">luminosity =</span> <span class="st">"dark"</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb6-6"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>ncc){</span>
<span id="cb6-7">  cc &lt;-<span class="st"> </span>meshes[[i]]</span>
<span id="cb6-8">  tmesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb6-9">    <span class="dt">vertices =</span> <span class="kw">t</span>(cc[[<span class="st">"vertices"</span>]]),</span>
<span id="cb6-10">    <span class="dt">indices  =</span> <span class="kw">t</span>(cc[[<span class="st">"faces"</span>]]),</span>
<span id="cb6-11">    <span class="dt">normals  =</span> cc[[<span class="st">"normals"</span>]],</span>
<span id="cb6-12">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb6-13">  )</span>
<span id="cb6-14">  <span class="kw">shade3d</span>(tmesh, <span class="dt">color =</span> colors[i])</span>
<span id="cb6-15">}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/C8_components.gif"
        />
      </p>
      <p>
        Nice. However there is one problem: compare the smoothness of these
        meshes to the smoothness of our first plot. It is not as smooth.
      </p>
      <p>
        I think I know why. The smoothness depends on the vertex normals. Here
        we computed the normals with CGAL, then each vertex normal is obtained
        by averaging the normals of the surrounding faces of this vertex. We
        could have used <code>rgl::addNormals</code> instead, the result would
        be the same. But there is a convenient way to get the “true” vertex
        normals of an isosurface: the normal associated to a vertex is the
        gradient of the isosurface function evaluated at the coordinates of this
        vertex. So my guess is that <strong>rmarchingcubes</strong> uses the
        gradient. I am still thinking of having the possibility to preserve the
        original normals when computing the connected components, I didn’t have
        the time yet to find how to do that. This is not a problem, we will
        compute the true normals with R. In fact we will probably do better than
        <strong>rmarchingcubes</strong>: surely this package numerically
        computes the gradient, while we will use the <em>exact</em> gradient.
        How? Look at the isosurface function <code>f</code>: this is a
        multivariate polynomial. So it is easy to calculate its derivatives.
        This would be tedious to calculate them by hand however, so let’s use
        the <strong>spray</strong> package:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(spray)</span>
<span id="cb7-2"><span class="co"># define the polynomial corresponding to f:</span></span>
<span id="cb7-3">P &lt;-<span class="st"> </span><span class="kw">f</span>(<span class="kw">lone</span>(<span class="dv">1</span>,<span class="dv">3</span>), <span class="kw">lone</span>(<span class="dv">2</span>,<span class="dv">3</span>), <span class="kw">lone</span>(<span class="dv">3</span>,<span class="dv">3</span>))</span>
<span id="cb7-4"><span class="co"># and its derivatives:</span></span>
<span id="cb7-5">dfx &lt;-<span class="st"> </span><span class="kw">as.function</span>(<span class="kw">deriv</span>(P, 1L))</span>
<span id="cb7-6">dfy &lt;-<span class="st"> </span><span class="kw">as.function</span>(<span class="kw">deriv</span>(P, 2L))</span>
<span id="cb7-7">dfz &lt;-<span class="st"> </span><span class="kw">as.function</span>(<span class="kw">deriv</span>(P, 3L))</span>
<span id="cb7-8"><span class="co"># the gradient is:</span></span>
<span id="cb7-9">gradient &lt;-<span class="st"> </span><span class="cf">function</span>(xyz){</span>
<span id="cb7-10">  <span class="kw">cbind</span>(<span class="kw">dfx</span>(xyz), <span class="kw">dfy</span>(xyz), <span class="kw">dfz</span>(xyz))</span>
<span id="cb7-11">}</span></code></pre>
      </div>
      <p>
        Just a couple of lines of code… Now let’s do the plot with the true
        normals:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb8-2"><span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>ncc){</span>
<span id="cb8-3">  cc &lt;-<span class="st"> </span>meshes[[i]]</span>
<span id="cb8-4">  tmesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb8-5">    <span class="dt">vertices =</span> <span class="kw">t</span>(cc<span class="op">$</span>vertices),</span>
<span id="cb8-6">    <span class="dt">indices  =</span> <span class="kw">t</span>(cc<span class="op">$</span>faces),</span>
<span id="cb8-7">    <span class="dt">normals  =</span> <span class="kw">gradient</span>(cc<span class="op">$</span>vertices),</span>
<span id="cb8-8">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span></span>
<span id="cb8-9">  )</span>
<span id="cb8-10">  <span class="kw">shade3d</span>(tmesh, <span class="dt">color =</span> colors[i])</span>
<span id="cb8-11">}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/C8_components_trueNormals.gif"
        />
      </p>
      <p>A perfect smoothness!</p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 27 May 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/splittingRCGAL.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Animated multibarchart with (R)nvd3</title>
      <link>https://laustep.github.io/stlahblog/posts/Rnvd3.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I really like the animated multibarchart of the JavaScript library
        <a href="https://nvd3.org/">NVD3</a>. That’s why I did the ‘Rnvd3’
        package.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(Rnvd3)</span>
<span id="cb1-2"></span>
<span id="cb1-3">dat &lt;-<span class="st"> </span>reshape2<span class="op">::</span><span class="kw">melt</span>(</span>
<span id="cb1-4">  <span class="kw">apply</span>(HairEyeColor, <span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">2</span>), sum), <span class="dt">value.name =</span> <span class="st">"Count"</span></span>
<span id="cb1-5">)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co"># style axis titles with CSS ####</span></span>
<span id="cb1-8"><span class="kw">library</span>(htmltools)</span>
<span id="cb1-9">CSS &lt;-<span class="st"> </span><span class="kw">HTML</span>(</span>
<span id="cb1-10">  <span class="st">".nvd3 .nv-axis.nv-x text.nv-axislabel,</span></span>
<span id="cb1-11"><span class="st">   .nvd3 .nv-axis.nv-y text.nv-axislabel {</span></span>
<span id="cb1-12"><span class="st">     font-size: 2rem;</span></span>
<span id="cb1-13"><span class="st">     fill: red;</span></span>
<span id="cb1-14"><span class="st">  }"</span></span>
<span id="cb1-15">)</span>
<span id="cb1-16"></span>
<span id="cb1-17">widget &lt;-<span class="st"> </span><span class="kw">multiBarChart</span>(</span>
<span id="cb1-18">  dat, Count <span class="op">~</span><span class="st"> </span>Eye, <span class="st">"Hair"</span>, <span class="dt">palette =</span> <span class="st">"turbo"</span></span>
<span id="cb1-19">)</span>
<span id="cb1-20"><span class="kw">prependContent</span>(</span>
<span id="cb1-21">  widget,</span>
<span id="cb1-22">  tags<span class="op">$</span><span class="kw">style</span>(CSS)</span>
<span id="cb1-23">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Rnvd3.gif"
        />
      </p>
      <p>
        This chart is also available in the ‘rCharts’ package, but this package
        is not maintained.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 20 May 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/Rnvd3.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Hierarchical data visualization with Shiny and D3</title>
      <link>https://laustep.github.io/stlahblog/posts/HierarchicalDataViz.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I refreshed my old package ‘<strong>dir2json</strong>’ (5 years old). It
        uses a Haskell DLL and can only work on Windows. You can install it from
        Github:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">remotes<span class="op">::</span><span class="kw">install_github</span>(<span class="st">"stla/dir2json"</span>)</span></code></pre>
      </div>
      <p>
        This package contains two Shiny apps. The first one allows to represent
        a folder structure as a tree network diagram (called a
        <em>Reingold-Tilford</em> tree), thanks to the amazing JavaScript
        library ‘<strong>D3</strong>’:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(dir2json)</span>
<span id="cb2-2"><span class="co"># don't forget to limit the depth if the folder is deep!</span></span>
<span id="cb2-3"><span class="kw">shinyDirTree</span>(<span class="dt">dir =</span> <span class="st">"inst"</span>, <span class="dt">depth =</span> <span class="dv">3</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/shinyDirTree.gif"
          style="width: 95%"
        />
      </p>
      <p>
        As you can see, it also allows to search a file in the tree. And it is
        possible to zoom and to drag.
      </p>
      <p>
        This Shiny app was already included in the original version of the
        package. The second Shiny app is new. It is similar to the first one,
        but instead of a folder, it allows to represent any dataset with a
        hierarchical structure:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(dir2json)</span>
<span id="cb3-2">dat &lt;-<span class="st"> </span>tibble<span class="op">::</span><span class="kw">tribble</span>(</span>
<span id="cb3-3">  <span class="op">~</span>level1, <span class="op">~</span>level2, <span class="op">~</span>level3, <span class="op">~</span>level4, </span>
<span id="cb3-4">  <span class="st">"Beverages"</span>, <span class="st">"Water"</span>, <span class="st">""</span>, <span class="st">""</span>, </span>
<span id="cb3-5">  <span class="st">"Beverages"</span>, <span class="st">"Coffee"</span>, <span class="st">""</span>, <span class="st">""</span>, </span>
<span id="cb3-6">  <span class="st">"Beverages"</span>, <span class="st">"Tea"</span>, <span class="st">"Black tea"</span>, <span class="st">""</span>, </span>
<span id="cb3-7">  <span class="st">"Beverages"</span>, <span class="st">"Tea"</span>, <span class="st">"White tea"</span>, <span class="st">""</span>, </span>
<span id="cb3-8">  <span class="st">"Beverages"</span>, <span class="st">"Tea"</span>, <span class="st">"Green tea"</span>, <span class="st">"Sencha"</span>, </span>
<span id="cb3-9">  <span class="st">"Beverages"</span>, <span class="st">"Tea"</span>, <span class="st">"Green tea"</span>, <span class="st">"Gyokuro"</span>, </span>
<span id="cb3-10">  <span class="st">"Beverages"</span>, <span class="st">"Tea"</span>, <span class="st">"Green tea"</span>, <span class="st">"Matcha"</span>, </span>
<span id="cb3-11">  <span class="st">"Beverages"</span>, <span class="st">"Tea"</span>, <span class="st">"Green tea"</span>, <span class="st">"Pi Lo Chun"</span></span>
<span id="cb3-12">)</span>
<span id="cb3-13"><span class="kw">shinyDataTree</span>(dat, <span class="dt">root =</span> <span class="ot">FALSE</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/shinyDataTree.gif"
          style="width: 95%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 20 May 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HierarchicalDataViz.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The 'rAmCharts4' package</title>
      <link>https://laustep.github.io/stlahblog/posts/rAmCharts4.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        My package
        <a href="https://github.com/stla/rAmCharts4">rAmCharts4</a> has a
        moderate success on Github (twenty stars). So I decided to present it
        here.
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/rAmCharts4.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 15 May 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/rAmCharts4.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Boolean operations on meshes with R(CGAL)</title>
      <link>https://laustep.github.io/stlahblog/posts/BooleanOpsOnMeshes.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I’m still working on my package <strong>RCGAL</strong>, that I already
        present in <a href="./SurfaceReconstruction.html">a previous post</a>.
      </p>
      <p>
        This previous post was about the reconstruction of surfaces. Now I
        implemented the <em>Boolean operations on meshes</em>. Here are some
        simple examples.
      </p>
      <h4 id="union-of-two-cubes">Union of two cubes:</h4>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cubesUnion.png"
        />
      </p>
      <h4 id="intersection-of-two-cubes-one-rotated">
        Intersection of two cubes (one rotated):
      </h4>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/interCubeRotatedCube.gif"
        />
      </p>
      <h4 id="difference-of-two-cubes">Difference of two cubes:</h4>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cubesDifference.png"
        />
      </p>
      <h4 id="intersection-of-a-cube-and-a-truncated-icosahedron">
        Intersection of a cube and a truncated icosahedron:
      </h4>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cubesIntersection.png"
        />
      </p>
      <p>The code generating these plots is given in the RCGAL examples.</p>
      <p>Now let’s turn to a more interesting example.</p>
      <h2 id="the-compound-of-five-tetrahedra">
        The compound of five tetrahedra
      </h2>
      <p>
        The compound of five tetrahedra is provided by <strong>RCGAL</strong>.
        These are five tetrahedra in a pretty configuration, each centered at
        the origin. You can get their meshes by typing
        <code>tetrahedraCompound</code>. This is a list with two components: a
        field <code>meshes</code> providing for each tetrahderon its vertices
        and its faces, and a field <code>rglmeshes</code>, similar to
        <code>meshes</code> but these meshes are ready for plotting with the
        <strong>rgl</strong> package. Here it is:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(RCGAL)</span>
<span id="cb1-2"><span class="kw">library</span>(rgl)</span>
<span id="cb1-3">rglmeshes &lt;-<span class="st"> </span>tetrahedraCompound[[<span class="st">"rglmeshes"</span>]]</span>
<span id="cb1-4"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb1-5"><span class="kw">bg3d</span>(<span class="st">"#363940"</span>)</span>
<span id="cb1-6">colors &lt;-<span class="st"> </span><span class="kw">hcl.colors</span>(<span class="dv">5</span>, <span class="dt">palette =</span> <span class="st">"Spectral"</span>)</span>
<span id="cb1-7"><span class="kw">invisible</span>(<span class="kw">lapply</span>(</span>
<span id="cb1-8">  <span class="dv">1</span><span class="op">:</span><span class="dv">5</span>, <span class="cf">function</span>(i) <span class="kw">shade3d</span>(rglmeshes[[i]], <span class="dt">color =</span> colors[i])</span>
<span id="cb1-9">))</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tetrahedraCompound.gif"
        />
      </p>
      <p>
        I wondered for a long time what is the intersection of these five
        tetrahedra. But I didn’t have any tool to compute it. Now I have. Let’s
        see.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># compute the intersection ####</span></span>
<span id="cb2-2">inter &lt;-<span class="st"> </span><span class="kw">MeshesIntersection</span>(</span>
<span id="cb2-3">  tetrahedraCompound[[<span class="st">"meshes"</span>]], <span class="dt">numbersType =</span> <span class="st">"lazyExact"</span>, <span class="dt">clean =</span> <span class="ot">TRUE</span></span>
<span id="cb2-4">)</span>
<span id="cb2-5"><span class="co"># plot ####</span></span>
<span id="cb2-6"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb2-7"><span class="kw">bg3d</span>(<span class="st">"#363940"</span>)</span>
<span id="cb2-8"><span class="co"># first the five tetrahedra with transparency ####</span></span>
<span id="cb2-9"><span class="kw">invisible</span>(<span class="kw">lapply</span>(</span>
<span id="cb2-10">  rglmeshes, shade3d, <span class="dt">color =</span> <span class="st">"yellow"</span>, <span class="dt">alpha =</span> <span class="fl">0.1</span></span>
<span id="cb2-11">))</span>
<span id="cb2-12"><span class="co"># now the intersection ####</span></span>
<span id="cb2-13">rglinter &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb2-14">  <span class="st">"vertices"</span>    =<span class="st"> </span><span class="kw">t</span>(inter[[<span class="st">"vertices"</span>]]),</span>
<span id="cb2-15">  <span class="st">"indices"</span>     =<span class="st"> </span><span class="kw">t</span>(inter[[<span class="st">"faces"</span>]]),</span>
<span id="cb2-16">  <span class="st">"homogeneous"</span> =<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb2-17">)</span>
<span id="cb2-18"><span class="kw">shade3d</span>(rglinter, <span class="dt">color =</span> <span class="st">"gainsboro"</span>)</span>
<span id="cb2-19"><span class="co"># and finally the edges ####</span></span>
<span id="cb2-20"><span class="kw">plotEdges</span>(</span>
<span id="cb2-21">  inter[[<span class="st">"vertices"</span>]], inter[[<span class="st">"exteriorEdges"</span>]],</span>
<span id="cb2-22">  <span class="dt">only =</span> inter[[<span class="st">"exteriorVertices"</span>]], <span class="dt">color =</span> <span class="st">"darkmagenta"</span></span>
<span id="cb2-23">)</span></code></pre>
      </div>
      <p>Here is the result:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tetrahedraCompoundIntersection.gif"
        />
      </p>
      <p>This is an icosahedron, I think.</p>
      <p>
        Unfortunately, R CMD CHECK still throws some warnings which prevent me
        to publish this package on CRAN. I hope this issue will be solved.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 14 May 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/BooleanOpsOnMeshes.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Copy 'plotly' image to the clipboard</title>
      <link>https://laustep.github.io/stlahblog/posts/plotly_copyToClipboard.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        The R code below shows how to get a <em>“Copy to clipboard”</em> button
        in the <code>plotly</code> toolbar.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(plotly)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw">set.seed</span>(666L)</span>
<span id="cb1-4">asd &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb1-5">  <span class="dt">week =</span> <span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">8</span>), </span>
<span id="cb1-6">  <span class="dt">a    =</span> <span class="kw">rpois</span>(8L, <span class="dv">30</span>), </span>
<span id="cb1-7">  <span class="dt">b    =</span> <span class="kw">rpois</span>(8L, <span class="dv">25</span>)</span>
<span id="cb1-8">)</span>
<span id="cb1-9"></span>
<span id="cb1-10">js &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb1-11">  <span class="st">'function(gd) {'</span>,</span>
<span id="cb1-12">  <span class="st">'  Plotly.Snapshot.toImage(gd, {format: "png"}).once('</span>,</span>
<span id="cb1-13">  <span class="st">'    "success",'</span>,</span>
<span id="cb1-14">  <span class="st">'    async function(url) {'</span>,</span>
<span id="cb1-15">  <span class="st">'      try {'</span>,</span>
<span id="cb1-16">  <span class="st">'        const data = await fetch(url);'</span>,</span>
<span id="cb1-17">  <span class="st">'        const blob = await data.blob();'</span>,</span>
<span id="cb1-18">  <span class="st">'        await navigator.clipboard.write(['</span>,</span>
<span id="cb1-19">  <span class="st">'          new ClipboardItem({'</span>,</span>
<span id="cb1-20">  <span class="st">'            [blob.type]: blob'</span>,</span>
<span id="cb1-21">  <span class="st">'          })'</span>,</span>
<span id="cb1-22">  <span class="st">'        ]);'</span>,</span>
<span id="cb1-23">  <span class="st">'        console.log("Image copied.");'</span>,</span>
<span id="cb1-24">  <span class="st">'        var $div = $("&lt;div&gt;Image copied to clipboard&lt;/div&gt;");'</span>,</span>
<span id="cb1-25">  <span class="st">'        $div.css({'</span>,</span>
<span id="cb1-26">  <span class="st">'          display: "none",'</span>,</span>
<span id="cb1-27">  <span class="st">'          position: "absolute",'</span>,</span>
<span id="cb1-28">  <span class="st">'          top: "5%",'</span>,</span>
<span id="cb1-29">  <span class="st">'          left: "50%",'</span>,</span>
<span id="cb1-30">  <span class="st">'          transform: "translate(-50%, 0)",'</span>,</span>
<span id="cb1-31">  <span class="st">'          "font-size": "30px",'</span>,</span>
<span id="cb1-32">  <span class="st">'          "font-family": "Tahoma, sans-serif",'</span>,</span>
<span id="cb1-33">  <span class="st">'          "font-style": "italic",'</span>,</span>
<span id="cb1-34">  <span class="st">'          "background-color": "seashell",'</span>,</span>
<span id="cb1-35">  <span class="st">'          padding: "10px",'</span>,</span>
<span id="cb1-36">  <span class="st">'          border: "2px solid black",'</span>,</span>
<span id="cb1-37">  <span class="st">'          "border-radius": "5px"'</span>,</span>
<span id="cb1-38">  <span class="st">'        });'</span>,</span>
<span id="cb1-39">  <span class="st">'        $div.appendTo("body");'</span>,</span>
<span id="cb1-40">  <span class="st">'        $div.fadeIn(3000, function() {'</span>,</span>
<span id="cb1-41">  <span class="st">'          $div.fadeOut(3000);'</span>,</span>
<span id="cb1-42">  <span class="st">'        });'</span>,</span>
<span id="cb1-43">  <span class="st">'      } catch(err) {'</span>,</span>
<span id="cb1-44">  <span class="st">'        console.error(err.name, err.message);'</span>,</span>
<span id="cb1-45">  <span class="st">'      }'</span>,</span>
<span id="cb1-46">  <span class="st">'    }'</span>,</span>
<span id="cb1-47">  <span class="st">'  );'</span>,</span>
<span id="cb1-48">  <span class="st">'}'</span></span>
<span id="cb1-49">)</span>
<span id="cb1-50"></span>
<span id="cb1-51">SVGicon_path &lt;-<span class="st"> </span><span class="kw">paste0</span>(</span>
<span id="cb1-52">  <span class="st">"M97.67,20.81L97.67,20.81l0.01,0.02c3.7,0.01,7.04,1.51,9.46,3.93c2.4,2."</span>,</span>
<span id="cb1-53">  <span class="st">"41,3.9,5.74,3.9,9.42h0.02v0.02v75.28 v0.01h-0.02c-0.01,3.68-1.51,7.03-"</span>,</span>
<span id="cb1-54">  <span class="st">"3.93,9.46c-2.41,2.4-5.74,3.9-9.42,3.9v0.02h-0.02H38.48h-0.01v-0.02 c-3"</span>,</span>
<span id="cb1-55">  <span class="st">".69-0.01-7.04-1.5-9.46-3.93c-2.4-2.41-3.9-5.74-3.91-9.42H25.1c0-25.96,"</span>,</span>
<span id="cb1-56">  <span class="st">"0-49.34,0-75.3v-0.01h0.02 c0.01-3.69,1.52-7.04,3.94-9.46c2.41-2.4,5.73"</span>,</span>
<span id="cb1-57">  <span class="st">"-3.9,9.42-3.91v-0.02h0.02C58.22,20.81,77.95,20.81,97.67,20.81L97.67,20"</span>,</span>
<span id="cb1-58">  <span class="st">".81z M0.02,75.38L0,13.39v-0.01h0.02c0.01-3.69,1.52-7.04,3.93-9.46c2.41"</span>,</span>
<span id="cb1-59">  <span class="st">"-2.4,5.74-3.9,9.42-3.91V0h0.02h59.19 c7.69,0,8.9,9.96,0.01,10.16H13.4h"</span>,</span>
<span id="cb1-60">  <span class="st">"-0.02v-0.02c-0.88,0-1.68,0.37-2.27,0.97c-0.59,0.58-0.96,1.4-0.96,2.27h"</span>,</span>
<span id="cb1-61">  <span class="st">"0.02v0.01v3.17 c0,19.61,0,39.21,0,58.81C10.17,83.63,0.02,84.09,0.02,75"</span>,</span>
<span id="cb1-62">  <span class="st">".38L0.02,75.38z M100.91,109.49V34.2v-0.02h0.02 c0-0.87-0.37-1.68-0.97-"</span>,</span>
<span id="cb1-63">  <span class="st">"2.27c-0.59-0.58-1.4-0.96-2.28-0.96v0.02h-0.01H38.48h-0.02v-0.02c-0.88,"</span>,</span>
<span id="cb1-64">  <span class="st">"0-1.68,0.38-2.27,0.97 c-0.59,0.58-0.96,1.4-0.96,2.27h0.02v0.01v75.28v0"</span>,</span>
<span id="cb1-65">  <span class="st">".02h-0.02c0,0.88,0.38,1.68,0.97,2.27c0.59,0.59,1.4,0.96,2.27,0.96v-0.0"</span>,</span>
<span id="cb1-66">  <span class="st">"2h0.01 h59.19h0.02v0.02c0.87,0,1.68-0.38,2.27-0.97c0.59-0.58,0.96-1.4,"</span>,</span>
<span id="cb1-67">  <span class="st">"0.96-2.27L100.91,109.49L100.91,109.49L100.91,109.49 L100.91,109.49z"</span></span>
<span id="cb1-68">)</span>
<span id="cb1-69"></span>
<span id="cb1-70">CopyToClipboard &lt;-<span class="st"> </span><span class="kw">list</span>(</span>
<span id="cb1-71">  <span class="dt">name =</span> <span class="st">"Copy"</span>,</span>
<span id="cb1-72">  <span class="dt">icon =</span> <span class="kw">list</span>(</span>
<span id="cb1-73">    <span class="dt">path   =</span> SVGicon_path,</span>
<span id="cb1-74">    <span class="dt">width  =</span> <span class="dv">111</span>,</span>
<span id="cb1-75">    <span class="dt">height =</span> <span class="dv">123</span></span>
<span id="cb1-76">  ),</span>
<span id="cb1-77">  <span class="dt">click =</span> htmlwidgets<span class="op">::</span><span class="kw">JS</span>(js)</span>
<span id="cb1-78">)</span>
<span id="cb1-79"></span>
<span id="cb1-80"><span class="kw">plot_ly</span>(</span>
<span id="cb1-81">  asd, <span class="dt">x =</span> <span class="op">~</span>week, <span class="dt">y =</span> <span class="op">~</span>a, <span class="dt">name =</span> <span class="st">"a"</span>, <span class="dt">type =</span> <span class="st">"scatter"</span>, <span class="dt">mode =</span> <span class="st">"lines"</span></span>
<span id="cb1-82">) <span class="op">%&gt;%</span></span>
<span id="cb1-83"><span class="st">  </span><span class="kw">add_trace</span>(<span class="dt">y =</span> <span class="op">~</span>b, <span class="dt">name =</span> <span class="st">"b"</span>, <span class="dt">mode =</span> <span class="st">"lines"</span>) <span class="op">%&gt;%</span></span>
<span id="cb1-84"><span class="st">  </span><span class="kw">layout</span>(</span>
<span id="cb1-85">    <span class="dt">margin =</span> <span class="kw">list</span>(<span class="dt">l =</span> <span class="dv">100</span>, <span class="dt">r =</span> <span class="dv">100</span>, <span class="dt">b =</span> <span class="dv">100</span>, <span class="dt">t =</span> <span class="dv">100</span>), </span>
<span id="cb1-86">    <span class="dt">xaxis =</span> <span class="kw">list</span>(</span>
<span id="cb1-87">      <span class="dt">title     =</span> <span class="st">"Week"</span>, </span>
<span id="cb1-88">      <span class="dt">showgrid  =</span> <span class="ot">FALSE</span>, </span>
<span id="cb1-89">      <span class="dt">rangemode =</span> <span class="st">"normal"</span></span>
<span id="cb1-90">    ),</span>
<span id="cb1-91">    <span class="dt">yaxis =</span> <span class="kw">list</span>(</span>
<span id="cb1-92">      <span class="dt">title     =</span> <span class="st">""</span>, </span>
<span id="cb1-93">      <span class="dt">showgrid  =</span> <span class="ot">FALSE</span>, </span>
<span id="cb1-94">      <span class="dt">rangemode =</span> <span class="st">"tozero"</span></span>
<span id="cb1-95">    ),</span>
<span id="cb1-96">    <span class="dt">hovermode =</span> <span class="st">"x unified"</span></span>
<span id="cb1-97">  ) <span class="op">%&gt;%</span></span>
<span id="cb1-98"><span class="st">  </span><span class="kw">config</span>(<span class="dt">modeBarButtonsToAdd =</span> <span class="kw">list</span>(CopyToClipboard))</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/plotly_copyToClipboard.gif"
          style="width: 75%"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 16 Mar 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/plotly_copyToClipboard.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The E8 root polytope</title>
      <link>https://laustep.github.io/stlahblog/posts/E8rootPolytope.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <h2 id="the-e8-root-polytope-its-vertices-and-its-edges">
        The E8 root polytope, its vertices and its edges
      </h2>
      <p>
        The <em>E8 root polytope</em>, also known as the
        <a href="https://en.wikipedia.org/wiki/4_21_polytope"
          ><span class="math inline">\(4_{21}\)</span> polytope</a
        >
        is a 8-dimensional polytope. The Cartesian coordinates of its vertices
        are described in the above linked Wikipedia page. It has 240 vertices,
        that can be separated in two sets. The first set is obtained from
        <span class="math inline">\((\pm 2, \pm 2, 0, 0, 0, 0, 0, 0)\)</span> by
        taking an arbitrary combination of the signs and an arbitrary
        permutation of the coordinates. This gives
        <span class="math inline">\(2^2 \tbinom{8}{2} = 112\)</span> vertices,
        that one can obtain as follows in R:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">combs &lt;-<span class="st"> </span>arrangements<span class="op">::</span><span class="kw">combinations</span>(8L, 2L)</span>
<span id="cb1-2">vertices1 &lt;-<span class="st"> </span><span class="ot">NULL</span></span>
<span id="cb1-3"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(combs)){</span>
<span id="cb1-4">  comb &lt;-<span class="st"> </span>combs[i, ]</span>
<span id="cb1-5">  <span class="cf">for</span>(x <span class="cf">in</span> <span class="kw">c</span>(<span class="op">-</span><span class="dv">2</span>, <span class="dv">2</span>)){</span>
<span id="cb1-6">    <span class="cf">for</span>(y <span class="cf">in</span> <span class="kw">c</span>(<span class="op">-</span><span class="dv">2</span>, <span class="dv">2</span>)){</span>
<span id="cb1-7">      zeros &lt;-<span class="st"> </span><span class="kw">rep</span>(<span class="dv">0</span>, 8L)</span>
<span id="cb1-8">      zeros[comb[1L]] &lt;-<span class="st"> </span>x</span>
<span id="cb1-9">      zeros[comb[2L]] &lt;-<span class="st"> </span>y</span>
<span id="cb1-10">      vertices1 &lt;-<span class="st"> </span><span class="kw">rbind</span>(vertices1, zeros)</span>
<span id="cb1-11">    }</span>
<span id="cb1-12">  }</span>
<span id="cb1-13">}</span></code></pre>
      </div>
      <p>
        Indeed we get <span class="math inline">\(112\)</span> vertices, in a
        matrix with stupid row names:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">str</span>(vertices1)</span>
<span id="cb2-2"><span class="co">##  num [1:112, 1:8] -2 -2 2 2 -2 -2 2 2 -2 -2 ...</span></span>
<span id="cb2-3"><span class="co">##  - attr(*, "dimnames")=List of 2</span></span>
<span id="cb2-4"><span class="co">##   ..$ : chr [1:112] "zeros" "zeros" "zeros" "zeros" ...</span></span>
<span id="cb2-5"><span class="co">##   ..$ : NULL</span></span>
<span id="cb2-6"><span class="kw">head</span>(vertices1)</span>
<span id="cb2-7"><span class="co">##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]</span></span>
<span id="cb2-8"><span class="co">## zeros   -2   -2    0    0    0    0    0    0</span></span>
<span id="cb2-9"><span class="co">## zeros   -2    2    0    0    0    0    0    0</span></span>
<span id="cb2-10"><span class="co">## zeros    2   -2    0    0    0    0    0    0</span></span>
<span id="cb2-11"><span class="co">## zeros    2    2    0    0    0    0    0    0</span></span>
<span id="cb2-12"><span class="co">## zeros   -2    0   -2    0    0    0    0    0</span></span>
<span id="cb2-13"><span class="co">## zeros   -2    0    2    0    0    0    0    0</span></span></code></pre>
      </div>
      <p>
        The second set of vertices is obtained from
        <span class="math inline">\((\pm 1, \ldots, \pm 1)\)</span> by taking an
        even number of minus signs. As noted in the Wikipedia article, this
        amounts to say that the sum of the coordinates is a multiple of
        <span class="math inline">\(4\)</span>.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">vertices2 &lt;-<span class="st"> </span><span class="ot">NULL</span></span>
<span id="cb3-2">grd &lt;-<span class="st"> </span><span class="kw">as.matrix</span>(<span class="kw">expand.grid</span>(<span class="kw">rep</span>(<span class="kw">list</span>(<span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>)), 8L)))</span>
<span id="cb3-3"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(grd)){</span>
<span id="cb3-4">  v &lt;-<span class="st"> </span>grd[i, ]</span>
<span id="cb3-5">  <span class="cf">if</span>(<span class="kw">sum</span>(v) <span class="op">%%</span><span class="st"> </span><span class="dv">4</span> <span class="op">==</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb3-6">    vertices2 &lt;-<span class="st"> </span><span class="kw">rbind</span>(vertices2, v)</span>
<span id="cb3-7">  }</span>
<span id="cb3-8">}</span></code></pre>
      </div>
      <p>
        This gives <span class="math inline">\(128\)</span> vertices, again in a
        matrix with stupid row names:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">str</span>(vertices2)</span>
<span id="cb4-2"><span class="co">##  num [1:128, 1:8] -1 1 1 -1 1 -1 -1 1 1 -1 ...</span></span>
<span id="cb4-3"><span class="co">##  - attr(*, "dimnames")=List of 2</span></span>
<span id="cb4-4"><span class="co">##   ..$ : chr [1:128] "v" "v" "v" "v" ...</span></span>
<span id="cb4-5"><span class="co">##   ..$ : chr [1:8] "Var1" "Var2" "Var3" "Var4" ...</span></span>
<span id="cb4-6"><span class="kw">head</span>(vertices2)</span>
<span id="cb4-7"><span class="co">##   Var1 Var2 Var3 Var4 Var5 Var6 Var7 Var8</span></span>
<span id="cb4-8"><span class="co">## v   -1   -1   -1   -1   -1   -1   -1   -1</span></span>
<span id="cb4-9"><span class="co">## v    1    1   -1   -1   -1   -1   -1   -1</span></span>
<span id="cb4-10"><span class="co">## v    1   -1    1   -1   -1   -1   -1   -1</span></span>
<span id="cb4-11"><span class="co">## v   -1    1    1   -1   -1   -1   -1   -1</span></span>
<span id="cb4-12"><span class="co">## v    1   -1   -1    1   -1   -1   -1   -1</span></span>
<span id="cb4-13"><span class="co">## v   -1    1   -1    1   -1   -1   -1   -1</span></span></code></pre>
      </div>
      <p>
        So here is our matrix of
        <span class="math inline">\(240\)</span> vertices:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">vertices &lt;-<span class="st"> </span><span class="kw">rbind</span>(vertices1, vertices2)</span></code></pre>
      </div>
      <p>
        Well. Now, how to get the <em>edges</em> of the polytope? An edge is a
        pair of connected (adjacent) vertices, and it is better to store them as
        pairs of vertex indices (the row indices of our
        <code>vertices</code> matrix).
      </p>
      <p>
        My first attempt was to resort to my package <strong>cxhull</strong>.
        Indeed, the E8 root polytope is convex, therefore its convex hull is
        itself, and the <code>cxhull</code> function of the
        <strong>cxhull</strong> package provides the edges of the convex hull.
        Therefore, I ran:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">library</span>(cxhull)</span>
<span id="cb6-2">hull &lt;-<span class="st"> </span><span class="kw">cxhull</span>(vertices, <span class="dt">triangulate =</span> <span class="ot">FALSE</span>)</span></code></pre>
      </div>
      <p>
        What a disaster! <strong><em>Do not run this code!</em></strong> It
        totally crashed my laptop. Perhaps that can work with more RAM, I don’t
        know (I have only 8 Gb). I searched and I searched on the web, with no
        luck, I didn’t find these edges. So I decided to search another
        computational geometry library, able to get these edges. I thought of
        the C library
        <a href="https://people.inf.ethz.ch/fukudak/cdd_home/">cddlib</a>. I’m
        not a star in C but this library is wrapped in the Julia library
        <a href="https://github.com/JuliaPolyhedra/CDDLib.jl">CDDLib.jl</a>. No
        luck: this wrapper is incomplete and the vertex adjacency was not
        available in this library. Then I opened an issue on the Github repo to
        request this feature, and I looked at the documentation of the Python
        wrapper of <strong>cddlib</strong>: the
        <strong>pycddlib</strong> library. Very nice: it provides the vertex
        adjacency feature. I didn’t have the courage to program the construction
        of the vertices in Python, so I used
        <a
          href="https://laustep.github.io/stlahblog/posts/Rmatrix2HaskellList.html"
          >my old blog post</a
        >, <em>“A R matrix to a Haskell list”</em>, since it is also usable for
        Python instead of Haskell. But now let’s show how to construct the
        vertices in Python:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb7-1"><span class="im">from</span> itertools <span class="im">import</span> product, combinations</span>
<span id="cb7-2"><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb7-3"></span>
<span id="cb7-4">vertices <span class="op">=</span> []</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co"># our `vertices1` in R:</span></span>
<span id="cb7-7"><span class="cf">for</span> i, j <span class="kw">in</span> combinations(<span class="bu">range</span>(<span class="dv">8</span>), <span class="dv">2</span>):</span>
<span id="cb7-8">    <span class="cf">for</span> x, y <span class="kw">in</span> product([<span class="op">-</span><span class="dv">2</span>, <span class="dv">2</span>], repeat <span class="op">=</span> <span class="dv">2</span>):</span>
<span id="cb7-9">        v <span class="op">=</span> np.zeros(<span class="dv">8</span>)</span>
<span id="cb7-10">        v[i] <span class="op">=</span> x</span>
<span id="cb7-11">        v[j] <span class="op">=</span> y</span>
<span id="cb7-12">        vertices.append(v)</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co"># our `vertices2` in R:</span></span>
<span id="cb7-15"><span class="cf">for</span> v <span class="kw">in</span> product([<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>], repeat <span class="op">=</span> <span class="dv">8</span>):</span>
<span id="cb7-16">    <span class="cf">if</span> <span class="bu">sum</span>(v) <span class="op">%</span> <span class="dv">4</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb7-17">        vertices.append(v)</span></code></pre>
      </div>
      <p>
        Actually I’m not the author of this code (I will come back to this point
        later). I have a long experience with R and a short experience with
        Python, so for me the construction of the vertices is easier in R. But I
        have to be honest: the Python code is more elegant.
      </p>
      <p>
        Now, the edges. In fact <strong>pycddlib</strong> is simply called
        <strong>cdd</strong> in Python:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb8-1"><span class="im">import</span> cdd <span class="im">as</span> pcdd</span></code></pre>
      </div>
      <p>
        We want to do the so-called V-representation of the polytope
        (representation by the vertices), and then (I refer you to the
        documentation for this point), we have to prepend a
        <span class="math inline">\(1\)</span> to each vertex coordinates:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb9-1">vertices <span class="op">=</span> np.hstack((np.ones((<span class="dv">240</span>, <span class="dv">1</span>)), vertices))</span></code></pre>
      </div>
      <p>
        Now we’re ready for using <strong>pycddlib</strong>. Here is how I
        proceeded. I used the <code>get_input_adjacency</code> method to get the
        list of adjacent vertices for each vertex and from this list I
        constructed a two-columns matrix <code>Edges</code> to store the edges
        as pairs of vertex indices:
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb10-1"><span class="co"># make the polytope</span></span>
<span id="cb10-2">mat <span class="op">=</span> pcdd.Matrix(vertices, linear <span class="op">=</span> <span class="va">False</span>, number_type <span class="op">=</span> <span class="st">"fraction"</span>) </span>
<span id="cb10-3">mat.rep_type <span class="op">=</span> pcdd.RepType.GENERATOR</span>
<span id="cb10-4">poly <span class="op">=</span> pcdd.Polyhedron(mat)</span>
<span id="cb10-5"><span class="co"># get the list of adjacencies</span></span>
<span id="cb10-6">adjacencies <span class="op">=</span> [<span class="bu">list</span>(x) <span class="cf">for</span> x <span class="kw">in</span> poly.get_input_adjacency()]</span>
<span id="cb10-7"><span class="co"># construct the matrix of edges</span></span>
<span id="cb10-8">edges <span class="op">=</span> [<span class="va">None</span>]<span class="op">*</span><span class="dv">240</span></span>
<span id="cb10-9"><span class="cf">for</span> i, indices <span class="kw">in</span> <span class="bu">enumerate</span>(adjacencies):</span>
<span id="cb10-10">    indices <span class="op">=</span> <span class="bu">list</span>(<span class="bu">filter</span>(<span class="kw">lambda</span> x: x<span class="op">&gt;</span>i, indices))</span>
<span id="cb10-11">    l <span class="op">=</span> <span class="bu">len</span>(indices)</span>
<span id="cb10-12">    col1 <span class="op">=</span> np.full((l, <span class="dv">1</span>), i)</span>
<span id="cb10-13">    indices <span class="op">=</span> np.reshape(indices, (l, <span class="dv">1</span>))</span>
<span id="cb10-14">    edges[i] <span class="op">=</span> np.hstack((col1, indices))</span>
<span id="cb10-15">Edges <span class="op">=</span> np.vstack(<span class="bu">tuple</span>(edges))</span>
<span id="cb10-16">np.savetxt(<span class="st">"E8_edges.csv"</span>, Edges, fmt <span class="op">=</span> <span class="st">"</span><span class="sc">%d</span><span class="st">"</span>, delimiter <span class="op">=</span> <span class="st">","</span>)</span></code></pre>
      </div>
      <p>
        I saved the edges matrix in a <strong>csv</strong> file to import it in
        R (don’t forget to add <span class="math inline">\(1\)</span> to the
        indices if you do that).
      </p>
      <p>
        In the meantime, the author of the Julia library
        <strong>CDDLib.jl</strong> kindly replied to my feature request, and now
        the vertex adjacencies are available in this library.
      </p>
      <h2 id="projection-on-the-coxeter-plane">
        Projection on the Coxeter plane
      </h2>
      <p>
        That’s fine to have the vertices and the edges of a 8-dimensional
        polytope but it remains to project it in 2D or 3D if we want to
        visualize something. The most known figure of a projection of the E8
        root polytope is the one of its projection to the so-called Coxeter
        plane. No luck, I didn’t find on the web how to do this projection. I
        found another one,
        <a
          href="https://theoryofeverything.org/theToE/2016/03/16/e8-in-e6-petrie-projection/"
          >here</a
        >. The author of this article provides an orthonormal basis of a plane
        in the 8D space, and when one takes the two coordinates of the
        projections of the vertices on this plane, one gets this figure:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/E8_Petrie.png"
        />
      </p>
      <p>Not bad. Of course I did a GIF:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/E8_Petrie.gif"
        />
      </p>
      <p>
        Finally, I found the orthonormal basis of the Coxeter plane in a
        <a
          href="https://github.com/SuperJason/python/blob/96989d1681085a87a0d7f488d926a1677cd7041f/famous_math_graphics/e8.py"
          >Python script on Github</a
        >.
      </p>
      <p>
        Do you recognize the beginning of the code? The author of this script is
        also the author of the Python code I provided earlier. I was astonished:
        he doesn’t use any computational geometry library to get the edges! I
        don’t know why, but two vertices are connected by an edge if and only if
        the squared distance between these vertices is
        <span class="math inline">\(8\)</span>. So you get the edges like this
        in R:
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1">edges &lt;-<span class="st"> </span><span class="ot">NULL</span></span>
<span id="cb11-2"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(<span class="kw">nrow</span>(vertices)<span class="op">-</span>1L)){</span>
<span id="cb11-3">  v1 &lt;-<span class="st"> </span>vertices[i, ]</span>
<span id="cb11-4">  <span class="cf">for</span>(j <span class="cf">in</span> (i<span class="op">+</span>1L)<span class="op">:</span><span class="kw">nrow</span>(vertices)){</span>
<span id="cb11-5">    v2 &lt;-<span class="st"> </span>vertices[j, ]</span>
<span id="cb11-6">    <span class="cf">if</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v1<span class="op">-</span>v2)) <span class="op">==</span><span class="st"> </span><span class="dv">8</span>){</span>
<span id="cb11-7">      edges &lt;-<span class="st"> </span><span class="kw">rbind</span>(edges, <span class="kw">c</span>(i, j))</span>
<span id="cb11-8">    }</span>
<span id="cb11-9">  }</span>
<span id="cb11-10">}</span></code></pre>
      </div>
      <p>
        Also, I don’t understand the derivation of the basis of the Coxeter
        plane that is provided by this Python script. But it is easy to
        translate it in R. Here is the code, where I kept the comments of the
        Python script:
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb12-1"><span class="co"># A set of simple roots, listed by the rows of 'delta'</span></span>
<span id="cb12-2">delta &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb12-3">  <span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">-1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb12-4">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">-1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb12-5">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">-1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb12-6">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">-1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb12-7">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">-1</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb12-8">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">0</span>),</span>
<span id="cb12-9">  <span class="kw">c</span>(<span class="op">-</span>.<span class="dv">5</span>, <span class="fl">-.5</span>, <span class="fl">-.5</span>, <span class="fl">-.5</span>, <span class="fl">-.5</span>, <span class="fl">-.5</span>, <span class="fl">-.5</span>, <span class="fl">-.5</span>),</span>
<span id="cb12-10">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">-1</span>, <span class="dv">0</span>)</span>
<span id="cb12-11">)</span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="co"># Dynkin diagram of E8:</span></span>
<span id="cb12-14"><span class="co"># 1---2---3---4---5---6---7</span></span>
<span id="cb12-15"><span class="co">#                 |</span></span>
<span id="cb12-16"><span class="co">#                 8</span></span>
<span id="cb12-17"><span class="co"># where vertex i is the i-th simple root.</span></span>
<span id="cb12-18"></span>
<span id="cb12-19"><span class="co"># The Cartan matrix:</span></span>
<span id="cb12-20">Cartan &lt;-<span class="st"> </span><span class="kw">tcrossprod</span>(delta)</span>
<span id="cb12-21"></span>
<span id="cb12-22"><span class="co"># Now we split the simple roots into two disjoint sets I and J</span></span>
<span id="cb12-23"><span class="co"># such that the simple roots in each set are pairwise orthogonal.</span></span>
<span id="cb12-24"><span class="co"># It's obvious to see how to find such a partition given the</span></span>
<span id="cb12-25"><span class="co"># Dynkin graph above: I = [1, 3, 5, 7] and J = [2, 4, 6, 8],</span></span>
<span id="cb12-26"><span class="co"># since roots are not connected by an edge if and only if they are orthogonal.</span></span>
<span id="cb12-27"><span class="co"># Then a basis of the Coxeter plane is given by</span></span>
<span id="cb12-28"><span class="co"># u1 = sum (c[i] * delta[i]) for i in I,</span></span>
<span id="cb12-29"><span class="co"># u2 = sum (c[j] * delta[j]) for j in J,</span></span>
<span id="cb12-30"><span class="co"># where c is an eigenvector for the minimal</span></span>
<span id="cb12-31"><span class="co"># eigenvalue of the Cartan matrix.</span></span>
<span id="cb12-32">eig &lt;-<span class="st"> </span><span class="kw">eigen</span>(Cartan)</span>
<span id="cb12-33"></span>
<span id="cb12-34"><span class="co"># The eigenvalues returned by eigen() are in descending order</span></span>
<span id="cb12-35"><span class="co"># and the eigenvectors are listed by columns.</span></span>
<span id="cb12-36">ev &lt;-<span class="st"> </span>eig<span class="op">$</span>vectors[, 8L]</span>
<span id="cb12-37">u1 &lt;-<span class="st"> </span><span class="kw">rowSums</span>(<span class="kw">vapply</span>(<span class="kw">c</span>(1L, 3L, 5L, 7L), <span class="cf">function</span>(i){</span>
<span id="cb12-38">  ev[i] <span class="op">*</span><span class="st"> </span>delta[i, ]</span>
<span id="cb12-39">}, <span class="kw">numeric</span>(8L)))</span>
<span id="cb12-40">u2 &lt;-<span class="st"> </span><span class="kw">rowSums</span>(<span class="kw">vapply</span>(<span class="kw">c</span>(2L, 4L, 6L, 8L), <span class="cf">function</span>(i){</span>
<span id="cb12-41">  ev[i] <span class="op">*</span><span class="st"> </span>delta[i, ]</span>
<span id="cb12-42">}, <span class="kw">numeric</span>(8L)))</span>
<span id="cb12-43"></span>
<span id="cb12-44"><span class="co"># Gram-Schmidt u1, u2 </span></span>
<span id="cb12-45">u1 &lt;-<span class="st"> </span>u1 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(u1)))</span>
<span id="cb12-46">u2 &lt;-<span class="st"> </span>u2 <span class="op">-</span><span class="st"> </span><span class="kw">c</span>(<span class="kw">crossprod</span>(u1, u2)) <span class="op">*</span><span class="st"> </span>u1</span>
<span id="cb12-47">u2 &lt;-<span class="st"> </span>u2 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(u2)))</span></code></pre>
      </div>
      <p>I understand nothing, except the Gram-Schmidt step.</p>
      <p>
        But this works. Let’s project the vertices to the Coxeter plane,
        i.e. the plane with the orthonormal basis
        <span class="math inline">\((u_1, u_2)\)</span>:
      </p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb13-1"><span class="co"># projections on the Coxeter plane</span></span>
<span id="cb13-2">proj &lt;-<span class="st"> </span><span class="cf">function</span>(v){</span>
<span id="cb13-3">  <span class="kw">c</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v, u1)), <span class="kw">c</span>(<span class="kw">crossprod</span>(v, u2)))</span>
<span id="cb13-4">}</span>
<span id="cb13-5">points &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(vertices<span class="op">/</span><span class="dv">2</span>, 1L, proj))</span></code></pre>
      </div>
      <p>
        Now you can represent these 2D points and connect them with the edges.
        But if you do that with an ordinary base R plot, you will not get a
        pretty figure, because there are too many edges. So I do a SVG plot:
      </p>
      <div class="sourceCode" id="cb14">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb14-1"><span class="co"># save plot as SVG</span></span>
<span id="cb14-2"><span class="kw">svg</span>(<span class="dt">filename =</span> <span class="st">"E8_Coxeter.svg"</span>, <span class="dt">onefile =</span> <span class="ot">TRUE</span>)</span>
<span id="cb14-3">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>))</span>
<span id="cb14-4"><span class="kw">plot</span>(</span>
<span id="cb14-5">  points[<span class="op">!</span><span class="kw">duplicated</span>(points), ], <span class="dt">pch =</span> <span class="dv">19</span>, <span class="dt">cex =</span> <span class="fl">0.3</span>, <span class="dt">asp =</span> <span class="dv">1</span>, </span>
<span id="cb14-6">  <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span></span>
<span id="cb14-7">)</span>
<span id="cb14-8"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(edges)){</span>
<span id="cb14-9">  <span class="kw">lines</span>(points[edges[i, ], ], <span class="dt">lwd =</span> <span class="fl">0.1</span>)</span>
<span id="cb14-10">}</span>
<span id="cb14-11"><span class="kw">par</span>(opar)</span>
<span id="cb14-12"><span class="kw">dev.off</span>()</span></code></pre>
      </div>
      <p>
        And then I convert it to a PNG image with the help of the
        <strong>rsvg</strong> package:
      </p>
      <div class="sourceCode" id="cb15">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb15-1">rsvg<span class="op">::</span><span class="kw">rsvg_png</span>(<span class="st">"E8_Coxeter.svg"</span>, <span class="dt">file =</span> <span class="st">"E8_Coxeter.png"</span>)</span></code></pre>
      </div>
      <p>This gives this image:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/E8_Coxeter.png"
        />
      </p>
      <p>
        Rather pretty. But this lacks of colors. And of motion. Well, you see
        what I mean: I did a GIF.
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/E8_Coxeter.gif"
        />
      </p>
      <p>
        If you want to know how I did this GIF, visit
        <a href="https://gist.github.com/stla/19529d44a20bab4420bdd1a213ebcdbc"
          >my gist</a
        >.
      </p>
      <p>
        In this gist, you will also find another basis for Coxeter plane. This
        one does not resort to eigenvectors. I found it in
        <a href="https://vixra.org/pdf/1411.0130v1.pdf">this paper</a>.
      </p>
      <p>
        Consider the matrix
        <span class="math display"
          >\[ H4_{\text{fold}} = \begin{pmatrix} \varphi^2 &amp; 0 &amp; 0 &amp;
          0 &amp; 1/\varphi &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 1 &amp; \varphi
          &amp; 0 &amp; 0 &amp; -1 &amp; \varphi &amp; 0 \\ 0 &amp; \varphi
          &amp; 0 &amp; 1 &amp; 0 &amp; \varphi &amp; 0 &amp; -1 \\ 0 &amp; 0
          &amp; 1 &amp; \varphi &amp; 0 &amp; 0 &amp; -1 &amp; \varphi \\
          1/\varphi &amp; 0 &amp; 0 &amp; 0 &amp; \varphi^2 &amp; 0 &amp; 0
          &amp; 0 \\ 0 &amp; -1 &amp; \varphi &amp; 0 &amp; 0 &amp; 1 &amp;
          \varphi &amp; 0 \\ 0 &amp; \varphi &amp; 0 &amp; -1 &amp; 0 &amp;
          \varphi &amp; 0 &amp; 1 \\ 0 &amp; 0 &amp; -1 &amp; \varphi &amp; 0
          &amp; 0 &amp; 1 &amp; \varphi \end{pmatrix} \]</span
        >
        where <span class="math inline">\(\varphi\)</span> is the golden number,
        and consider the two vectors
        <span class="math display"
          >\[ x = \bigl(0, 2 \varphi \sin(\pi/30), 0, 1, 0, 0, 0, 0\bigr)
          \]</span
        >
        and
        <span class="math display"
          >\[ y = \bigl(2 \varphi \sin(\pi/15), 0, 2 \sin(2\pi/15), 0, 0, 0, 0,
          0\bigr) \]</span
        >
      </p>
      <p>
        Then the other basis of the Coxeter plane is given by the normalized
        columns of
        <span class="math inline"
          >\(H4_{\text{fold}}^{-1}\begin{pmatrix}x &amp; y \end{pmatrix}\)</span
        >.
      </p>
      <div class="sourceCode" id="cb16">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb16-1">phi &lt;-<span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">5</span>)) <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb16-2">H4fold &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb16-3">  <span class="kw">c</span>(phi<span class="op">^</span><span class="dv">2</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span><span class="op">/</span>phi, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb16-4">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>, phi, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">-1</span>, phi, <span class="dv">0</span>),</span>
<span id="cb16-5">  <span class="kw">c</span>(<span class="dv">0</span>, phi, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">0</span>, phi, <span class="dv">0</span>, <span class="dv">-1</span>),</span>
<span id="cb16-6">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, phi, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">-1</span>, phi),</span>
<span id="cb16-7">  <span class="kw">c</span>(<span class="dv">1</span><span class="op">/</span>phi, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, phi<span class="op">^</span><span class="dv">2</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>),</span>
<span id="cb16-8">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">-1</span>, phi, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, phi, <span class="dv">0</span>),</span>
<span id="cb16-9">  <span class="kw">c</span>(<span class="dv">0</span>, phi, <span class="dv">0</span>, <span class="dv">-1</span>, <span class="dv">0</span>, phi, <span class="dv">0</span>, <span class="dv">1</span>),</span>
<span id="cb16-10">  <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">-1</span>, phi, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>, phi)</span>
<span id="cb16-11">)</span>
<span id="cb16-12">x &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>phi<span class="op">*</span><span class="kw">sin</span>(pi<span class="op">/</span><span class="dv">30</span>), <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>)</span>
<span id="cb16-13">y &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">2</span><span class="op">*</span>phi<span class="op">*</span><span class="kw">sin</span>(pi<span class="op">/</span><span class="dv">15</span>), <span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">15</span>), <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>)</span>
<span id="cb16-14">XY &lt;-<span class="st"> </span><span class="kw">solve</span>(H4fold) <span class="op">%*%</span><span class="st"> </span><span class="kw">cbind</span>(x, y)</span>
<span id="cb16-15">X &lt;-<span class="st"> </span>XY[, 1L]; Y &lt;-<span class="st"> </span>XY[, 2L]</span>
<span id="cb16-16">X &lt;-<span class="st"> </span>X <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(X)))</span>
<span id="cb16-17">Y &lt;-<span class="st"> </span>Y <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(Y)))</span>
<span id="cb16-18"><span class="co"># projections on the plane</span></span>
<span id="cb16-19">proj &lt;-<span class="st"> </span><span class="cf">function</span>(v){</span>
<span id="cb16-20">  <span class="kw">c</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v, X)), <span class="kw">c</span>(<span class="kw">crossprod</span>(v, Y)))</span>
<span id="cb16-21">}</span>
<span id="cb16-22">points &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(vertices<span class="op">/</span><span class="dv">2</span>, 1L, proj))</span></code></pre>
      </div>
      <p>
        Below I show how to do a plot with colors, by assigning to each edge a
        color depending on the lengths of the two vertices of this edge.
      </p>
      <div class="sourceCode" id="cb17">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb17-1"><span class="co"># make colors ####</span></span>
<span id="cb17-2">norms2 &lt;-<span class="st"> </span><span class="kw">unique</span>(<span class="kw">round</span>(<span class="kw">apply</span>(points, 1L, crossprod), 2L))</span>
<span id="cb17-3">grd &lt;-<span class="st"> </span><span class="kw">as.matrix</span>(<span class="kw">expand.grid</span>(norms2, norms2))</span>
<span id="cb17-4">grd &lt;-<span class="st"> </span>grd[grd[, 1L] <span class="op">&lt;=</span><span class="st"> </span>grd[, 2L], ]</span>
<span id="cb17-5">pairs &lt;-<span class="st"> </span><span class="kw">apply</span>(grd, 1L, paste0, <span class="dt">collapse =</span> <span class="st">"-"</span>)</span>
<span id="cb17-6">colors &lt;-<span class="st"> </span>viridisLite<span class="op">::</span><span class="kw">cividis</span>(<span class="kw">length</span>(pairs))</span>
<span id="cb17-7">colors &lt;-<span class="st"> </span>colorspace<span class="op">::</span><span class="kw">darken</span>(colors, <span class="dt">amount =</span> <span class="fl">0.25</span>)</span>
<span id="cb17-8"><span class="kw">names</span>(colors) &lt;-<span class="st"> </span>pairs</span>
<span id="cb17-9"><span class="co"># save plot as SVG with colors</span></span>
<span id="cb17-10"><span class="kw">svg</span>(<span class="dt">filename =</span> <span class="st">"E8_Coxeter_other_basis.svg"</span>, <span class="dt">onefile =</span> <span class="ot">TRUE</span>)</span>
<span id="cb17-11">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>))</span>
<span id="cb17-12"><span class="kw">plot</span>(</span>
<span id="cb17-13">  points[<span class="op">!</span><span class="kw">duplicated</span>(points), ], <span class="dt">pch =</span> <span class="dv">19</span>, <span class="dt">cex =</span> <span class="fl">0.3</span>, <span class="dt">asp =</span> <span class="dv">1</span>, </span>
<span id="cb17-14">  <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span></span>
<span id="cb17-15">)</span>
<span id="cb17-16"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(edges)){</span>
<span id="cb17-17">  twopoints &lt;-<span class="st"> </span>points[edges[i, ], ]</span>
<span id="cb17-18">  pair &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="kw">round</span>(</span>
<span id="cb17-19">    <span class="kw">sort</span>(<span class="kw">apply</span>(twopoints, 1L, crossprod)), 2L</span>
<span id="cb17-20">  ), <span class="dt">collapse =</span> <span class="st">"-"</span>)</span>
<span id="cb17-21">  <span class="kw">lines</span>(twopoints, <span class="dt">lwd =</span> <span class="fl">0.1</span>, <span class="dt">col =</span> colors[pair])</span>
<span id="cb17-22">}</span>
<span id="cb17-23"><span class="kw">par</span>(opar)</span>
<span id="cb17-24"><span class="kw">dev.off</span>()</span>
<span id="cb17-25"><span class="co"># convert to PNG</span></span>
<span id="cb17-26">rsvg<span class="op">::</span><span class="kw">rsvg_png</span>(</span>
<span id="cb17-27">  <span class="st">"E8_Coxeter_other_basis.svg"</span>, <span class="dt">file =</span> <span class="st">"E8_Coxeter_other_basis.png"</span></span>
<span id="cb17-28">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/E8_Coxeter_other_basis.png"
        />
      </p>
      <p>
        If this post pleased you, you might also be interested in
        <a href="https://gist.github.com/stla/2ed8d9f107ce3ae311ed365e83d66dbd"
          >this gist</a
        >, which deals with the projection to a Coxeter plane of the so-called
        *600-cell° polytope. I even provide a hyperbolic version:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/H4_600-cell_hyperbolic.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 14 Mar 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/E8rootPolytope.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The modified stereographic projection</title>
      <link>https://laustep.github.io/stlahblog/posts/ModifiedStereographicProjection.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Some of my 3D animations start with a 4D object (such as a polytope) and
        I project it to the three-dimensional space with a stereographic
        projection. For example, the
        <a
          href="https://laustep.github.io/stlahblog/posts/HyperbolicGircope.html"
          >hyperbolic gircope</a
        >. For this animation, I use the ordinary stereographic projection. But
        sometimes I don’t get a nice result with the ordinary stereographic
        projection, and then I use a “modified” stereographic projection,
        defined by
        <span class="math display"
          >\[ \text{Stereo}_\gamma(x) = \frac{\arccos(x_4/r)}{{\bigl(r^\gamma -
          {|x_4|}^\gamma\bigr)}^{\frac{1}{\gamma}}} \times (x_1, x_2, x_3),
          \]</span
        >
        where <span class="math inline">\(r\)</span> is the radius of the
        centered sphere in
        <span class="math inline">\(\mathbb{R}^4\)</span> that we consider (for
        example <span class="math inline">\(r = \Vert x \Vert\)</span> for a
        polytope whose all vertices have the same norm, otherwise one can take
        the higher norm).
      </p>
      <p>
        In this post, I will show the result of this modified stereographic
        projection on some examples, with various values of
        <span class="math inline">\(\gamma\)</span>.
      </p>
      <h2 id="truncated-tesseract">Truncated tesseract</h2>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(cxhull)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co"># Stereographic-like projection ####</span></span>
<span id="cb1-4">sproj &lt;-<span class="st"> </span><span class="cf">function</span>(v, r, gamma){</span>
<span id="cb1-5">  <span class="kw">acos</span>(v[4L]<span class="op">/</span>r) <span class="op">/</span><span class="st"> </span>(r<span class="op">^</span>gamma <span class="op">-</span><span class="st"> </span><span class="kw">abs</span>(v[4L])<span class="op">^</span>gamma)<span class="op">^</span>(<span class="dv">1</span><span class="op">/</span>gamma) <span class="op">*</span><span class="st"> </span>v[1L<span class="op">:</span>3L]</span>
<span id="cb1-6">}</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co"># vertices ####</span></span>
<span id="cb1-9">sqr2p1 &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span>) <span class="op">+</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb1-10">vertices &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-11">  <span class="kw">c</span>(      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-12">  <span class="kw">c</span>(      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-13">  <span class="kw">c</span>(      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-14">  <span class="kw">c</span>(      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-15">  <span class="kw">c</span>(      <span class="dv">-1</span>,  sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-16">  <span class="kw">c</span>(      <span class="dv">-1</span>,  sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-17">  <span class="kw">c</span>(      <span class="dv">-1</span>,  sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-18">  <span class="kw">c</span>(      <span class="dv">-1</span>,  sqr2p1,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-19">  <span class="kw">c</span>(       <span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-20">  <span class="kw">c</span>(       <span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-21">  <span class="kw">c</span>(       <span class="dv">1</span>, <span class="op">-</span>sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-22">  <span class="kw">c</span>(       <span class="dv">1</span>, <span class="op">-</span>sqr2p1,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-23">  <span class="kw">c</span>(       <span class="dv">1</span>,  sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-24">  <span class="kw">c</span>(       <span class="dv">1</span>,  sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-25">  <span class="kw">c</span>(       <span class="dv">1</span>,  sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-26">  <span class="kw">c</span>(       <span class="dv">1</span>,  sqr2p1,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-27">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-28">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-29">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-30">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-31">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-32">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-33">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,       <span class="dv">1</span>,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-34">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,       <span class="dv">1</span>,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-35">  <span class="kw">c</span>(  sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-36">  <span class="kw">c</span>(  sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-37">  <span class="kw">c</span>(  sqr2p1,      <span class="dv">-1</span>,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-38">  <span class="kw">c</span>(  sqr2p1,      <span class="dv">-1</span>,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-39">  <span class="kw">c</span>(  sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-40">  <span class="kw">c</span>(  sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1,  sqr2p1 ),</span>
<span id="cb1-41">  <span class="kw">c</span>(  sqr2p1,       <span class="dv">1</span>,  sqr2p1, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-42">  <span class="kw">c</span>(  sqr2p1,       <span class="dv">1</span>,  sqr2p1,  sqr2p1 ),</span>
<span id="cb1-43">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-44">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>,  sqr2p1 ),</span>
<span id="cb1-45">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-46">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span>,  sqr2p1 ),</span>
<span id="cb1-47">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-48">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1,      <span class="dv">-1</span>,  sqr2p1 ),</span>
<span id="cb1-49">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-50">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1,       <span class="dv">1</span>,  sqr2p1 ),</span>
<span id="cb1-51">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-52">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span>,  sqr2p1 ),</span>
<span id="cb1-53">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-54">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span>,  sqr2p1 ),</span>
<span id="cb1-55">  <span class="kw">c</span>(  sqr2p1,  sqr2p1,      <span class="dv">-1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-56">  <span class="kw">c</span>(  sqr2p1,  sqr2p1,      <span class="dv">-1</span>,  sqr2p1 ),</span>
<span id="cb1-57">  <span class="kw">c</span>(  sqr2p1,  sqr2p1,       <span class="dv">1</span>, <span class="op">-</span>sqr2p1 ),</span>
<span id="cb1-58">  <span class="kw">c</span>(  sqr2p1,  sqr2p1,       <span class="dv">1</span>,  sqr2p1 ),</span>
<span id="cb1-59">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-60">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-61">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-62">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-63">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-64">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-65">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1,  sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-66">  <span class="kw">c</span>( <span class="op">-</span>sqr2p1,  sqr2p1,  sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-67">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-68">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-69">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-70">  <span class="kw">c</span>(  sqr2p1, <span class="op">-</span>sqr2p1,  sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-71">  <span class="kw">c</span>(  sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-72">  <span class="kw">c</span>(  sqr2p1,  sqr2p1, <span class="op">-</span>sqr2p1,       <span class="dv">1</span> ),</span>
<span id="cb1-73">  <span class="kw">c</span>(  sqr2p1,  sqr2p1,  sqr2p1,      <span class="dv">-1</span> ),</span>
<span id="cb1-74">  <span class="kw">c</span>(  sqr2p1,  sqr2p1,  sqr2p1,       <span class="dv">1</span> )</span>
<span id="cb1-75">)</span>
<span id="cb1-76"></span>
<span id="cb1-77"><span class="co"># convex hull (= truncated tesseract, cause it is convex) ####</span></span>
<span id="cb1-78">hull &lt;-<span class="st"> </span><span class="kw">cxhull</span>(vertices)</span>
<span id="cb1-79">edges  &lt;-<span class="st"> </span>hull[[<span class="st">"edges"</span>]]</span>
<span id="cb1-80">ridges &lt;-<span class="st"> </span>hull[[<span class="st">"ridges"</span>]]</span>
<span id="cb1-81"></span>
<span id="cb1-82"><span class="co"># triangles (of the tetrahedra in the corners) ####</span></span>
<span id="cb1-83">ridgeSizes &lt;-<span class="st"> </span><span class="kw">vapply</span>(ridges, <span class="cf">function</span>(ridge){</span>
<span id="cb1-84">  <span class="kw">length</span>(ridge[[<span class="st">"vertices"</span>]])</span>
<span id="cb1-85">}, <span class="kw">integer</span>(1L))</span>
<span id="cb1-86">triangles &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">vapply</span>(</span>
<span id="cb1-87">  ridges[ridgeSizes <span class="op">==</span><span class="st"> </span>3L], </span>
<span id="cb1-88">  <span class="cf">function</span>(ridge) ridge[[<span class="st">"vertices"</span>]],</span>
<span id="cb1-89">  <span class="kw">integer</span>(3L)</span>
<span id="cb1-90">))</span>
<span id="cb1-91"></span>
<span id="cb1-92"><span class="co"># projected vertices ####</span></span>
<span id="cb1-93"><span class="co">#   we also normalize them so that the higher norm is 1</span></span>
<span id="cb1-94">r &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="dv">3</span><span class="op">*</span>sqr2p1<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb1-95">verts3D &lt;-<span class="st"> </span><span class="cf">function</span>(gamma){</span>
<span id="cb1-96">  verts &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(vertices, 1L, <span class="cf">function</span>(v) <span class="kw">sproj</span>(v, r, gamma)))</span>
<span id="cb1-97">  verts <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">max</span>(<span class="kw">apply</span>(verts, 1L, crossprod)))</span>
<span id="cb1-98">}</span></code></pre>
      </div>
      <p>
        Below is the code for the animation (<span class="math inline"
          >\(\gamma\)</span
        >
        varies from <span class="math inline">\(1.5\)</span> to
        <span class="math inline">\(2.5\)</span>). I use
        <a href="https://laustep.github.io/stlahblog/posts/gifskiBash.html"
          >my ‘gifski’ batch command</a
        >
        to make the GIF.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(rgl)</span>
<span id="cb2-2">gamma_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="fl">1.5</span>, <span class="fl">2.5</span>, <span class="dt">by =</span> <span class="fl">0.025</span>)</span>
<span id="cb2-3"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">100</span>, <span class="dv">100</span>, <span class="dv">612</span>, <span class="dv">612</span>))</span>
<span id="cb2-4"><span class="kw">bg3d</span>(<span class="st">"#363940"</span>)</span>
<span id="cb2-5"><span class="kw">view3d</span>(<span class="dv">15</span>, <span class="dv">25</span>, <span class="dt">zoom =</span> <span class="fl">0.9</span>)</span>
<span id="cb2-6"><span class="cf">for</span>(j <span class="cf">in</span> <span class="kw">seq_along</span>(gamma_)){</span>
<span id="cb2-7">  points &lt;-<span class="st"> </span><span class="kw">verts3D</span>(gamma_[j])</span>
<span id="cb2-8">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(edges)){</span>
<span id="cb2-9">    edge &lt;-<span class="st"> </span>edges[i, ]</span>
<span id="cb2-10">    <span class="kw">shade3d</span>(<span class="kw">cylinder3d</span>(</span>
<span id="cb2-11">      <span class="kw">rbind</span>(</span>
<span id="cb2-12">        points[edge[1L], ], </span>
<span id="cb2-13">        points[edge[2L], ]</span>
<span id="cb2-14">      ), </span>
<span id="cb2-15">      <span class="dt">radius =</span> <span class="fl">0.015</span>, <span class="dt">sides =</span> <span class="dv">90</span></span>
<span id="cb2-16">    ), <span class="dt">color =</span> <span class="st">"gold"</span>)</span>
<span id="cb2-17">  }</span>
<span id="cb2-18">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(triangles)){</span>
<span id="cb2-19">    triangle &lt;-<span class="st"> </span>triangles[i, ]</span>
<span id="cb2-20">    <span class="kw">triangles3d</span>(</span>
<span id="cb2-21">      <span class="kw">rbind</span>(</span>
<span id="cb2-22">        points[triangle[1L], ],</span>
<span id="cb2-23">        points[triangle[2L], ],</span>
<span id="cb2-24">        points[triangle[3L], ]</span>
<span id="cb2-25">      ),</span>
<span id="cb2-26">      <span class="dt">color =</span> <span class="st">"red"</span>, <span class="dt">alpha =</span> <span class="fl">0.4</span></span>
<span id="cb2-27">    )</span>
<span id="cb2-28">  }</span>
<span id="cb2-29">  <span class="kw">spheres3d</span>(points, <span class="dt">radius =</span> <span class="fl">0.025</span>, <span class="dt">color =</span> <span class="st">"orange"</span>)</span>
<span id="cb2-30">  <span class="kw">rgl.snapshot</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, j))</span>
<span id="cb2-31">  <span class="kw">clear3d</span>()</span>
<span id="cb2-32">}</span>
<span id="cb2-33"></span>
<span id="cb2-34">command &lt;-<span class="st"> </span></span>
<span id="cb2-35"><span class="st">  "gifski --frames=pic*.png --fps=9 -b -o ModifStereoTruncTesseract.gif"</span></span>
<span id="cb2-36"><span class="kw">system</span>(command)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ModifStereoTruncatedTesseract.gif"
        />
      </p>
      <p>
        The effect of <span class="math inline">\(\gamma\)</span> is
        interesting: the interior tetrahedra become bigger when it increases
        while the exterior tetrahedra become smaller.
      </p>
      <h2 id="hopf-torus">Hopf torus</h2>
      <p>
        Now, the
        <a href="https://laustep.github.io/stlahblog/posts/HopfTorus2.html"
          >Hopf torus</a
        >. For more efficiency, I modify the <code>parametric3d</code> function
        of the <strong>misc3d</strong> package.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(rgl)</span>
<span id="cb3-2"><span class="kw">library</span>(misc3d)</span>
<span id="cb3-3"></span>
<span id="cb3-4">Stereo &lt;-<span class="st"> </span><span class="cf">function</span>(q, gamma){</span>
<span id="cb3-5">  <span class="kw">acos</span>(q[, 4L]) <span class="op">/</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span><span class="kw">abs</span>(q[, 4L])<span class="op">^</span>gamma)<span class="op">^</span>(<span class="dv">1</span><span class="op">/</span>gamma) <span class="op">*</span><span class="st"> </span>q[, 1L<span class="op">:</span>3L]</span>
<span id="cb3-6">}</span>
<span id="cb3-7"></span>
<span id="cb3-8">parametricMesh3d &lt;-<span class="st"> </span><span class="cf">function</span>(gamma, r1, r2, r3){</span>
<span id="cb3-9">  v1 &lt;-<span class="st"> </span><span class="kw">Stereo</span>(r1, gamma)</span>
<span id="cb3-10">  v2 &lt;-<span class="st"> </span><span class="kw">Stereo</span>(r2, gamma)</span>
<span id="cb3-11">  v3 &lt;-<span class="st"> </span><span class="kw">Stereo</span>(r3, gamma)</span>
<span id="cb3-12">  tris &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(v1, v2, v3)</span>
<span id="cb3-13">  mesh0 &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(tris)</span>
<span id="cb3-14">  <span class="kw">addNormals</span>(</span>
<span id="cb3-15">    <span class="kw">tmesh3d</span>(</span>
<span id="cb3-16">      <span class="dt">vertices =</span> mesh0<span class="op">$</span>vb,</span>
<span id="cb3-17">      <span class="dt">indices  =</span> mesh0<span class="op">$</span>ib</span>
<span id="cb3-18">    )</span>
<span id="cb3-19">  )</span>
<span id="cb3-20">}</span>
<span id="cb3-21"></span>
<span id="cb3-22">A &lt;-<span class="st"> </span><span class="fl">0.44</span></span>
<span id="cb3-23">n &lt;-<span class="st"> </span><span class="dv">3</span></span>
<span id="cb3-24">Hopf4D &lt;-<span class="st"> </span><span class="cf">function</span>(t, phi){ </span>
<span id="cb3-25">  alpha &lt;-<span class="st"> </span>pi<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>(pi<span class="op">/</span><span class="dv">2</span><span class="op">-</span>A)<span class="op">*</span><span class="kw">cos</span>(n<span class="op">*</span>t)</span>
<span id="cb3-26">  beta &lt;-<span class="st"> </span>t <span class="op">+</span><span class="st"> </span>A<span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>n<span class="op">*</span>t)</span>
<span id="cb3-27">  sin_alpha &lt;-<span class="st"> </span><span class="kw">sin</span>(alpha)</span>
<span id="cb3-28">  p1 &lt;-<span class="st"> </span>sin_alpha <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(beta)</span>
<span id="cb3-29">  p2 &lt;-<span class="st"> </span>sin_alpha <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(beta)</span>
<span id="cb3-30">  p3 &lt;-<span class="st"> </span><span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">cos</span>(alpha)</span>
<span id="cb3-31">  cos_phi &lt;-<span class="st"> </span><span class="kw">cos</span>(phi)</span>
<span id="cb3-32">  sin_phi &lt;-<span class="st"> </span><span class="kw">sin</span>(phi)</span>
<span id="cb3-33">  <span class="kw">cbind</span>(</span>
<span id="cb3-34">    cos_phi<span class="op">*</span>p3,</span>
<span id="cb3-35">    sin_phi<span class="op">*</span>p1 <span class="op">-</span><span class="st"> </span>cos_phi<span class="op">*</span>p2, </span>
<span id="cb3-36">    cos_phi<span class="op">*</span>p1 <span class="op">+</span><span class="st"> </span>sin_phi<span class="op">*</span>p2,</span>
<span id="cb3-37">    sin_phi<span class="op">*</span>p3</span>
<span id="cb3-38">  ) <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">*</span>p3)</span>
<span id="cb3-39">}</span>
<span id="cb3-40">u &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi, pi, <span class="dt">length.out =</span> <span class="dv">300</span>)</span>
<span id="cb3-41">v &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> <span class="dv">200</span>)</span>
<span id="cb3-42">tg &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">expandTriangleGrid</span>(u, v)</span>
<span id="cb3-43">h &lt;-<span class="st"> </span><span class="cf">function</span>(uv) <span class="kw">Hopf4D</span>(uv[, 1L], uv[, 2L])</span>
<span id="cb3-44">r1 &lt;-<span class="st"> </span><span class="kw">h</span>(tg<span class="op">$</span>v1); r2 &lt;-<span class="st"> </span><span class="kw">h</span>(tg<span class="op">$</span>v2); r3 &lt;-<span class="st"> </span><span class="kw">h</span>(tg<span class="op">$</span>v3)</span></code></pre>
      </div>
      <p>
        Below is the animation when
        <span class="math inline">\(\gamma\)</span> varies from
        <span class="math inline">\(0.8\)</span> to
        <span class="math inline">\(2\)</span>.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">gamma_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="fl">0.8</span>, <span class="dv">2</span>, <span class="dt">by =</span> <span class="fl">0.025</span>)</span>
<span id="cb4-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">100</span>, <span class="dv">100</span>, <span class="dv">612</span>, <span class="dv">612</span>))</span>
<span id="cb4-3"><span class="kw">bg3d</span>(<span class="st">"#363940"</span>)</span>
<span id="cb4-4"><span class="kw">view3d</span>(<span class="dv">90</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb4-5"><span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_along</span>(gamma_)){</span>
<span id="cb4-6">  mesh &lt;-<span class="st"> </span><span class="kw">parametricMesh3d</span>(<span class="dt">gamma =</span> gamma_[i], r1, r2, r3)</span>
<span id="cb4-7">  <span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"green"</span>)</span>
<span id="cb4-8">  <span class="kw">rgl.snapshot</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, i))</span>
<span id="cb4-9">  <span class="kw">clear3d</span>()</span>
<span id="cb4-10">}</span>
<span id="cb4-11"></span>
<span id="cb4-12">command &lt;-<span class="st"> </span></span>
<span id="cb4-13"><span class="st">  "gifski --frames=pic*.png --fps=9 -b -o ModifStereoHopfTorus.gif"</span></span>
<span id="cb4-14"><span class="kw">system</span>(command)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ModifStereoHopfTorus.gif"
        />
      </p>
      <p>
        So the Hopf torus becomes more compact as
        <span class="math inline">\(\gamma\)</span> increases.
      </p>
      <h2 id="stereographic-duoprism">Stereographic duoprism</h2>
      <p>
        In the post devoted to the
        <a href="https://laustep.github.io/stlahblog/posts/DuoprismStereo.html"
          >stereographic duoprism</a
        >
        I also use the ordinary stereographic projection. Let’s see what happens
        with the modified stereographic projection.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">library</span>(rgl)</span>
<span id="cb5-2"></span>
<span id="cb5-3">A &lt;-<span class="st"> </span>3L</span>
<span id="cb5-4">B &lt;-<span class="st"> </span>24L</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co"># construction of the vertices ####</span></span>
<span id="cb5-7">vertices &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="ot">NA_real_</span>, <span class="dt">dim =</span> <span class="kw">c</span>(A, B, 4L))</span>
<span id="cb5-8"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>A){</span>
<span id="cb5-9">  v1 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">cos</span>(i<span class="op">/</span>A<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi), <span class="kw">sin</span>(i<span class="op">/</span>A<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi))</span>
<span id="cb5-10">  <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>B){</span>
<span id="cb5-11">    v2 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">cos</span>(j<span class="op">/</span>B<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi), <span class="kw">sin</span>(j<span class="op">/</span>B<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi))</span>
<span id="cb5-12">    vertices[i, j, ] &lt;-<span class="st"> </span><span class="kw">c</span>(v1, v2)</span>
<span id="cb5-13">  }</span>
<span id="cb5-14">}</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="co"># construction of the edges ####</span></span>
<span id="cb5-17">edges &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="ot">NA_integer_</span>, <span class="dt">dim =</span> <span class="kw">c</span>(2L, 2L, 2L<span class="op">*</span>A<span class="op">*</span>B))</span>
<span id="cb5-18">dominates &lt;-<span class="st"> </span><span class="cf">function</span>(c1, c2){</span>
<span id="cb5-19">  c2[1L] <span class="op">&gt;</span><span class="st"> </span>c1[1L] <span class="op">||</span><span class="st"> </span>(c2[1L] <span class="op">==</span><span class="st"> </span>c1[1L] <span class="op">&amp;&amp;</span><span class="st"> </span>c2[2L] <span class="op">&gt;</span><span class="st"> </span>c1[2L])</span>
<span id="cb5-20">}</span>
<span id="cb5-21">counter &lt;-<span class="st"> </span>1L</span>
<span id="cb5-22"><span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_len</span>(A)<span class="op">-</span>1L){</span>
<span id="cb5-23">  <span class="cf">for</span>(j <span class="cf">in</span> <span class="kw">seq_len</span>(B)<span class="op">-</span>1L){</span>
<span id="cb5-24">    c1 &lt;-<span class="st"> </span><span class="kw">c</span>(i, j)</span>
<span id="cb5-25">    candidate &lt;-<span class="st"> </span><span class="kw">c</span>(i, (j<span class="op">-</span>1L) <span class="op">%%</span><span class="st"> </span>B)</span>
<span id="cb5-26">    <span class="cf">if</span>(<span class="kw">dominates</span>(c1, candidate)){</span>
<span id="cb5-27">      edges[, , counter] &lt;-<span class="st"> </span><span class="kw">cbind</span>(c1, candidate) <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-28">      counter &lt;-<span class="st"> </span>counter <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-29">    }</span>
<span id="cb5-30">    candidate &lt;-<span class="st"> </span><span class="kw">c</span>(i, (j<span class="op">+</span>1L) <span class="op">%%</span><span class="st"> </span>B)</span>
<span id="cb5-31">    <span class="cf">if</span>(<span class="kw">dominates</span>(c1, candidate)){</span>
<span id="cb5-32">      edges[, , counter] &lt;-<span class="st"> </span><span class="kw">cbind</span>(c1, candidate) <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-33">      counter &lt;-<span class="st"> </span>counter <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-34">    }</span>
<span id="cb5-35">    candidate &lt;-<span class="st"> </span><span class="kw">c</span>((i<span class="op">-</span>1L) <span class="op">%%</span><span class="st"> </span>A, j)</span>
<span id="cb5-36">    <span class="cf">if</span>(<span class="kw">dominates</span>(c1, candidate)){</span>
<span id="cb5-37">      edges[, , counter] &lt;-<span class="st"> </span><span class="kw">cbind</span>(c1, candidate) <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-38">      counter &lt;-<span class="st"> </span>counter <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-39">    }</span>
<span id="cb5-40">    candidate &lt;-<span class="st"> </span><span class="kw">c</span>((i<span class="op">+</span>1L) <span class="op">%%</span><span class="st"> </span>A, j)</span>
<span id="cb5-41">    <span class="cf">if</span>(<span class="kw">dominates</span>(c1, candidate)){</span>
<span id="cb5-42">      edges[, , counter] &lt;-<span class="st"> </span><span class="kw">cbind</span>(c1, candidate) <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-43">      counter &lt;-<span class="st"> </span>counter <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb5-44">    }</span>
<span id="cb5-45">  }</span>
<span id="cb5-46">}</span>
<span id="cb5-47"></span>
<span id="cb5-48"><span class="co"># stereographic-like projection</span></span>
<span id="cb5-49">stereog &lt;-<span class="st"> </span><span class="cf">function</span>(v, gamma){</span>
<span id="cb5-50">  r &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span>)</span>
<span id="cb5-51">  <span class="kw">acos</span>(v[4L]<span class="op">/</span>r) <span class="op">/</span><span class="st"> </span>(r<span class="op">^</span>gamma <span class="op">-</span><span class="st"> </span><span class="kw">abs</span>(v[4L])<span class="op">^</span>gamma)<span class="op">^</span>(<span class="dv">1</span><span class="op">/</span>gamma) <span class="op">*</span><span class="st"> </span>v[1L<span class="op">:</span>3L]</span>
<span id="cb5-52">}</span>
<span id="cb5-53"></span>
<span id="cb5-54"><span class="co"># spherical segment</span></span>
<span id="cb5-55">sphericalSegment &lt;-<span class="st"> </span><span class="cf">function</span>(P, Q, n){</span>
<span id="cb5-56">  out &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> n <span class="op">+</span><span class="st"> </span>1L, <span class="dt">ncol =</span> 4L)</span>
<span id="cb5-57">  <span class="cf">for</span>(i <span class="cf">in</span> 0L<span class="op">:</span>n){</span>
<span id="cb5-58">    pt &lt;-<span class="st"> </span>P <span class="op">+</span><span class="st"> </span>(i<span class="op">/</span>n)<span class="op">*</span>(Q<span class="op">-</span>P)</span>
<span id="cb5-59">    out[i<span class="op">+</span>1L, ] &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">/</span><span class="kw">c</span>(<span class="kw">crossprod</span>(pt))) <span class="op">*</span><span class="st"> </span>pt</span>
<span id="cb5-60">  }</span>
<span id="cb5-61">  out</span>
<span id="cb5-62">}</span>
<span id="cb5-63"></span>
<span id="cb5-64"><span class="co"># stereographic edge</span></span>
<span id="cb5-65">stereoEdge &lt;-<span class="st"> </span><span class="cf">function</span>(verts, v1, v2, gamma){</span>
<span id="cb5-66">  P &lt;-<span class="st"> </span>verts[v1[1L], v1[2L], ]</span>
<span id="cb5-67">  Q &lt;-<span class="st"> </span>verts[v2[1L], v2[2L], ]</span>
<span id="cb5-68">  PQ &lt;-<span class="st"> </span><span class="kw">sphericalSegment</span>(P, Q, 100L)</span>
<span id="cb5-69">  pq &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(PQ, 1L, stereog, <span class="dt">gamma =</span> gamma))</span>
<span id="cb5-70">  dists &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">apply</span>(pq, 1L, crossprod))</span>
<span id="cb5-71">  <span class="kw">cylinder3d</span>(pq, <span class="dt">radius =</span> dists<span class="op">/</span><span class="dv">15</span>, <span class="dt">sides =</span> <span class="dv">60</span>)</span>
<span id="cb5-72">}</span>
<span id="cb5-73"></span>
<span id="cb5-74"><span class="co"># projected vertices</span></span>
<span id="cb5-75">verts3D &lt;-<span class="st"> </span><span class="cf">function</span>(gamma){</span>
<span id="cb5-76">  <span class="kw">apply</span>(vertices, <span class="kw">c</span>(1L, 2L), stereog, <span class="dt">gamma =</span> gamma)</span>
<span id="cb5-77">}</span></code></pre>
      </div>
      <p>
        The animation for <span class="math inline">\(\gamma\)</span> varying
        from <span class="math inline">\(0.8\)</span> to
        <span class="math inline">\(2\)</span>:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1">gamma_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="fl">0.8</span>, <span class="dv">2</span>, <span class="dt">by =</span> <span class="fl">0.025</span>)</span>
<span id="cb6-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb6-3"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.7</span>)</span>
<span id="cb6-4"><span class="kw">bg3d</span>(<span class="kw">rgb</span>(<span class="dv">54</span>, <span class="dv">57</span>, <span class="dv">64</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>))</span>
<span id="cb6-5"><span class="cf">for</span>(frame <span class="cf">in</span> <span class="kw">seq_along</span>(gamma_)){</span>
<span id="cb6-6">  gamma &lt;-<span class="st"> </span>gamma_[frame]</span>
<span id="cb6-7">  <span class="co">## plot the edges</span></span>
<span id="cb6-8">  <span class="cf">for</span>(k <span class="cf">in</span> 1L<span class="op">:</span>(2L<span class="op">*</span>A<span class="op">*</span>B)){</span>
<span id="cb6-9">    v1 &lt;-<span class="st"> </span>edges[, 1L, k]</span>
<span id="cb6-10">    v2 &lt;-<span class="st"> </span>edges[, 2L, k]</span>
<span id="cb6-11">    edge &lt;-<span class="st"> </span><span class="kw">stereoEdge</span>(vertices, v1, v2, gamma)</span>
<span id="cb6-12">    <span class="kw">shade3d</span>(edge, <span class="dt">color =</span> <span class="st">"gold"</span>)</span>
<span id="cb6-13">  }</span>
<span id="cb6-14">  <span class="co">## plot the vertices</span></span>
<span id="cb6-15">  vs &lt;-<span class="st"> </span><span class="kw">verts3D</span>(gamma)</span>
<span id="cb6-16">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>A){</span>
<span id="cb6-17">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>B){</span>
<span id="cb6-18">      v &lt;-<span class="st"> </span>vs[, i, j]</span>
<span id="cb6-19">      <span class="kw">spheres3d</span>(v, <span class="dt">radius =</span> <span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v)))<span class="op">/</span><span class="dv">10</span>, <span class="dt">color =</span> <span class="st">"gold2"</span>)</span>
<span id="cb6-20">    }</span>
<span id="cb6-21">  }</span>
<span id="cb6-22">  <span class="kw">rgl.snapshot</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, frame))</span>
<span id="cb6-23">  <span class="kw">clear3d</span>()</span>
<span id="cb6-24">}</span>
<span id="cb6-25"></span>
<span id="cb6-26">command &lt;-<span class="st"> </span></span>
<span id="cb6-27"><span class="st">  "gifski --frames=pic*.png --fps=9 -b -o ModifStereoDuoprism.gif"</span></span>
<span id="cb6-28"><span class="kw">system</span>(command)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ModifStereoDuoprism.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Tue, 01 Mar 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ModifiedStereographicProjection.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Hyperbolic gircope - using 'cxhull' and 'gyro'</title>
      <link>https://laustep.github.io/stlahblog/posts/HyperbolicGircope.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        This post is a demonstration of the <strong>cxhull</strong> and
        <strong>gyro</strong> packages. I will use these packages (and others)
        to draw an hyperbolic version of the stereographic projection of a
        convex 4D polytope, the <em>gircope</em> or
        <em>great rhombicuboctahedral prism</em>. The gircope has twenty-eight
        cells, but I will only draw the twelve cubes among them.
      </p>
      <p>
        As said in
        <a
          href="https://polytope.miraheze.org/wiki/Great_rhombicuboctahedral_prism"
          >this wiki</a
        >, the vertices of the gircope are given by all permutations of the
        first three coordinates of:
        <span class="math display"
          >\[ \left(\pm\frac{1+2\sqrt{2}}{2}, \pm\frac{1+\sqrt{2}}{2},
          \pm\frac{1}{2}, \pm\frac{1}{2}\right). \]</span
        >
      </p>
      <p>I define these vertices in R as follows:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(gyro)         <span class="co"># to use the `changesOfSign` function</span></span>
<span id="cb1-2"><span class="kw">library</span>(arrangements) <span class="co"># to use the `permutations` function</span></span>
<span id="cb1-3">x &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb1-4">  (<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span><span class="kw">sqrt</span>(<span class="dv">2</span>)) <span class="op">/</span><span class="st"> </span><span class="dv">2</span>,</span>
<span id="cb1-5">  (<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span>)) <span class="op">/</span><span class="st"> </span><span class="dv">2</span>,</span>
<span id="cb1-6">  <span class="dv">1</span><span class="op">/</span><span class="dv">2</span></span>
<span id="cb1-7">)</span>
<span id="cb1-8">vertices &lt;-<span class="st"> </span><span class="kw">changesOfSign</span>(</span>
<span id="cb1-9">  <span class="kw">cbind</span>(</span>
<span id="cb1-10">    <span class="kw">t</span>(<span class="kw">apply</span>(<span class="kw">permutations</span>(3L), 1L, <span class="cf">function</span>(perm) x[perm])), </span>
<span id="cb1-11">    <span class="dv">1</span><span class="op">/</span><span class="dv">2</span></span>
<span id="cb1-12">  )</span>
<span id="cb1-13">)</span></code></pre>
      </div>
      <p>
        Obviously, the vertices of the gircope lie on a sphere centered at the
        origin:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">apply</span>(vertices, 1L, crossprod)</span>
<span id="cb2-2"><span class="co">##  [1] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-3"><span class="co">## [10] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-4"><span class="co">## [19] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-5"><span class="co">## [28] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-6"><span class="co">## [37] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-7"><span class="co">## [46] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-8"><span class="co">## [55] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-9"><span class="co">## [64] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-10"><span class="co">## [73] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-11"><span class="co">## [82] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span>
<span id="cb2-12"><span class="co">## [91] 5.62132 5.62132 5.62132 5.62132 5.62132 5.62132</span></span></code></pre>
      </div>
      <p>
        We will need the value of the radius of this sphere later, for the
        stereographic projection:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">R &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(vertices[1L, ])))</span></code></pre>
      </div>
      <p>
        The gircope is convex, hence it equals its convex hull. But we have only
        its vertices so far, and we need its edges, its cells, and its ridges
        (faces of the cells). This is why we use <strong>cxhull</strong> now:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(cxhull)</span>
<span id="cb4-2">hull &lt;-<span class="st"> </span><span class="kw">cxhull</span>(vertices)</span>
<span id="cb4-3">edges &lt;-<span class="st"> </span>hull[[<span class="st">"edges"</span>]]</span>
<span id="cb4-4">cells &lt;-<span class="st"> </span>hull[[<span class="st">"facets"</span>]]</span>
<span id="cb4-5">ridges &lt;-<span class="st"> </span>hull[[<span class="st">"ridges"</span>]]</span></code></pre>
      </div>
      <p>
        A cube has eight vertices, and among the cells of the gircope, only the
        cubic ones have eight vertices. So we get all the cubic cells like this:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">cubicCells &lt;-</span>
<span id="cb5-2"><span class="st">  </span><span class="kw">Filter</span>(<span class="cf">function</span>(cell) <span class="kw">length</span>(cell[[<span class="st">"vertices"</span>]]) <span class="op">==</span><span class="st"> </span>8L, cells)</span></code></pre>
      </div>
      <p>
        No we need the faces of the cubes (squares). We can easily get the
        indices of their vertices but we have to order them. That’s what the
        <code>polygonize</code> function below does:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">polygonize &lt;-<span class="st"> </span><span class="cf">function</span>(edges){</span>
<span id="cb6-2">  nedges &lt;-<span class="st"> </span><span class="kw">nrow</span>(edges)</span>
<span id="cb6-3">  indices &lt;-<span class="st"> </span>edges[1L, ]</span>
<span id="cb6-4">  i &lt;-<span class="st"> </span>indices[2L]</span>
<span id="cb6-5">  edges &lt;-<span class="st"> </span>edges[<span class="op">-</span>1L, ]</span>
<span id="cb6-6">  <span class="cf">for</span>(. <span class="cf">in</span> 1L<span class="op">:</span>(nedges<span class="op">-</span>2L)){</span>
<span id="cb6-7">    j &lt;-<span class="st"> </span><span class="kw">which</span>(<span class="kw">apply</span>(edges, 1L, <span class="cf">function</span>(e) i <span class="op">%in%</span><span class="st"> </span>e))</span>
<span id="cb6-8">    i &lt;-<span class="st"> </span>edges[j, ][<span class="kw">which</span>(edges[j, ] <span class="op">!=</span><span class="st"> </span>i)]</span>
<span id="cb6-9">    indices &lt;-<span class="st"> </span><span class="kw">c</span>(indices, i)</span>
<span id="cb6-10">    edges &lt;-<span class="st"> </span>edges[<span class="op">-</span>j, ]</span>
<span id="cb6-11">  }</span>
<span id="cb6-12">  indices</span>
<span id="cb6-13">}</span></code></pre>
      </div>
      <p>Now we can get the indices of the vertices of the squares:</p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1">squares &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">vapply</span>(</span>
<span id="cb7-2">  <span class="kw">do.call</span>(c, <span class="kw">lapply</span>(cubicCells, <span class="st">`</span><span class="dt">[[</span><span class="st">`</span>, <span class="st">"ridges"</span>)),</span>
<span id="cb7-3">  <span class="cf">function</span>(r) <span class="kw">polygonize</span>(ridges[[r]][[<span class="st">"edges"</span>]]),</span>
<span id="cb7-4">  <span class="kw">integer</span>(4L)</span>
<span id="cb7-5">))</span></code></pre>
      </div>
      <p>
        Now, let’s project the 4D vertices to the 3D space, with a stereographic
        projection:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1">verts3D &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(vertices, 1L, <span class="cf">function</span>(v){</span>
<span id="cb8-2">  v[1L<span class="op">:</span>3L] <span class="op">/</span><span class="st"> </span>(R <span class="op">-</span><span class="st"> </span>v[4L])</span>
<span id="cb8-3">}))</span></code></pre>
      </div>
      <p>
        We are ready for plotting. We can’t directly draw hyperbolic squares
        with the <strong>gyro</strong> package. It only allows to draw
        hyperbolic triangles, with the <code>gyrotriangle</code> function. So we
        draw an hyperbolic square by splitting it into two triangles, we merge
        these two triangles with <code>Morpho::mergeMeshes</code> and we remove
        the duplicated vertices of the resulting mesh with
        <code>Rvcg::vcgClean</code>.
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1"><span class="kw">library</span>(rgl)</span>
<span id="cb9-2"><span class="kw">library</span>(Morpho) <span class="co"># to use the `mergeMeshes` function</span></span>
<span id="cb9-3"><span class="kw">library</span>(Rvcg)   <span class="co"># to use the `vcgClean` function</span></span>
<span id="cb9-4">s &lt;-<span class="st"> </span><span class="fl">0.5</span> <span class="co"># hyperbolic curvature</span></span>
<span id="cb9-5"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb9-6"><span class="kw">bg3d</span>(<span class="kw">rgb</span>(<span class="dv">54</span>, <span class="dv">57</span>, <span class="dv">64</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>))</span>
<span id="cb9-7"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(squares)){</span>
<span id="cb9-8">  square &lt;-<span class="st"> </span>squares[i, ]</span>
<span id="cb9-9">  mesh1 &lt;-<span class="st"> </span><span class="kw">gyrotriangle</span>(</span>
<span id="cb9-10">    verts3D[square[1L], ], verts3D[square[2L], ], verts3D[square[3L], ],</span>
<span id="cb9-11">    <span class="dt">s =</span> s</span>
<span id="cb9-12">  )</span>
<span id="cb9-13">  mesh2 &lt;-<span class="st"> </span><span class="kw">gyrotriangle</span>(</span>
<span id="cb9-14">    verts3D[square[1L], ], verts3D[square[3L], ], verts3D[square[4L], ],</span>
<span id="cb9-15">    <span class="dt">s =</span> s</span>
<span id="cb9-16">  )</span>
<span id="cb9-17">  mesh &lt;-<span class="st"> </span><span class="kw">vcgClean</span>(<span class="kw">mergeMeshes</span>(mesh1, mesh2), <span class="dt">sel =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">7</span>), <span class="dt">silent =</span> <span class="ot">TRUE</span>)</span>
<span id="cb9-18">  <span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"violetred"</span>)</span>
<span id="cb9-19">}</span>
<span id="cb9-20"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(edges)){</span>
<span id="cb9-21">  edge &lt;-<span class="st"> </span>edges[i, ]</span>
<span id="cb9-22">  A &lt;-<span class="st"> </span>verts3D[edge[1L], ]; B &lt;-<span class="st"> </span>verts3D[edge[2L], ]</span>
<span id="cb9-23">  tube &lt;-<span class="st"> </span><span class="kw">gyrotube</span>(A, B, <span class="dt">s =</span> s, <span class="dt">radius =</span> <span class="fl">0.025</span>)</span>
<span id="cb9-24">  <span class="kw">shade3d</span>(tube, <span class="dt">color =</span> <span class="st">"whitesmoke"</span>)</span>
<span id="cb9-25">}</span>
<span id="cb9-26"><span class="kw">spheres3d</span>(verts3D, <span class="dt">radius =</span> <span class="fl">0.03</span>, <span class="dt">color =</span> <span class="st">"whitesmoke"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/hyperbolicGircope.gif"
        />
      </p>
      <p>To make the animation, I used the following code.</p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1"><span class="kw">movie3d</span>(</span>
<span id="cb10-2">  <span class="kw">spin3d</span>(<span class="dt">axis =</span> <span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">0</span>), <span class="dt">rpm =</span> <span class="dv">10</span>),</span>
<span id="cb10-3">  <span class="dt">duration =</span> <span class="dv">6</span>, <span class="dt">fps =</span> <span class="dv">10</span>,</span>
<span id="cb10-4">  <span class="dt">movie =</span> <span class="st">"pic"</span>, <span class="dt">dir =</span> <span class="st">"."</span>,</span>
<span id="cb10-5">  <span class="dt">convert =</span> <span class="ot">FALSE</span>,</span>
<span id="cb10-6">  <span class="dt">startTime =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">10</span>,</span>
<span id="cb10-7">  <span class="dt">webshot =</span> <span class="ot">FALSE</span>)</span></code></pre>
      </div>
      <p>
        This code produces the files <strong>pic001.png</strong>, …
        <strong>pic060.png</strong>. Then I assembled them into a GIF with
        <a href="https://laustep.github.io/stlahblog/posts/gifskiBash.html"
          >gifski</a
        >
        (you can use <strong>ImageMagick</strong> instead).
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 28 Feb 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HyperbolicGircope.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Volume under surface from points</title>
      <link>https://laustep.github.io/stlahblog/posts/volumeUnderSurface.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <h2 id="the-problem">The problem</h2>
      <p>
        Suppose you want to get the volume under a surface but you only have
        some points on this surface. For the illustration, I will take the
        surface defined by
        <span class="math inline">\(z = \exp\bigl(-(x^2 + y^2)\bigr)\)</span> on
        the square <span class="math inline">\([-5, 5] \times [-5, 5]\)</span>.
        Then the volume we’re looking for is close to
        <span class="math inline">\(\pi\)</span> (the integral on
        <span class="math inline"
          >\([-\infty, +\infty] \times [-\infty, +\infty]\)</span
        >
        is exactly <span class="math inline">\(\pi\)</span>).
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">f &lt;-<span class="st"> </span><span class="cf">function</span>(x, y){</span>
<span id="cb1-2">  <span class="kw">exp</span>(<span class="op">-</span>(x<span class="op">*</span>x <span class="op">+</span><span class="st"> </span>y<span class="op">*</span>y))</span>
<span id="cb1-3">}</span></code></pre>
      </div>
      <p>
        Now let’s define a grid on
        <span class="math inline">\([-5, 5] \times [-5, 5]\)</span> and the
        value of <span class="math inline">\(z\)</span> for each point on this
        grid:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">length.out =</span> <span class="dv">100</span>)</span>
<span id="cb2-2">y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">length.out =</span> <span class="dv">100</span>)</span>
<span id="cb2-3">grd &lt;-<span class="st"> </span><span class="kw">transform</span>( <span class="co"># data (x_i, y_i, z_i)</span></span>
<span id="cb2-4">  <span class="kw">expand.grid</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y), <span class="dt">z =</span> <span class="kw">f</span>(x, y)</span>
<span id="cb2-5">) </span></code></pre>
      </div>
      <h2 id="elevated-delaunay-tessellation---using-deldir">
        Elevated Delaunay tessellation - using ‘deldir’
      </h2>
      <p>
        A solution consists in constructing a Delaunay tessellation of the
        surface and then to sum the volumes under the Delaunay triangles. The
        <strong>deldir</strong> package allows to construct such a Delaunay
        tessellation (which I call an <em>elevated Delaunay tessellation</em>).
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(deldir)</span>
<span id="cb3-2">del &lt;-<span class="st"> </span><span class="kw">deldir</span>( <span class="co"># Delaunay</span></span>
<span id="cb3-3">  <span class="dt">x =</span> grd[[<span class="st">"x"</span>]], <span class="dt">y =</span> grd[[<span class="st">"y"</span>]], <span class="dt">z =</span> grd[[<span class="st">"z"</span>]],</span>
<span id="cb3-4">  <span class="dt">rw =</span> <span class="kw">c</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dv">-5</span>, <span class="dv">5</span>), <span class="dt">round =</span> <span class="ot">FALSE</span></span>
<span id="cb3-5">) </span>
<span id="cb3-6">trgls &lt;-<span class="st"> </span><span class="kw">triang.list</span>(del) <span class="co"># extracts all triangles</span></span></code></pre>
      </div>
      <p>The function below calculates the volume under a triangle:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">volume_under_triangle &lt;-<span class="st"> </span><span class="cf">function</span>(trgl){</span>
<span id="cb4-2">  <span class="kw">with</span>(</span>
<span id="cb4-3">    trgl, </span>
<span id="cb4-4">    <span class="kw">sum</span>(z) <span class="op">*</span><span class="st"> </span></span>
<span id="cb4-5"><span class="st">      </span>(x[1L]<span class="op">*</span>y[2L] <span class="op">-</span><span class="st"> </span>x[2L]<span class="op">*</span>y[1L] <span class="op">+</span><span class="st"> </span>x[2L]<span class="op">*</span>y[3L] <span class="op">-</span></span>
<span id="cb4-6"><span class="st">         </span>x[3L]<span class="op">*</span>y[2L] <span class="op">+</span><span class="st"> </span>x[3L]<span class="op">*</span>y[1L] <span class="op">-</span><span class="st"> </span>x[1L]<span class="op">*</span>y[3L]) <span class="op">/</span><span class="st"> </span><span class="dv">6</span></span>
<span id="cb4-7">  )</span>
<span id="cb4-8">}</span></code></pre>
      </div>
      <p>So here is our approximation of the volume:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1">volumes &lt;-<span class="st"> </span><span class="kw">vapply</span>(trgls, volume_under_triangle, <span class="kw">numeric</span>(1L))</span>
<span id="cb5-2"><span class="kw">sum</span>(volumes)</span>
<span id="cb5-3"><span class="co">## [1] 3.141592</span></span></code></pre>
      </div>
      <h2 id="using-rcgal">Using ‘RCGAL’</h2>
      <p>
        If you ran the above code, you noticed that the
        <code>deldir</code> function as well as the
        <code>triang.list</code> function are a bit slow. My package
        <a
          href="https://laustep.github.io/stlahblog/posts/SurfaceReconstruction.html"
          >RCGAL</a
        >
        (not on CRAN) can construct an elevated Delaunay tessellation, and it is
        faster.
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">library</span>(RCGAL)</span>
<span id="cb6-2">points &lt;-<span class="st"> </span><span class="kw">as.matrix</span>(grd)</span>
<span id="cb6-3">del &lt;-<span class="st"> </span><span class="kw">delaunay</span>(points, <span class="dt">elevation =</span> <span class="ot">TRUE</span>)</span></code></pre>
      </div>
      <p>You can directly get the volume:</p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1">del[[<span class="st">"volume"</span>]]</span>
<span id="cb7-2"><span class="co">## [1] 3.141593</span></span></code></pre>
      </div>
      <p>
        And you can easily plot the elevated Delaunay tessellation with the help
        of the <strong>rgl</strong> package:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1">mesh &lt;-<span class="st"> </span>del[[<span class="st">"mesh"</span>]]</span>
<span id="cb8-2"><span class="kw">library</span>(rgl)</span>
<span id="cb8-3"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">306</span>), <span class="dt">zoom =</span> <span class="fl">0.5</span>)</span>
<span id="cb8-4"><span class="kw">aspect3d</span>(<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">3</span>)</span>
<span id="cb8-5"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"limegreen"</span>)</span>
<span id="cb8-6"><span class="kw">wire3d</span>(mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/rgl_elevated_delaunay.png"
        />
      </p>
      <h2 id="update-2022-03-02-using-tessellation">
        Update 2022-03-02: using ‘tessellation’
      </h2>
      <p>
        The elevated Delaunay tessellation is now available in my package
        <a href="https://github.com/stla/tessellation">tessellation</a>. The
        command to get it is the same as the ‘RCGAL’ command and the output is
        similar.
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1">del &lt;-<span class="st"> </span>tessellation<span class="op">::</span><span class="kw">delaunay</span>(points, <span class="dt">elevation =</span> <span class="ot">TRUE</span>)</span>
<span id="cb9-2">del[[<span class="st">"volume"</span>]]</span>
<span id="cb9-3"><span class="co">## [1] 3.141593</span></span></code></pre>
      </div>
      <h2 id="update-2022-03-10-using-rcdt">Update 2022-03-10: using ‘RCDT’</h2>
      <p>
        The elevated Delaunay triangulation is now available in my package
        <a href="https://github.com/stla/RCDT">RCDT</a>.
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1">del &lt;-<span class="st"> </span>RCDT<span class="op">::</span><span class="kw">delaunay</span>(points, <span class="dt">elevation =</span> <span class="ot">TRUE</span>)</span>
<span id="cb10-2">del[[<span class="st">"volume"</span>]]</span>
<span id="cb10-3"><span class="co">## [1] 3.141593</span></span></code></pre>
      </div>
      <h2 id="interactive-plot-with-deldir">Interactive plot with ‘deldir’</h2>
      <p>
        The <strong>deldir</strong> also allows to get an interactive graphic
        from the elevated Delaunay tessellation. This requires the
        <strong>rgl</strong> package. I do it below with a less fine grid,
        otherwise the visualization is not nice (too dense):
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">3</span>, <span class="dv">3</span>, <span class="dt">length.out =</span> <span class="dv">20</span>)</span>
<span id="cb11-2">y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">3</span>, <span class="dv">3</span>, <span class="dt">length.out =</span> <span class="dv">20</span>)</span>
<span id="cb11-3">grd &lt;-<span class="st"> </span><span class="kw">transform</span>(</span>
<span id="cb11-4">  <span class="kw">expand.grid</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y), <span class="dt">z =</span> <span class="kw">f</span>(x, y)</span>
<span id="cb11-5">) </span>
<span id="cb11-6">del &lt;-<span class="st"> </span><span class="kw">deldir</span>(</span>
<span id="cb11-7">  <span class="dt">x =</span> grd[[<span class="st">"x"</span>]], <span class="dt">y =</span> grd[[<span class="st">"y"</span>]], <span class="dt">z =</span> grd[[<span class="st">"z"</span>]],</span>
<span id="cb11-8">  <span class="dt">rw =</span> <span class="kw">c</span>(<span class="op">-</span><span class="dv">3</span>, <span class="dv">3</span>, <span class="dv">-3</span>, <span class="dv">3</span>), <span class="dt">round =</span> <span class="ot">FALSE</span></span>
<span id="cb11-9">) </span></code></pre>
      </div>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb12-1"><span class="kw">library</span>(rgl)</span>
<span id="cb12-2"><span class="kw">persp3d</span>(del, <span class="dt">front =</span> <span class="st">"lines"</span>, <span class="dt">back =</span> <span class="st">"lines"</span>, <span class="dt">col =</span> <span class="st">"blue"</span>)</span>
<span id="cb12-3"><span class="kw">aspect3d</span>(<span class="dv">2</span>, <span class="dv">2</span>, <span class="dv">1</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/deldir_elevated_delaunay.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 26 Feb 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/volumeUnderSurface.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Nice DT filters</title>
      <link>https://laustep.github.io/stlahblog/posts/DTselect2Filters.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I am not a big fan of the built-in filters of <strong>DT</strong>. I
        prefer the ones below, made with the help of the JavaScript library
        <strong>select2</strong>.
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTselect2Filters.gif"
          style="width: 75%"
        />
      </p>
      <p>
        First, <a href="https://cdnjs.com/libraries/select2">download</a> the
        files <strong>select2.min.js</strong> and
        <strong>select2.min.css</strong>. Now, here is the code:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(DT)</span>
<span id="cb1-2"><span class="kw">library</span>(htmltools)</span>
<span id="cb1-3"></span>
<span id="cb1-4">dat &lt;-<span class="st"> </span>iris</span>
<span id="cb1-5"></span>
<span id="cb1-6">sketch &lt;-<span class="st"> </span>tags<span class="op">$</span><span class="kw">table</span>(</span>
<span id="cb1-7">  tags<span class="op">$</span><span class="kw">thead</span>(</span>
<span id="cb1-8">    tags<span class="op">$</span><span class="kw">tr</span>(</span>
<span id="cb1-9">      tags<span class="op">$</span><span class="kw">th</span>(), <span class="kw">lapply</span>(<span class="kw">names</span>(dat), tags<span class="op">$</span>th)</span>
<span id="cb1-10">    ),</span>
<span id="cb1-11">    tags<span class="op">$</span><span class="kw">tr</span>(</span>
<span id="cb1-12">      <span class="kw">lapply</span>(<span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(dat)), <span class="cf">function</span>(i) tags<span class="op">$</span><span class="kw">th</span>(<span class="dt">id =</span> <span class="kw">paste0</span>(<span class="st">"th"</span>, i)))</span>
<span id="cb1-13">    )</span>
<span id="cb1-14">  )</span>
<span id="cb1-15">)</span>
<span id="cb1-16"></span>
<span id="cb1-17">js &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb1-18">  <span class="st">"function(){"</span>, </span>
<span id="cb1-19">  <span class="st">"  this.api().columns().every(function(i){"</span>,</span>
<span id="cb1-20">  <span class="st">"    var column = this;"</span>,</span>
<span id="cb1-21">  <span class="st">"    var $select ="</span>,</span>
<span id="cb1-22">  <span class="st">"      $('&lt;select multiple=</span><span class="ch">\"</span><span class="st">multiple</span><span class="ch">\"</span><span class="st">&gt;' +"</span>,</span>
<span id="cb1-23">  <span class="st">"         '&lt;option value=</span><span class="ch">\"\"</span><span class="st">&gt;&lt;/option&gt;' +"</span>,</span>
<span id="cb1-24">  <span class="st">"      '&lt;/select&gt;')"</span>,</span>
<span id="cb1-25">  <span class="st">"      .appendTo($('#th'+i).empty())"</span>, </span>
<span id="cb1-26">  <span class="st">"      .on('change', function(){"</span>,</span>
<span id="cb1-27">  <span class="st">"        var vals = $('option:selected', this).map(function(idx, element){"</span>,</span>
<span id="cb1-28">  <span class="st">"          return $.fn.dataTable.util.escapeRegex($(element).val());"</span>,</span>
<span id="cb1-29">  <span class="st">"        }).toArray().join('|');"</span>,</span>
<span id="cb1-30">  <span class="st">"        column.search("</span>,</span>
<span id="cb1-31">  <span class="st">"          vals.length &gt; 0 ? '^(' + vals + ')$' : '', true, false"</span>,</span>
<span id="cb1-32">  <span class="st">"        ).draw();"</span>,</span>
<span id="cb1-33">  <span class="st">"      });"</span>,</span>
<span id="cb1-34">  <span class="st">"    var data = column.data();"</span>,</span>
<span id="cb1-35">  <span class="st">"    if(i == 0){"</span>,</span>
<span id="cb1-36">  <span class="st">"      data.each(function(d, j){"</span>,</span>
<span id="cb1-37">  <span class="st">"        $select.append('&lt;option value=</span><span class="ch">\"</span><span class="st">' + d + '</span><span class="ch">\"</span><span class="st">&gt;' + d + '&lt;/option&gt;');"</span>,</span>
<span id="cb1-38">  <span class="st">"      });"</span>,</span>
<span id="cb1-39">  <span class="st">"    }else{"</span>,</span>
<span id="cb1-40">  <span class="st">"      data.unique().sort().each(function(d, j){"</span>,</span>
<span id="cb1-41">  <span class="st">"        $select.append('&lt;option value=</span><span class="ch">\"</span><span class="st">' + d + '</span><span class="ch">\"</span><span class="st">&gt;' + d + '&lt;/option&gt;');"</span>,</span>
<span id="cb1-42">  <span class="st">"      });"</span>,</span>
<span id="cb1-43">  <span class="st">"    }"</span>,</span>
<span id="cb1-44">  <span class="st">"    $select.select2({width: '100%', closeOnSelect: false});"</span>,</span>
<span id="cb1-45">  <span class="st">"  });"</span>,</span>
<span id="cb1-46">  <span class="st">"}"</span>)</span>
<span id="cb1-47"></span>
<span id="cb1-48">htmlDep &lt;-<span class="st"> </span><span class="kw">htmlDependency</span>(</span>
<span id="cb1-49">  <span class="dt">name =</span> <span class="st">"select2"</span>, </span>
<span id="cb1-50">  <span class="dt">version =</span> <span class="st">"4.0.13"</span>, </span>
<span id="cb1-51">  <span class="dt">src =</span> <span class="st">"path/to/select2"</span>, <span class="co"># path to the folder containing the 'select2' files </span></span>
<span id="cb1-52">  <span class="dt">script =</span> <span class="st">"select2.min.js"</span>, </span>
<span id="cb1-53">  <span class="dt">stylesheet =</span> <span class="st">"select2.min.css"</span>, </span>
<span id="cb1-54">  <span class="dt">all_files =</span> <span class="ot">FALSE</span></span>
<span id="cb1-55">)</span>
<span id="cb1-56"></span>
<span id="cb1-57">dtable &lt;-<span class="st"> </span></span>
<span id="cb1-58"><span class="st">  </span><span class="kw">datatable</span>(</span>
<span id="cb1-59">    dat, </span>
<span id="cb1-60">    <span class="dt">container =</span> sketch, </span>
<span id="cb1-61">    <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb1-62">      <span class="dt">orderCellsTop =</span> <span class="ot">TRUE</span>,</span>
<span id="cb1-63">      <span class="dt">initComplete =</span> <span class="kw">JS</span>(js),</span>
<span id="cb1-64">      <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb1-65">        <span class="kw">list</span>(<span class="dt">targets =</span> <span class="st">"_all"</span>, <span class="dt">className =</span> <span class="st">"dt-center"</span>)</span>
<span id="cb1-66">      )</span>
<span id="cb1-67">    )</span>
<span id="cb1-68">  )</span>
<span id="cb1-69">dtable[[<span class="st">"dependencies"</span>]] &lt;-<span class="st"> </span><span class="kw">c</span>(dtable[[<span class="st">"dependencies"</span>]], <span class="kw">list</span>(htmlDep))</span>
<span id="cb1-70">dtable</span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 11 Feb 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/DTselect2Filters.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Gyrotriangle (aka hyperbolic triangle) with moving colors</title>
      <link>https://laustep.github.io/stlahblog/posts/gyrotriangle.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        My package <a href="https://github.com/stla/gyro">gyro</a> has been
        freshly released on CRAN. I implemented the ideas given in
        <a
          href="https://laustep.github.io/stlahblog/posts/hyperbolicPolyhedra.html"
          >this blog post</a
        >
        in this package. It has a short
        <a
          href="https://cran.r-project.org/web/packages/gyro/vignettes/getstarted.html"
          >vignette</a
        >.
      </p>
      <p>
        The <code>gyrodemos</code> function provides some examples. But none of
        them explains how I did the moving colors on this polyhedra that you can
        see on the Github repo:
      </p>
      <p>
        <img
          src="https://raw.githubusercontent.com/stla/gyro/main/inst/images/icosahedron_dynamic_colors.gif"
        />
      </p>
      <p>
        So I will explain here. In fact, this is similar to the method I
        presented
        <a
          href="https://laustep.github.io/stlahblog/posts/PyVistaDynamicCmap.html"
          >here</a
        >
        for <strong>PyVista</strong> and
        <a
          href="https://laustep.github.io/stlahblog/posts/HopfTorusDynamicColors.html"
          >here</a
        >
        for <strong>rgl</strong>.
      </p>
      <p>
        The <code>gyrotriangle</code> function of the
        <strong>gyro</strong> package has a <code>palette</code> argument, in
        which the user provides a vector of colors. Here is an example:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(gyro)</span>
<span id="cb1-2"><span class="kw">library</span>(rgl)</span>
<span id="cb1-3"></span>
<span id="cb1-4">s &lt;-<span class="st"> </span><span class="fl">0.6</span> <span class="co"># hyperbolic curvature</span></span>
<span id="cb1-5">A &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">0</span>); B &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">0</span>); C &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>)</span>
<span id="cb1-6">ABC &lt;-<span class="st"> </span><span class="kw">gyrotriangle</span>(</span>
<span id="cb1-7">  A, B, C, <span class="dt">s =</span> s,</span>
<span id="cb1-8">  <span class="dt">palette =</span> <span class="kw">hcl.colors</span>(<span class="dt">n =</span> <span class="dv">256</span>, <span class="dt">palette =</span> <span class="st">"Berlin"</span>)</span>
<span id="cb1-9">)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb1-12"><span class="kw">material3d</span>(<span class="dt">lit =</span> <span class="ot">FALSE</span>)</span>
<span id="cb1-13"><span class="kw">view3d</span>(<span class="dv">10</span>, <span class="dv">40</span>, <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb1-14"><span class="kw">shade3d</span>(ABC)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gyrotriangle.png"
        />
      </p>
      <p>
        Under the hood, the <code>gyrotriangle</code> function uses the
        <a
          href="https://www.rdocumentation.org/packages/grDevices/versions/3.6.2/topics/colorRamp"
          >colorRamp</a
        >
        with the vector of colors passed to the <code>palette</code> argument.
        This creates a function, let’s call it <code>fpalette</code>, that
        assigns a color to each number in the interval
        <span class="math inline">\([0, 1]\)</span>. Then,
        <code>gyrotriangle</code> calculates all the distances from the points
        in the mesh forming the triangle to the gyrocentroid of the triangle.
        Finally, it linearly normalizes these distances to the interval
        <span class="math inline">\([0, 1]\)</span>, and it applies the
        <code>fpalette</code> function to the normalized distances.
      </p>
      <p>
        Now, the <code>gyrotriangle</code> function has a
        <code>g</code> argument. This is the key to make the moving colors. This
        argument <code>g</code> must be a function from
        <span class="math inline">\([0, 1]\)</span> to
        <span class="math inline">\([0, 1]\)</span>, by default it is the
        <code>identity</code> function, and <code>fpalette</code> is actually
        applied to the normalized distances transformed by <code>g</code>.
      </p>
      <p>So, here is how we can do to get some moving colors:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">shift_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dt">length.out =</span> <span class="dv">61</span>)[<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb2-2"><span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_along</span>(shift_)){</span>
<span id="cb2-3">  ABC &lt;-<span class="st"> </span><span class="kw">gyrotriangle</span>(</span>
<span id="cb2-4">    A, B, C, s,</span>
<span id="cb2-5">    <span class="dt">palette =</span> <span class="kw">hcl.colors</span>(<span class="dt">n =</span> <span class="dv">256</span>, <span class="dt">palette =</span> <span class="st">"Berlin"</span>), </span>
<span id="cb2-6">    <span class="dt">g =</span> <span class="cf">function</span>(u) (<span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>pi<span class="op">*</span>(u <span class="op">-</span><span class="st"> </span>shift_[i])) <span class="op">+</span><span class="st"> </span><span class="dv">1</span>) <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb2-7">  )</span>
<span id="cb2-8">  <span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb2-9">  <span class="kw">material3d</span>(<span class="dt">lit =</span> <span class="ot">FALSE</span>)</span>
<span id="cb2-10">  <span class="kw">view3d</span>(<span class="dv">10</span>, <span class="dv">40</span>, <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb2-11">  <span class="kw">shade3d</span>(ABC)</span>
<span id="cb2-12">  <span class="kw">rgl.snapshot</span>(<span class="kw">sprintf</span>(<span class="st">"snapshot%03d"</span>, i))</span>
<span id="cb2-13">  <span class="kw">close3d</span>()</span>
<span id="cb2-14">}</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="kw">library</span>(gifski)</span>
<span id="cb2-17">pngs &lt;-<span class="st"> </span><span class="kw">list.files</span>(<span class="dt">pattern =</span> <span class="st">"^snapshot"</span>)</span>
<span id="cb2-18"><span class="kw">gifski</span>(</span>
<span id="cb2-19">  pngs,</span>
<span id="cb2-20">  <span class="dt">gif_file =</span> <span class="st">"gyrotriangle.gif"</span>,</span>
<span id="cb2-21">  <span class="dt">width =</span> <span class="dv">512</span>,</span>
<span id="cb2-22">  <span class="dt">height =</span> <span class="dv">512</span>,</span>
<span id="cb2-23">  <span class="dt">delay =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">8</span></span>
<span id="cb2-24">)</span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="kw">file.remove</span>(pngs)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gyrotriangle.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 05 Feb 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/gyrotriangle.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Some simple RStudio addins</title>
      <link>https://laustep.github.io/stlahblog/posts/rstudioAddins.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In this blog post I introduce three small
        <strong>RStudio</strong> addins I did.
      </p>
      <h2 id="bracketify">‘bracketify’</h2>
      <p>
        I prefer subsetting with the double brackets than with the dollar in R,
        because this is more readable in <strong>RStudio</strong> thanks to the
        syntax highlighting. That’s why I did
        <a href="https://github.com/stla/bracketify">bracketify</a>. This addin
        replaces all occurrences of <code>foo$bar</code> with
        <code>foo[["bar"]]</code>, either in a whole file or only in the current
        selection.
      </p>
      <p>
        <img
          src="https://raw.githubusercontent.com/stla/bracketify/main/inst/screenshots/bracketify.gif"
        />
      </p>
      <p>
        To use carefully: if you have some dollar symbols in your code which are
        not used for subsetting (e.g. in a regular expression), they can be
        transformed by <strong>bracketify</strong>.
      </p>
      <h2 id="pasteascomment">‘pasteAsComment’</h2>
      <p>
        Originally, I made
        <a href="https://github.com/stla/pasteAsComment">pasteAsComment</a> to
        paste the content of the clipboard as a comment:
      </p>
      <p>
        <img
          src="https://raw.githubusercontent.com/stla/pasteAsComment/main/inst/screenshots/pasteAsComment.gif"
          style="width: 75%"
        />
      </p>
      <p>
        I updated this package today. Now it also allows to paste the content of
        the clipboard as <strong>roxygen</strong> lines. This is particularly
        useful to write some code in the <code>@examples</code> field:
      </p>
      <p>
        <img
          src="https://raw.githubusercontent.com/stla/pasteAsComment/main/inst/screenshots/pasteAsRoxygen.gif"
          style="width: 75%"
        />
      </p>
      <h2 id="jsconsole">‘JSconsole’</h2>
      <p>
        <a href="https://github.com/stla/JSconsole">JSconsole</a> is available
        on CRAN. This addin allows to send some selected JavaScript code to the
        V8 console. This is useful when you want to test a function.
      </p>
      <p>
        <img
          src="https://raw.githubusercontent.com/stla/JSconsole/master/inst/screenshots/JSconsole.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 03 Feb 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/rstudioAddins.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Hopf torus with dynamic colors</title>
      <link>https://laustep.github.io/stlahblog/posts/HopfTorusDynamicColors.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In a
        <a
          href="https://laustep.github.io/stlahblog/posts/PyVistaDynamicCmap.html"
          >recent post</a
        >
        I explained how to decorate a surface with moving colors with the Python
        library <strong>PyVista</strong>. Here I expose this method for the R
        package <strong>rgl</strong>.
      </p>
      <p>
        I will take a Hopf torus with fives lobes for the illustration. The
        following R function is a slight modification of the
        <code>parametric3d</code> function of the
        <strong>misc3d</strong> package. It is more efficient for the Hopf torus
        parameterization and it returns a <strong>rgl</strong> object of class
        <code>mesh3d</code>.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(misc3d)</span>
<span id="cb1-2"><span class="kw">library</span>(rgl)</span>
<span id="cb1-3"></span>
<span id="cb1-4">parametricMesh3d &lt;-<span class="st"> </span><span class="cf">function</span>(</span>
<span id="cb1-5">  Fxyz, umin, umax, vmin, vmax, nu, nv </span>
<span id="cb1-6">){</span>
<span id="cb1-7">  u &lt;-<span class="st"> </span><span class="kw">seq</span>(umin, umax, <span class="dt">length.out =</span> nu)</span>
<span id="cb1-8">  v &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, vmax, <span class="dt">length.out =</span> nv)</span>
<span id="cb1-9">  tg &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">expandTriangleGrid</span>(u, v)</span>
<span id="cb1-10">  f &lt;-<span class="st"> </span><span class="cf">function</span>(uv) <span class="kw">Fxyz</span>(uv[, 1L], uv[, 2L])</span>
<span id="cb1-11">  v1 &lt;-<span class="st"> </span><span class="kw">f</span>(tg<span class="op">$</span>v1)</span>
<span id="cb1-12">  v2 &lt;-<span class="st"> </span><span class="kw">f</span>(tg<span class="op">$</span>v2)</span>
<span id="cb1-13">  v3 &lt;-<span class="st"> </span><span class="kw">f</span>(tg<span class="op">$</span>v3)</span>
<span id="cb1-14">  tris &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(v1, v2, v3)</span>
<span id="cb1-15">  mesh0 &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(tris)</span>
<span id="cb1-16">  <span class="kw">addNormals</span>(</span>
<span id="cb1-17">    <span class="kw">tmesh3d</span>(</span>
<span id="cb1-18">      <span class="dt">vertices =</span> mesh0<span class="op">$</span>vb,</span>
<span id="cb1-19">      <span class="dt">indices  =</span> mesh0<span class="op">$</span>ib</span>
<span id="cb1-20">    )</span>
<span id="cb1-21">  )</span>
<span id="cb1-22">}</span></code></pre>
      </div>
      <p>The R function below is the parameterization of the Hopf torus.</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">HTxyz &lt;-<span class="st"> </span><span class="cf">function</span>(u, v, <span class="dt">nlobes =</span> <span class="dv">5</span>, <span class="dt">A =</span> <span class="fl">0.38</span>){</span>
<span id="cb2-2">  C &lt;-<span class="st"> </span>pi<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>(pi<span class="op">/</span><span class="dv">2</span><span class="op">-</span>A)<span class="op">*</span><span class="kw">cos</span>(u<span class="op">*</span>nlobes)</span>
<span id="cb2-3">  sinC &lt;-<span class="st"> </span><span class="kw">sin</span>(C)</span>
<span id="cb2-4">  D &lt;-<span class="st"> </span>u <span class="op">+</span><span class="st"> </span>A<span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>u<span class="op">*</span>nlobes)</span>
<span id="cb2-5">  p1 &lt;-<span class="st"> </span><span class="kw">cos</span>(C) <span class="op">+</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb2-6">  p2 &lt;-<span class="st"> </span>sinC <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(D)</span>
<span id="cb2-7">  p3 &lt;-<span class="st"> </span>sinC <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(D)</span>
<span id="cb2-8">  cos_v &lt;-<span class="st"> </span><span class="kw">cos</span>(v)</span>
<span id="cb2-9">  sin_v &lt;-<span class="st"> </span><span class="kw">sin</span>(v)</span>
<span id="cb2-10">  x1 &lt;-<span class="st"> </span>cos_v<span class="op">*</span>p3 <span class="op">+</span><span class="st"> </span>sin_v<span class="op">*</span>p2</span>
<span id="cb2-11">  x2 &lt;-<span class="st"> </span>cos_v<span class="op">*</span>p2 <span class="op">-</span><span class="st"> </span>sin_v<span class="op">*</span>p3</span>
<span id="cb2-12">  x3 &lt;-<span class="st"> </span>sin_v <span class="op">*</span><span class="st"> </span>p1</span>
<span id="cb2-13">  xden &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">*</span>p1) <span class="op">-</span><span class="st"> </span>cos_v<span class="op">*</span>p1</span>
<span id="cb2-14">  <span class="kw">cbind</span>(x1<span class="op">/</span>xden, x2<span class="op">/</span>xden, x3<span class="op">/</span>xden)</span>
<span id="cb2-15">}</span></code></pre>
      </div>
      <p>Let’s make the Hopf torus mesh now.</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">mesh &lt;-<span class="st"> </span><span class="kw">parametricMesh3d</span>(</span>
<span id="cb3-2">  HTxyz, <span class="dt">umin =</span> <span class="dv">0</span>, <span class="dt">umax =</span> <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">vmin =</span> <span class="op">-</span>pi, <span class="dt">vmax =</span> pi, <span class="dt">nu =</span> <span class="dv">600</span>, <span class="dt">nv =</span> <span class="dv">400</span></span>
<span id="cb3-3">)</span></code></pre>
      </div>
      <p>
        We will assign a color to each point on the surface, according to the
        distance from the point to the origin. We calculate these distances
        below, and we linearly map them to the interval
        <span class="math inline">\([0, 2\pi]\)</span>.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">d &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">apply</span>(mesh<span class="op">$</span>vb[<span class="op">-</span>4L, ], 2L, crossprod))</span>
<span id="cb4-2">d &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span>pi <span class="op">*</span><span class="st"> </span>(d <span class="op">-</span><span class="st"> </span><span class="kw">min</span>(d)) <span class="op">/</span><span class="st"> </span><span class="kw">diff</span>(<span class="kw">range</span>(d))</span></code></pre>
      </div>
      <p>
        Now we introduce a color palette function. The
        <strong>trekcolors</strong> package has nice color palettes. I’m taking
        the <code>dominion</code> palette.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">library</span>(trekcolors)</span>
<span id="cb5-2">fpalette &lt;-<span class="st"> </span><span class="kw">colorRamp</span>(</span>
<span id="cb5-3">  <span class="kw">trek_pal</span>(<span class="st">"dominion"</span>), <span class="dt">bias =</span> <span class="fl">0.6</span>, <span class="dt">interpolate =</span> <span class="st">"spline"</span></span>
<span id="cb5-4">)</span></code></pre>
      </div>
      <p>
        This function <code>fpalette</code> assign a color, given by its RGB
        values, to each number between
        <span class="math inline">\(0\)</span> and
        <span class="math inline">\(1\)</span>. As in Python, we will calculate
        <span class="math inline">\(\sin(d -t)\)</span> to move the colors, with
        <span class="math inline">\(t\)</span> varying from
        <span class="math inline">\(0\)</span> to
        <span class="math inline">\(2\pi\)</span>. The sine function takes its
        values in <span class="math inline">\([-1, 1]\)</span> so we will map
        this interval to <span class="math inline">\([0,1]\)</span> with the
        affine function
        <span class="math inline">\(x \mapsto \frac{x+1}{2}\)</span> in order to
        apply the <code>fpalette</code> function.
      </p>
      <p>
        We will also rotate the Hopf torus around the
        <span class="math inline">\(z\)</span>-axis. By the symmetry of the Hopf
        torus, it suffices to make the rotation with an angle varying from
        <span class="math inline">\(0\)</span> to
        <span class="math inline">\(2\pi/5\)</span>.
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> <span class="dv">73</span>)[<span class="op">-</span>1L]</span>
<span id="cb6-2">angle_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">5</span>, <span class="dt">length.out =</span> <span class="dv">73</span>)[<span class="op">-</span>1L]</span>
<span id="cb6-3"><span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_along</span>(t_)){</span>
<span id="cb6-4">  RGB &lt;-<span class="st"> </span><span class="kw">fpalette</span>( (<span class="kw">sin</span>(d<span class="op">-</span>t_[i])<span class="op">+</span><span class="dv">1</span>)<span class="op">/</span><span class="dv">2</span> )</span>
<span id="cb6-5">  mesh[[<span class="st">"material"</span>]] &lt;-<span class="st"> </span></span>
<span id="cb6-6"><span class="st">    </span><span class="kw">list</span>(<span class="dt">color =</span> <span class="kw">rgb</span>(RGB[, 1L], RGB[, 2L], RGB[, 3L], <span class="dt">maxColorValue =</span> <span class="dv">255</span>))</span>
<span id="cb6-7">  rmesh &lt;-<span class="st"> </span><span class="kw">rotate3d</span>(mesh, angle_[i], <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>)</span>
<span id="cb6-8">  <span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb6-9">  <span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.55</span>)</span>
<span id="cb6-10">  <span class="kw">spheres3d</span>(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dt">radius =</span> <span class="dv">11</span>, <span class="dt">color =</span> <span class="st">"white"</span>, <span class="dt">alpha =</span> <span class="dv">0</span>) <span class="co"># to fix the view</span></span>
<span id="cb6-11">  <span class="kw">shade3d</span>(rmesh)</span>
<span id="cb6-12">  <span class="kw">rgl.snapshot</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, i))</span>
<span id="cb6-13">  <span class="kw">close3d</span>()</span>
<span id="cb6-14">}</span></code></pre>
      </div>
      <p>
        This code generates a series of <code>png</code> files
        <code>pic001.png</code>, …, <code>pic072.png</code>. Using
        <strong>ImageMagick</strong> or <strong>gifski</strong>, we obtain this
        <code>gif</code> animation from these files:
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HTdominion.gif"
        />
      </p>
      <p>
        Very well. But these are not my favorite colors. And I prefer the Hopf
        torus with three lobes. Below it is, decorated with the
        <code>klingon</code> color palette of <strong>trekcolors</strong>; I
        prefer this one.
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HTklingon2.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 29 Jan 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HopfTorusDynamicColors.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>'gifski' as a bash command using R</title>
      <link>https://laustep.github.io/stlahblog/posts/gifskiBash.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        The <a href="https://gif.ski/">gifski</a> command-line utility is a
        great tool to make a GIF animation from a series of
        <code>png</code> files. At my work I’m using a laptop with Windows 10
        and I don’t have admin rights. I don’t know how to install
        <strong>gifski</strong> on this laptop.
      </p>
      <p>
        But <strong>gifski</strong> is also the name of a R package which wraps
        the <strong>gifski</strong> command-line utility, and this package can
        be installed without difficulty. So I used this package and the
        <strong>optparse</strong> package to make my own bash command
        <strong>gifski</strong>, which is more convenient than the package.
      </p>
      <p>Here is the script:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">suppressPackageStartupMessages</span>(<span class="kw">library</span>(<span class="st">"optparse"</span>))</span>
<span id="cb1-2"><span class="kw">suppressPackageStartupMessages</span>(<span class="kw">library</span>(<span class="st">"gifski"</span>))</span>
<span id="cb1-3"></span>
<span id="cb1-4">option_list &lt;-<span class="st"> </span><span class="kw">list</span>( </span>
<span id="cb1-5">  <span class="kw">make_option</span>(</span>
<span id="cb1-6">    <span class="st">"--frames"</span>, <span class="dt">type =</span> <span class="st">"character"</span>, </span>
<span id="cb1-7">    <span class="dt">help =</span> <span class="st">"png files given by a glob (e.g. pic*.png)"</span></span>
<span id="cb1-8">  ),</span>
<span id="cb1-9">  <span class="kw">make_option</span>(</span>
<span id="cb1-10">    <span class="st">"--fps"</span>, <span class="dt">type =</span> <span class="st">"integer"</span>, <span class="dt">default =</span> 20L,</span>
<span id="cb1-11">    <span class="dt">help =</span> <span class="st">"frames per second (default 20)"</span></span>
<span id="cb1-12">  ),</span>
<span id="cb1-13">  <span class="kw">make_option</span>(</span>
<span id="cb1-14">    <span class="kw">c</span>(<span class="st">"-l"</span>, <span class="st">"--loop"</span>), <span class="dt">type =</span> <span class="st">"integer"</span>, <span class="dt">default =</span> 0L, </span>
<span id="cb1-15">    <span class="dt">help =</span> <span class="st">"number of loops, 0 for infinite (the default)"</span>,</span>
<span id="cb1-16">    <span class="dt">metavar =</span> <span class="st">"number"</span></span>
<span id="cb1-17">  ),</span>
<span id="cb1-18">  <span class="kw">make_option</span>(</span>
<span id="cb1-19">    <span class="kw">c</span>(<span class="st">"-s"</span>, <span class="st">"--size"</span>), <span class="dt">type =</span> <span class="st">"character"</span>, <span class="dt">default =</span> <span class="st">"512x512"</span>, </span>
<span id="cb1-20">    <span class="dt">help =</span> <span class="kw">paste0</span>(</span>
<span id="cb1-21">      <span class="st">"size of the gif given in the form WxH where W is the width in pixels "</span>, </span>
<span id="cb1-22">      <span class="st">"and H is the height in pixels (default 512x512)"</span></span>
<span id="cb1-23">    ),</span>
<span id="cb1-24">    <span class="dt">metavar =</span> <span class="st">"WxH"</span></span>
<span id="cb1-25">  ),</span>
<span id="cb1-26">  <span class="kw">make_option</span>(</span>
<span id="cb1-27">    <span class="kw">c</span>(<span class="st">"-b"</span>, <span class="st">"--backward"</span>), <span class="dt">action =</span> <span class="st">"store_true"</span>, <span class="dt">default =</span> <span class="ot">FALSE</span>, </span>
<span id="cb1-28">    <span class="dt">help =</span> <span class="st">"loop forward and backward"</span></span>
<span id="cb1-29">  ),</span>
<span id="cb1-30">  <span class="kw">make_option</span>(</span>
<span id="cb1-31">    <span class="kw">c</span>(<span class="st">"-o"</span>, <span class="st">"--output"</span>), <span class="dt">type =</span> <span class="st">"character"</span>, <span class="dt">default =</span> <span class="st">"animation.gif"</span>, </span>
<span id="cb1-32">    <span class="dt">help =</span> <span class="st">"output gif file (default animation.gif)"</span>, </span>
<span id="cb1-33">    <span class="dt">metavar =</span> <span class="st">"output.gif"</span></span>
<span id="cb1-34">  )</span>
<span id="cb1-35">)</span>
<span id="cb1-36"></span>
<span id="cb1-37">opt &lt;-<span class="st"> </span><span class="kw">parse_args</span>(<span class="kw">OptionParser</span>(</span>
<span id="cb1-38">  <span class="dt">option_list =</span> option_list, <span class="dt">prog =</span> <span class="st">"gifski"</span></span>
<span id="cb1-39">))</span>
<span id="cb1-40"></span>
<span id="cb1-41"><span class="co"># check options are correct</span></span>
<span id="cb1-42">size_ok &lt;-<span class="st"> </span><span class="kw">grepl</span>(<span class="st">"^</span><span class="ch">\\</span><span class="st">d.*x</span><span class="ch">\\</span><span class="st">d.*$"</span>, opt<span class="op">$</span>size)</span>
<span id="cb1-43"><span class="cf">if</span>(<span class="op">!</span>size_ok)</span>
<span id="cb1-44">  <span class="kw">stop</span>(<span class="st">"Invalid 'size' option."</span>)</span>
<span id="cb1-45"><span class="cf">if</span>(opt<span class="op">$</span>fps <span class="op">&lt;=</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-46">  <span class="kw">stop</span>(<span class="st">"Invalid 'fps' option."</span>)</span>
<span id="cb1-47"><span class="cf">if</span>(opt<span class="op">$</span>loop <span class="op">&lt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-48">  <span class="kw">stop</span>(<span class="st">"Invalid 'loop' option."</span>)</span>
<span id="cb1-49">png_files &lt;-<span class="st"> </span><span class="kw">Sys.glob</span>(opt<span class="op">$</span>frames)</span>
<span id="cb1-50"><span class="cf">if</span>(<span class="kw">length</span>(png_files) <span class="op">==</span><span class="st"> </span>0L)</span>
<span id="cb1-51">  <span class="kw">stop</span>(<span class="st">"Invalid 'frames' option."</span>)</span>
<span id="cb1-52"></span>
<span id="cb1-53"><span class="co"># if the user chooses the 'backward' option we duplicate the files </span></span>
<span id="cb1-54"><span class="co">#   in a temporary directory</span></span>
<span id="cb1-55"><span class="cf">if</span>(opt<span class="op">$</span>backward){</span>
<span id="cb1-56">  npngs &lt;-<span class="st"> </span>2L <span class="op">*</span><span class="st"> </span><span class="kw">length</span>(png_files)</span>
<span id="cb1-57">  fmt &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="st">"pic%0"</span>, <span class="kw">floor</span>(<span class="kw">log10</span>(npngs) <span class="op">+</span><span class="st"> </span><span class="dv">1</span>), <span class="st">"d.png"</span>)</span>
<span id="cb1-58">  new_png_files &lt;-<span class="st"> </span><span class="kw">file.path</span>(<span class="kw">tempdir</span>(), <span class="kw">sprintf</span>(fmt, 1L<span class="op">:</span>npngs))</span>
<span id="cb1-59">  <span class="kw">file.copy</span>(<span class="kw">c</span>(png_files, <span class="kw">rev</span>(png_files)), new_png_files)</span>
<span id="cb1-60">  png_files &lt;-<span class="st"> </span>new_png_files</span>
<span id="cb1-61">}</span>
<span id="cb1-62"></span>
<span id="cb1-63"><span class="co"># get width and height</span></span>
<span id="cb1-64">wh &lt;-<span class="st"> </span><span class="kw">as.numeric</span>(<span class="kw">strsplit</span>(opt<span class="op">$</span>size, <span class="st">"x"</span>)[[1L]])</span>
<span id="cb1-65"></span>
<span id="cb1-66"><span class="co"># a function to avoid some printed messages</span></span>
<span id="cb1-67">quiet &lt;-<span class="st"> </span><span class="cf">function</span>(x) {</span>
<span id="cb1-68">  <span class="kw">sink</span>(<span class="kw">tempfile</span>())</span>
<span id="cb1-69">  <span class="kw">on.exit</span>(<span class="kw">sink</span>())</span>
<span id="cb1-70">  <span class="kw">invisible</span>(<span class="kw">force</span>(x))</span>
<span id="cb1-71">}</span>
<span id="cb1-72"></span>
<span id="cb1-73"><span class="co"># run gifski</span></span>
<span id="cb1-74"><span class="kw">quiet</span>(<span class="kw">gifski</span>(</span>
<span id="cb1-75">  <span class="dt">png_files =</span> png_files,</span>
<span id="cb1-76">  <span class="dt">gif_file =</span> opt<span class="op">$</span>output,</span>
<span id="cb1-77">  <span class="dt">width =</span> wh[1L],</span>
<span id="cb1-78">  <span class="dt">height =</span> wh[2L],</span>
<span id="cb1-79">  <span class="dt">delay =</span> <span class="dv">1</span><span class="op">/</span>opt<span class="op">$</span>fps,</span>
<span id="cb1-80">  <span class="dt">loop =</span> <span class="kw">ifelse</span>(opt<span class="op">$</span>loop <span class="op">==</span><span class="st"> </span>0L, <span class="ot">TRUE</span>, opt<span class="op">$</span>loop)</span>
<span id="cb1-81">))</span>
<span id="cb1-82"></span>
<span id="cb1-83"><span class="kw">cat</span>(<span class="st">"Output written to"</span>, opt<span class="op">$</span>output)</span></code></pre>
      </div>
      <p>
        Save this script where you want, say under the name
        <strong>gifski.R</strong>.
      </p>
      <p>
        Now we make a <code>bat</code> file, say <strong>gifski.bat</strong>,
        which will run this script:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode bash"
        ><code class="sourceCode bash"><span id="cb2-1"><span class="ex">@echo</span> off</span>
<span id="cb2-2"><span class="ex">echo.</span></span>
<span id="cb2-3"><span class="ex">C</span>:\path\to\Rscript.exe C:\path\to\gifski.R %*</span></code></pre>
      </div>
      <p>
        That’s all. Put this <code>bat</code> file in a folder available in the
        PATH environment variable and you can use the bash command
        <strong>gifski</strong>. Here is the help which is displayed by the
        command <code>gifski --help</code>:
      </p>
      <pre><code>Usage: gifski [options]


Options:
        --frames=FRAMES
                png files given by a glob (e.g. pic*.png)

        --fps=FPS
                frames per second (default 20)

        -l NUMBER, --loop=NUMBER
                number of loops, 0 for infinite (the default)

        -s WXH, --size=WXH
                size of the gif given in the form WxH where W is the width in pixels 
                and H is the height in pixels (default 512x512)

        -b, --backward
                loop forward and backward

        -o OUTPUT.GIF, --output=OUTPUT.GIF
                output gif file (default animation.gif)

        -h, --help
                Show this help message and exit</code></pre>
      <p>
        Note that there is an additional feature as compared to the original
        <strong>gifski</strong> tool: the <code>--backward</code> option, which
        allows to loop forward and backward.
      </p>
      <p>
        <img
          src="https://github.com/stla/PyVistaMiscellanous/raw/main/C8surface_metamorphosis.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 28 Jan 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/gifskiBash.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Funny 3D Voronoï diagrams</title>
      <link>https://laustep.github.io/stlahblog/posts/Voronoi_tessellation.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Four years ago I wrapped the C library <strong>Qhull</strong> in a
        <a href="https://github.com/stla/qhull">Haskell package</a>. Thanks to
        <strong>Qhull</strong>, this package can do some convex hulls and some
        Delaunay tessellations. The <strong>Qhull</strong> library also allows
        to do some Voronoï tessellations, but I never understood how that works.
        So I programmed the Voronoï tessellation in Haskell, by deriving it from
        the Delaunay tessellation.
      </p>
      <p>
        Recently, I released the R package <strong>tessellation</strong>. It
        uses the C code of my Haskell package to contruct Delaunay
        tessellations, and I programmed the Voronoï tessellation in R.
      </p>
      <p>
        I discovered something interesting with my Haskell package: take a
        classical polyhedron (e.g. a tetrahedron, or a cube), enclose it with
        two or three circles (I mean with some points on the circles), and do
        the Voronoï diagram of all these points (the vertices of the polyhedron
        and the points on the circles). Then you get a funny Voronoï diagram.
        You can see some examples on
        <a href="https://stla.github.io/tessellation/"
          >the website I made for the <strong>tessellation</strong> package</a
        >
        (thanks to the <strong>pkgdown</strong> package).
      </p>
      <p>
        Let’s make another example here. This time, I take a cuboctahedron and I
        enclose it with three circles:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(rgl) <span class="co"># provides `cuboctahedron3d()`</span></span>
<span id="cb1-2">cuboctahedron_vertices &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">cuboctahedron3d</span>()<span class="op">$</span>vb[<span class="op">-</span>4L, ])</span>
<span id="cb1-3">xi_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> <span class="dv">91</span>)[<span class="op">-</span>1L]</span>
<span id="cb1-4">R &lt;-<span class="st"> </span><span class="fl">1.5</span></span>
<span id="cb1-5">circle1 &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">vapply</span>(xi_, <span class="cf">function</span>(xi) R<span class="op">*</span><span class="kw">c</span>(<span class="kw">cos</span>(xi), <span class="kw">sin</span>(xi), <span class="dv">0</span>), <span class="kw">numeric</span>(3L)))</span>
<span id="cb1-6">circle2 &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">vapply</span>(xi_, <span class="cf">function</span>(xi) R<span class="op">*</span><span class="kw">c</span>(<span class="kw">cos</span>(xi), <span class="dv">0</span>, <span class="kw">sin</span>(xi)), <span class="kw">numeric</span>(3L)))</span>
<span id="cb1-7">circle3 &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">vapply</span>(xi_, <span class="cf">function</span>(xi) R<span class="op">*</span><span class="kw">c</span>(<span class="dv">0</span>, <span class="kw">cos</span>(xi), <span class="kw">sin</span>(xi)), <span class="kw">numeric</span>(3L)))</span>
<span id="cb1-8">enclosedCuboctahedron &lt;-<span class="st"> </span></span>
<span id="cb1-9"><span class="st">  </span><span class="kw">rbind</span>(cuboctahedron_vertices, circle1, circle2, circle3)</span></code></pre>
      </div>
      <p>Here is the picture:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb2-2"><span class="kw">view3d</span>(<span class="dv">20</span>, <span class="dt">zoom =</span> <span class="fl">0.65</span>)</span>
<span id="cb2-3"><span class="kw">shade3d</span>(<span class="kw">cuboctahedron3d</span>(), <span class="dt">color =</span> <span class="st">"darkorange"</span>, <span class="dt">shininess =</span> <span class="dv">10</span>)</span>
<span id="cb2-4"><span class="kw">wire3d</span>(<span class="kw">cuboctahedron3d</span>(), <span class="dt">color =</span> <span class="st">"darkslategray4"</span>, <span class="dt">lwd =</span> <span class="dv">4</span>)</span>
<span id="cb2-5"><span class="kw">spheres3d</span>(<span class="kw">rbind</span>(circle1, circle2, circle3), <span class="dt">radius =</span> <span class="fl">0.04</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/enclosedCuboctahedron.png"
        />
      </p>
      <p>
        Now let’s make the Voronoï diagram with the
        <strong>tessellation</strong> package:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(tessellation)</span>
<span id="cb3-2">del &lt;-<span class="st"> </span><span class="kw">delaunay</span>(enclosedCuboctahedron, <span class="dt">degenerate =</span> <span class="ot">TRUE</span>)</span>
<span id="cb3-3">v &lt;-<span class="st"> </span><span class="kw">voronoi</span>(del)</span>
<span id="cb3-4"><span class="co">## Voronoï diagram with twelve bounded cells.</span></span></code></pre>
      </div>
      <p>
        I have not checked whether the option <code>degenerate = TRUE</code> is
        necessary, but it is often necessary in order to get a correct Voronoï
        diagram, and I never understood why. Now let’s plot the Voronoï diagram:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(paletteer) <span class="co"># provides many color palettes</span></span>
<span id="cb4-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb4-3"><span class="kw">bg3d</span>(<span class="st">"palegoldenrod"</span>)</span>
<span id="cb4-4"><span class="kw">plotVoronoiDiagram</span>(v, <span class="dt">colors =</span> <span class="kw">paletteer_c</span>(<span class="st">"grDevices::Dark 3"</span>, 12L))</span></code></pre>
      </div>
      <p>I animated it. Here is the result:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/voronoi_enclosed_cuboctahedron.gif"
        />
      </p>
      <p>
        This is not my favorite one (I prefer the one derived from the cube,
        that you can see on the <strong>tessellation</strong> website), but
        nevertheless it is nice.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 19 Jan 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/Voronoi_tessellation.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Surface reconstruction with R(CGAL)</title>
      <link>https://laustep.github.io/stlahblog/posts/SurfaceReconstruction.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Eric Dunipace recently released a new package on CRAN:
        <strong>RcppCGAL</strong>. It allows to link to the C++ library
        <strong>CGAL</strong> in <strong>Rcpp</strong>. The
        <strong>CGAL</strong> library provides an extensive set of algorithms
        for computational geometry.
      </p>
      <p>
        I made a package based on <strong>RcppCGAL</strong>, which I called
        <strong>RCGAL</strong>. Unfortunately, R CMD CHECK throws some warnings
        on Windows, so the package is not acceptable by CRAN, until this issue
        will be resolved. To install it:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">remotes<span class="op">::</span><span class="kw">install_github</span>(</span>
<span id="cb1-2">  <span class="st">"stla/RCGAL"</span>, <span class="dt">dependencies =</span> <span class="ot">TRUE</span>, <span class="dt">build_opts =</span> <span class="st">"--no-multiarch"</span></span>
<span id="cb1-3">)</span></code></pre>
      </div>
      <p>
        The compilation fails on Windows for R 32-bits, that is why I set the
        option <code>build_opts = "--no-multiarch"</code>. Fortunately, CRAN
        will soon abandon the 32-bits version of R.
      </p>
      <p>
        The <strong>RCGAL</strong> package allows to do convex hulls and
        Delaunay tessellations in 2D or 3D, and provides two techniques of
        surface reconstruction: the
        <em>advanced front surface reconstruction</em> and the
        <em>Poisson surface reconstruction</em>. That is
        <strong>CGAL</strong> which does almost all the job, but the package
        also resorts to pure R programming.
      </p>
      <p>Here we will have a look at the surface reconstruction methods.</p>
      <h1 id="the-solid-möbius-strip-construction-sampling-reconstruction">
        The solid Möbius strip: construction, sampling, reconstruction
      </h1>
      <p>
        The <em>solid Möbius strip</em> is an isosurface I found in
        <a
          href="http://data.imaginary-exhibition.com/IMAGINARY-Moebiusband-Stephan-Klaus.pdf"
          >this paper</a
        >, and I like it.
      </p>
      <p>
        Here is the code I use to construct a <strong>rgl</strong> mesh of the
        solid Möbius strip:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># solid Möbius strip: f(x,y,z)=0</span></span>
<span id="cb2-2">f &lt;-<span class="st"> </span><span class="cf">function</span>(x, y, z, <span class="dt">a =</span> <span class="fl">0.4</span>, <span class="dt">b =</span> <span class="fl">0.1</span>){</span>
<span id="cb2-3">  ((x<span class="op">*</span>x<span class="op">+</span>y<span class="op">*</span>y<span class="op">+</span><span class="dv">1</span>)<span class="op">*</span>(a<span class="op">*</span>x<span class="op">*</span>x<span class="op">+</span>b<span class="op">*</span>y<span class="op">*</span>y)<span class="op">+</span>z<span class="op">*</span>z<span class="op">*</span>(b<span class="op">*</span>x<span class="op">*</span>x<span class="op">+</span>a<span class="op">*</span>y<span class="op">*</span>y)<span class="op">-</span><span class="dv">2</span><span class="op">*</span>(a<span class="op">-</span>b)<span class="op">*</span>x<span class="op">*</span>y<span class="op">*</span>z<span class="op">-</span>a<span class="op">*</span>b<span class="op">*</span>(x<span class="op">*</span>x<span class="op">+</span>y<span class="op">*</span>y))<span class="op">^</span><span class="dv">2</span> <span class="op">-</span></span>
<span id="cb2-4"><span class="st">    </span><span class="dv">4</span><span class="op">*</span>(x<span class="op">*</span>x<span class="op">+</span>y<span class="op">*</span>y)<span class="op">*</span>(a<span class="op">*</span>x<span class="op">*</span>x<span class="op">+</span>b<span class="op">*</span>y<span class="op">*</span>y<span class="op">-</span>x<span class="op">*</span>y<span class="op">*</span>z<span class="op">*</span>(a<span class="op">-</span>b))<span class="op">^</span><span class="dv">2</span></span>
<span id="cb2-5">}</span>
<span id="cb2-6"><span class="co"># run the marching cubes algorithm ####</span></span>
<span id="cb2-7"><span class="kw">library</span>(misc3d)</span>
<span id="cb2-8">nx &lt;-<span class="st"> </span><span class="dv">120</span>; ny &lt;-<span class="st"> </span><span class="dv">120</span>; nz &lt;-<span class="st"> </span><span class="dv">120</span></span>
<span id="cb2-9">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">1.4</span>, <span class="fl">1.4</span>, <span class="dt">length.out =</span> nx)</span>
<span id="cb2-10">y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">1.7</span>, <span class="fl">1.7</span>, <span class="dt">length.out =</span> ny)</span>
<span id="cb2-11">z &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">0.7</span>, <span class="fl">0.7</span>, <span class="dt">length.out =</span> nz)</span>
<span id="cb2-12">G &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z)</span>
<span id="cb2-13">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">with</span>(G, <span class="kw">f</span>(x, y, z)), <span class="dt">dim =</span> <span class="kw">c</span>(nx, ny, nz))</span>
<span id="cb2-14">surface &lt;-<span class="st"> </span><span class="kw">computeContour3d</span>(</span>
<span id="cb2-15">  voxel, <span class="dt">maxvol =</span> <span class="kw">max</span>(voxel), <span class="dt">level =</span> <span class="dv">0</span>, <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z</span>
<span id="cb2-16">)</span>
<span id="cb2-17"><span class="co"># make rgl mesh</span></span>
<span id="cb2-18"><span class="kw">library</span>(rgl)</span>
<span id="cb2-19">mesh0 &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(<span class="kw">makeTriangles</span>(surface))</span>
<span id="cb2-20">mesh &lt;-<span class="st"> </span><span class="kw">addNormals</span>(<span class="kw">tmesh3d</span>(</span>
<span id="cb2-21">  <span class="dt">vertices =</span> mesh0[[<span class="st">"vb"</span>]],</span>
<span id="cb2-22">  <span class="dt">indices =</span> mesh0[[<span class="st">"ib"</span>]]</span>
<span id="cb2-23">))</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_original.gif"
        />
      </p>
      <p>
        This mesh is quite smooth. It has
        <span class="math inline">\(73544\)</span> (non-duplicated) vertices:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1">mesh</span>
<span id="cb3-2"><span class="co">##  mesh3d object with 73544 vertices, 147088 triangles.</span></span></code></pre>
      </div>
      <h2 id="sampling-the-solid-möbius-strip">
        Sampling the solid Möbius strip
      </h2>
      <p>
        Here we sample a subset of the vertices of the solid Möbius strip mesh,
        and later we will reconstruct the surface from this sample. I could
        select some vertices at random, but I prefer to use the uniform sampling
        performed by the <code>vcgUniformRemesh</code> function of the
        <strong>Rvcg</strong> package:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(Rvcg)</span>
<span id="cb4-2"><span class="co">## </span></span>
<span id="cb4-3"><span class="co">## Attaching package: 'Rvcg'</span></span>
<span id="cb4-4"><span class="co">## The following object is masked _by_ '.GlobalEnv':</span></span>
<span id="cb4-5"><span class="co">## </span></span>
<span id="cb4-6"><span class="co">##     nverts</span></span>
<span id="cb4-7">resample_mesh &lt;-<span class="st"> </span><span class="kw">vcgUniformRemesh</span>(mesh, <span class="dt">voxelSize =</span> <span class="fl">0.06</span>)</span>
<span id="cb4-8"><span class="co">##      Resampling mesh using a volume of 58 x 69 x 35</span></span>
<span id="cb4-9"><span class="co">##      VoxelSize is 0.060000, offset is 0.000000</span></span>
<span id="cb4-10"><span class="co">##      Mesh Box is 2.630913 3.263203 1.264488</span></span>
<span id="cb4-11"><span class="kw">str</span>(resample_mesh)</span>
<span id="cb4-12"><span class="co">## List of 3</span></span>
<span id="cb4-13"><span class="co">##  $ vb     : num [1:4, 1:7948] -0.302 -1.59 -0.118 1 -0.322 ...</span></span>
<span id="cb4-14"><span class="co">##  $ it     : int [1:3, 1:15896] 1 2 3 3 2 4 1 5 6 3 ...</span></span>
<span id="cb4-15"><span class="co">##  $ normals: num [1:4, 1:7948] 0.207 0.951 0.23 1 0.271 ...</span></span>
<span id="cb4-16"><span class="co">##  - attr(*, "class")= chr "mesh3d"</span></span>
<span id="cb4-17">SolidMobiusStrip_cloud &lt;-<span class="st"> </span><span class="kw">t</span>(resample_mesh[[<span class="st">"vb"</span>]][<span class="op">-</span>4L, ])</span></code></pre>
      </div>
      <p>Here is our points cloud (I mean the sample):</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb5-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb5-3"><span class="kw">spheres3d</span>(SolidMobiusStrip_cloud, <span class="dt">radius =</span> <span class="fl">0.015</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_cloud.png"
        />
      </p>
      <p>It has <span class="math inline">\(7948\)</span> points:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">nrow</span>(SolidMobiusStrip_cloud)</span>
<span id="cb6-2"><span class="co">## [1] 7948</span></span></code></pre>
      </div>
      <h2 id="advanced-front-surface-reconstruction">
        Advanced front surface reconstruction
      </h2>
      <p>
        We run the first surface reconstruction algorithm, the
        <em>advanced front surface reconstruction</em>. Is is performed by the
        <code>AFSreconstruction</code> function of the
        <strong>RCGAL</strong> package, which has no parameters arguments; it
        only takes the points cloud as argument:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(RCGAL)</span>
<span id="cb7-2">afs_mesh &lt;-<span class="st"> </span><span class="kw">AFSreconstruction</span>(SolidMobiusStrip_cloud)</span></code></pre>
      </div>
      <p>
        Let’s plot this mesh (this is a triangular <strong>rgl</strong> mesh, of
        class <code>mesh3d</code>):
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb8-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb8-3"><span class="kw">shade3d</span>(afs_mesh, <span class="dt">color =</span> <span class="st">"darkred"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_AFS.png"
        />
      </p>
      <p>
        Well it is not very smooth, but not too bad. Note that the advanced
        front surface reconstruction algorithm does not alter the vertices of
        the given points cloud, it doesn’t change them at all. So this mesh has
        <span class="math inline">\(7948\)</span> vertices:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1">afs_mesh</span>
<span id="cb9-2"><span class="co">##  mesh3d object with 7948 vertices, 15896 triangles.</span></span></code></pre>
      </div>
      <p>
        Remember that the original mesh had
        <span class="math inline">\(73544\)</span> vertices.
      </p>
      <p>
        Let’s compare with the <em>ball-pivoting</em> algorithm provided by the
        <strong>Rvcg</strong> package:
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1">bp_mesh &lt;-<span class="st"> </span><span class="kw">addNormals</span>(<span class="kw">vcgBallPivoting</span>(</span>
<span id="cb10-2">  SolidMobiusStrip_cloud, <span class="dt">angle =</span> pi<span class="op">/</span><span class="dv">6</span>, <span class="dt">clustering =</span> <span class="fl">0.01</span></span>
<span id="cb10-3">))</span></code></pre>
      </div>
      <p>
        The smoothness is similar but there is a couple of holes in the mesh:
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb11-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb11-3"><span class="kw">shade3d</span>(bp_mesh, <span class="dt">color =</span> <span class="st">"firebrick"</span>) </span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_BP.png"
        />
      </p>
      <p>
        We can get a smoother mesh and get rid of these holes by applying a mesh
        smoothing technique, such as the ones offered by the
        <code>vcgSmooth</code> function of the <strong>Rvcg</strong> package:
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb12-1">smooth_bp_mesh &lt;-<span class="st"> </span><span class="kw">vcgSmooth</span>(bp_mesh, <span class="dt">iteration =</span> <span class="dv">50</span>)</span></code></pre>
      </div>
      <p>This is indeed better:</p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb13-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb13-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb13-3"><span class="kw">shade3d</span>(smooth_bp_mesh, <span class="dt">color =</span> <span class="st">"firebrick1"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_BP_smooth.png"
        />
      </p>
      <p>
        The smooth mesh still has
        <span class="math inline">\(7948\)</span> vertices:
      </p>
      <div class="sourceCode" id="cb14">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb14-1">smooth_bp_mesh</span>
<span id="cb14-2"><span class="co">##  mesh3d object with 7948 vertices, 15822 triangles.</span></span></code></pre>
      </div>
      <p>
        Of course we could apply <code>vcgSmooth</code> to our
        <code>afs_mesh</code> as well.
      </p>
      <h2 id="poisson-reconstruction-of-the-solid-möbius-strip">
        Poisson reconstruction of the solid Möbius strip
      </h2>
      <p>
        Now let’s try the <em>Poisson surface reconstruction</em>, available in
        <strong>RCGAL</strong>.
      </p>
      <div class="sourceCode" id="cb15">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb15-1">psr_mesh &lt;-<span class="st"> </span><span class="kw">PoissonReconstruction</span>(SolidMobiusStrip_cloud)</span>
<span id="cb15-2"><span class="co">## Poisson reconstruction using average spacing: 0.04682.</span></span></code></pre>
      </div>
      <div class="sourceCode" id="cb16">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb16-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb16-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb16-3"><span class="kw">shade3d</span>(psr_mesh, <span class="dt">color =</span> <span class="st">"orangered"</span>)</span>
<span id="cb16-4"><span class="kw">wire3d</span>(psr_mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_Poisson_default.png"
        />
      </p>
      <p>
        Clearly, that’s not smooth! But wait, there are only
        <span class="math inline">\(604\)</span> vertices in this mesh:
      </p>
      <div class="sourceCode" id="cb17">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb17-1">psr_mesh</span>
<span id="cb17-2"><span class="co">##  mesh3d object with 604 vertices, 1208 triangles.</span></span></code></pre>
      </div>
      <p>
        The Poisson reconstruction algorithm takes some parameters as input, and
        we can reduce the <code>spacing</code> parameter to get a more precise
        mesh, at the cost of a higher computation time:
      </p>
      <div class="sourceCode" id="cb18">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb18-1">psr_mesh &lt;-<span class="st"> </span><span class="kw">PoissonReconstruction</span>(SolidMobiusStrip_cloud, <span class="dt">spacing =</span> <span class="fl">0.005</span>)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb19">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb19-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb19-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb19-3"><span class="kw">shade3d</span>(psr_mesh, <span class="dt">color =</span> <span class="st">"orangered"</span>)</span>
<span id="cb19-4"><span class="kw">wire3d</span>(psr_mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_Poisson_spacing005.png"
        />
      </p>
      <p>
        On one hand, the mesh is better, but on the other hand it has some small
        defaults (not highly visible on this view, try to reproduce the mesh and
        rotate it, you’ll see). It has
        <span class="math inline">\(28726\)</span> vertices:
      </p>
      <div class="sourceCode" id="cb20">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb20-1">psr_mesh</span>
<span id="cb20-2"><span class="co">##  mesh3d object with 28726 vertices, 57556 triangles.</span></span></code></pre>
      </div>
      <p>
        It has some defaults because, I think, some triangles are too small. We
        can increase the trianges while keeping the
        <code>spacing</code> parameter by increasing the
        <code>sm_distance</code> parameter (whose defaut value is
        <span class="math inline">\(0.375\)</span>):
      </p>
      <div class="sourceCode" id="cb21">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb21-1">psr_mesh &lt;-<span class="st"> </span><span class="kw">PoissonReconstruction</span>(</span>
<span id="cb21-2">  SolidMobiusStrip_cloud, <span class="dt">spacing =</span> <span class="fl">0.005</span>, <span class="dt">sm_distance =</span> <span class="fl">0.9</span></span>
<span id="cb21-3">)</span></code></pre>
      </div>
      <p>This reduces the computation time. Here is the result:</p>
      <div class="sourceCode" id="cb22">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb22-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb22-2"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-50</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb22-3"><span class="kw">shade3d</span>(psr_mesh, <span class="dt">color =</span> <span class="st">"darkorange"</span>)</span>
<span id="cb22-4"><span class="kw">wire3d</span>(psr_mesh)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SolidMobiusStrip_Poisson_spacing005_smdistance09.png"
        />
      </p>
      <p>
        Quite good! And the mesh has only
        <span class="math inline">\(3055\)</span> vertices:
      </p>
      <div class="sourceCode" id="cb23">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb23-1">psr_mesh</span>
<span id="cb23-2"><span class="co">##  mesh3d object with 3055 vertices, 6110 triangles.</span></span></code></pre>
      </div>
      <h1 id="the-stanford-bunny">The Stanford bunny</h1>
      <p>
        Now let’s try these surface reconstruction techniques to another points
        cloud, a famous one: the <em>Stanford bunny</em> points cloud. It has
        <span class="math inline">\(35947\)</span> points:
      </p>
      <div class="sourceCode" id="cb24">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb24-1"><span class="kw">data</span>(bunny, <span class="dt">package =</span> <span class="st">"onion"</span>)</span>
<span id="cb24-2"><span class="kw">nrow</span>(bunny)</span>
<span id="cb24-3"><span class="co">## [1] 35947</span></span></code></pre>
      </div>
      <p>
        This set of points is dense. Plotting it almost gives a totally black
        shape:
      </p>
      <div class="sourceCode" id="cb25">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb25-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb25-2"><span class="kw">view3d</span>(<span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb25-3"><span class="kw">points3d</span>(bunny)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Bunny_cloud.png"
        />
      </p>
      <p>Firstly, let’s try the advanced front surface reconstruction:</p>
      <div class="sourceCode" id="cb26">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb26-1">afs_mesh &lt;-<span class="st"> </span><span class="kw">AFSreconstruction</span>(bunny)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb27">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb27-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb27-2"><span class="kw">view3d</span>(<span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb27-3"><span class="kw">shade3d</span>(afs_mesh, <span class="dt">color =</span> <span class="st">"violetred"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Bunny_AFS.png"
        />
      </p>
      <p>
        Quite nice. Now here is a Poisson reconstruction, with some parameters
        chosen by myself (the mesh is not precise enough with the default values
        of the parameters):
      </p>
      <div class="sourceCode" id="cb28">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb28-1">psr_mesh &lt;-<span class="st"> </span><span class="kw">PoissonReconstruction</span>(bunny, <span class="dt">spacing =</span> <span class="fl">0.0001</span>, <span class="dt">sm_distance =</span> <span class="fl">0.9</span>)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb29">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb29-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb29-2"><span class="kw">view3d</span>(<span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb29-3"><span class="kw">shade3d</span>(psr_mesh, <span class="dt">color =</span> <span class="st">"darkviolet"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Bunny_Poisson.png"
        />
      </p>
      <p>
        The mesh has less details than the previous one but it has only
        <span class="math inline">\(20693\)</span> vertices:
      </p>
      <div class="sourceCode" id="cb30">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb30-1">psr_mesh</span>
<span id="cb30-2"><span class="co">##  mesh3d object with 20693 vertices, 41382 triangles.</span></span></code></pre>
      </div>
      <h1 id="the-stanford-dragon">The Stanford dragon</h1>
      <p>
        Finally, let’s play with the <em>Stanford dragon</em>. I found a points
        cloud of it containing
        <span class="math inline">\(100250\)</span> points. It is so dense that
        its plot is a totally black shape:
      </p>
      <div class="sourceCode" id="cb31">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb31-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb31-2"><span class="kw">view3d</span>(<span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb31-3"><span class="kw">points3d</span>(StanfordDragon)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/StanfordDragon_cloud.png"
        />
      </p>
      <p>
        Let’s start with the advanced front surface reconstruction (the
        <code>StanfordDragon</code> matrix is provided by
        <strong>RCGAL</strong>):
      </p>
      <div class="sourceCode" id="cb32">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb32-1">afs_mesh &lt;-<span class="st"> </span><span class="kw">AFSreconstruction</span>(StanfordDragon)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb33">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb33-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb33-2"><span class="kw">view3d</span>(<span class="op">-</span><span class="dv">20</span>, <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb33-3"><span class="kw">shade3d</span>(afs_mesh, <span class="dt">color =</span> <span class="st">"darkolivegreen4"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/StanfordDragon_AFS.png"
        />
      </p>
      <p>Very nice. And to finish, let’s try a Poisson reconstruction.</p>
      <div class="sourceCode" id="cb34">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb34-1">psr_mesh &lt;-<span class="st"> </span><span class="kw">PoissonReconstruction</span>(StanfordDragon, <span class="dt">spacing =</span> <span class="fl">0.0003</span>)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb35">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb35-1"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>))</span>
<span id="cb35-2"><span class="kw">view3d</span>(<span class="op">-</span><span class="dv">20</span>, <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb35-3"><span class="kw">shade3d</span>(psr_mesh, <span class="dt">color =</span> <span class="st">"forestgreen"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/StanfordDragon_Poisson.png"
        />
      </p>
      <p>Less vertices, less details!</p>
      <div class="sourceCode" id="cb36">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb36-1">psr_mesh</span>
<span id="cb36-2"><span class="co">##  mesh3d object with 32064 vertices, 64152 triangles.</span></span></code></pre>
      </div>
      <h1 id="acknowledgments">Acknowledgments</h1>
      <p>
        I am grateful to the <strong>CGAL</strong> members, especially
        <strong
          ><span class="citation" data-cites="sloriot">@sloriot</span></strong
        >
        and
        <strong
          ><span class="citation" data-cites="afabri">@afabri</span></strong
        >, for the help they provided to me and for the attention they pay to my
        questions.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 15 Jan 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/SurfaceReconstruction.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Clipping an isosurface to a ball, and more</title>
      <link>https://laustep.github.io/stlahblog/posts/MeshClipping.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        We will firstly show how to clip an isosurface to a ball with R, and
        then, more generally, how to clip a surface to an arbitrary region. In
        the last part we show how to achieve the same with Python.
      </p>
      <h1 id="using-r">Using R</h1>
      <h2 id="the-togliatti-isosurface-clipped-to-a-box">
        The Togliatti isosurface, clipped to a box
      </h2>
      <p>
        The Togliatti surface is the isosurface
        <span class="math inline">\(f(x, y, z) = 0\)</span>, where the function
        <span class="math inline">\(f\)</span> is defined as follows in R:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1">f &lt;-<span class="st"> </span><span class="cf">function</span>(x,y,z){</span>
<span id="cb1-2">  <span class="dv">64</span><span class="op">*</span>(x<span class="dv">-1</span>)<span class="op">*</span></span>
<span id="cb1-3"><span class="st">    </span>(x<span class="op">^</span><span class="dv">4-4</span><span class="op">*</span>x<span class="op">^</span><span class="dv">3-10</span><span class="op">*</span>x<span class="op">^</span><span class="dv">2</span><span class="op">*</span>y<span class="op">^</span><span class="dv">2-4</span><span class="op">*</span>x<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">16</span><span class="op">*</span>x<span class="dv">-20</span><span class="op">*</span>x<span class="op">*</span>y<span class="op">^</span><span class="dv">2</span><span class="op">+</span><span class="dv">5</span><span class="op">*</span>y<span class="op">^</span><span class="dv">4</span><span class="op">+</span><span class="dv">16-20</span><span class="op">*</span>y<span class="op">^</span><span class="dv">2</span>) <span class="op">-</span><span class="st"> </span></span>
<span id="cb1-4"><span class="st">    </span><span class="dv">5</span><span class="op">*</span><span class="kw">sqrt</span>(<span class="dv">5</span><span class="op">-</span><span class="kw">sqrt</span>(<span class="dv">5</span>))<span class="op">*</span>(<span class="dv">2</span><span class="op">*</span>z<span class="op">-</span><span class="kw">sqrt</span>(<span class="dv">5</span><span class="op">-</span><span class="kw">sqrt</span>(<span class="dv">5</span>)))<span class="op">*</span>(<span class="dv">4</span><span class="op">*</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span><span class="op">-</span>z<span class="op">^</span><span class="dv">2</span>)<span class="op">+</span>(<span class="dv">1</span><span class="op">+</span><span class="dv">3</span><span class="op">*</span><span class="kw">sqrt</span>(<span class="dv">5</span>)))<span class="op">^</span><span class="dv">2</span></span>
<span id="cb1-5">}</span></code></pre>
      </div>
      <p>
        To plot an isosurface in R, there is the
        <strong>misc3d</strong> package. Below we plot the Togliatti surface
        clipped to the box
        <span class="math inline">\([-5,5] \times [-5,5] \times [-4,4]\)</span>.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(misc3d)</span>
<span id="cb2-2"><span class="co"># make grid</span></span>
<span id="cb2-3">nx &lt;-<span class="st"> </span>220L; ny &lt;-<span class="st"> </span>220L; nz &lt;-<span class="st"> </span>220L</span>
<span id="cb2-4">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">length.out =</span> nx) </span>
<span id="cb2-5">y &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">5</span>, <span class="dv">5</span>, <span class="dt">length.out =</span> ny)</span>
<span id="cb2-6">z &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="dv">4</span>, <span class="dv">4</span>, <span class="dt">length.out =</span> nz) </span>
<span id="cb2-7">G &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z)</span>
<span id="cb2-8"><span class="co"># calculate voxel</span></span>
<span id="cb2-9">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">with</span>(G, <span class="kw">f</span>(x, y, z)), <span class="dt">dim =</span> <span class="kw">c</span>(nx, ny, nz))</span>
<span id="cb2-10"><span class="co"># compute isosurface</span></span>
<span id="cb2-11">surf1 &lt;-<span class="st"> </span></span>
<span id="cb2-12"><span class="st">  </span><span class="kw">computeContour3d</span>(voxel, <span class="dt">maxvol =</span> <span class="kw">max</span>(voxel), <span class="dt">level =</span> <span class="dv">0</span>, <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z)</span>
<span id="cb2-13"><span class="co"># make triangles</span></span>
<span id="cb2-14">triangles &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(surf1, <span class="dt">smooth =</span> <span class="ot">TRUE</span>)</span></code></pre>
      </div>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">drawScene.rgl</span>(triangles, <span class="dt">color =</span> <span class="st">"yellowgreen"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Togliatti_box.gif"
        />
      </p>
      <p>
        It is fun, but you will see later that it is prettier when clipped to a
        ball. And it is desirable to get rid of the isolated components at the
        top.
      </p>
      <p>
        The simplest way to clip the surface to a ball consists in using the
        <code>mask</code> argument of the function
        <code>computeContour3d</code>. We use
        <span class="math inline">\(4.8\)</span> as the radius.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">mask &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">with</span>(G, x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span><span class="op">+</span>z<span class="op">^</span><span class="dv">2</span> <span class="op">&lt;</span><span class="st"> </span><span class="fl">4.8</span><span class="op">^</span><span class="dv">2</span>), <span class="dt">dim =</span> <span class="kw">c</span>(nx, ny, nz))</span>
<span id="cb4-2">surf2 &lt;-<span class="st"> </span><span class="kw">computeContour3d</span>(</span>
<span id="cb4-3">  voxel, <span class="dt">maxvol =</span> <span class="kw">max</span>(voxel), <span class="dt">level =</span> <span class="dv">0</span>, <span class="dt">mask =</span> mask, <span class="dt">x =</span> x, <span class="dt">y =</span> y, <span class="dt">z =</span> z</span>
<span id="cb4-4">)</span>
<span id="cb4-5">triangles &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(surf2, <span class="dt">smooth =</span> <span class="ot">TRUE</span>)</span>
<span id="cb4-6"><span class="kw">drawScene.rgl</span>(triangles, <span class="dt">color =</span> <span class="st">"orange"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Togliatti_mask.gif"
        />
      </p>
      <p>
        That’s not bad, but you see the problem: the borders are not smooth.
      </p>
      <h2 id="resorting-to-spherical-coordinates">
        Resorting to spherical coordinates
      </h2>
      <p>
        Using spherical coordinates will allow us to get the surface clipped to
        the ball with smooth borders. Here is the method:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="co"># Togliatti surface equation with spherical coordinates</span></span>
<span id="cb5-2">h &lt;-<span class="st"> </span><span class="cf">function</span>(ρ, θ, ϕ){</span>
<span id="cb5-3">  x &lt;-<span class="st"> </span>ρ <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(θ) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(ϕ)</span>
<span id="cb5-4">  y &lt;-<span class="st"> </span>ρ <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(θ) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(ϕ)</span>
<span id="cb5-5">  z &lt;-<span class="st"> </span>ρ <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(ϕ)</span>
<span id="cb5-6">  <span class="kw">f</span>(x, y, z)</span>
<span id="cb5-7">}</span>
<span id="cb5-8"><span class="co"># make grid</span></span>
<span id="cb5-9">nρ &lt;-<span class="st"> </span>300L; nθ &lt;-<span class="st"> </span>300L; nϕ &lt;-<span class="st"> </span>300L</span>
<span id="cb5-10">ρ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="fl">4.8</span>, <span class="dt">length.out =</span> nρ) <span class="co"># ρ runs from 0 to the desired radius</span></span>
<span id="cb5-11">θ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nθ)</span>
<span id="cb5-12">ϕ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, pi, <span class="dt">length.out =</span> nϕ) </span>
<span id="cb5-13">G &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(ρ=ρ, θ=θ, ϕ=ϕ)</span>
<span id="cb5-14"><span class="co"># calculate voxel</span></span>
<span id="cb5-15">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">with</span>(G, <span class="kw">h</span>(ρ, θ, ϕ)), <span class="dt">dim =</span> <span class="kw">c</span>(nρ, nθ, nϕ))</span>
<span id="cb5-16"><span class="co"># calculate isosurface</span></span>
<span id="cb5-17">surf3 &lt;-<span class="st"> </span></span>
<span id="cb5-18"><span class="st">  </span><span class="kw">computeContour3d</span>(voxel, <span class="dt">maxvol =</span> <span class="kw">max</span>(voxel), <span class="dt">level =</span> <span class="dv">0</span>, <span class="dt">x =</span> ρ, <span class="dt">y =</span> θ, <span class="dt">z =</span> ϕ)</span>
<span id="cb5-19"><span class="co"># transform to Cartesian coordinates</span></span>
<span id="cb5-20">surf3 &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(surf3, 1L, <span class="cf">function</span>(ρθϕ){</span>
<span id="cb5-21">  ρ &lt;-<span class="st"> </span>ρθϕ[1L]; θ &lt;-<span class="st"> </span>ρθϕ[2L]; ϕ &lt;-<span class="st"> </span>ρθϕ[3L] </span>
<span id="cb5-22">  <span class="kw">c</span>(</span>
<span id="cb5-23">    ρ <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(θ) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(ϕ),</span>
<span id="cb5-24">    ρ <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(θ) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(ϕ),</span>
<span id="cb5-25">    ρ <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(ϕ)</span>
<span id="cb5-26">  )</span>
<span id="cb5-27">}))</span>
<span id="cb5-28"><span class="co"># draw isosurface</span></span>
<span id="cb5-29"><span class="kw">drawScene.rgl</span>(<span class="kw">makeTriangles</span>(surf3, <span class="dt">smooth=</span><span class="ot">TRUE</span>), <span class="dt">color =</span> <span class="st">"violetred"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Togliatti_spherical.gif"
        />
      </p>
      <p>Now the surface is pretty nice. The borders are smooth.</p>
      <h2 id="another-way-using-the-rgl-package">
        Another way: using the rgl package
      </h2>
      <p>
        Nowadays, in the <strong>rgl</strong> package, there is the function
        <code>clipMesh3d</code> which allows to
        <em>clip a mesh to a general region</em>. In order to use it, we need a
        <code>mesh3d</code> object. There is an unexported function in
        <strong>misc3d</strong> which allows to easily get a
        <code>mesh3d</code> object; it is called <code>t2ve</code>.
      </p>
      <p>We start with the isosurface clipped to the box:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">triangles &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(surf1)</span>
<span id="cb6-2"><span class="co"># convert to rgl `mesh3d`</span></span>
<span id="cb6-3">mesh &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(triangles)</span>
<span id="cb6-4">rglmesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(mesh<span class="op">$</span>vb, mesh<span class="op">$</span>ib)</span></code></pre>
      </div>
      <p>
        To define the region to which we want to clip the mesh, one has to
        introduce a function and to give a bound for this function. Here the
        region is
        <span class="math inline">\(x^2 + y^2 + z^2 &lt; 4.8^2\)</span>, so we
        proceed as follows:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1">fn &lt;-<span class="st"> </span><span class="cf">function</span>(x, y, z) x<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>y<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>z<span class="op">^</span><span class="dv">2</span> <span class="co"># or function(xyz) rowSums(xyz^2)</span></span>
<span id="cb7-2">clippedmesh &lt;-<span class="st"> </span><span class="kw">addNormals</span>(<span class="kw">clipMesh3d</span>(</span>
<span id="cb7-3">  rglmesh, fn, <span class="dt">bound =</span> <span class="fl">4.8</span><span class="op">^</span><span class="dv">2</span>, <span class="dt">greater =</span> <span class="ot">FALSE</span></span>
<span id="cb7-4">))</span></code></pre>
      </div>
      <p>
        It is a bit slow. Probably the algorithm is not very easy. But we get
        our desired result:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1"><span class="kw">shade3d</span>(clippedmesh, <span class="dt">color =</span> <span class="st">"magenta"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Togliatti_clipped.gif"
        />
      </p>
      <h1 id="using-python">Using Python</h1>
      <p>
        With the wonderful Python library <strong>PyVista</strong>, we proceed
        as follows to create the mesh of the Togliatti isosurface:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb9-1"><span class="im">from</span> math <span class="im">import</span> sqrt</span>
<span id="cb9-2"><span class="im">import</span> numpy <span class="im">as</span> np</span>
<span id="cb9-3"><span class="im">import</span> pyvista <span class="im">as</span> pv</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="kw">def</span> f(x, y, z):</span>
<span id="cb9-6">    <span class="cf">return</span> (</span>
<span id="cb9-7">        <span class="dv">64</span></span>
<span id="cb9-8">        <span class="op">*</span> (x <span class="op">-</span> <span class="dv">1</span>)</span>
<span id="cb9-9">        <span class="op">*</span> (</span>
<span id="cb9-10">            x <span class="op">**</span> <span class="dv">4</span></span>
<span id="cb9-11">            <span class="op">-</span> <span class="dv">4</span> <span class="op">*</span> x <span class="op">**</span> <span class="dv">3</span></span>
<span id="cb9-12">            <span class="op">-</span> <span class="dv">10</span> <span class="op">*</span> x <span class="op">**</span> <span class="dv">2</span> <span class="op">*</span> y <span class="op">**</span> <span class="dv">2</span></span>
<span id="cb9-13">            <span class="op">-</span> <span class="dv">4</span> <span class="op">*</span> x <span class="op">**</span> <span class="dv">2</span></span>
<span id="cb9-14">            <span class="op">+</span> <span class="dv">16</span> <span class="op">*</span> x</span>
<span id="cb9-15">            <span class="op">-</span> <span class="dv">20</span> <span class="op">*</span> x <span class="op">*</span> y <span class="op">**</span> <span class="dv">2</span></span>
<span id="cb9-16">            <span class="op">+</span> <span class="dv">5</span> <span class="op">*</span> y <span class="op">**</span> <span class="dv">4</span></span>
<span id="cb9-17">            <span class="op">+</span> <span class="dv">16</span></span>
<span id="cb9-18">            <span class="op">-</span> <span class="dv">20</span> <span class="op">*</span> y <span class="op">**</span> <span class="dv">2</span></span>
<span id="cb9-19">        )</span>
<span id="cb9-20">        <span class="op">-</span> <span class="dv">5</span></span>
<span id="cb9-21">        <span class="op">*</span> sqrt(<span class="dv">5</span> <span class="op">-</span> sqrt(<span class="dv">5</span>))</span>
<span id="cb9-22">        <span class="op">*</span> (<span class="dv">2</span> <span class="op">*</span> z <span class="op">-</span> sqrt(<span class="dv">5</span> <span class="op">-</span> sqrt(<span class="dv">5</span>)))</span>
<span id="cb9-23">        <span class="op">*</span> (<span class="dv">4</span> <span class="op">*</span> (x <span class="op">**</span> <span class="dv">2</span> <span class="op">+</span> y <span class="op">**</span> <span class="dv">2</span> <span class="op">-</span> z <span class="op">**</span> <span class="dv">2</span>) <span class="op">+</span> (<span class="dv">1</span> <span class="op">+</span> <span class="dv">3</span> <span class="op">*</span> sqrt(<span class="dv">5</span>))) <span class="op">**</span> <span class="dv">2</span></span>
<span id="cb9-24">    )</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co"># generate data grid for computing the values</span></span>
<span id="cb9-27">X, Y, Z <span class="op">=</span> np.mgrid[(<span class="op">-</span><span class="dv">5</span>):<span class="dv">5</span>:<span class="ot">250j</span>, (<span class="op">-</span><span class="dv">5</span>):<span class="dv">5</span>:<span class="ot">250j</span>, (<span class="op">-</span><span class="dv">4</span>):<span class="dv">4</span>:<span class="ot">250j</span>]</span>
<span id="cb9-28"><span class="co"># create a structured grid</span></span>
<span id="cb9-29">grid <span class="op">=</span> pv.StructuredGrid(X, Y, Z)</span>
<span id="cb9-30"><span class="co"># compute and assign the values</span></span>
<span id="cb9-31">values <span class="op">=</span> f(X, Y, Z)</span>
<span id="cb9-32">grid.point_data[<span class="st">"values"</span>] <span class="op">=</span> values.ravel(order<span class="op">=</span><span class="st">"F"</span>)</span>
<span id="cb9-33"><span class="co"># compute the isosurface f(x, y, z) = 0</span></span>
<span id="cb9-34">isosurf <span class="op">=</span> grid.contour(isosurfaces<span class="op">=</span>[<span class="dv">0</span>])</span>
<span id="cb9-35">mesh <span class="op">=</span> isosurf.extract_geometry()</span></code></pre>
      </div>
      <p>To plot the mesh clipped to the box:</p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb10-1"><span class="co"># surface clipped to the box:</span></span>
<span id="cb10-2">mesh.plot(smooth_shading<span class="op">=</span><span class="va">True</span>, color<span class="op">=</span><span class="st">"yellowgreen"</span>, specular<span class="op">=</span><span class="dv">15</span>)</span></code></pre>
      </div>
      <p>
        The <code>remove_points</code> method is similar to the
        <code>mask</code> approach with <strong>misc3d</strong> (it produces
        non-smooth borders):
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb11-1"><span class="co"># surface clipped to the ball of radius 4.8, with the help of `remove_points`:</span></span>
<span id="cb11-2">lengths <span class="op">=</span> np.linalg.norm(mesh.points, axis<span class="op">=</span><span class="dv">1</span>)</span>
<span id="cb11-3">toremove <span class="op">=</span> lengths <span class="op">&gt;=</span> <span class="fl">4.8</span></span>
<span id="cb11-4">masked_mesh, idx <span class="op">=</span> mesh.remove_points(toremove)</span>
<span id="cb11-5">masked_mesh.plot(smooth_shading<span class="op">=</span><span class="va">True</span>, color<span class="op">=</span><span class="st">"orange"</span>, specular<span class="op">=</span><span class="dv">15</span>)</span></code></pre>
      </div>
      <p>
        To get smooth borders, you have to use the
        <code>clip_scalar</code> method:
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode python"
        ><code class="sourceCode python"><span id="cb12-1"><span class="co"># surface clipped to the ball of radius 4.8, with the help of `clip_scalar`:</span></span>
<span id="cb12-2">mesh[<span class="st">"dist"</span>] <span class="op">=</span> lengths</span>
<span id="cb12-3">clipped_mesh <span class="op">=</span> mesh.clip_scalar(<span class="st">"dist"</span>, value<span class="op">=</span><span class="fl">4.8</span>)</span>
<span id="cb12-4">clipped_mesh.plot(</span>
<span id="cb12-5">    smooth_shading<span class="op">=</span><span class="va">True</span>, cmap<span class="op">=</span><span class="st">"inferno"</span>, window_size<span class="op">=</span>[<span class="dv">512</span>, <span class="dv">512</span>],</span>
<span id="cb12-6">    show_scalar_bar<span class="op">=</span><span class="va">False</span>, specular<span class="op">=</span><span class="dv">15</span>, show_axes<span class="op">=</span><span class="va">False</span>, zoom<span class="op">=</span><span class="fl">1.2</span>,</span>
<span id="cb12-7">    background<span class="op">=</span><span class="st">"#363940"</span></span>
<span id="cb12-8">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Togliatti_python.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 14 Jan 2022 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/MeshClipping.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Bookmarking a Shiny app without Shiny bookmarking</title>
      <link>https://laustep.github.io/stlahblog/posts/shinyBookmarking.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I do not well remember, but it seems to me I faced some difficulties
        when I tried to use Shiny bookmarking to save and restore the state of a
        Shiny app. These difficulties arose when there were some
        <code>renderUI</code> in the app or an input updated with an
        <code>updateXXXinput</code> function.
      </p>
      <p>
        Then I’m using my own way for bookmarking the state of a Shiny app and
        restoring it. I’m saving the state of the app in a
        <strong>rds</strong> file and I restore the inputs delayed by a
        <code>renderUI</code> or an <code>updateXXXinput</code> function with
        the help of the <code>delay</code> function of the ‘shinyjs’ package.
        Below is an example
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">library</span>(shinyjs)</span>
<span id="cb1-3"></span>
<span id="cb1-4">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb1-5">  </span>
<span id="cb1-6">  <span class="kw">useShinyjs</span>(),</span>
<span id="cb1-7">  </span>
<span id="cb1-8">  <span class="kw">br</span>(),</span>
<span id="cb1-9">  </span>
<span id="cb1-10">  <span class="kw">sidebarLayout</span>(</span>
<span id="cb1-11">    </span>
<span id="cb1-12">    <span class="kw">sidebarPanel</span>(</span>
<span id="cb1-13">      </span>
<span id="cb1-14">      <span class="kw">wellPanel</span>( <span class="co"># restore the bookmarked state</span></span>
<span id="cb1-15">        <span class="kw">fileInput</span>(</span>
<span id="cb1-16">          <span class="st">"rds"</span>,</span>
<span id="cb1-17">          <span class="st">"Restore state"</span>,</span>
<span id="cb1-18">          <span class="dt">accept =</span> <span class="st">".rds"</span></span>
<span id="cb1-19">        )</span>
<span id="cb1-20">      ),</span>
<span id="cb1-21">      </span>
<span id="cb1-22">      <span class="kw">wellPanel</span>( <span class="co"># upload data from a CSV file</span></span>
<span id="cb1-23">        <span class="kw">fileInput</span>(</span>
<span id="cb1-24">          <span class="st">"csv"</span>, </span>
<span id="cb1-25">          <span class="st">"Upload CSV"</span>,</span>
<span id="cb1-26">          <span class="dt">accept =</span> <span class="st">".csv"</span></span>
<span id="cb1-27">        )</span>
<span id="cb1-28">      ),</span>
<span id="cb1-29">      </span>
<span id="cb1-30">      <span class="kw">conditionalPanel</span>(</span>
<span id="cb1-31">        <span class="st">"output.uploaded"</span>,</span>
<span id="cb1-32">        <span class="kw">wellPanel</span>(</span>
<span id="cb1-33">          <span class="kw">uiOutput</span>(<span class="st">"uiX"</span>), <span class="co"># select the variable to be plotted</span></span>
<span id="cb1-34">          <span class="kw">checkboxInput</span>(   <span class="co"># whether to log-transform the variable</span></span>
<span id="cb1-35">            <span class="st">"log10"</span>,</span>
<span id="cb1-36">            <span class="st">"Log-transform"</span>,</span>
<span id="cb1-37">            <span class="dt">value =</span> <span class="ot">FALSE</span></span>
<span id="cb1-38">          )</span>
<span id="cb1-39">        ),</span>
<span id="cb1-40">        </span>
<span id="cb1-41">        <span class="kw">wellPanel</span>( <span class="co"># bookmarking</span></span>
<span id="cb1-42">          <span class="kw">downloadButton</span>(</span>
<span id="cb1-43">            <span class="st">"saveState"</span>, </span>
<span id="cb1-44">            <span class="st">"Save state"</span></span>
<span id="cb1-45">          )</span>
<span id="cb1-46">        )</span>
<span id="cb1-47">        </span>
<span id="cb1-48">      )</span>
<span id="cb1-49">      </span>
<span id="cb1-50">    ),</span>
<span id="cb1-51">    </span>
<span id="cb1-52">    <span class="kw">mainPanel</span>(</span>
<span id="cb1-53">      <span class="kw">plotOutput</span>(<span class="st">"plot"</span>, <span class="dt">width =</span> <span class="st">"400px"</span>)</span>
<span id="cb1-54">    )</span>
<span id="cb1-55">    </span>
<span id="cb1-56">  )</span>
<span id="cb1-57">)</span>
<span id="cb1-58"></span>
<span id="cb1-59">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session){</span>
<span id="cb1-60">  </span>
<span id="cb1-61">  data &lt;-<span class="st"> </span><span class="kw">reactiveVal</span>() <span class="co"># to store the uploaded data</span></span>
<span id="cb1-62">  </span>
<span id="cb1-63">  <span class="kw">observeEvent</span>(input[[<span class="st">"csv"</span>]], { <span class="co"># read and store the uploaded data</span></span>
<span id="cb1-64">    csv &lt;-<span class="st"> </span>input[[<span class="st">"csv"</span>]][[<span class="st">"datapath"</span>]]</span>
<span id="cb1-65">    <span class="kw">data</span>(<span class="kw">read.csv</span>(csv))</span>
<span id="cb1-66">  })</span>
<span id="cb1-67">  </span>
<span id="cb1-68">  output[[<span class="st">"uploaded"</span>]] &lt;-<span class="st"> </span><span class="kw">reactive</span>({ <span class="co"># indicator data uploaded</span></span>
<span id="cb1-69">    <span class="op">!</span><span class="kw">is.null</span>(<span class="kw">data</span>())</span>
<span id="cb1-70">  })</span>
<span id="cb1-71">  <span class="kw">outputOptions</span>(output, <span class="st">"uploaded"</span>, <span class="dt">suspendWhenHidden =</span> <span class="ot">FALSE</span>)</span>
<span id="cb1-72">  </span>
<span id="cb1-73">  output[[<span class="st">"uiX"</span>]] &lt;-<span class="st"> </span><span class="kw">renderUI</span>({ <span class="co"># the widget for selecting a variable</span></span>
<span id="cb1-74">    <span class="kw">req</span>(<span class="kw">data</span>())</span>
<span id="cb1-75">    <span class="kw">selectInput</span>(</span>
<span id="cb1-76">      <span class="st">"X"</span>, </span>
<span id="cb1-77">      <span class="st">"Select variable"</span>,</span>
<span id="cb1-78">      <span class="dt">choices =</span> <span class="kw">colnames</span>(<span class="kw">data</span>())</span>
<span id="cb1-79">    )</span>
<span id="cb1-80">  })</span>
<span id="cb1-81">  </span>
<span id="cb1-82">  Xloggable &lt;-<span class="st"> </span><span class="kw">reactiveVal</span>(<span class="ot">FALSE</span>) <span class="co"># indicates whether log-transform is possible </span></span>
<span id="cb1-83">  <span class="kw">observeEvent</span>(input[[<span class="st">"X"</span>]], {    </span>
<span id="cb1-84">    loggable &lt;-<span class="st"> </span><span class="kw">all</span>(<span class="kw">data</span>()[[input[[<span class="st">"X"</span>]]]] <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, <span class="dt">na.rm =</span> <span class="ot">TRUE</span>)</span>
<span id="cb1-85">    <span class="kw">Xloggable</span>(loggable)</span>
<span id="cb1-86">  })</span>
<span id="cb1-87">  </span>
<span id="cb1-88">  logX &lt;-<span class="st"> </span><span class="kw">reactive</span>({ <span class="co"># indicates whether to log-transform the selected variable</span></span>
<span id="cb1-89">    <span class="kw">Xloggable</span>() <span class="op">&amp;&amp;</span><span class="st"> </span>input[[<span class="st">"log10"</span>]]</span>
<span id="cb1-90">  })</span>
<span id="cb1-91">  </span>
<span id="cb1-92">  <span class="kw">observeEvent</span>(<span class="kw">list</span>(input[[<span class="st">"X"</span>]], input[[<span class="st">"log10"</span>]]), { <span class="co"># prevents log-transform</span></span>
<span id="cb1-93">    <span class="kw">req</span>(input[[<span class="st">"X"</span>]])                                  <span class="co"># if not possible</span></span>
<span id="cb1-94">    <span class="cf">if</span>(input[[<span class="st">"log10"</span>]] <span class="op">&amp;&amp;</span><span class="st"> </span><span class="op">!</span><span class="kw">Xloggable</span>()){</span>
<span id="cb1-95">      <span class="kw">showNotification</span>(<span class="st">"The selected variable cannot be log-transformed."</span>)</span>
<span id="cb1-96">      <span class="kw">updateCheckboxInput</span>(session, <span class="st">"log10"</span>, <span class="dt">value =</span> <span class="ot">FALSE</span>)</span>
<span id="cb1-97">    }</span>
<span id="cb1-98">  })</span>
<span id="cb1-99">  </span>
<span id="cb1-100">  output[[<span class="st">"plot"</span>]] &lt;-<span class="st"> </span><span class="kw">renderPlot</span>({ <span class="co"># the plot</span></span>
<span id="cb1-101">    <span class="kw">req</span>(input[[<span class="st">"X"</span>]])</span>
<span id="cb1-102">    x &lt;-<span class="st"> </span><span class="kw">data</span>()[[input[[<span class="st">"X"</span>]]]]</span>
<span id="cb1-103">    <span class="cf">if</span>(<span class="kw">logX</span>()){</span>
<span id="cb1-104">      <span class="kw">plot</span>(<span class="kw">log10</span>(x), <span class="dt">pch =</span> <span class="dv">19</span>)</span>
<span id="cb1-105">    }<span class="cf">else</span>{</span>
<span id="cb1-106">      <span class="kw">plot</span>(x, <span class="dt">pch =</span> <span class="dv">19</span>)</span>
<span id="cb1-107">    }</span>
<span id="cb1-108">  })</span>
<span id="cb1-109">  </span>
<span id="cb1-110">  output[[<span class="st">"saveState"</span>]] &lt;-<span class="st"> </span><span class="kw">downloadHandler</span>( <span class="co"># bookmarking</span></span>
<span id="cb1-111">    <span class="dt">filename =</span> <span class="st">"state.rds"</span>,</span>
<span id="cb1-112">    <span class="dt">content =</span> <span class="cf">function</span>(file){</span>
<span id="cb1-113">      state &lt;-<span class="st"> </span><span class="kw">list</span>(</span>
<span id="cb1-114">        <span class="dt">data  =</span> <span class="kw">data</span>(),</span>
<span id="cb1-115">        <span class="dt">X     =</span> input[[<span class="st">"X"</span>]],</span>
<span id="cb1-116">        <span class="dt">log10 =</span> input[[<span class="st">"log10"</span>]]</span>
<span id="cb1-117">      )</span>
<span id="cb1-118">      <span class="kw">saveRDS</span>(state, file)</span>
<span id="cb1-119">    }</span>
<span id="cb1-120">  )</span>
<span id="cb1-121">  </span>
<span id="cb1-122">  <span class="kw">observeEvent</span>(input[[<span class="st">"rds"</span>]], { <span class="co"># restore state</span></span>
<span id="cb1-123">    <span class="co"># read the saved state</span></span>
<span id="cb1-124">    state &lt;-<span class="st"> </span><span class="kw">readRDS</span>(input[[<span class="st">"rds"</span>]][[<span class="st">"datapath"</span>]])</span>
<span id="cb1-125">    <span class="co"># restore data</span></span>
<span id="cb1-126">    <span class="kw">data</span>(state[[<span class="st">"data"</span>]])</span>
<span id="cb1-127">    <span class="kw">delay</span>(<span class="dv">0</span>, {</span>
<span id="cb1-128">      <span class="kw">delay</span>(<span class="dv">0</span>, { <span class="co"># restore the selected variable</span></span>
<span id="cb1-129">        <span class="kw">updateSelectInput</span>(session, <span class="st">"X"</span>, <span class="dt">selected =</span> state[[<span class="st">"X"</span>]])</span>
<span id="cb1-130">        <span class="kw">delay</span>(<span class="dv">0</span>, { <span class="co"># restore the checkbox state (log-transform)</span></span>
<span id="cb1-131">          <span class="kw">updateCheckboxInput</span>(session, <span class="st">"log10"</span>, <span class="dt">value =</span> state[[<span class="st">"log10"</span>]])</span>
<span id="cb1-132">        })</span>
<span id="cb1-133">      })</span>
<span id="cb1-134">    })</span>
<span id="cb1-135">  })</span>
<span id="cb1-136">  </span>
<span id="cb1-137">}</span>
<span id="cb1-138"></span>
<span id="cb1-139"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        I firstly tried to delay the <code>updateSelectInput</code> directly in
        the <code>delay</code> function, like this:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1">    <span class="kw">delay</span>(<span class="dv">0</span>, { <span class="co"># restore the selected variable</span></span>
<span id="cb2-2">      <span class="kw">updateSelectInput</span>(session, <span class="st">"X"</span>, <span class="dt">selected =</span> state[[<span class="st">"X"</span>]])</span>
<span id="cb2-3">      <span class="kw">delay</span>(<span class="dv">0</span>, { <span class="co"># restore the checkbox state (log-transform)</span></span>
<span id="cb2-4">        <span class="kw">updateCheckboxInput</span>(session, <span class="st">"log10"</span>, <span class="dt">value =</span> state[[<span class="st">"log10"</span>]])</span>
<span id="cb2-5">      })</span>
<span id="cb2-6">    })</span></code></pre>
      </div>
      <p>
        Oddly, that worked in the RStudio browser, but not in Chrome. This is
        why I added a nested <code>delay</code> function.
      </p>
      <p>Bookmarking:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/shinyBookmarking1.gif"
        />
      </p>
      <p>And now, restoring:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/shinyBookmarking2.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 09 Dec 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/shinyBookmarking.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Generalized fiducial inference on quantiles</title>
      <link>https://laustep.github.io/stlahblog/posts/gfiExtremes.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        My new package ‘gfiExtremes’ is on
        <a href="https://cran.r-project.org/web/packages/gfiExtremes/index.html"
          >CRAN</a
        >
        now. So it is time to present it.
      </p>
      <p>
        This package allows to get confidence intervals about the quantiles of
        any reasonable distribution (although the inference is based on a
        parametric model). The statistical inference is fiducial.
      </p>
      <p>
        To give an illustration, I’m taking a sample of length 100 randomly
        generated from a Weibull distribution:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">set.seed</span>(1111111111L)</span>
<span id="cb1-2">X &lt;-<span class="st"> </span><span class="kw">rweibull</span>(100L, <span class="dt">shape =</span> <span class="fl">1.5</span>)</span>
<span id="cb1-3"><span class="kw">plot</span>(X, <span class="dt">pch =</span> <span class="dv">19</span>, <span class="dt">main =</span> <span class="st">"Data"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gfiExtremes-weibullSample-1.png"
        />
      </p>
      <p>
        The model used for the fiducial inference assumes a generalized Pareto
        distribution above a certain threshold. For an unknown value of this
        threshold, the function to use is <code>gfigpd2</code>. It runs a MCMC
        sampler, and one has to specify the length of the burnin phase, the
        desired length of the MCMC chains after the burnin, and the thin value
        (e.g. a thin of 2 means that one sampled value over two is dropped). One
        also has to specify the desired probability levels of the quantiles we
        are interested in.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(gfiExtremes)</span>
<span id="cb2-2">chains &lt;-<span class="st"> </span><span class="kw">gfigpd2</span>(</span>
<span id="cb2-3">  X,                                         <span class="co"># data</span></span>
<span id="cb2-4">  <span class="dt">beta =</span> <span class="kw">c</span>(<span class="dv">99</span>, <span class="fl">99.5</span>, <span class="fl">99.9</span>)<span class="op">/</span><span class="dv">100</span>,              <span class="co"># probability levels</span></span>
<span id="cb2-5">  <span class="dt">threshold.init =</span> <span class="fl">0.7</span>,                      <span class="co"># initial threshold value</span></span>
<span id="cb2-6">  <span class="dt">burnin =</span> 20000L, <span class="dt">iter =</span> 20000L, <span class="dt">thin =</span> 10L <span class="co"># MCMC chains</span></span>
<span id="cb2-7">)</span></code></pre>
      </div>
      <p>
        By default, <code>gfigpd2</code> runs four MCMC chains and they are
        generated in parallel.
      </p>
      <p>
        The output of <code>gfigpd2</code> is a R object ready for analysis with
        the ‘coda’ package, which is loaded by ‘gfiExtremes’. In particular, it
        has a <code>summary</code> method:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">summary</span>(chains)</span>
<span id="cb3-2"><span class="co">## </span></span>
<span id="cb3-3"><span class="co">## Iterations = 20001:219991</span></span>
<span id="cb3-4"><span class="co">## Thinning interval = 10 </span></span>
<span id="cb3-5"><span class="co">## Number of chains = 4 </span></span>
<span id="cb3-6"><span class="co">## Sample size per chain = 20000 </span></span>
<span id="cb3-7"><span class="co">## </span></span>
<span id="cb3-8"><span class="co">## 1. Empirical mean and standard deviation for each variable,</span></span>
<span id="cb3-9"><span class="co">##    plus standard error of the mean:</span></span>
<span id="cb3-10"><span class="co">## </span></span>
<span id="cb3-11"><span class="co">##        Mean     SD Naive SE Time-series SE</span></span>
<span id="cb3-12"><span class="co">## beta1 3.297  1.172 0.004145        0.01229</span></span>
<span id="cb3-13"><span class="co">## beta2 3.892  3.539 0.012513        0.03705</span></span>
<span id="cb3-14"><span class="co">## beta3 6.789 80.903 0.286035        0.72901</span></span>
<span id="cb3-15"><span class="co">## </span></span>
<span id="cb3-16"><span class="co">## 2. Quantiles for each variable:</span></span>
<span id="cb3-17"><span class="co">## </span></span>
<span id="cb3-18"><span class="co">##        2.5%   25%   50%   75%  97.5%</span></span>
<span id="cb3-19"><span class="co">## beta1 2.512 2.858 3.096 3.444  5.240</span></span>
<span id="cb3-20"><span class="co">## beta2 2.765 3.157 3.459 3.963  7.307</span></span>
<span id="cb3-21"><span class="co">## beta3 3.250 3.740 4.268 5.362 17.127</span></span></code></pre>
      </div>
      <p>
        The ‘coda’ package provides the <code>HPDinterval</code> function which
        gives the shortest confidence intervals:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">HPDinterval</span>(<span class="kw">joinMCMCchains</span>(chains))</span>
<span id="cb4-2"><span class="co">##          lower     upper</span></span>
<span id="cb4-3"><span class="co">## beta1 2.371387  4.591365</span></span>
<span id="cb4-4"><span class="co">## beta2 2.524189  5.910930</span></span>
<span id="cb4-5"><span class="co">## beta3 2.893593 11.091305</span></span>
<span id="cb4-6"><span class="co">## attr(,"Probability")</span></span>
<span id="cb4-7"><span class="co">## [1] 0.95</span></span></code></pre>
      </div>
      <p>
        Below are the true values of the Weibull quantiles; they are caught by
        the confidence intervals:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">qweibull</span>(<span class="kw">c</span>(<span class="dv">99</span>, <span class="fl">99.5</span>, <span class="fl">99.9</span>)<span class="op">/</span><span class="dv">100</span>, <span class="dt">shape =</span> <span class="fl">1.5</span>)</span>
<span id="cb5-2"><span class="co">## [1] 2.767985 3.039196 3.627087</span></span></code></pre>
      </div>
      <h2 id="convergence-diagnostics">Convergence diagnostics</h2>
      <p>
        Now one has to check that the MCMC chains have entered in their
        stationary phase. It is better to take the logarithm of the simulations
        of the fiducial distributions of the quantiles:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">logChains &lt;-<span class="st"> </span><span class="kw">as.mcmc.list</span>(<span class="kw">lapply</span>(chains, log))</span></code></pre>
      </div>
      <p>
        The ‘ggmcmc’ package is helpful here. Firstly, let’s have a look at the
        traces:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(ggmcmc)</span>
<span id="cb7-2">gglogChains &lt;-<span class="st"> </span><span class="kw">ggs</span>(logChains)</span>
<span id="cb7-3"><span class="kw">library</span>(ggthemes)</span>
<span id="cb7-4"><span class="kw">ggs_traceplot</span>(gglogChains) <span class="op">+</span><span class="st"> </span><span class="kw">theme_fivethirtyeight</span>()</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gfiExtremes-traceplot-1.png"
        />
      </p>
      <p>
        Visually, nothing indicates a departure from the convergence. Let’s look
        at the estimated densities now:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb8-1"><span class="kw">ggs_density</span>(gglogChains) <span class="op">+</span><span class="st"> </span><span class="kw">theme_fivethirtyeight</span>()</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gfiExtremes-densities-1.png"
        />
      </p>
      <p>The running means quickly stabilize:</p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb9-1"><span class="kw">ggs_running</span>(gglogChains) <span class="op">+</span><span class="st"> </span><span class="kw">theme_fivethirtyeight</span>()</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gfiExtremes-runningMeans-1.png"
        />
      </p>
      <p>
        Below are the densities of the whole chains compared with the densities
        of their last part:
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1"><span class="kw">ggs_compare_partial</span>(gglogChains) <span class="op">+</span><span class="st"> </span><span class="kw">theme_fivethirtyeight</span>()</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gfiExtremes-comparePartial-1.png"
        />
      </p>
      <p>The autocorrelations nicely decrease:</p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb11-1"><span class="kw">ggs_autocorrelation</span>(gglogChains) <span class="op">+</span><span class="st"> </span><span class="kw">theme_fivethirtyeight</span>()</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gfiExtremes-autocorrelations-1.png"
        />
      </p>
      <p>Let’s also have a look at the Gelman-Rubin diagnostic:</p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb12-1"><span class="kw">gelman.diag</span>(logChains)</span>
<span id="cb12-2"><span class="co">## Potential scale reduction factors:</span></span>
<span id="cb12-3"><span class="co">## </span></span>
<span id="cb12-4"><span class="co">##       Point est. Upper C.I.</span></span>
<span id="cb12-5"><span class="co">## beta1          1       1.00</span></span>
<span id="cb12-6"><span class="co">## beta2          1       1.01</span></span>
<span id="cb12-7"><span class="co">## beta3          1       1.01</span></span>
<span id="cb12-8"><span class="co">## </span></span>
<span id="cb12-9"><span class="co">## Multivariate psrf</span></span>
<span id="cb12-10"><span class="co">## </span></span>
<span id="cb12-11"><span class="co">## 1</span></span></code></pre>
      </div>
      <p>
        The upper <code>Rhat</code> are close to 1, thereby indicating a
        successful diagnostic.
      </p>
      <p>Finally, let’s look at the Heidelberger &amp; Welch diagnostic:</p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb13-1"><span class="kw">heidel.diag</span>(logChains)</span>
<span id="cb13-2"><span class="co">## [[1]]</span></span>
<span id="cb13-3"><span class="co">##                                     </span></span>
<span id="cb13-4"><span class="co">##       Stationarity start     p-value</span></span>
<span id="cb13-5"><span class="co">##       test         iteration        </span></span>
<span id="cb13-6"><span class="co">## beta1 passed       1         0.591  </span></span>
<span id="cb13-7"><span class="co">## beta2 passed       1         0.356  </span></span>
<span id="cb13-8"><span class="co">## beta3 passed       1         0.189  </span></span>
<span id="cb13-9"><span class="co">##                               </span></span>
<span id="cb13-10"><span class="co">##       Halfwidth Mean Halfwidth</span></span>
<span id="cb13-11"><span class="co">##       test                    </span></span>
<span id="cb13-12"><span class="co">## beta1 passed    1.17 0.00818  </span></span>
<span id="cb13-13"><span class="co">## beta2 passed    1.31 0.01201  </span></span>
<span id="cb13-14"><span class="co">## beta3 passed    1.60 0.03032  </span></span>
<span id="cb13-15"><span class="co">## </span></span>
<span id="cb13-16"><span class="co">## [[2]]</span></span>
<span id="cb13-17"><span class="co">##                                     </span></span>
<span id="cb13-18"><span class="co">##       Stationarity start     p-value</span></span>
<span id="cb13-19"><span class="co">##       test         iteration        </span></span>
<span id="cb13-20"><span class="co">## beta1 passed       1         0.652  </span></span>
<span id="cb13-21"><span class="co">## beta2 passed       1         0.571  </span></span>
<span id="cb13-22"><span class="co">## beta3 passed       1         0.400  </span></span>
<span id="cb13-23"><span class="co">##                               </span></span>
<span id="cb13-24"><span class="co">##       Halfwidth Mean Halfwidth</span></span>
<span id="cb13-25"><span class="co">##       test                    </span></span>
<span id="cb13-26"><span class="co">## beta1 passed    1.17 0.00713  </span></span>
<span id="cb13-27"><span class="co">## beta2 passed    1.30 0.01047  </span></span>
<span id="cb13-28"><span class="co">## beta3 passed    1.58 0.02423  </span></span>
<span id="cb13-29"><span class="co">## </span></span>
<span id="cb13-30"><span class="co">## [[3]]</span></span>
<span id="cb13-31"><span class="co">##                                     </span></span>
<span id="cb13-32"><span class="co">##       Stationarity start     p-value</span></span>
<span id="cb13-33"><span class="co">##       test         iteration        </span></span>
<span id="cb13-34"><span class="co">## beta1 passed       1         0.0720 </span></span>
<span id="cb13-35"><span class="co">## beta2 passed       1         0.0687 </span></span>
<span id="cb13-36"><span class="co">## beta3 passed       1         0.0789 </span></span>
<span id="cb13-37"><span class="co">##                               </span></span>
<span id="cb13-38"><span class="co">##       Halfwidth Mean Halfwidth</span></span>
<span id="cb13-39"><span class="co">##       test                    </span></span>
<span id="cb13-40"><span class="co">## beta1 passed    1.17 0.00856  </span></span>
<span id="cb13-41"><span class="co">## beta2 passed    1.31 0.01278  </span></span>
<span id="cb13-42"><span class="co">## beta3 passed    1.59 0.03042  </span></span>
<span id="cb13-43"><span class="co">## </span></span>
<span id="cb13-44"><span class="co">## [[4]]</span></span>
<span id="cb13-45"><span class="co">##                                     </span></span>
<span id="cb13-46"><span class="co">##       Stationarity start     p-value</span></span>
<span id="cb13-47"><span class="co">##       test         iteration        </span></span>
<span id="cb13-48"><span class="co">## beta1 passed       1         0.444  </span></span>
<span id="cb13-49"><span class="co">## beta2 passed       1         0.276  </span></span>
<span id="cb13-50"><span class="co">## beta3 passed       1         0.164  </span></span>
<span id="cb13-51"><span class="co">##                               </span></span>
<span id="cb13-52"><span class="co">##       Halfwidth Mean Halfwidth</span></span>
<span id="cb13-53"><span class="co">##       test                    </span></span>
<span id="cb13-54"><span class="co">## beta1 passed    1.16 0.00709  </span></span>
<span id="cb13-55"><span class="co">## beta2 passed    1.30 0.01008  </span></span>
<span id="cb13-56"><span class="co">## beta3 passed    1.57 0.01926</span></span></code></pre>
      </div>
      <p>All tests passed.</p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 27 Nov 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/gfiExtremes.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Why I like generalized fiducial inference</title>
      <link>https://laustep.github.io/stlahblog/posts/gfi_vs_rstanarm.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Throughout this article, one considers the balanced one-way ANOVA model
        with a random factor (<code>group</code>). The between standard
        deviation and the within standard deviation are denoted by
        <span class="math inline">\(\sigma_{\mathrm{b}}\)</span> and
        <span class="math inline">\(\sigma_{\mathrm{w}}\)</span> respectively.
        The grand mean is denoted by <span class="math inline">\(\mu\)</span>.
        The number of levels of the <code>group</code> factor is denoted by
        <span class="math inline">\(I\)</span> and the number of individuals
        within each group is denoted by <span class="math inline">\(J\)</span>.
        Thus the model is:
        <span class="math display"
          >\[ \mu_i \sim_{\text{iid}} \mathcal{N}(\mu, \sigma_{\mathrm{b}}^2),
          \, i = 1, \ldots, I \qquad (y_{i,j} \mid \mu_i) \sim_{\text{iid}}
          \mathcal{N}(\mu_i, \sigma_{\mathrm{w}}^2), \, j = 1, \ldots, J.
          \]</span
        >
      </p>
      <h2 id="using-rstanarm-with-the-default-priors">
        Using ‘rstanarm’ with the default priors
      </h2>
      <p>
        Below I fit the model with the ‘rstanarm’ package for fifteen simulated
        datasets with <span class="math inline">\(I = 10\)</span>,
        <span class="math inline">\(J = 5\)</span>,
        <span class="math inline">\(\mu = 10000\)</span>,
        <span class="math inline">\(\sigma_{\mathrm{b}} = 50\)</span>,
        <span class="math inline">\(\sigma_{\mathrm{w}} = 1\)</span>. I assign a
        “vague” half-Cauchy prior distribution to
        <span class="math inline">\(\sigma_{\mathrm{w}}\)</span> and the other
        prior distributions are the default prior distributions of
        <code>stan_lmer</code>.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(rstanarm)</span>
<span id="cb1-2"><span class="kw">options</span>(<span class="dt">mc.cores =</span> parallel<span class="op">::</span><span class="kw">detectCores</span>())</span>
<span id="cb1-3"></span>
<span id="cb1-4">mu           &lt;-<span class="st"> </span><span class="dv">10000</span> </span>
<span id="cb1-5">sigmaWithin  &lt;-<span class="st"> </span><span class="dv">1</span></span>
<span id="cb1-6">ratio        &lt;-<span class="st"> </span><span class="dv">50</span></span>
<span id="cb1-7">sigmaBetween &lt;-<span class="st"> </span>sigmaWithin <span class="op">*</span><span class="st"> </span>ratio</span>
<span id="cb1-8">I            &lt;-<span class="st"> </span>10L </span>
<span id="cb1-9">J            &lt;-<span class="st"> </span>5L </span>
<span id="cb1-10"></span>
<span id="cb1-11">nsims &lt;-<span class="st"> </span>15L </span>
<span id="cb1-12"></span>
<span id="cb1-13">stanIntervals &lt;-<span class="st"> </span><span class="kw">list</span>( <span class="co"># to store the confidence intervals</span></span>
<span id="cb1-14">  <span class="dt">within =</span> <span class="st">`</span><span class="dt">colnames&lt;-</span><span class="st">`</span>(<span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> nsims, <span class="dt">ncol =</span> <span class="dv">3</span>), </span>
<span id="cb1-15">                      <span class="kw">c</span>(<span class="st">"estimate"</span>, <span class="st">"lwr"</span>, <span class="st">"upr"</span>)),</span>
<span id="cb1-16">  <span class="dt">between =</span> <span class="st">`</span><span class="dt">colnames&lt;-</span><span class="st">`</span>(<span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> nsims, <span class="dt">ncol =</span> <span class="dv">3</span>), </span>
<span id="cb1-17">                      <span class="kw">c</span>(<span class="st">"estimate"</span>, <span class="st">"lwr"</span>, <span class="st">"upr"</span>))</span>
<span id="cb1-18">)</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="kw">set.seed</span>(666L)</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nsims){</span>
<span id="cb1-23">  groupMeans &lt;-<span class="st"> </span><span class="kw">rnorm</span>(I, mu, sigmaBetween)</span>
<span id="cb1-24">  y          &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb1-25">    <span class="kw">vapply</span>(groupMeans, <span class="cf">function</span>(gmean) <span class="kw">rnorm</span>(J, gmean, sigmaWithin), <span class="kw">numeric</span>(J))</span>
<span id="cb1-26">  )</span>
<span id="cb1-27">  dat        &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb1-28">    <span class="dt">y =</span> y,</span>
<span id="cb1-29">    <span class="dt">group =</span> <span class="kw">gl</span>(I, J)</span>
<span id="cb1-30">  )</span>
<span id="cb1-31">  </span>
<span id="cb1-32">  rstanarm &lt;-<span class="st"> </span><span class="kw">stan_lmer</span>(</span>
<span id="cb1-33">    y <span class="op">~</span><span class="st"> </span>(<span class="dv">1</span><span class="op">|</span>group), <span class="dt">data =</span> dat, <span class="dt">iter =</span> 5000L,</span>
<span id="cb1-34">    <span class="dt">prior_aux =</span> <span class="kw">cauchy</span>(<span class="dv">0</span>, <span class="dv">5</span>)</span>
<span id="cb1-35">  )</span>
<span id="cb1-36">  </span>
<span id="cb1-37">  pstrr &lt;-<span class="st"> </span><span class="kw">as.data.frame</span>( <span class="co"># extract posterior draws</span></span>
<span id="cb1-38">    stan,</span>
<span id="cb1-39">    <span class="dt">pars =</span> <span class="kw">c</span>(</span>
<span id="cb1-40">      <span class="st">"(Intercept)"</span>,</span>
<span id="cb1-41">      <span class="st">"sigma"</span>,</span>
<span id="cb1-42">      <span class="st">"Sigma[group:(Intercept),(Intercept)]"</span></span>
<span id="cb1-43">    )</span>
<span id="cb1-44">  )</span>
<span id="cb1-45">  <span class="kw">names</span>(pstrr)[2L<span class="op">:</span>3L] &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="st">"sigma_error"</span>, <span class="st">"sigma_group"</span>)</span>
<span id="cb1-46">  pstrr[[<span class="st">"sigma_group"</span>]] &lt;-<span class="st"> </span><span class="kw">sqrt</span>(pstrr[[<span class="st">"sigma_group"</span>]])</span>
<span id="cb1-47"></span>
<span id="cb1-48">  x &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">vapply</span>(pstrr, quantile, <span class="kw">numeric</span>(3L), <span class="dt">probs =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="fl">2.5</span>, <span class="fl">97.5</span>)<span class="op">/</span><span class="dv">100</span>))</span>
<span id="cb1-49">  stanIntervals<span class="op">$</span>within[i, ] &lt;-<span class="st"> </span>x[<span class="st">"sigma_error"</span>, ]</span>
<span id="cb1-50">  stanIntervals<span class="op">$</span>between[i, ] &lt;-<span class="st"> </span>x[<span class="st">"sigma_group"</span>, ]</span>
<span id="cb1-51">}</span></code></pre>
      </div>
      <p>Let’s plot the intervals now.</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(ggplot2)</span>
<span id="cb2-2">stanWithin &lt;-<span class="st"> </span><span class="kw">as.data.frame</span>(stanIntervals[[<span class="st">"within"</span>]])</span>
<span id="cb2-3">stanWithin[[<span class="st">"simulation"</span>]] &lt;-<span class="st"> </span><span class="kw">factor</span>(1L<span class="op">:</span>nsims)</span>
<span id="cb2-4"><span class="kw">ggplot</span>(</span>
<span id="cb2-5">  stanWithin, </span>
<span id="cb2-6">  <span class="kw">aes</span>(</span>
<span id="cb2-7">    <span class="dt">x =</span> simulation, <span class="dt">y =</span> estimate, <span class="dt">ymin =</span> lwr, <span class="dt">ymax =</span> upr</span>
<span id="cb2-8">  )</span>
<span id="cb2-9">) <span class="op">+</span><span class="st"> </span></span>
<span id="cb2-10"><span class="st">  </span><span class="kw">geom_pointrange</span>() <span class="op">+</span><span class="st"> </span></span>
<span id="cb2-11"><span class="st">  </span><span class="kw">ylab</span>(<span class="st">"interval"</span>) <span class="op">+</span><span class="st"> </span></span>
<span id="cb2-12"><span class="st">  </span><span class="kw">geom_hline</span>(<span class="dt">yintercept =</span> <span class="dv">1</span>, <span class="dt">linetype =</span> <span class="st">"dashed"</span>) <span class="op">+</span><span class="st"> </span></span>
<span id="cb2-13"><span class="st">  </span><span class="kw">ggtitle</span>(<span class="st">"Confidence intervals about the within standard deviation"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gfi_rstanarm-stanIntervalsWithin-1.png"
        />
      </p>
      <p>
        The horizontal line shows the value of
        <span class="math inline">\(\sigma_{\mathrm{w}}\)</span>. As you can
        see, the confidence intervals dramatically fail to catch this value.
      </p>
      <p>
        And this is also the case for
        <span class="math inline">\(\sigma_{\mathrm{b}}\)</span>:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">stanBetween &lt;-<span class="st"> </span><span class="kw">as.data.frame</span>(stanIntervals[[<span class="st">"between"</span>]])</span>
<span id="cb3-2">stanBetween[[<span class="st">"simulation"</span>]] &lt;-<span class="st"> </span><span class="kw">factor</span>(1L<span class="op">:</span>nsims)</span>
<span id="cb3-3"><span class="kw">ggplot</span>(</span>
<span id="cb3-4">  stanBetween, </span>
<span id="cb3-5">  <span class="kw">aes</span>(</span>
<span id="cb3-6">    <span class="dt">x =</span> simulation, <span class="dt">y =</span> estimate, <span class="dt">ymin =</span> lwr, <span class="dt">ymax =</span> upr</span>
<span id="cb3-7">  )</span>
<span id="cb3-8">) <span class="op">+</span><span class="st"> </span></span>
<span id="cb3-9"><span class="st">  </span><span class="kw">geom_pointrange</span>() <span class="op">+</span><span class="st"> </span></span>
<span id="cb3-10"><span class="st">  </span><span class="kw">ylab</span>(<span class="st">"interval"</span>) <span class="op">+</span><span class="st"> </span></span>
<span id="cb3-11"><span class="st">  </span><span class="kw">geom_hline</span>(<span class="dt">yintercept =</span> <span class="dv">1</span>, <span class="dt">linetype =</span> <span class="st">"dashed"</span>) <span class="op">+</span><span class="st"> </span></span>
<span id="cb3-12"><span class="st">  </span><span class="kw">ggtitle</span>(<span class="st">"Confidence intervals about the between standard deviation"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gfi_rstanarm-stanIntervalsBetween-1.png"
        />
      </p>
      <h2 id="resolving-the-issue">Resolving the issue</h2>
      <p>
        Why? The explanation is simple: <code>stan_lmer</code> assigns a unit
        exponential prior distribution to the between standard deviation, which
        is equal to <span class="math inline">\(50\)</span>.
      </p>
      <p>
        So we have to change this prior distribution, and
        <code>stan_lmer</code> allows to use a Gamma distribution as the prior
        distribution of the between standard deviation. Its parameters
        <code>shape</code> and <code>scale</code> are settable in the
        <code>decov</code> function which is passed on to the
        <code>prior_covariance</code> option:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">rstanarm &lt;-<span class="st"> </span><span class="kw">stan_lmer</span>(</span>
<span id="cb4-2">  y <span class="op">~</span><span class="st"> </span>(<span class="dv">1</span><span class="op">|</span>group), <span class="dt">data =</span> dat, <span class="dt">iter =</span> 5000L,</span>
<span id="cb4-3">  <span class="dt">prior_aux =</span> <span class="kw">cauchy</span>(<span class="dv">0</span>, <span class="dv">5</span>),</span>
<span id="cb4-4">  <span class="dt">prior_covariance =</span> <span class="kw">decov</span>(<span class="dt">shape =</span> <span class="dv">2</span>, <span class="dt">scale =</span> <span class="dv">30</span>)</span>
<span id="cb4-5">)</span></code></pre>
      </div>
      <p>
        I choose the
        <span class="math inline"
          >\(\textrm{Gamma}(\textrm{shape}=2, \textrm{scale=30})\)</span
        >
        distribution because it has median
        <span class="math inline">\(\approx 50\)</span> and is “vague” enough:
        its equi-tailed <span class="math inline">\(95\%\)</span>-dispersion
        interval is <span class="math inline">\(\approx (7, 167)\)</span>.
      </p>
      <p>
        <span style="color: firebrick; font-size: 1.25em"
          >☛
          <em
            >However it took me some time to pick up these parameters. I firstly
            tried a more dispersed Gamma distribution but
            <code>stan_lmer</code> returned a bunch of warnings and non-sensible
            results.</em
          ></span
        >
      </p>
      <p>
        Below are the confidence intervals obtained with this Gamma prior
        distribution. I compare them with the frequentist intervals obtained
        with the ‘AOV1R’ package.
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gfi_rstanarm-stanIntervals2Within-1.png"
        />
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gfi_rstanarm-stanIntervals2Between-1.png"
        />
      </p>
      <p>Quite good.</p>
      <p>
        <span style="color: firebrick; font-size: 1.25em"
          >☛
          <em
            >I also noticed that the sampling was slower with this Gamma
            distribution.</em
          ></span
        >
      </p>
      <h2 id="try-the-generalized-fiducial-inference.">
        Try the generalized fiducial inference.
      </h2>
      <p>
        My new package ‘gfilmm’ allows to perform the
        <em>generalized fiducial inference</em> for any Gaussian linear mixed
        model with categorical random effects.
      </p>
      <p>
        Fiducial inference and Bayesian inference have something in common: they
        are both based on a distribution representing the uncertainty about the
        parameters: the fiducial distribution and the posterior distribution,
        respectively.
      </p>
      <p>
        A notable difference between these two methods of inference is that
        <em>there’s no prior distribution in fiducial statistics</em>.
      </p>
      <p>Here is how to run the fiducial sampler:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">library</span>(gfilmm)</span>
<span id="cb5-2">fiducialSimulations &lt;-<span class="st"> </span><span class="kw">gfilmm</span>(</span>
<span id="cb5-3">  <span class="dt">y =</span> <span class="op">~</span><span class="st"> </span><span class="kw">cbind</span>(y <span class="op">-</span><span class="st"> </span><span class="fl">0.01</span>, y <span class="op">+</span><span class="st"> </span><span class="fl">0.01</span>), <span class="dt">fixed =</span> <span class="op">~</span><span class="st"> </span><span class="dv">1</span>, <span class="dt">random =</span> <span class="op">~</span><span class="st"> </span>group, </span>
<span id="cb5-4">  <span class="dt">data=</span> dat, <span class="dt">N =</span> 10000L</span>
<span id="cb5-5">)</span></code></pre>
      </div>
      <p>
        Note the form of the response variable:
        <code>~ cbind(y - 0.01, y + 0.01)</code>. That’s because the generalized
        fiducial inference applies to interval data.
      </p>
      <p>
        Below are the fiducial confidence intervals for the same simulated
        datasets as before.
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gfi_rstanarm-fidIntervalsWithin-1.png"
        />
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/gfi_rstanarm-fidIntervalsBetween-1.png"
        />
      </p>
      <p>
        Quite good too. And let me insist on this point:
        <em
          >there is no prior distribution, there is nothing to set, except the
          number of simulations</em
        >. I implemented the algorithm (due to J. Cisewski and J. Hannig) in C++
        and it takes less than 1000 lines of code.
      </p>
      <p>Let’s increase the between standard deviation now.</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1">ratio &lt;-<span class="st"> </span><span class="dv">1000</span></span>
<span id="cb6-2">sigmaBetween &lt;-<span class="st"> </span>ratio <span class="op">*</span><span class="st"> </span>sigmaWithin</span>
<span id="cb6-3"><span class="kw">set.seed</span>(31415926L)</span>
<span id="cb6-4">groupMeans &lt;-<span class="st"> </span><span class="kw">rnorm</span>(I, mu, sigmaBetween)</span>
<span id="cb6-5">y          &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb6-6">  <span class="kw">vapply</span>(groupMeans, <span class="cf">function</span>(gmean) <span class="kw">rnorm</span>(J, gmean, sigmaWithin), <span class="kw">numeric</span>(J))</span>
<span id="cb6-7">)</span>
<span id="cb6-8">dat        &lt;-<span class="st"> </span><span class="kw">data.frame</span>(</span>
<span id="cb6-9">  <span class="dt">y =</span> y,</span>
<span id="cb6-10">  <span class="dt">group =</span> <span class="kw">gl</span>(I, J)</span>
<span id="cb6-11">)</span>
<span id="cb6-12"><span class="kw">library</span>(AOV1R)</span>
<span id="cb6-13"><span class="kw">library</span>(gfilmm)</span>
<span id="cb6-14">aovfit &lt;-<span class="st"> </span><span class="kw">aov1r</span>(y <span class="op">~</span><span class="st"> </span>group, <span class="dt">data =</span> dat)</span>
<span id="cb6-15">gf &lt;-<span class="st"> </span><span class="kw">gfilmm</span>(<span class="op">~</span><span class="st"> </span><span class="kw">cbind</span>(y<span class="fl">-0.01</span>, y<span class="fl">+0.01</span>), <span class="op">~</span><span class="st"> </span><span class="dv">1</span>, <span class="op">~</span><span class="st"> </span>group, <span class="dt">data =</span> dat, <span class="dt">N =</span> 5000L)</span>
<span id="cb6-16"><span class="kw">confint</span>(aovfit)</span>
<span id="cb6-17"><span class="co">##               estimate          lwr          upr</span></span>
<span id="cb6-18"><span class="co">## grandMean 9783.4770335 9227.6673527 10339.286714</span></span>
<span id="cb6-19"><span class="co">## within       0.9454425    0.7762205     1.209696</span></span>
<span id="cb6-20"><span class="co">## between    776.9682432  534.4260219  1418.441282</span></span>
<span id="cb6-21"><span class="co">## total      776.9688185  534.4268604  1418.441598</span></span>
<span id="cb6-22"><span class="co">## </span></span>
<span id="cb6-23"><span class="co">## attr(,"confidence level")</span></span>
<span id="cb6-24"><span class="co">## [1] 0.95</span></span>
<span id="cb6-25"><span class="co">## attr(,"standard deviations")</span></span>
<span id="cb6-26"><span class="co">## [1] TRUE</span></span></code></pre>
      </div>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">gfiSummary</span>(gf)</span>
<span id="cb7-2"><span class="co">##                    mean      median         lwr          upr Pr(=0)</span></span>
<span id="cb7-3"><span class="co">## (Intercept) 9786.579629 9787.161625 9247.718851 10344.743737     NA</span></span>
<span id="cb7-4"><span class="co">## sigma_group  854.314055  807.650667  528.463101  1485.287694      0</span></span>
<span id="cb7-5"><span class="co">## sigma_error    1.557918    1.543563    1.273913     1.931306      0</span></span>
<span id="cb7-6"><span class="co">## attr(,"confidence level")</span></span>
<span id="cb7-7"><span class="co">## [1] 0.95</span></span></code></pre>
      </div>
      <p>
        The fiducial confidence interval about the within standard deviation
        does not match the frequentist interval, and does not catch the true
        value. Nothing to tinker with, except the number of simulations:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1">gf &lt;-<span class="st"> </span><span class="kw">gfilmm</span>(<span class="op">~</span><span class="st"> </span><span class="kw">cbind</span>(y<span class="fl">-0.01</span>, y<span class="fl">+0.01</span>), <span class="op">~</span><span class="st"> </span><span class="dv">1</span>, <span class="op">~</span><span class="st"> </span>group, <span class="dt">data =</span> dat, <span class="dt">N =</span> 30000L)</span>
<span id="cb8-2"><span class="kw">gfiSummary</span>(gf)</span>
<span id="cb8-3"><span class="co">##                     mean       median          lwr          upr Pr(=0)</span></span>
<span id="cb8-4"><span class="co">## (Intercept) 9780.0741293 9779.1304187 9230.1017080 10333.801655     NA</span></span>
<span id="cb8-5"><span class="co">## sigma_group  847.3551078  805.8588214  536.0212551  1401.862597      0</span></span>
<span id="cb8-6"><span class="co">## sigma_error    0.9540852    0.9455375    0.7762872     1.185648      0</span></span>
<span id="cb8-7"><span class="co">## attr(,"confidence level")</span></span>
<span id="cb8-8"><span class="co">## [1] 0.95</span></span></code></pre>
      </div>
      <p>Now the fiducial intervals match the frequentist ones.</p>
      <h2 id="epilogue">Epilogue</h2>
      <p>
        As you have seen, using the generalized fiducial inference is easy,
        easier than the Bayesian inference. The difficulty I mentioned regarding
        the Bayesian inference is not severe, but this is because the one-way
        ANOVA model with a random factor is the simplest Gaussian linear mixed
        model. Namely, it has only one between standard deviation. Things get
        more complicated for a mixed model with multiple random effects. With
        <code>rstanarm::stan_lmer</code>, one has to assign a Gamma prior
        distribution on each between standard deviation. I cheated for the above
        example: I did multiple attempts to select the parameters of the Gamma
        prior, until I found results close to the frequentist ones!
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 08 Nov 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/gfi_vs_rstanarm.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Haskell is fast</title>
      <link>https://laustep.github.io/stlahblog/posts/HaskellIsFast.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        <em>Updated title:</em>
        <strong>Haskell is fast, but Julia is faster</strong> (see updates at
        the end).
      </p>
      <p>
        My R package ‘HypergeoMat’ provides a Rcpp implementation of Koev &amp;
        Edelman’s algorithm for the evaluation of the hypergeometric function of
        a matrix argument.
      </p>
      <p>
        I also implemented this algorithm in
        <a
          href="https://gist.github.com/stla/e85e2de1ad9aeeebc01583f1d0b8e1d0#file-hypergeompq9-jl"
          >Julia</a
        >
        and in <a href="https://github.com/stla/hypergeomPFQ">Haskell</a>.
      </p>
      <p>So let us benchmark now.</p>
      <p>Here is the hypergeometric function of a matrix argument:</p>
      <p>
        <span class="math display"
          >\[ {}_pF_q^{(\alpha)} \left(\begin{matrix} a_1, \ldots, a_p \\ b_1,
          \ldots, b_q\end{matrix}; X\right) = \sum_{k=0}^\infty\sum_{\kappa
          \vdash k} \frac{{(a_1)}_\kappa^{(\alpha)} \cdots
          {(a_p)}_\kappa^{(\alpha)}} {{(b_1)}_\kappa^{(\alpha)} \cdots
          {(b_q)}_\kappa^{(\alpha)}} \frac{C_\kappa^{(\alpha)}(X)}{k!}. \]</span
        >
      </p>
      <p>
        Well, I will not explain this expression. But observe that this is a sum
        from <span class="math inline">\(k=0\)</span> to
        <span class="math inline">\(\infty\)</span>. The algorithm evaluates the
        partial sums of this series, that is, the sum from
        <span class="math inline">\(k=0\)</span> to an integer
        <span class="math inline">\(m\)</span>.
      </p>
      <p>
        My Haskell library generates a shared library (a DLL) which can be
        called from R. And one can call Julia from R with the help of the
        ‘XRJulia’ package. So we will benchmark the three implementations from
        R.
      </p>
      <p>Firstly, let’s check that they return the same value:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(HypergeoMat)</span>
<span id="cb1-2"><span class="kw">library</span>(XRJulia)</span>
<span id="cb1-3"><span class="co"># source the Julia code</span></span>
<span id="cb1-4"><span class="kw">juliaSource</span>(<span class="st">"HypergeomPQ09.jl"</span>)</span>
<span id="cb1-5"><span class="co"># load the Haskell DLL</span></span>
<span id="cb1-6">dll &lt;-<span class="st"> "libHypergeom.so"</span></span>
<span id="cb1-7"><span class="kw">dyn.load</span>(dll)</span>
<span id="cb1-8"><span class="kw">.C</span>(<span class="st">"HsStart"</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10">a &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">8</span>, <span class="dv">7</span>, <span class="dv">3</span>)</span>
<span id="cb1-11">b &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">9</span>, <span class="dv">16</span>)</span>
<span id="cb1-12">x &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="fl">0.1</span>, <span class="fl">0.2</span>, <span class="fl">0.3</span>)</span>
<span id="cb1-13">alpha &lt;-<span class="st"> </span><span class="dv">2</span></span>
<span id="cb1-14">m &lt;-<span class="st"> </span>5L <span class="co"># `m` is the truncation order</span></span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="kw">hypergeomPFQ</span>(m, a, b, x, alpha)</span>
<span id="cb1-17"><span class="co"># 2.116251</span></span>
<span id="cb1-18"><span class="kw">juliaEval</span>(<span class="st">"hypergeom(5, [8.0, 7.0, 3.0], [9.0, 16.0], [0.1, 0.2, 0.3], 2.0)"</span>)</span>
<span id="cb1-19"><span class="co"># 2.116251</span></span>
<span id="cb1-20"><span class="kw">.Call</span>(<span class="st">"hypergeomR"</span>, m, a, b, x, alpha)</span>
<span id="cb1-21"><span class="co"># 2.116251</span></span></code></pre>
      </div>
      <p>
        Well, the same results. Now, let’s run a first series of benchmarks, for
        <span class="math inline">\(m=5\)</span>.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(microbenchmark)</span>
<span id="cb2-2"><span class="kw">microbenchmark</span>(</span>
<span id="cb2-3">  <span class="dt">Rcpp =</span></span>
<span id="cb2-4">    <span class="kw">hypergeomPFQ</span>(m, a, b, x, alpha),</span>
<span id="cb2-5">  <span class="dt">Julia =</span></span>
<span id="cb2-6">    <span class="kw">juliaEval</span>(<span class="st">"hypergeom(5, [8.0, 7.0, 3.0], [9.0, 16.0], [0.1, 0.2, 0.3], 2.0)"</span>),</span>
<span id="cb2-7">  <span class="dt">Haskell =</span></span>
<span id="cb2-8">    <span class="kw">.Call</span>(<span class="st">"hypergeomR"</span>, m, a, b, x, alpha),</span>
<span id="cb2-9">  <span class="dt">times =</span> <span class="dv">10</span></span>
<span id="cb2-10">)</span></code></pre>
      </div>
      <pre><code>Unit: microseconds
    expr      min        lq       mean    median        uq       max neval cld
    Rcpp  356.682   623.807   837.7237   827.402  1084.191  1382.500    10  a 
   Julia 4052.000 47767.565 44725.3895 48845.156 50597.779 51308.089    10   b
 Haskell  610.852  1136.963  1343.7442  1289.435  1504.323  2650.976    10  a </code></pre>
      <p>
        Should we conclude that Rcpp is the winner, and that Julia is slow?
        That’s not sure. Observe that the unit of these durations is the
        microsecond. Perhaps the call to Julia via <code>juliaEval</code> is
        time-consuming, as well as the call to the Haskell DLL via
        <code>.Call</code>.
      </p>
      <p>So let us try with <span class="math inline">\(m=40\)</span> now.</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">m &lt;-<span class="st"> </span>40L</span>
<span id="cb4-2"><span class="kw">microbenchmark</span>(</span>
<span id="cb4-3">  <span class="dt">Rcpp =</span></span>
<span id="cb4-4">    <span class="kw">hypergeomPFQ</span>(m, a, b, x, alpha),</span>
<span id="cb4-5">  <span class="dt">Julia =</span></span>
<span id="cb4-6">    <span class="kw">juliaEval</span>(<span class="st">"hypergeom(40, [8.0, 7.0, 3.0], [9.0, 16.0], [0.1, 0.2, 0.3], 2.0)"</span>),</span>
<span id="cb4-7">  <span class="dt">Haskell =</span></span>
<span id="cb4-8">    <span class="kw">.Call</span>(<span class="st">"hypergeomR"</span>, m, a, b, x, alpha),</span>
<span id="cb4-9">  <span class="dt">times =</span> <span class="dv">10</span></span>
<span id="cb4-10">)</span></code></pre>
      </div>
      <pre><code>Unit: seconds
    expr       min        lq      mean    median        uq      max neval cld
    Rcpp 25.547556 25.924749 26.130888 26.185776 26.354177 26.47846    10   c
   Julia 18.959032 19.088749 19.191394 19.173662 19.291175 19.62415    10  b 
 Haskell  6.642601  6.653627  6.736082  6.735448  6.760926  6.94283    10 a </code></pre>
      <p>
        This time, the unit is the second. Haskell is clearly the winner,
        followed by Julia.
      </p>
      <p>
        I’m using Julia 1.2.0, and I have been told that there is a great
        improvement of performance in Julia 1.5.0, the latest version. I’ll try
        with Julia 1.5.0 and then I will update this post to show whether there
        is a gain of speed.
      </p>
      <p>
        One should not conclude from this experiment that Haskell
        <em>always</em> beats C++. That depends on the algorithm we benchmark.
        This one intensively uses recursion, and perhaps Haskell is strong when
        dealing with recursion.
      </p>
      <p>Don’t forget:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">dyn.unload</span>(dll)</span></code></pre>
      </div>
      <h1 id="update-julia-1.5-is-amazing">Update: Julia 1.5 is amazing</h1>
      <p>
        Now I upgraded Julia to the latest version, 1.5.2. The results are
        amazing:
      </p>
      <pre><code>Unit: seconds
    expr       min        lq      mean    median        uq       max neval cld
    Rcpp 23.464676 24.392115 24.860484 24.823062 25.013047 27.437176    10   c
   Julia  2.806364  2.852674  3.101521  2.973963  3.363618  3.897855    10 a
 Haskell  6.912441  7.459939  7.648012  7.674404  7.798719  8.322777    10  b</code></pre>
      <p>
        19 seconds for Julia 1.2.0 and 3 seconds for Julia 1.5.2! It beats
        Haskell.
      </p>
      <h1 id="update-even-better">Update: even better</h1>
      <p>
        Thanks to some advice I got on
        <a href="https://discourse.julialang.org/">discourse.julialang.org</a>,
        I improved my
        <a
          href="https://gist.github.com/stla/e85e2de1ad9aeeebc01583f1d0b8e1d0#file-hypergeompq10-jl"
          >Julia code</a
        >, and it is faster now:
      </p>
      <pre><code>Unit: seconds
  expr      min       lq     mean   median       uq      max neval
 Julia 1.499753 1.549549 1.750907 1.658282 1.915167 2.428611    10</code></pre>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 22 Oct 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HaskellIsFast.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The 'kde1d' package</title>
      <link>https://laustep.github.io/stlahblog/posts/kde1d.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        It seems to me that the <code>kde1d</code> package (One-Dimensional
        Kernel Density Estimation) is not very known. I’ve never heard of it on
        Stack Overflow, except in an answer of mine.
      </p>
      <p>
        However this is a great package, IMHO. I’m going to show why I like it.
      </p>
      <h3 id="the-dpqr-family">The <code>d/p/q/r</code> family</h3>
      <p>
        Estimating a density with the <code>kde1d</code> function returns a
        <code>kde1d</code> object, and this makes available the density, the
        distribution function, the quantile function associated to the density
        estimate, as well as a sampler from the estimated distribution.
      </p>
      <p>
        Let’s fit a density with <code>kde1d</code> to a simulated Gaussian
        sample:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(kde1d)</span>
<span id="cb1-2"><span class="kw">set.seed</span>(<span class="dv">666</span>)</span>
<span id="cb1-3">y &lt;-<span class="st"> </span><span class="kw">rnorm</span>(<span class="dv">100</span>)</span>
<span id="cb1-4">fit &lt;-<span class="st"> </span><span class="kw">kde1d</span>(y)</span></code></pre>
      </div>
      <p>
        Here is the density estimate, in green, along with the true density, in
        blue:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">3</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>))</span>
<span id="cb2-2"><span class="kw">plot</span>(<span class="ot">NULL</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="op">-</span><span class="fl">3.5</span>, <span class="fl">3.5</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="fl">0.4</span>), <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xlab =</span> <span class="ot">NA</span>)</span>
<span id="cb2-3"><span class="kw">axis</span>(<span class="dv">1</span>, <span class="dt">at =</span> <span class="kw">seq</span>(<span class="op">-</span><span class="dv">3</span>, <span class="dv">3</span>, <span class="dt">by=</span><span class="dv">1</span>))</span>
<span id="cb2-4"><span class="kw">curve</span>(<span class="kw">dkde1d</span>(x, fit), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"green"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span>
<span id="cb2-5"><span class="kw">curve</span>(<span class="kw">dnorm</span>(x), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"blue"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/kde1d-unnamed-chunk-2-1.png"
        />
      </p>
      <p>The density can even be evaluated outside the range of the data:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">print</span>(<span class="kw">dkde1d</span>(<span class="kw">max</span>(y)<span class="op">+</span><span class="dv">1</span>, fit))</span>
<span id="cb3-2"><span class="co">## [1] 0.001684873</span></span></code></pre>
      </div>
      <p>The corresponding cumulative distribution function:</p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="fl">4.5</span>, <span class="dv">5</span>, <span class="dv">1</span>, <span class="dv">1</span>))</span>
<span id="cb4-2"><span class="kw">plot</span>(<span class="ot">NULL</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="op">-</span><span class="fl">3.5</span>, <span class="fl">3.5</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>), <span class="dt">axes =</span> <span class="ot">FALSE</span>, </span>
<span id="cb4-3">     <span class="dt">xlab =</span> <span class="st">"x"</span>, <span class="dt">ylab =</span> <span class="kw">expression</span>(<span class="st">"Pr("</span><span class="op">&lt;=</span><span class="st">"x)"</span>))</span>
<span id="cb4-4"><span class="kw">axis</span>(<span class="dv">1</span>, <span class="dt">at =</span> <span class="kw">seq</span>(<span class="op">-</span><span class="dv">3</span>, <span class="dv">3</span>, <span class="dt">by=</span><span class="dv">1</span>))</span>
<span id="cb4-5"><span class="kw">axis</span>(<span class="dv">2</span>, <span class="dt">at =</span> <span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dt">by=</span><span class="fl">0.25</span>))</span>
<span id="cb4-6"><span class="kw">curve</span>(<span class="kw">pkde1d</span>(x, fit), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"green"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span>
<span id="cb4-7"><span class="kw">curve</span>(<span class="kw">pnorm</span>(x), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"blue"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/kde1d-unnamed-chunk-4-1.png"
        />
      </p>
      <p>
        The corresponding inverse cumulative distribution function is evaluated
        by <code>qkde1d</code>, and <code>rkde1d</code> simulates from the
        estimated distribution.
      </p>
      <h3 id="bounded-data">Bounded data</h3>
      <p>
        By default, the data supplied to the <code>kde1d</code> function is
        assumed to be unbounded. For bounded data, use the
        <code>xmin</code> and/or <code>xmax</code> options.
      </p>
      <h3 id="estimating-monotonic-densities">
        Estimating monotonic densities
      </h3>
      <p>
        Now, something I use to convince my folks that <code>kde1d</code> is
        great. Consider a distribution having a monotonic density. The base
        function <code>density</code> does not correctly estimate the density
        (at least, with the default settings):
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb5-1"><span class="kw">set.seed</span>(<span class="dv">666</span>)</span>
<span id="cb5-2">y &lt;-<span class="st"> </span><span class="kw">rbeta</span>(<span class="dv">100</span>, <span class="dv">1</span>, <span class="dv">4</span>)</span>
<span id="cb5-3">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">3</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>))</span>
<span id="cb5-4"><span class="kw">plot</span>(<span class="ot">NULL</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">4</span>), <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xlab =</span> <span class="ot">NA</span>)</span>
<span id="cb5-5"><span class="kw">axis</span>(<span class="dv">1</span>, <span class="dt">at =</span> <span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dt">by=</span><span class="fl">0.2</span>))</span>
<span id="cb5-6"><span class="kw">lines</span>(<span class="kw">density</span>(y, <span class="dt">from =</span> <span class="dv">0</span>, <span class="dt">to =</span> <span class="dv">1</span>), <span class="dt">col =</span> <span class="st">"green"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span>
<span id="cb5-7"><span class="kw">curve</span>(<span class="kw">dbeta</span>(x, <span class="dv">1</span>, <span class="dv">4</span>), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"blue"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/kde1d-unnamed-chunk-5-1.png"
        />
      </p>
      <p>
        The monotonic aspect of the density does not occur in the estimated
        density. With <code>kde1d</code>, it does:
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1">fit &lt;-<span class="st"> </span><span class="kw">kde1d</span>(y, <span class="dt">xmin =</span> <span class="dv">0</span>, <span class="dt">xmax =</span> <span class="dv">1</span>)</span>
<span id="cb6-2">opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">3</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>))</span>
<span id="cb6-3"><span class="kw">plot</span>(<span class="ot">NULL</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">1</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">4</span>), <span class="dt">axes =</span> <span class="ot">FALSE</span>, <span class="dt">xlab =</span> <span class="ot">NA</span>)</span>
<span id="cb6-4"><span class="kw">axis</span>(<span class="dv">1</span>, <span class="dt">at =</span> <span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dt">by=</span><span class="fl">0.2</span>))</span>
<span id="cb6-5"><span class="kw">curve</span>(<span class="kw">dkde1d</span>(x, fit), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"green"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span>
<span id="cb6-6"><span class="kw">curve</span>(<span class="kw">dbeta</span>(x, <span class="dv">1</span>, <span class="dv">4</span>), <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"blue"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/kde1d-unnamed-chunk-6-1.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 15 Oct 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/kde1d.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>My RGL artworks</title>
      <link>https://laustep.github.io/stlahblog/posts/MyRGLartworks.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        These are some of my artworks realized with the R package
        <code>rgl</code>. Source code is available in
        <a href="https://gist.github.com/stla">my gists</a>.
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/3a27a77e8d60a10ea347017bb4f78a85f28dce7f/68747470733a2f2f7468756d62732e6766796361742e636f6d2f45737465656d656453686f7779446f6c7068696e2d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/62bb1cef024c3353381dbadfdb75d8839d5ed1e3/68747470733a2f2f7468756d62732e6766796361742e636f6d2f48656c7066756c506c6173746963416e74626561722d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/5ea6d902f0f85b3fff29e87251e6977e28ba0c3c/68747470733a2f2f7468756d62732e6766796361742e636f6d2f506c756d70496d70617373696f6e65644265617665722d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/978e0f0f42673e22685f350e3c6dd6b1c8fe6dff/68747470733a2f2f7468756d62732e6766796361742e636f6d2f4269746573697a6564457175616c476175722d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/93c6b1b2f80818492f9714858d7fc0ffe66f3266/68747470733a2f2f7468756d62732e6766796361742e636f6d2f416d626974696f757354616d6541646461782d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/d1e218228c4efdf6085e5ae80f5cc9feeea1e04d/68747470733a2f2f7468756d62732e6766796361742e636f6d2f4b696e64686561727465644f726e6572794865646765686f672d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/dcd38ed43716c092ae0723d1075b32e082a6cd5b/68747470733a2f2f7468756d62732e6766796361742e636f6d2f466c6177656453656c6672656c69616e7443697272697065642d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/5ed40dd4b6e85f75621a47d3dc4230e1ad46dc75/68747470733a2f2f7468756d62732e6766796361742e636f6d2f556e73746561647957656570794672696c6c6e65636b65646c697a6172642d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/14d6b4ef37daab1a761c14cc4e237510958615ae/68747470733a2f2f7468756d62732e6766796361742e636f6d2f59656c6c6f77496465616c496e6368776f726d2d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/9b47e1d657392cd29e9d684864b0d531d701cf18/68747470733a2f2f7468756d62732e6766796361742e636f6d2f426f6e794964656e746963616c426f696c77656576696c2d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/59629ef36e30e73ebf584a45435a5e9fcd8ab1ae/68747470733a2f2f7468756d62732e6766796361742e636f6d2f4c696b656c794561726c7942656e67616c74696765722d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/94af9461f70bf88fed1ce3eaa9fbf0374b5d0883/68747470733a2f2f7468756d62732e6766796361742e636f6d2f5765656b6c79517561727465726c794963746572696e65776172626c65722d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/460582ebfe5d8ef2724fb11970e634385a3ecc4d/68747470733a2f2f7468756d62732e6766796361742e636f6d2f546f726e536e65616b794b6f616c61626561722d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/9cb20d35d9ad95e96c76946e65c3165d91726006/68747470733a2f2f7468756d62732e6766796361742e636f6d2f556e666f7274756e617465436172656672656547726f756e64626565746c652d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/ff1d85320bd032c9082b008b6dec2df37ea073b8/68747470733a2f2f7468756d62732e6766796361742e636f6d2f46616d6f75734c6176697368416e7469706f646573677265656e706172616b6565742d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/6a397f4022cb0794053f7e3f980dbf50e119c10c/68747470733a2f2f7468756d62732e6766796361742e636f6d2f537069666679536d616c6c42757a7a6172642d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/184b3b5000b26e83ea3fe399352105d07df746d5/68747470733a2f2f7468756d62732e6766796361742e636f6d2f43697263756c6172536d6172744861636b65652d73697a655f726573747269637465642e676966"
        />
      </p>
      <p>
        <img
          src="https://camo.githubusercontent.com/abacd39b34b5b57c6c9db5d9c11c1b07c59de371/68747470733a2f2f7468756d62732e6766796361742e636f6d2f536572696f7573446972656374426f6e6f626f2d73697a655f726573747269637465642e676966"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Thu, 08 Oct 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/MyRGLartworks.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Child tables with DT, editing, exporting</title>
      <link>https://laustep.github.io/stlahblog/posts/DT_childTables.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I’m going to show how to use the <code>DT</code> package to do a table
        with child tables, and how to edit and export such a table.
      </p>
      <p>
        In order to do a table with child tables, one adds a list column to the
        dataframe of the main table; each cell of this column contains the child
        table of the corresponding row, given as a list. This is done by the
        <code>NestedData</code> function below.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">NestedData &lt;-<span class="st"> </span><span class="cf">function</span>(dat, children){</span>
<span id="cb1-2">  <span class="kw">stopifnot</span>(<span class="kw">length</span>(children) <span class="op">==</span><span class="st"> </span><span class="kw">nrow</span>(dat))</span>
<span id="cb1-3">  g &lt;-<span class="st"> </span><span class="cf">function</span>(d){</span>
<span id="cb1-4">    <span class="cf">if</span>(<span class="kw">is.data.frame</span>(d)){</span>
<span id="cb1-5">      purrr<span class="op">::</span><span class="kw">transpose</span>(d)</span>
<span id="cb1-6">    }<span class="cf">else</span>{</span>
<span id="cb1-7">      purrr<span class="op">::</span><span class="kw">transpose</span>(<span class="kw">NestedData</span>(d[[<span class="dv">1</span>]], <span class="dt">children =</span> d<span class="op">$</span>children))</span>
<span id="cb1-8">    }</span>
<span id="cb1-9">  }</span>
<span id="cb1-10">  subdats &lt;-<span class="st"> </span><span class="kw">lapply</span>(children, g)</span>
<span id="cb1-11">  oplus &lt;-<span class="st"> </span><span class="kw">ifelse</span>(<span class="kw">lengths</span>(subdats), <span class="st">"&amp;oplus;"</span>, <span class="st">""</span>) </span>
<span id="cb1-12">  <span class="kw">cbind</span>(<span class="st">" "</span> =<span class="st"> </span>oplus, dat, <span class="st">"_details"</span> =<span class="st"> </span><span class="kw">I</span>(subdats), </span>
<span id="cb1-13">        <span class="dt">stringsAsFactors =</span> <span class="ot">FALSE</span>)</span>
<span id="cb1-14">}</span></code></pre>
      </div>
      <p>
        The usage of <code>NestedData</code> is easy to understand with an
        example:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1">dat0   =<span class="st"> </span>iris[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,]        <span class="co"># main table, with three rows</span></span>
<span id="cb2-2">dat01  =<span class="st"> </span>airquality[<span class="dv">1</span><span class="op">:</span><span class="dv">4</span>,]  <span class="co"># |- child of first row</span></span>
<span id="cb2-3">dat02  =<span class="st"> </span>cars[<span class="dv">1</span><span class="op">:</span><span class="dv">2</span>,]        <span class="co"># |- child of second row, with two rows</span></span>
<span id="cb2-4">dat021 =<span class="st"> </span>mtcars[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,]      <span class="co"># |  |- child of first row of dat02</span></span>
<span id="cb2-5">dat022 =<span class="st"> </span>PlantGrowth[<span class="dv">1</span><span class="op">:</span><span class="dv">4</span>,] <span class="co"># |  |- child of second row of dat02</span></span>
<span id="cb2-6">dat03  =<span class="st"> </span><span class="kw">data.frame</span>(<span class="ot">NULL</span>)  <span class="co"># |- third row has no child</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">Dat &lt;-<span class="st"> </span><span class="kw">NestedData</span>(</span>
<span id="cb2-9">  <span class="dt">dat =</span> dat0, </span>
<span id="cb2-10">  <span class="dt">children =</span> <span class="kw">list</span>(</span>
<span id="cb2-11">    dat01, </span>
<span id="cb2-12">    <span class="kw">list</span>(  </span>
<span id="cb2-13">      dat02, </span>
<span id="cb2-14">      <span class="dt">children =</span> <span class="kw">list</span>(</span>
<span id="cb2-15">        dat021, </span>
<span id="cb2-16">        dat022</span>
<span id="cb2-17">      )</span>
<span id="cb2-18">    ), </span>
<span id="cb2-19">    dat03 </span>
<span id="cb2-20">  )</span>
<span id="cb2-21">)</span></code></pre>
      </div>
      <p>
        Now we define the JavaScript callback which will be used. The code
        depends on whether one wants to display the row names of the main table,
        so the user has to enter this information before.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(DT)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co">## whether to show row names</span></span>
<span id="cb3-4">rowNames =<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb3-5">colIdx &lt;-<span class="st"> </span><span class="kw">as.integer</span>(rowNames)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co">## the callback</span></span>
<span id="cb3-8">parentRows &lt;-<span class="st"> </span><span class="kw">which</span>(Dat[,<span class="dv">1</span>] <span class="op">!=</span><span class="st"> ""</span>)</span>
<span id="cb3-9">callback &lt;-<span class="st"> </span><span class="kw">JS</span>(</span>
<span id="cb3-10">  <span class="kw">sprintf</span>(<span class="st">"var parentRows = [%s];"</span>, <span class="kw">toString</span>(parentRows<span class="dv">-1</span>)),</span>
<span id="cb3-11">  <span class="kw">sprintf</span>(<span class="st">"var j0 = %d;"</span>, colIdx),</span>
<span id="cb3-12">  <span class="st">"var nrows = table.rows().count();"</span>,</span>
<span id="cb3-13">  <span class="st">"for(let i = 0; i &lt; nrows; ++i){"</span>,</span>
<span id="cb3-14">  <span class="st">"  var $cell = table.cell(i,j0).nodes().to$();"</span>,</span>
<span id="cb3-15">  <span class="st">"  if(parentRows.indexOf(i) &gt; -1){"</span>,</span>
<span id="cb3-16">  <span class="st">"    $cell.css({cursor: 'pointer'});"</span>,</span>
<span id="cb3-17">  <span class="st">"  }else{"</span>,</span>
<span id="cb3-18">  <span class="st">"    $cell.removeClass('details-control');"</span>,</span>
<span id="cb3-19">  <span class="st">"  }"</span>,</span>
<span id="cb3-20">  <span class="st">"}"</span>,</span>
<span id="cb3-21">  <span class="st">""</span>,</span>
<span id="cb3-22">  <span class="st">"// --- make the table header of the nested table --- //"</span>,</span>
<span id="cb3-23">  <span class="st">"var formatHeader = function(d, childId){"</span>,</span>
<span id="cb3-24">  <span class="st">"  if(d !== null){"</span>,</span>
<span id="cb3-25">  <span class="st">"    var html = "</span>, </span>
<span id="cb3-26">  <span class="st">"      '&lt;table class=</span><span class="ch">\"</span><span class="st">display compact hover</span><span class="ch">\"</span><span class="st"> ' + "</span>,</span>
<span id="cb3-27">  <span class="st">"      'style=</span><span class="ch">\"</span><span class="st">padding-left: 30px;</span><span class="ch">\"</span><span class="st"> id=</span><span class="ch">\"</span><span class="st">' + childId + "</span>, </span>
<span id="cb3-28">  <span class="st">"      '</span><span class="ch">\"</span><span class="st">&gt;&lt;thead&gt;&lt;tr&gt;';"</span>,</span>
<span id="cb3-29">  <span class="st">"    var data = d[d.length-1] || d._details;"</span>,</span>
<span id="cb3-30">  <span class="st">"    for(let key in data[0]){"</span>,</span>
<span id="cb3-31">  <span class="st">"      html += '&lt;th&gt;' + key + '&lt;/th&gt;';"</span>,</span>
<span id="cb3-32">  <span class="st">"    }"</span>,</span>
<span id="cb3-33">  <span class="st">"    html += '&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;'"</span>,</span>
<span id="cb3-34">  <span class="st">"    return html;"</span>,</span>
<span id="cb3-35">  <span class="st">"  } else {"</span>,</span>
<span id="cb3-36">  <span class="st">"    return '';"</span>,</span>
<span id="cb3-37">  <span class="st">"  }"</span>,</span>
<span id="cb3-38">  <span class="st">"};"</span>,</span>
<span id="cb3-39">  <span class="st">""</span>,</span>
<span id="cb3-40">  <span class="st">"// --- row callback to style rows of child tables --- //"</span>,</span>
<span id="cb3-41">  <span class="st">"var rowCallback = function(row, dat, displayNum, index){"</span>,</span>
<span id="cb3-42">  <span class="st">"  if($(row).hasClass('odd')){"</span>,</span>
<span id="cb3-43">  <span class="st">"    $(row).css('background-color', 'papayawhip');"</span>,</span>
<span id="cb3-44">  <span class="st">"    $(row).hover(function(){"</span>,</span>
<span id="cb3-45">  <span class="st">"      $(this).css('background-color', '#E6FF99');"</span>,</span>
<span id="cb3-46">  <span class="st">"    }, function(){"</span>,</span>
<span id="cb3-47">  <span class="st">"      $(this).css('background-color', 'papayawhip');"</span>,</span>
<span id="cb3-48">  <span class="st">"    });"</span>,</span>
<span id="cb3-49">  <span class="st">"  } else {"</span>,</span>
<span id="cb3-50">  <span class="st">"    $(row).css('background-color', 'lemonchiffon');"</span>,</span>
<span id="cb3-51">  <span class="st">"    $(row).hover(function(){"</span>,</span>
<span id="cb3-52">  <span class="st">"      $(this).css('background-color', '#DDFF75');"</span>,</span>
<span id="cb3-53">  <span class="st">"    }, function(){"</span>,</span>
<span id="cb3-54">  <span class="st">"      $(this).css('background-color', 'lemonchiffon');"</span>,</span>
<span id="cb3-55">  <span class="st">"    });"</span>,</span>
<span id="cb3-56">  <span class="st">"  }"</span>,</span>
<span id="cb3-57">  <span class="st">"};"</span>,</span>
<span id="cb3-58">  <span class="st">""</span>,</span>
<span id="cb3-59">  <span class="st">"// --- header callback to style header of child tables --- //"</span>,</span>
<span id="cb3-60">  <span class="st">"var headerCallback = function(thead, data, start, end, display){"</span>,</span>
<span id="cb3-61">  <span class="st">"  $('th', thead).css({"</span>,</span>
<span id="cb3-62">  <span class="st">"    'border-top': '3px solid indigo',"</span>, </span>
<span id="cb3-63">  <span class="st">"    'color': 'indigo',"</span>,</span>
<span id="cb3-64">  <span class="st">"    'background-color': '#fadadd'"</span>,</span>
<span id="cb3-65">  <span class="st">"  });"</span>,</span>
<span id="cb3-66">  <span class="st">"};"</span>,</span>
<span id="cb3-67">  <span class="st">""</span>,</span>
<span id="cb3-68">  <span class="st">"// --- make the datatable --- //"</span>,</span>
<span id="cb3-69">  <span class="st">"var formatDatatable = function(d, childId){"</span>,</span>
<span id="cb3-70">  <span class="st">"  var data = d[d.length-1] || d._details;"</span>,</span>
<span id="cb3-71">  <span class="st">"  var colNames = Object.keys(data[0]);"</span>,</span>
<span id="cb3-72">  <span class="st">"  var columns = colNames.map(function(x){"</span>,</span>
<span id="cb3-73">  <span class="st">"    return {data: x.replace(/</span><span class="ch">\\</span><span class="st">./g, '</span><span class="ch">\\\\\\</span><span class="st">.'), title: x};"</span>,</span>
<span id="cb3-74">  <span class="st">"  });"</span>,</span>
<span id="cb3-75">  <span class="st">"  var id = 'table#' + childId;"</span>,</span>
<span id="cb3-76">  <span class="st">"  if(colNames.indexOf('_details') === -1){"</span>,</span>
<span id="cb3-77">  <span class="st">"    var subtable = $(id).DataTable({"</span>,</span>
<span id="cb3-78">  <span class="st">"      'data': data,"</span>,</span>
<span id="cb3-79">  <span class="st">"      'columns': columns,"</span>,</span>
<span id="cb3-80">  <span class="st">"      'autoWidth': true,"</span>,</span>
<span id="cb3-81">  <span class="st">"      'deferRender': true,"</span>,</span>
<span id="cb3-82">  <span class="st">"      'info': false,"</span>,</span>
<span id="cb3-83">  <span class="st">"      'lengthChange': false,"</span>,</span>
<span id="cb3-84">  <span class="st">"      'ordering': data.length &gt; 1,"</span>,</span>
<span id="cb3-85">  <span class="st">"      'order': [],"</span>,</span>
<span id="cb3-86">  <span class="st">"      'paging': false,"</span>,</span>
<span id="cb3-87">  <span class="st">"      'scrollX': false,"</span>,</span>
<span id="cb3-88">  <span class="st">"      'scrollY': false,"</span>,</span>
<span id="cb3-89">  <span class="st">"      'searching': false,"</span>,</span>
<span id="cb3-90">  <span class="st">"      'sortClasses': false,"</span>,</span>
<span id="cb3-91">  <span class="st">"      'rowCallback': rowCallback,"</span>,</span>
<span id="cb3-92">  <span class="st">"      'headerCallback': headerCallback,"</span>,</span>
<span id="cb3-93">  <span class="st">"      'columnDefs': [{targets: '_all', className: 'dt-center'}]"</span>,</span>
<span id="cb3-94">  <span class="st">"    });"</span>,</span>
<span id="cb3-95">  <span class="st">"  } else {"</span>,</span>
<span id="cb3-96">  <span class="st">"    var subtable = $(id).DataTable({"</span>,</span>
<span id="cb3-97">  <span class="st">"      'data': data,"</span>,</span>
<span id="cb3-98">  <span class="st">"      'columns': columns,"</span>,</span>
<span id="cb3-99">  <span class="st">"      'autoWidth': true,"</span>,</span>
<span id="cb3-100">  <span class="st">"      'deferRender': true,"</span>,</span>
<span id="cb3-101">  <span class="st">"      'info': false,"</span>,</span>
<span id="cb3-102">  <span class="st">"      'lengthChange': false,"</span>,</span>
<span id="cb3-103">  <span class="st">"      'ordering': data.length &gt; 1,"</span>,</span>
<span id="cb3-104">  <span class="st">"      'order': [],"</span>,</span>
<span id="cb3-105">  <span class="st">"      'paging': false,"</span>,</span>
<span id="cb3-106">  <span class="st">"      'scrollX': false,"</span>,</span>
<span id="cb3-107">  <span class="st">"      'scrollY': false,"</span>,</span>
<span id="cb3-108">  <span class="st">"      'searching': false,"</span>,</span>
<span id="cb3-109">  <span class="st">"      'sortClasses': false,"</span>,</span>
<span id="cb3-110">  <span class="st">"      'rowCallback': rowCallback,"</span>,</span>
<span id="cb3-111">  <span class="st">"      'headerCallback': headerCallback,"</span>,</span>
<span id="cb3-112">  <span class="st">"      'columnDefs': ["</span>, </span>
<span id="cb3-113">  <span class="st">"        {targets: -1, visible: false},"</span>, </span>
<span id="cb3-114">  <span class="st">"        {targets: 0, orderable: false, className: 'details-control'},"</span>, </span>
<span id="cb3-115">  <span class="st">"        {targets: '_all', className: 'dt-center'}"</span>,</span>
<span id="cb3-116">  <span class="st">"      ]"</span>,</span>
<span id="cb3-117">  <span class="st">"    }).column(0).nodes().to$().css({cursor: 'pointer'});"</span>,</span>
<span id="cb3-118">  <span class="st">"  }"</span>,</span>
<span id="cb3-119">  <span class="st">"};"</span>,</span>
<span id="cb3-120">  <span class="st">""</span>,</span>
<span id="cb3-121">  <span class="st">"// --- display the child table on click --- //"</span>,</span>
<span id="cb3-122">  <span class="st">"// array to store id's of already created child tables"</span>,</span>
<span id="cb3-123">  <span class="st">"var children = [];"</span>, </span>
<span id="cb3-124">  <span class="st">"table.on('click', 'td.details-control', function(){"</span>,</span>
<span id="cb3-125">  <span class="st">"  var tbl = $(this).closest('table'),"</span>,</span>
<span id="cb3-126">  <span class="st">"      tblId = tbl.attr('id'),"</span>,</span>
<span id="cb3-127">  <span class="st">"      td = $(this),"</span>,</span>
<span id="cb3-128">  <span class="st">"      row = $(tbl).DataTable().row(td.closest('tr')),"</span>,</span>
<span id="cb3-129">  <span class="st">"      rowIdx = row.index();"</span>,</span>
<span id="cb3-130">  <span class="st">"  if(row.child.isShown()){"</span>,</span>
<span id="cb3-131">  <span class="st">"    row.child.hide();"</span>,</span>
<span id="cb3-132">  <span class="st">"    td.html('&amp;oplus;');"</span>,</span>
<span id="cb3-133">  <span class="st">"  } else {"</span>,</span>
<span id="cb3-134">  <span class="st">"    var childId = tblId + '-child-' + rowIdx;"</span>,</span>
<span id="cb3-135">  <span class="st">"    if(children.indexOf(childId) === -1){"</span>, </span>
<span id="cb3-136">  <span class="st">"      // this child has not been created yet"</span>,</span>
<span id="cb3-137">  <span class="st">"      children.push(childId);"</span>,</span>
<span id="cb3-138">  <span class="st">"      row.child(formatHeader(row.data(), childId)).show();"</span>,</span>
<span id="cb3-139">  <span class="st">"      td.html('&amp;CircleMinus;');"</span>,</span>
<span id="cb3-140">  <span class="st">"      formatDatatable(row.data(), childId, rowIdx);"</span>,</span>
<span id="cb3-141">  <span class="st">"    }else{"</span>,</span>
<span id="cb3-142">  <span class="st">"      // this child has already been created"</span>,</span>
<span id="cb3-143">  <span class="st">"      row.child(true);"</span>,</span>
<span id="cb3-144">  <span class="st">"      td.html('&amp;CircleMinus;');"</span>,</span>
<span id="cb3-145">  <span class="st">"    }"</span>,</span>
<span id="cb3-146">  <span class="st">"  }"</span>,</span>
<span id="cb3-147">  <span class="st">"});"</span>)</span></code></pre>
      </div>
      <p>
        Now, here is the code which generates the table. The first column
        contains some HTML (⊕) so we have to not escape it. The last column
        contains the child data, it has to be hidden. Finally we assign the
        class <code>details-control</code> to the first column, this is used by
        the callback.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">datatable</span>(</span>
<span id="cb4-2">  Dat, </span>
<span id="cb4-3">  <span class="dt">callback =</span> callback, <span class="dt">rownames =</span> rowNames, <span class="dt">escape =</span> <span class="op">-</span>colIdx<span class="dv">-1</span>,</span>
<span id="cb4-4">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb4-5">    <span class="dt">paging =</span> <span class="ot">FALSE</span>,</span>
<span id="cb4-6">    <span class="dt">searching =</span> <span class="ot">FALSE</span>,</span>
<span id="cb4-7">    <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb4-8">      <span class="kw">list</span>(</span>
<span id="cb4-9">        <span class="dt">visible =</span> <span class="ot">FALSE</span>, </span>
<span id="cb4-10">        <span class="dt">targets =</span> <span class="kw">ncol</span>(Dat)<span class="op">-</span><span class="dv">1</span><span class="op">+</span>colIdx</span>
<span id="cb4-11">      ),</span>
<span id="cb4-12">      <span class="kw">list</span>(</span>
<span id="cb4-13">        <span class="dt">orderable =</span> <span class="ot">FALSE</span>, </span>
<span id="cb4-14">        <span class="dt">className =</span> <span class="st">"details-control"</span>, </span>
<span id="cb4-15">        <span class="dt">targets =</span> colIdx</span>
<span id="cb4-16">      ),</span>
<span id="cb4-17">      <span class="kw">list</span>(</span>
<span id="cb4-18">        <span class="dt">className =</span> <span class="st">"dt-center"</span>, </span>
<span id="cb4-19">        <span class="dt">targets =</span> <span class="st">"_all"</span></span>
<span id="cb4-20">      )</span>
<span id="cb4-21">    )</span>
<span id="cb4-22">  )</span>
<span id="cb4-23">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTchildRows1.gif"
        />
      </p>
      <h1 id="editing">Editing</h1>
      <p>
        We use the JavaScript library
        <a href="https://github.com/ejbeaty/CellEdit">CellEdit</a> to allow
        cells, including the cells of the child tables, to be editable. Download
        the file <strong>dataTables.cellEdit.js</strong>.
      </p>
      <p>
        Some CSS is required in order to make things pretty. Save the following
        CSS code in a file <strong>dataTables.cellEdit.css</strong>.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode css"
        ><code class="sourceCode css"><span id="cb5-1"><span class="fu">.my-input-class</span> {</span>
<span id="cb5-2">  <span class="kw">padding</span>: <span class="dv">3</span><span class="dt">px</span> <span class="dv">6</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-3">  <span class="kw">border</span>: <span class="dv">1</span><span class="dt">px</span> <span class="dv">solid</span> <span class="cn">#ccc</span><span class="op">;</span></span>
<span id="cb5-4">  <span class="kw">border-radius</span>: <span class="dv">4</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-5">  <span class="kw">width</span>: <span class="dv">60</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-6">}</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="fu">.my-confirm-class</span> {</span>
<span id="cb5-9">  <span class="kw">padding</span>: <span class="dv">3</span><span class="dt">px</span> <span class="dv">6</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-10">  <span class="kw">font-size</span>: <span class="dv">12</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-11">  <span class="kw">color</span>: <span class="cn">white</span><span class="op">;</span></span>
<span id="cb5-12">  <span class="kw">text-align</span>: <span class="dv">center</span><span class="op">;</span></span>
<span id="cb5-13">  <span class="kw">vertical-align</span>: <span class="dv">middle</span><span class="op">;</span></span>
<span id="cb5-14">  <span class="kw">border-radius</span>: <span class="dv">4</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-15">  <span class="kw">background-color</span>: <span class="cn">#337ab7</span><span class="op">;</span></span>
<span id="cb5-16">  <span class="kw">text-decoration</span>: <span class="dv">none</span><span class="op">;</span></span>
<span id="cb5-17">}</span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="fu">.my-cancel-class</span> {</span>
<span id="cb5-20">  <span class="kw">padding</span>: <span class="dv">3</span><span class="dt">px</span> <span class="dv">6</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-21">  <span class="kw">font-size</span>: <span class="dv">12</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-22">  <span class="kw">color</span>: <span class="cn">white</span><span class="op">;</span></span>
<span id="cb5-23">  <span class="kw">text-align</span>: <span class="dv">center</span><span class="op">;</span></span>
<span id="cb5-24">  <span class="kw">vertical-align</span>: <span class="dv">middle</span><span class="op">;</span></span>
<span id="cb5-25">  <span class="kw">border-radius</span>: <span class="dv">4</span><span class="dt">px</span><span class="op">;</span></span>
<span id="cb5-26">  <span class="kw">background-color</span>: <span class="cn">#a94442</span><span class="op">;</span></span>
<span id="cb5-27">  <span class="kw">text-decoration</span>: <span class="dv">none</span><span class="op">;</span></span>
<span id="cb5-28">}</span></code></pre>
      </div>
      <p>Now modify the callback as follows:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1">callback &lt;-<span class="st"> </span><span class="kw">JS</span>(</span>
<span id="cb6-2">  <span class="st">"function onUpdate(updatedCell, updatedRow, oldValue) {};"</span>,</span>
<span id="cb6-3">  <span class="st">"table.MakeCellsEditable({"</span>,</span>
<span id="cb6-4">  <span class="st">"  onUpdate: onUpdate,"</span>,</span>
<span id="cb6-5">  <span class="st">"  inputCss: 'my-input-class',"</span>,</span>
<span id="cb6-6">  <span class="st">"  confirmationButton: {"</span>,</span>
<span id="cb6-7">  <span class="st">"    confirmCss: 'my-confirm-class',"</span>,</span>
<span id="cb6-8">  <span class="st">"    cancelCss: 'my-cancel-class'"</span>,</span>
<span id="cb6-9">  <span class="st">"  }"</span>,</span>
<span id="cb6-10">  <span class="st">"});"</span>,</span>
<span id="cb6-11">  <span class="kw">sprintf</span>(<span class="st">"var parentRows = [%s];"</span>, <span class="kw">toString</span>(parentRows<span class="dv">-1</span>)),</span>
<span id="cb6-12">  </span>
<span id="cb6-13">  ......</span>
<span id="cb6-14">  </span>
<span id="cb6-15">  <span class="st">"// --- make the datatable --- //"</span>,</span>
<span id="cb6-16">  <span class="st">"var formatDatatable = function(d, childId){"</span>,</span>
<span id="cb6-17">  </span>
<span id="cb6-18">  ......</span>
<span id="cb6-19"></span>
<span id="cb6-20">  <span class="st">"    }).column(0).nodes().to$().css({cursor: 'pointer'});"</span>,</span>
<span id="cb6-21">  <span class="st">"  }"</span>,</span>
<span id="cb6-22">  <span class="st">"  subtable.MakeCellsEditable({"</span>,</span>
<span id="cb6-23">  <span class="st">"    onUpdate: onUpdate,"</span>,</span>
<span id="cb6-24">  <span class="st">"    inputCss: 'my-input-class',"</span>,</span>
<span id="cb6-25">  <span class="st">"    confirmationButton: {"</span>,</span>
<span id="cb6-26">  <span class="st">"      confirmCss: 'my-confirm-class',"</span>,</span>
<span id="cb6-27">  <span class="st">"      cancelCss: 'my-cancel-class'"</span>,</span>
<span id="cb6-28">  <span class="st">"    }"</span>,</span>
<span id="cb6-29">  <span class="st">"  });"</span>,</span>
<span id="cb6-30">  <span class="st">"};"</span>,</span>
<span id="cb6-31">  <span class="st">""</span>,</span>
<span id="cb6-32">  <span class="st">"// --- display the child table on click --- //"</span>,</span>
<span id="cb6-33"></span>
<span id="cb6-34">  ......</span>
<span id="cb6-35">  </span>
<span id="cb6-36">  <span class="st">"});"</span>)</span></code></pre>
      </div>
      <p>
        Use the same code as before to generate the table but store the output:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1">dtable &lt;-<span class="st"> </span><span class="kw">datatable</span>(</span>
<span id="cb7-2">  Dat, </span>
<span id="cb7-3">  <span class="dt">callback =</span> callback, <span class="dt">rownames =</span> rowNames, <span class="dt">escape =</span> <span class="op">-</span>colIdx<span class="dv">-1</span>,</span>
<span id="cb7-4">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb7-5">    <span class="dt">paging =</span> <span class="ot">FALSE</span>,</span>
<span id="cb7-6">    <span class="dt">searching =</span> <span class="ot">FALSE</span>,</span>
<span id="cb7-7">    <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb7-8">      <span class="kw">list</span>(</span>
<span id="cb7-9">        <span class="dt">visible =</span> <span class="ot">FALSE</span>, </span>
<span id="cb7-10">        <span class="dt">targets =</span> <span class="kw">ncol</span>(Dat)<span class="op">-</span><span class="dv">1</span><span class="op">+</span>colIdx</span>
<span id="cb7-11">      ),</span>
<span id="cb7-12">      <span class="kw">list</span>(</span>
<span id="cb7-13">        <span class="dt">orderable =</span> <span class="ot">FALSE</span>, </span>
<span id="cb7-14">        <span class="dt">className =</span> <span class="st">"details-control"</span>, </span>
<span id="cb7-15">        <span class="dt">targets =</span> colIdx</span>
<span id="cb7-16">      ),</span>
<span id="cb7-17">      <span class="kw">list</span>(</span>
<span id="cb7-18">        <span class="dt">className =</span> <span class="st">"dt-center"</span>, </span>
<span id="cb7-19">        <span class="dt">targets =</span> <span class="st">"_all"</span></span>
<span id="cb7-20">      )</span>
<span id="cb7-21">    )</span>
<span id="cb7-22">  )</span>
<span id="cb7-23">)</span></code></pre>
      </div>
      <p>Now we add the dependencies to the <code>datatable</code>:</p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1">path &lt;-<span class="st"> "path/to/cellEdit"</span> <span class="co"># folder containing the files </span></span>
<span id="cb8-2">                           <span class="co"># dataTables.cellEdit.js and </span></span>
<span id="cb8-3">                           <span class="co"># dataTables.cellEdit.css</span></span>
<span id="cb8-4">dep &lt;-<span class="st"> </span>htmltools<span class="op">::</span><span class="kw">htmlDependency</span>(</span>
<span id="cb8-5">  <span class="st">"CellEdit"</span>, <span class="st">"1.0.19"</span>, path, </span>
<span id="cb8-6">  <span class="dt">script =</span> <span class="st">"dataTables.cellEdit.js"</span>, </span>
<span id="cb8-7">  <span class="dt">stylesheet =</span> <span class="st">"dataTables.cellEdit.css"</span>)</span>
<span id="cb8-8">dtable<span class="op">$</span>dependencies &lt;-<span class="st"> </span><span class="kw">c</span>(dtable<span class="op">$</span>dependencies, <span class="kw">list</span>(dep))</span>
<span id="cb8-9"></span>
<span id="cb8-10">dtable</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTchildRows2.gif"
        />
      </p>
      <h1 id="exporting">Exporting</h1>
      <p>
        Now we show how to export a table with its child tables to an Excel
        file, when there is only one level of child tables (<em>i.e.</em> when
        the child tables of the main table do not have child tables themselves).
        To do so, we use the <code>customize</code> callback of the Excel button
        provided by the <code>Buttons</code> extension. I found this code on the
        DataTables forum. In the first row of the callback,
        <code>mytable</code> is the id of the datatable:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode js"
        ><code class="sourceCode javascript"><span id="cb9-1"><span class="kw">var</span> table <span class="op">=</span> <span class="fu">$</span>(<span class="st">'#mytable'</span>)<span class="op">.</span><span class="fu">find</span>(<span class="st">'table'</span>)<span class="op">.</span><span class="fu">DataTable</span>()<span class="op">;</span></span></code></pre>
      </div>
      <p>
        If you don’t use Shiny, you have to set this id in the
        <code>elementId</code> argument of the <code>datatable</code> function.
        If you use Shiny, this id is the key of the element of the
        <code>output</code> object in which you assign a <code>renderDT</code>:
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1">output[[<span class="st">"mytable"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb10-2">  ......</span>
<span id="cb10-3">})</span></code></pre>
      </div>
      <p>
        The JavaScript code depends on whether the user desires a title in the
        Excel file, so this information has to be provided first.
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb11-1">excelTitle =<span class="st"> </span><span class="ot">NULL</span> <span class="co"># enter title or set to NULL if you don't want a title</span></span>
<span id="cb11-2">js_customXLSX &lt;-<span class="st"> </span><span class="kw">JS</span>(</span>
<span id="cb11-3">  <span class="st">"function(xlsx){"</span>,</span>
<span id="cb11-4">  <span class="st">"  var table = $('#mytable').find('table').DataTable();"</span>,</span>
<span id="cb11-5">  <span class="st">"  // Number of columns."</span>,</span>
<span id="cb11-6">  <span class="kw">sprintf</span>(<span class="st">"  var ncols = %d;"</span>, <span class="kw">ncol</span>(Dat)),</span>
<span id="cb11-7">  <span class="st">"  // Is there a title?"</span>,</span>
<span id="cb11-8">  <span class="kw">sprintf</span>(<span class="st">"  var title = %s;"</span>, </span>
<span id="cb11-9">          <span class="kw">ifelse</span>(<span class="kw">is.null</span>(excelTitle), <span class="st">"false"</span>, <span class="st">"true"</span>)),</span>
<span id="cb11-10">  <span class="st">"  // Integer to Excel column: 0 -&gt; A, 1 -&gt; B, ..., 25 -&gt; Z, 26 -&gt; AA, ..."</span>,</span>
<span id="cb11-11">  <span class="st">"  var XLcolumn = function(j){"</span>, </span>
<span id="cb11-12">  <span class="st">"    return j &lt; 0 ? "</span>,</span>
<span id="cb11-13">  <span class="st">"      '' : XLcolumn(j/26-1) + String.fromCharCode(j % 26 + 65);"</span>,</span>
<span id="cb11-14">  <span class="st">"  };"</span>,</span>
<span id="cb11-15">  <span class="st">"  // Get sheet."</span>,</span>
<span id="cb11-16">  <span class="st">"  var sheet = xlsx.xl.worksheets['sheet1.xml'];"</span>,</span>
<span id="cb11-17">  <span class="st">"  // Get a clone of the sheet data.        "</span>,</span>
<span id="cb11-18">  <span class="st">"  var sheetData = $('sheetData', sheet).clone();"</span>,</span>
<span id="cb11-19">  <span class="st">"  // Clear the current sheet data for appending rows."</span>,</span>
<span id="cb11-20">  <span class="st">"  $('sheetData', sheet).empty();"</span>,</span>
<span id="cb11-21">  <span class="st">"  // Row count in Excel sheet."</span>,</span>
<span id="cb11-22">  <span class="st">"  var rowCount = 1;"</span>,</span>
<span id="cb11-23">  <span class="st">"  // Iterate each row in the sheet data."</span>,</span>
<span id="cb11-24">  <span class="st">"  $(sheetData).children().each(function (index) {"</span>,</span>
<span id="cb11-25">  <span class="st">"    // Used for DT row() API to get child data."</span>,</span>
<span id="cb11-26">  <span class="st">"    var rowIndex = title ? index - 2 : index - 1;"</span>, </span>
<span id="cb11-27">  <span class="st">"    // Don't process row if it's the title row or the header row."</span>,</span>
<span id="cb11-28">  <span class="st">"    var i0 = title ? 1 : 0;"</span>,</span>
<span id="cb11-29">  <span class="st">"    if (index &gt; i0) {"</span>, </span>
<span id="cb11-30">  <span class="st">"      // Get row"</span>,</span>
<span id="cb11-31">  <span class="st">"      var row = $(this.outerHTML);"</span>,</span>
<span id="cb11-32">  <span class="st">"      // Set the Excel row attr to the current Excel row count."</span>,</span>
<span id="cb11-33">  <span class="st">"      row.attr('r', rowCount);"</span>,</span>
<span id="cb11-34">  <span class="st">"      // Iterate each cell in the row to change the row number."</span>,</span>
<span id="cb11-35">  <span class="st">"      row.children().each(function (index) {"</span>,</span>
<span id="cb11-36">  <span class="st">"        var cell = $(this);"</span>,</span>
<span id="cb11-37">  <span class="st">"        // Set each cell's row value."</span>,</span>
<span id="cb11-38">  <span class="st">"        var rc = cell.attr('r');"</span>,</span>
<span id="cb11-39">  <span class="st">"        rc = rc.replace(/</span><span class="ch">\\</span><span class="st">d+$/, </span><span class="ch">\"\"</span><span class="st">) + rowCount;"</span>,</span>
<span id="cb11-40">  <span class="st">"        cell.attr('r', rc);"</span>,</span>
<span id="cb11-41">  <span class="st">"      });"</span>,</span>
<span id="cb11-42">  <span class="st">"      // Get the row HTML and append to sheetData."</span>,</span>
<span id="cb11-43">  <span class="st">"      row = row[0].outerHTML;"</span>,</span>
<span id="cb11-44">  <span class="st">"      $('sheetData', sheet).append(row);"</span>,</span>
<span id="cb11-45">  <span class="st">"      rowCount++;"</span>,</span>
<span id="cb11-46">  <span class="st">"      // Get the child data - could be any data attached to the row."</span>,</span>
<span id="cb11-47">  <span class="st">"      var data = table.row(':eq(' + rowIndex + ')').data();"</span>,</span>
<span id="cb11-48">  <span class="st">"      var childData = data[ncols-1];"</span>, </span>
<span id="cb11-49">  <span class="st">"      if(childData.length &gt; 0){"</span>,</span>
<span id="cb11-50">  <span class="st">"        var colNames = Object.keys(childData[0]);"</span>,</span>
<span id="cb11-51">  <span class="st">"        // Prepare Excel formatted row"</span>,</span>
<span id="cb11-52">  <span class="st">"        var headerRow = '&lt;row r=</span><span class="ch">\"</span><span class="st">' + rowCount +"</span>,</span>
<span id="cb11-53">  <span class="st">"          '</span><span class="ch">\"</span><span class="st">&gt;&lt;c t=</span><span class="ch">\"</span><span class="st">inlineStr</span><span class="ch">\"</span><span class="st"> r=</span><span class="ch">\"</span><span class="st">A' + rowCount +"</span>,</span>
<span id="cb11-54">  <span class="st">"          '</span><span class="ch">\"</span><span class="st">&gt;&lt;is&gt;&lt;t&gt;&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;';"</span>,</span>
<span id="cb11-55">  <span class="st">"        for(let i = 0; i &lt; colNames.length; i++){"</span>,</span>
<span id="cb11-56">  <span class="st">"          headerRow = headerRow +"</span>,</span>
<span id="cb11-57">  <span class="st">"            '&lt;c t=</span><span class="ch">\"</span><span class="st">inlineStr</span><span class="ch">\"</span><span class="st"> r=</span><span class="ch">\"</span><span class="st">' + XLcolumn(i+1) + rowCount +"</span>,</span>
<span id="cb11-58">  <span class="st">"            '</span><span class="ch">\"</span><span class="st"> s=</span><span class="ch">\"</span><span class="st">7</span><span class="ch">\"</span><span class="st">&gt;&lt;is&gt;&lt;t&gt;' + colNames[i] +"</span>, </span>
<span id="cb11-59">  <span class="st">"            '&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;';"</span>,</span>
<span id="cb11-60">  <span class="st">"        }"</span>,</span>
<span id="cb11-61">  <span class="st">"        headerRow = headerRow + '&lt;/row&gt;';"</span>,</span>
<span id="cb11-62">  <span class="st">"        // Append header row to sheetData."</span>,</span>
<span id="cb11-63">  <span class="st">"        $('sheetData', sheet).append(headerRow);"</span>,</span>
<span id="cb11-64">  <span class="st">"        rowCount++; // Increment excel row counter."</span>,</span>
<span id="cb11-65">  <span class="st">"      }"</span>,</span>
<span id="cb11-66">  <span class="st">"      // The child data is an array of rows"</span>,</span>
<span id="cb11-67">  <span class="st">"      for(let c = 0; c &lt; childData.length; c++){"</span>,</span>
<span id="cb11-68">  <span class="st">"        // Get row data."</span>,</span>
<span id="cb11-69">  <span class="st">"        var child = childData[c];"</span>,</span>
<span id="cb11-70">  <span class="st">"        // Prepare Excel formatted row"</span>,</span>
<span id="cb11-71">  <span class="st">"        var childRow = '&lt;row r=</span><span class="ch">\"</span><span class="st">' + rowCount +"</span>,</span>
<span id="cb11-72">  <span class="st">"          '</span><span class="ch">\"</span><span class="st">&gt;&lt;c t=</span><span class="ch">\"</span><span class="st">inlineStr</span><span class="ch">\"</span><span class="st"> r=</span><span class="ch">\"</span><span class="st">A' + rowCount +"</span>,</span>
<span id="cb11-73">  <span class="st">"          '</span><span class="ch">\"</span><span class="st">&gt;&lt;is&gt;&lt;t&gt;&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;';"</span>,</span>
<span id="cb11-74">  <span class="st">"        for(let i = 0; i &lt; colNames.length; i++){"</span>,</span>
<span id="cb11-75">  <span class="st">"          childRow = childRow +"</span>,</span>
<span id="cb11-76">  <span class="st">"            '&lt;c t=</span><span class="ch">\"</span><span class="st">inlineStr</span><span class="ch">\"</span><span class="st"> r=</span><span class="ch">\"</span><span class="st">' + XLcolumn(i+1) + rowCount +"</span>,</span>
<span id="cb11-77">  <span class="st">"            '</span><span class="ch">\"</span><span class="st"> s=</span><span class="ch">\"</span><span class="st">5</span><span class="ch">\"</span><span class="st">&gt;&lt;is&gt;&lt;t&gt;' + child[colNames[i]] +"</span>, </span>
<span id="cb11-78">  <span class="st">"            '&lt;/t&gt;&lt;/is&gt;&lt;/c&gt;';"</span>,</span>
<span id="cb11-79">  <span class="st">"        }"</span>,</span>
<span id="cb11-80">  <span class="st">"        childRow = childRow + '&lt;/row&gt;';"</span>,</span>
<span id="cb11-81">  <span class="st">"        // Append row to sheetData."</span>,</span>
<span id="cb11-82">  <span class="st">"        $('sheetData', sheet).append(childRow);"</span>,</span>
<span id="cb11-83">  <span class="st">"        rowCount++; // Increment excel row counter."</span>,</span>
<span id="cb11-84">  <span class="st">"      }"</span>,</span>
<span id="cb11-85">  <span class="st">"      // Just append the header row and increment excel row counter."</span>,</span>
<span id="cb11-86">  <span class="st">"    } else {"</span>,</span>
<span id="cb11-87">  <span class="st">"      $('sheetData', sheet).append(this.outerHTML);"</span>,</span>
<span id="cb11-88">  <span class="st">"      rowCount++;"</span>,</span>
<span id="cb11-89">  <span class="st">"    }"</span>,</span>
<span id="cb11-90">  <span class="st">"  });"</span>,</span>
<span id="cb11-91">  <span class="st">"}"</span></span>
<span id="cb11-92">)</span></code></pre>
      </div>
      <p>Let’s see an example.</p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb12-1">dat0  =<span class="st"> </span>iris[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,]         <span class="co"># main table, with three rows</span></span>
<span id="cb12-2">dat01 =<span class="st"> </span>airquality[<span class="dv">1</span><span class="op">:</span><span class="dv">4</span>,]   <span class="co"># |- child of first row</span></span>
<span id="cb12-3">dat02 =<span class="st"> </span>cars[<span class="dv">1</span><span class="op">:</span><span class="dv">2</span>,]         <span class="co"># |- child of second row</span></span>
<span id="cb12-4">dat03 =<span class="st"> </span>PlantGrowth[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,]  <span class="co"># |- child of third row</span></span>
<span id="cb12-5">Dat &lt;-<span class="st"> </span><span class="kw">NestedData</span>(</span>
<span id="cb12-6">  <span class="dt">dat =</span> dat0, </span>
<span id="cb12-7">  <span class="dt">children =</span> <span class="kw">list</span>(dat01, dat02, dat03)</span>
<span id="cb12-8">)</span></code></pre>
      </div>
      <p>
        Below is the code generating the table with a button for the exporting.
        Remember, if you use Shiny, do not set <code>elementId</code>.
      </p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb13-1">dtable &lt;-<span class="st"> </span><span class="kw">datatable</span>(</span>
<span id="cb13-2">  Dat, </span>
<span id="cb13-3">  <span class="dt">callback =</span> callback, <span class="dt">rownames =</span> rowNames, <span class="dt">escape =</span> <span class="op">-</span>colIdx<span class="dv">-1</span>,</span>
<span id="cb13-4">  <span class="dt">extensions =</span> <span class="st">"Buttons"</span>, <span class="dt">elementId =</span> <span class="st">"mytable"</span>,</span>
<span id="cb13-5">  <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb13-6">    <span class="dt">paging =</span> <span class="ot">FALSE</span>,</span>
<span id="cb13-7">    <span class="dt">searching =</span> <span class="ot">FALSE</span>,</span>
<span id="cb13-8">    <span class="dt">dom =</span> <span class="st">"Bfrtip"</span>,</span>
<span id="cb13-9">    <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb13-10">      <span class="kw">list</span>(</span>
<span id="cb13-11">        <span class="dt">visible =</span> <span class="ot">FALSE</span>, </span>
<span id="cb13-12">        <span class="dt">targets =</span> <span class="kw">ncol</span>(Dat)<span class="op">-</span><span class="dv">1</span><span class="op">+</span>colIdx</span>
<span id="cb13-13">      ),</span>
<span id="cb13-14">      <span class="kw">list</span>(</span>
<span id="cb13-15">        <span class="dt">orderable =</span> <span class="ot">FALSE</span>, </span>
<span id="cb13-16">        <span class="dt">className =</span> <span class="st">"details-control"</span>, </span>
<span id="cb13-17">        <span class="dt">targets =</span> colIdx</span>
<span id="cb13-18">      ),</span>
<span id="cb13-19">      <span class="kw">list</span>(</span>
<span id="cb13-20">        <span class="dt">className =</span> <span class="st">"dt-center"</span>, </span>
<span id="cb13-21">        <span class="dt">targets =</span> <span class="st">"_all"</span></span>
<span id="cb13-22">      )</span>
<span id="cb13-23">    ),</span>
<span id="cb13-24">    <span class="dt">buttons =</span> <span class="kw">list</span>(</span>
<span id="cb13-25">      <span class="kw">list</span>(</span>
<span id="cb13-26">        <span class="dt">extend =</span> <span class="st">"excel"</span>,</span>
<span id="cb13-27">        <span class="dt">exportOptions =</span> <span class="kw">list</span>(</span>
<span id="cb13-28">          <span class="dt">orthogonal =</span> <span class="st">"export"</span>, </span>
<span id="cb13-29">          <span class="dt">columns =</span> <span class="dv">0</span><span class="op">:</span>(<span class="kw">ncol</span>(Dat)<span class="op">-</span><span class="dv">2</span>)</span>
<span id="cb13-30">        ),</span>
<span id="cb13-31">        <span class="dt">title =</span> excelTitle,</span>
<span id="cb13-32">        <span class="dt">orientation =</span> <span class="st">"landscape"</span>,</span>
<span id="cb13-33">        <span class="dt">customize =</span> js_customXLSX</span>
<span id="cb13-34">      )</span>
<span id="cb13-35">    )</span>
<span id="cb13-36">  )</span>
<span id="cb13-37">)</span></code></pre>
      </div>
      <p>Here is the Excel file one gets:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTchildRows3.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 08 May 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/DT_childTables.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Focal quadrics and their lines of curvature</title>
      <link>https://laustep.github.io/stlahblog/posts/focalQuadrics.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        This blog post provides some R code for drawing focal quadrics and their
        curvatures lines with the <code>rgl</code> package.
      </p>
      <h1 id="ellipsoid">Ellipsoid</h1>
      <p>
        The <code>ellipsoidMesh</code> function below generates a mesh of the
        ellipsoid of equation
        <span class="math display"
          >\[ \frac{x^2}{a^2} + \frac{y^2}{b^2} + \frac{z^2}{c^2} = 1. \]</span
        >
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(rgl)</span>
<span id="cb1-2">ellipsoidMesh &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, <span class="dt">smoothness =</span> <span class="dv">5</span>){</span>
<span id="cb1-3">  <span class="kw">stopifnot</span>(a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, b <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-4">  sphere &lt;-<span class="st"> </span><span class="kw">subdivision3d</span>(<span class="kw">icosahedron3d</span>(), <span class="dt">depth =</span> smoothness)</span>
<span id="cb1-5">  sphere<span class="op">$</span>vb[4L,] &lt;-<span class="st"> </span></span>
<span id="cb1-6"><span class="st">    </span><span class="kw">apply</span>(sphere<span class="op">$</span>vb[1L<span class="op">:</span>3L,], 2L, <span class="cf">function</span>(x) <span class="kw">sqrt</span>(<span class="kw">sum</span>(x<span class="op">*</span>x)))</span>
<span id="cb1-7">  sphere<span class="op">$</span>normals &lt;-<span class="st"> </span>sphere<span class="op">$</span>vb</span>
<span id="cb1-8">  <span class="kw">scale3d</span>(sphere, a, b, c)</span>
<span id="cb1-9">}</span></code></pre>
      </div>
      <p>
        The curvature lines of this ellipsoid are generated by the function
        <code>curvatureLinesE</code> given below. There are two families of
        curvature lines. The arguments <code>nu</code> and
        <code>nv</code> control the numbers of curvature lines in these two
        families. When the ellipsoid is tri-axial, <em>i.e.</em> when
        <span class="math inline">\(a\)</span>,
        <span class="math inline">\(b\)</span>,
        <span class="math inline">\(c\)</span> are distinct, the arguments
        <code>du</code> and <code>dv</code> must be positive and they control
        the size of the smallest curvature lines (if they were
        <span class="math inline">\(0\)</span>, the smallest curvature lines
        would degenerate to segments). When the ellipsoid is an ellipsoid of
        revolution, <em>i.e.</em> when two values of
        <span class="math inline">\(a\)</span>,
        <span class="math inline">\(b\)</span>,
        <span class="math inline">\(c\)</span> are equal, the curvature lines
        are the meridians and the parallels; in this case, <code>du</code> is
        ignored, and <code>dv</code>, which must be positive and strictly
        smaller than <span class="math inline">\(\frac{\pi}{2}\)</span>, control
        the size of the smallest parallel.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1">curvatureLinesE &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, nu, nv, du, dv, <span class="dt">npoints =</span> <span class="dv">100</span>){</span>
<span id="cb2-2">  <span class="kw">stopifnot</span>(a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, b <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb2-3">  <span class="cf">if</span>((a <span class="op">!=</span><span class="st"> </span>b <span class="op">&amp;&amp;</span><span class="st"> </span>b <span class="op">!=</span><span class="st"> </span>c) <span class="op">&amp;&amp;</span><span class="st"> </span>(a <span class="op">&lt;</span><span class="st"> </span>b <span class="op">||</span><span class="st"> </span>b <span class="op">&lt;</span><span class="st"> </span>c)){</span>
<span id="cb2-4">    perm &lt;-<span class="st"> </span><span class="kw">order</span>(<span class="kw">c</span>(a,b,c), <span class="dt">decreasing =</span> <span class="ot">TRUE</span>)</span>
<span id="cb2-5">    abc &lt;-<span class="st"> </span><span class="kw">c</span>(a,b,c)[perm]</span>
<span id="cb2-6">    clines &lt;-<span class="st"> </span></span>
<span id="cb2-7"><span class="st">      </span><span class="kw">curvatureLinesE</span>(abc[1L], abc[2L], abc[3L], nu, nv, du, dv, npoints)</span>
<span id="cb2-8">    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[, perm]))</span>
<span id="cb2-9">  }</span>
<span id="cb2-10">  <span class="cf">if</span>(a <span class="op">!=</span><span class="st"> </span>b <span class="op">&amp;&amp;</span><span class="st"> </span>b <span class="op">!=</span><span class="st"> </span>c){</span>
<span id="cb2-11">    <span class="kw">stopifnot</span>(du <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, dv <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb2-12">    a2 &lt;-<span class="st"> </span>a<span class="op">^</span><span class="dv">2</span>; b2 &lt;-<span class="st"> </span>b<span class="op">^</span><span class="dv">2</span>; c2 &lt;-<span class="st"> </span>c<span class="op">^</span><span class="dv">2</span></span>
<span id="cb2-13">    h2ab &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>b2; h2ac &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>c2; h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb2-14">    <span class="cf">if</span>(du <span class="op">&gt;=</span><span class="st"> </span>h2ab) <span class="kw">stop</span>(<span class="st">"`du` is too large."</span>)</span>
<span id="cb2-15">    <span class="cf">if</span>(dv <span class="op">&gt;=</span><span class="st"> </span>h2bc) <span class="kw">stop</span>(<span class="st">"`dv` is too large."</span>)</span>
<span id="cb2-16">    out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">"list"</span>, <span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span> <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>nu<span class="dv">-1</span>)</span>
<span id="cb2-17">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2<span class="op">+</span>du, a2, <span class="dt">length.out =</span> nu)</span>
<span id="cb2-18">    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2, a2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb2-19">    v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2, b2<span class="op">-</span>dv, <span class="dt">length.out =</span> nv) </span>
<span id="cb2-20">    t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2, b2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb2-21">    mx &lt;-<span class="st"> </span>a <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab)</span>
<span id="cb2-22">    my &lt;-<span class="st"> </span>b <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab)</span>
<span id="cb2-23">    mz &lt;-<span class="st"> </span>c <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac)</span>
<span id="cb2-24">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb2-25">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>s_)<span class="op">*</span>(a2<span class="op">-</span>v_[j]))</span>
<span id="cb2-26">      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>b2)<span class="op">*</span>(b2<span class="op">-</span>v_[j]))</span>
<span id="cb2-27">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>c2)<span class="op">*</span>(v_[j]<span class="op">-</span>c2))</span>
<span id="cb2-28">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(<span class="op">-</span>x, y, z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb2-29">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(M, <span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])[(<span class="dv">2</span><span class="op">*</span>npoints<span class="dv">-2</span>)<span class="op">:</span>1L,])</span>
<span id="cb2-30">      out[[j]] &lt;-<span class="st"> </span>M</span>
<span id="cb2-31">      <span class="cf">if</span>(j <span class="op">&gt;</span><span class="st"> </span>1L){</span>
<span id="cb2-32">        out[[nv<span class="op">+</span>j<span class="dv">-1</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M[,3L])</span>
<span id="cb2-33">      }</span>
<span id="cb2-34">    }</span>
<span id="cb2-35">    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb2-36">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>u_[i])<span class="op">*</span>(a2<span class="op">-</span>t_))</span>
<span id="cb2-37">      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>b2)<span class="op">*</span>(b2<span class="op">-</span>t_))</span>
<span id="cb2-38">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>c2)<span class="op">*</span>(t_<span class="op">-</span>c2))</span>
<span id="cb2-39">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, <span class="op">-</span>y, z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb2-40">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(M, <span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M[,3L])[(<span class="dv">2</span><span class="op">*</span>npoints<span class="dv">-2</span>)<span class="op">:</span>1L,])</span>
<span id="cb2-41">      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>i]] &lt;-<span class="st"> </span>M</span>
<span id="cb2-42">      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb2-43">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb2-44">      }</span>
<span id="cb2-45">    }</span>
<span id="cb2-46">  }<span class="cf">else</span>{ <span class="co"># a == b || b == c </span></span>
<span id="cb2-47">    <span class="co"># surface of revolution =&gt; curvature lines are meridians and parallels</span></span>
<span id="cb2-48">    <span class="kw">stopifnot</span>(dv <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, dv <span class="op">&lt;</span><span class="st"> </span>pi<span class="op">/</span><span class="dv">2</span>)</span>
<span id="cb2-49">    out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">"list"</span>, nu <span class="op">+</span><span class="st"> </span>nv)</span>
<span id="cb2-50">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L]</span>
<span id="cb2-51">    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> npoints)</span>
<span id="cb2-52">    v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi<span class="op">/</span><span class="dv">2</span><span class="op">+</span>dv, pi<span class="op">/</span><span class="dv">2</span><span class="op">-</span>dv, <span class="dt">length.out =</span> nv) </span>
<span id="cb2-53">    t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span>pi, pi, <span class="dt">length.out =</span> npoints)</span>
<span id="cb2-54">    coss_ &lt;-<span class="st"> </span><span class="kw">cos</span>(s_); sins_ &lt;-<span class="st"> </span><span class="kw">sin</span>(s_)</span>
<span id="cb2-55">    cost_ &lt;-<span class="st"> </span><span class="kw">cos</span>(t_); sint_ &lt;-<span class="st"> </span><span class="kw">sin</span>(t_)</span>
<span id="cb2-56">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb2-57">      x &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span>coss_ <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(v_[j])</span>
<span id="cb2-58">      y &lt;-<span class="st"> </span>b <span class="op">*</span><span class="st"> </span>sins_ <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(v_[j])</span>
<span id="cb2-59">      z &lt;-<span class="st"> </span>c <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(v_[j])</span>
<span id="cb2-60">      out[[j]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y, z)</span>
<span id="cb2-61">    }</span>
<span id="cb2-62">    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb2-63">      x &lt;-<span class="st"> </span>a <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_[i]) <span class="op">*</span><span class="st"> </span>cost_</span>
<span id="cb2-64">      y &lt;-<span class="st"> </span>b <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_[i]) <span class="op">*</span><span class="st"> </span>cost_</span>
<span id="cb2-65">      z &lt;-<span class="st"> </span>c <span class="op">*</span><span class="st"> </span>sint_</span>
<span id="cb2-66">      out[[nv<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y, z)</span>
<span id="cb2-67">    }</span>
<span id="cb2-68">  }</span>
<span id="cb2-69">  out</span>
<span id="cb2-70">}</span></code></pre>
      </div>
      <p>Here is an example:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">a =<span class="st"> </span><span class="dv">7</span>; b =<span class="st"> </span><span class="dv">5</span>; c =<span class="st"> </span><span class="dv">3</span></span>
<span id="cb3-2">mesh &lt;-<span class="st"> </span><span class="kw">ellipsoidMesh</span>(a, b, c)</span>
<span id="cb3-3">clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesE</span>(a, b, c, <span class="dt">nu =</span> <span class="dv">5</span>, <span class="dt">nv =</span> <span class="dv">5</span>, <span class="dt">du =</span> <span class="fl">0.4</span>, <span class="dt">dv =</span> <span class="dv">1</span>, </span>
<span id="cb3-4">                          <span class="dt">npoints =</span> <span class="dv">300</span>)</span>
<span id="cb3-5"><span class="kw">shade3d</span>(mesh, <span class="dt">col =</span> <span class="st">"springgreen"</span>)</span>
<span id="cb3-6"><span class="kw">invisible</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l){</span>
<span id="cb3-7">  <span class="kw">shade3d</span>(<span class="kw">cylinder3d</span>(l, <span class="dt">radius =</span> <span class="fl">0.08</span>, <span class="dt">sides =</span> <span class="dv">30</span>))</span>
<span id="cb3-8">}))</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/quadrics_E.png"
        />
      </p>
      <h1 id="one-sheeted-hyperboloid">One-sheeted hyperboloid</h1>
      <p>
        There are three types of one-sheeted hyperboloids, corresponding to
        these equations:
        <span class="math display"
          >\[ \frac{x^2}{a^2} + \frac{y^2}{b^2} - \frac{z^2}{c^2} = 1 \\
          \frac{x^2}{a^2} - \frac{y^2}{b^2} + \frac{z^2}{c^2} = 1 \\
          -\frac{x^2}{a^2} + \frac{y^2}{b^2} + \frac{z^2}{c^2} = 1. \]</span
        >
        The <code>hyperboloidMesh</code> function below generates a mesh of the
        one-sheeted hyperboloid; the <code>signature</code> argument corresponds
        to one of the above equations, it must be <code>"++-"</code>,
        <code>"+-+"</code> or <code>"-++"</code>. The mesh is made of
        quadrilaterals and their number is controlled by the arguments
        <code>nu</code> and <code>nv</code>. The hyperboloid is infinite along
        the direction corresponding to the minus sign, and the argument
        <code>vmin</code> controls the truncation of the hyperboloid in this
        direction.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">hyperboloidMesh &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, signature, nu, nv, vmin){</span>
<span id="cb4-2">  <span class="kw">stopifnot</span>(signature <span class="op">%in%</span><span class="st"> </span><span class="kw">c</span>(<span class="st">"++-"</span>, <span class="st">"+-+"</span>, <span class="st">"-++"</span>))</span>
<span id="cb4-3">  <span class="kw">stopifnot</span>(vmin <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>, a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, b <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb4-4">  <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "+-+"</span>){</span>
<span id="cb4-5">    mesh &lt;-<span class="st"> </span><span class="kw">hyperboloidMesh</span>(a, c, b, <span class="st">"++-"</span>, nu, nv, vmin)</span>
<span id="cb4-6">    mesh<span class="op">$</span>vb &lt;-<span class="st"> </span>mesh<span class="op">$</span>vb[<span class="kw">c</span>(1L,3L,2L,4L),]</span>
<span id="cb4-7">    mesh<span class="op">$</span>normals &lt;-<span class="st"> </span>mesh<span class="op">$</span>normals[<span class="kw">c</span>(1L,3L,2L),]</span>
<span id="cb4-8">    mesh<span class="op">$</span>ib &lt;-<span class="st"> </span>mesh<span class="op">$</span>ib[4L<span class="op">:</span>1L,]</span>
<span id="cb4-9">    <span class="kw">return</span>(mesh)</span>
<span id="cb4-10">  }<span class="cf">else</span> <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "-++"</span>){</span>
<span id="cb4-11">    mesh &lt;-<span class="st"> </span><span class="kw">hyperboloidMesh</span>(c, b, a, <span class="st">"++-"</span>, nu, nv, vmin)</span>
<span id="cb4-12">    mesh<span class="op">$</span>vb &lt;-<span class="st"> </span>mesh<span class="op">$</span>vb[<span class="kw">c</span>(3L,2L,1L,4L),]</span>
<span id="cb4-13">    mesh<span class="op">$</span>normals &lt;-<span class="st"> </span>mesh<span class="op">$</span>normals[<span class="kw">c</span>(3L,2L,1L),]</span>
<span id="cb4-14">    mesh<span class="op">$</span>ib &lt;-<span class="st"> </span>mesh<span class="op">$</span>ib[4L<span class="op">:</span>1L,]</span>
<span id="cb4-15">    <span class="kw">return</span>(mesh)</span>
<span id="cb4-16">  }</span>
<span id="cb4-17">  c0 &lt;-<span class="st"> </span>c</span>
<span id="cb4-18">  <span class="cf">if</span>(b <span class="op">&gt;</span><span class="st"> </span>a){</span>
<span id="cb4-19">    exchange &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb4-20">    a0 &lt;-<span class="st"> </span>b; b0 &lt;-<span class="st"> </span>a</span>
<span id="cb4-21">  }<span class="cf">else</span>{</span>
<span id="cb4-22">    exchange &lt;-<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb4-23">    a0 &lt;-<span class="st"> </span>a; b0 &lt;-<span class="st"> </span>b</span>
<span id="cb4-24">  }</span>
<span id="cb4-25">  Mu2 &lt;-<span class="st"> </span>a0<span class="op">^</span><span class="dv">2</span></span>
<span id="cb4-26">  h2ab &lt;-<span class="st"> </span>Mu2 <span class="op">-</span><span class="st"> </span>b0<span class="op">^</span><span class="dv">2</span>; h2ac &lt;-<span class="st"> </span>c0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Mu2</span>
<span id="cb4-27">  c2 &lt;-<span class="st"> </span><span class="dv">1</span>; a2 &lt;-<span class="st"> </span>c2 <span class="op">+</span><span class="st"> </span>h2ac; b2 &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>h2ab</span>
<span id="cb4-28">  h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb4-29">  <span class="co">#</span></span>
<span id="cb4-30">  vertices &lt;-<span class="st"> </span>Normals &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb4-31">  indices &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 4L, <span class="dt">ncol =</span> (nu<span class="dv">-1</span>)<span class="op">*</span>(nv<span class="dv">-1</span>))</span>
<span id="cb4-32">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> nv)</span>
<span id="cb4-33">  <span class="co">#</span></span>
<span id="cb4-34">  <span class="cf">if</span>(a0 <span class="op">!=</span><span class="st"> </span>b0){</span>
<span id="cb4-35">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2, a2, <span class="dt">length.out =</span> nu)</span>
<span id="cb4-36">    x &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>u_)</span>
<span id="cb4-37">    y &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(u_<span class="op">-</span>b2)</span>
<span id="cb4-38">    z &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(u_<span class="op">-</span>c2)</span>
<span id="cb4-39">  }<span class="cf">else</span>{</span>
<span id="cb4-40">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L]</span>
<span id="cb4-41">    z &lt;-<span class="st"> </span><span class="kw">rep</span>(c0<span class="op">/</span><span class="kw">sqrt</span>(h2ac), nu)</span>
<span id="cb4-42">    mxy &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac)</span>
<span id="cb4-43">    x &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_)</span>
<span id="cb4-44">    y &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_)</span>
<span id="cb4-45">  }</span>
<span id="cb4-46">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nu){</span>
<span id="cb4-47">    <span class="cf">for</span>(j <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nv){</span>
<span id="cb4-48">      P &lt;-<span class="st"> </span>vertices[, (i<span class="dv">-1</span>)<span class="op">*</span>nv<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb4-49">        x[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>v_[j]),</span>
<span id="cb4-50">        y[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>v_[j]),</span>
<span id="cb4-51">        z[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>v_[j])</span>
<span id="cb4-52">      )</span>
<span id="cb4-53">      Normals[, (i<span class="dv">-1</span>)<span class="op">*</span>nv<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(P[1L]<span class="op">/</span>a0<span class="op">^</span><span class="dv">2</span>, P[2L]<span class="op">/</span>b0<span class="op">^</span><span class="dv">2</span>, <span class="op">-</span>P[3L]<span class="op">/</span>c0<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb4-54">    }</span>
<span id="cb4-55">  }</span>
<span id="cb4-56">  <span class="co"># quads</span></span>
<span id="cb4-57">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(nu<span class="dv">-1</span>)){</span>
<span id="cb4-58">    im1 &lt;-<span class="st"> </span>i<span class="op">-</span>1L</span>
<span id="cb4-59">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>(nv<span class="dv">-1</span>)){</span>
<span id="cb4-60">      jp1 &lt;-<span class="st"> </span>j<span class="op">+</span>1L</span>
<span id="cb4-61">      quad &lt;-<span class="st"> </span><span class="kw">c</span>(im1<span class="op">*</span>nv<span class="op">+</span>j, im1<span class="op">*</span>nv<span class="op">+</span>jp1, i<span class="op">*</span>nv<span class="op">+</span>jp1, i<span class="op">*</span>nv<span class="op">+</span>j)</span>
<span id="cb4-62">      indices[, im1<span class="op">*</span>(nv<span class="dv">-1</span>)<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) <span class="kw">rev</span>(quad) <span class="cf">else</span> quad</span>
<span id="cb4-63">    }</span>
<span id="cb4-64">  }</span>
<span id="cb4-65">  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb4-66">  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span>nu<span class="op">*</span>nv)</span>
<span id="cb4-67">  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb4-68">  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb4-69">  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>nu<span class="op">*</span>nv)</span>
<span id="cb4-70">  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb4-71">  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb4-72">  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu<span class="op">*</span>nv)</span>
<span id="cb4-73">  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb4-74">  mesh &lt;-<span class="st"> </span><span class="kw">qmesh3d</span>(</span>
<span id="cb4-75">    <span class="dt">vertices =</span> <span class="cf">if</span>(exchange) vertices[<span class="kw">c</span>(2L,1L,3L),] <span class="cf">else</span> vertices,</span>
<span id="cb4-76">    <span class="dt">indices =</span> indices,</span>
<span id="cb4-77">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb4-78">    <span class="dt">normals =</span> <span class="kw">t</span>(<span class="cf">if</span>(exchange) Normals[<span class="kw">c</span>(2L,1L,3L),] <span class="cf">else</span> Normals)</span>
<span id="cb4-79">  )</span>
<span id="cb4-80">  mesh</span>
<span id="cb4-81">}</span></code></pre>
      </div>
      <p>
        The <code>curvatureLinesH1</code> function below generates some
        curvature lines of the one-sheeted hyperboloid. There are two families
        of curvature lines and the desired numbers of lines in them are
        controlled by the arguments <code>nu</code> and <code>nv</code>.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">curvatureLinesH1 &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, <span class="dt">signature =</span> <span class="st">"++-"</span>, nu, nv, vmin,  </span>
<span id="cb5-2">                             <span class="dt">npoints =</span> <span class="dv">100</span>){</span>
<span id="cb5-3">  <span class="kw">stopifnot</span>(signature <span class="op">%in%</span><span class="st"> </span><span class="kw">c</span>(<span class="st">"++-"</span>, <span class="st">"+-+"</span>, <span class="st">"-++"</span>))</span>
<span id="cb5-4">  <span class="kw">stopifnot</span>(vmin <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>, a <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, b <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb5-5">  <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "+-+"</span>){</span>
<span id="cb5-6">    clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesH1</span>(a, c, b, <span class="st">"++-"</span>, nu, nv, vmin, npoints)</span>
<span id="cb5-7">    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[,<span class="kw">c</span>(1L,3L,2L)]))</span>
<span id="cb5-8">  }<span class="cf">else</span> <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "-++"</span>){</span>
<span id="cb5-9">    clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesH1</span>(c, b, a, <span class="st">"++-"</span>, nu, nv, vmin, npoints)</span>
<span id="cb5-10">    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[,<span class="kw">c</span>(3L,2L,1L)]))</span>
<span id="cb5-11">  }</span>
<span id="cb5-12">  c0 &lt;-<span class="st"> </span>c</span>
<span id="cb5-13">  <span class="cf">if</span>(b <span class="op">&gt;</span><span class="st"> </span>a){</span>
<span id="cb5-14">    exchange &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb5-15">    a0 &lt;-<span class="st"> </span>b; b0 &lt;-<span class="st"> </span>a</span>
<span id="cb5-16">  }<span class="cf">else</span>{</span>
<span id="cb5-17">    exchange &lt;-<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb5-18">    a0 &lt;-<span class="st"> </span>a; b0 &lt;-<span class="st"> </span>b</span>
<span id="cb5-19">  }</span>
<span id="cb5-20">  Mu2 &lt;-<span class="st"> </span>a0<span class="op">^</span><span class="dv">2</span></span>
<span id="cb5-21">  h2ab &lt;-<span class="st"> </span>Mu2 <span class="op">-</span><span class="st"> </span>b0<span class="op">^</span><span class="dv">2</span>; h2ac &lt;-<span class="st"> </span>c0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Mu2</span>
<span id="cb5-22">  c2 &lt;-<span class="st"> </span><span class="dv">1</span>; a2 &lt;-<span class="st"> </span>c2 <span class="op">+</span><span class="st"> </span>h2ac; b2 &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>h2ab</span>
<span id="cb5-23">  h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb5-24">  <span class="co">#  </span></span>
<span id="cb5-25">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> nv)</span>
<span id="cb5-26">  t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb5-27">  <span class="co">#</span></span>
<span id="cb5-28">  <span class="cf">if</span>(a0 <span class="op">!=</span><span class="st"> </span>b0){</span>
<span id="cb5-29">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2, a2, <span class="dt">length.out =</span> nu)</span>
<span id="cb5-30">    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(b2, a2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb5-31">    mx &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab)</span>
<span id="cb5-32">    my &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab)</span>
<span id="cb5-33">    mz &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac)</span>
<span id="cb5-34">    out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">"list"</span>, <span class="dv">2</span><span class="op">*</span>nv <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu <span class="op">-</span><span class="st"> </span><span class="dv">5</span>)</span>
<span id="cb5-35">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb5-36">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>s_)<span class="op">*</span>(a2<span class="op">-</span>v_[j]))</span>
<span id="cb5-37">      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>b2)<span class="op">*</span>(b2<span class="op">-</span>v_[j]))</span>
<span id="cb5-38">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>c2)<span class="op">*</span>(c2<span class="op">-</span>v_[j]))</span>
<span id="cb5-39">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(<span class="op">-</span>x, y, z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb5-40">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(M, <span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])[(<span class="dv">2</span><span class="op">*</span>npoints<span class="dv">-2</span>)<span class="op">:</span>1L,])</span>
<span id="cb5-41">      out[[j]] &lt;-<span class="st"> </span>M</span>
<span id="cb5-42">      <span class="cf">if</span>(j <span class="op">&lt;</span><span class="st"> </span>nv){</span>
<span id="cb5-43">        out[[nv<span class="op">+</span>j]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M[,3L])</span>
<span id="cb5-44">      }</span>
<span id="cb5-45">    }</span>
<span id="cb5-46">    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb5-47">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>u_[i])<span class="op">*</span>(a2<span class="op">-</span>t_))</span>
<span id="cb5-48">      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>b2)<span class="op">*</span>(b2<span class="op">-</span>t_))</span>
<span id="cb5-49">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>c2)<span class="op">*</span>(c2<span class="op">-</span>t_))</span>
<span id="cb5-50">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, y, <span class="op">-</span>z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb5-51">      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>i]] &lt;-<span class="st"> </span>M</span>
<span id="cb5-52">      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb5-53">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb5-54">        <span class="cf">if</span>(i<span class="op">&gt;</span>1L) out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">3</span><span class="op">*</span>nu<span class="op">+</span>i<span class="dv">-4</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,<span class="kw">c</span>(1L,2L)], M[,3L])</span>
<span id="cb5-55">      }</span>
<span id="cb5-56">      <span class="cf">if</span>(i <span class="op">&gt;</span><span class="st"> </span>1L){</span>
<span id="cb5-57">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">2</span><span class="op">*</span>nu<span class="op">+</span>i<span class="dv">-3</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])</span>
<span id="cb5-58">      }</span>
<span id="cb5-59">    }</span>
<span id="cb5-60">  }<span class="cf">else</span>{ <span class="co"># a0 = b0</span></span>
<span id="cb5-61">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L]</span>
<span id="cb5-62">    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> npoints)</span>
<span id="cb5-63">    coss_ &lt;-<span class="st"> </span><span class="kw">cos</span>(s_); sins_ &lt;-<span class="st"> </span><span class="kw">sin</span>(s_)</span>
<span id="cb5-64">    mxy &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac)</span>
<span id="cb5-65">    mz &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc)</span>
<span id="cb5-66">    out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">"list"</span>, <span class="dv">2</span><span class="op">*</span>nv <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu <span class="op">-</span><span class="st"> </span><span class="dv">5</span>)</span>
<span id="cb5-67">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb5-68">      x &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>v_[j]) <span class="op">*</span><span class="st"> </span>coss_</span>
<span id="cb5-69">      y &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>v_[j]) <span class="op">*</span><span class="st"> </span>sins_</span>
<span id="cb5-70">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>v_[j]) </span>
<span id="cb5-71">      M &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y, z)</span>
<span id="cb5-72">      out[[j]] &lt;-<span class="st"> </span>M</span>
<span id="cb5-73">      <span class="cf">if</span>(j <span class="op">&lt;</span><span class="st"> </span>nv){</span>
<span id="cb5-74">        out[[nv<span class="op">+</span>j]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M[,3L])</span>
<span id="cb5-75">      }</span>
<span id="cb5-76">    }</span>
<span id="cb5-77">    r &lt;-<span class="st"> </span>mxy <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>t_)</span>
<span id="cb5-78">    z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>t_)</span>
<span id="cb5-79">    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb5-80">      x &lt;-<span class="st"> </span>r <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_[i])</span>
<span id="cb5-81">      y &lt;-<span class="st"> </span>r <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_[i])</span>
<span id="cb5-82">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, y, <span class="op">-</span>z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb5-83">      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>i]] &lt;-<span class="st"> </span>M</span>
<span id="cb5-84">      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb5-85">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="dv">-1</span><span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb5-86">        <span class="cf">if</span>(i<span class="op">&gt;</span>1L) out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">3</span><span class="op">*</span>nu<span class="op">+</span>i<span class="dv">-4</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="op">-</span>M[,<span class="kw">c</span>(1L,2L)], M[,3L])</span>
<span id="cb5-87">      }</span>
<span id="cb5-88">      <span class="cf">if</span>(i <span class="op">&gt;</span><span class="st"> </span>1L){</span>
<span id="cb5-89">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">2</span><span class="op">*</span>nu<span class="op">+</span>i<span class="dv">-3</span>]] &lt;-<span class="st"> </span><span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])</span>
<span id="cb5-90">      }</span>
<span id="cb5-91">    }</span>
<span id="cb5-92">  }</span>
<span id="cb5-93">  <span class="cf">if</span>(exchange){</span>
<span id="cb5-94">    out &lt;-<span class="st"> </span><span class="kw">lapply</span>(out, <span class="cf">function</span>(M){</span>
<span id="cb5-95">      M[, <span class="kw">c</span>(2L,1L,3L)]</span>
<span id="cb5-96">    })</span>
<span id="cb5-97">  }</span>
<span id="cb5-98">  out</span>
<span id="cb5-99">}</span></code></pre>
      </div>
      <p>Here is an example:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1">sgntr =<span class="st"> "++-"</span></span>
<span id="cb6-2">a =<span class="st"> </span><span class="dv">4</span>; b =<span class="st"> </span><span class="dv">6</span>; c =<span class="st"> </span><span class="dv">5</span></span>
<span id="cb6-3">mesh &lt;-<span class="st"> </span><span class="kw">hyperboloidMesh</span>(a, b, c, sgntr, <span class="dt">nu =</span> <span class="dv">100</span>, <span class="dt">nv =</span> <span class="dv">100</span>, <span class="dt">vmin =</span> <span class="dv">-150</span>)</span>
<span id="cb6-4">clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesH1</span>(a, b, c, sgntr, <span class="dt">nu =</span> <span class="dv">5</span>, <span class="dt">nv =</span> <span class="dv">5</span>, <span class="dt">vmin =</span> <span class="dv">-150</span>)</span>
<span id="cb6-5"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"chartreuse4"</span>, <span class="dt">back =</span> <span class="st">"culled"</span>) </span>
<span id="cb6-6"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"yellow"</span>, <span class="dt">front =</span> <span class="st">"culled"</span>) </span>
<span id="cb6-7"><span class="kw">invisible</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l){</span>
<span id="cb6-8">  <span class="kw">shade3d</span>(<span class="kw">cylinder3d</span>(l, <span class="dt">radius =</span> <span class="fl">0.1</span>, <span class="dt">sides =</span> <span class="dv">30</span>))</span>
<span id="cb6-9">}))</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/quadrics_H1.png"
        />
      </p>
      <h1 id="two-sheeted-hyperboloid">Two-sheeted hyperboloid</h1>
      <p>
        There are three types of two-sheeted hyperboloids, corresponding to
        these equations:
        <span class="math display"
          >\[ \frac{x^2}{a^2} - \frac{y^2}{b^2} - \frac{z^2}{c^2} = 1 \\
          -\frac{x^2}{a^2} - \frac{y^2}{b^2} + \frac{z^2}{c^2} = 1 \\
          -\frac{x^2}{a^2} + \frac{y^2}{b^2} - \frac{z^2}{c^2} = 1. \]</span
        >
        The <code>twoSheetsHyperboloidMesh</code> function below generates a
        mesh of the two-sheeted hyperboloid; the <code>signature</code> argument
        corresponds to one of the above equations, it must be
        <code>"+--"</code>, <code>"--+"</code> or <code>"-+-"</code>. The mesh
        is made of quadrilaterals and their number is controlled by the
        arguments <code>nu</code> and <code>nv</code>. The two-sheeted
        hyperboloid is infinite and the argument <code>vmin</code> is here to
        control its truncation.
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1">twoSheetsHyperboloidMesh &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, signature, nu, nv, vmin){</span>
<span id="cb7-2">  <span class="kw">stopifnot</span>(signature <span class="op">%in%</span><span class="st"> </span><span class="kw">c</span>(<span class="st">"+--"</span>, <span class="st">"--+"</span>, <span class="st">"-+-"</span>))</span>
<span id="cb7-3">  <span class="kw">stopifnot</span>(vmin <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb7-4">  <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "--+"</span>){</span>
<span id="cb7-5">    mesh &lt;-<span class="st"> </span><span class="kw">twoSheetsHyperboloidMesh</span>(c, b, a, <span class="st">"+--"</span>, nu, nv, vmin)</span>
<span id="cb7-6">    mesh<span class="op">$</span>vb &lt;-<span class="st"> </span>mesh<span class="op">$</span>vb[<span class="kw">c</span>(3L,2L,1L,4L),]</span>
<span id="cb7-7">    mesh<span class="op">$</span>normals &lt;-<span class="st"> </span>mesh<span class="op">$</span>normals[<span class="kw">c</span>(3L,2L,1L),]</span>
<span id="cb7-8">    mesh<span class="op">$</span>ib &lt;-<span class="st"> </span>mesh<span class="op">$</span>ib[4L<span class="op">:</span>1L,]</span>
<span id="cb7-9">    <span class="kw">return</span>(mesh)</span>
<span id="cb7-10">  }<span class="cf">else</span> <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "-+-"</span>){</span>
<span id="cb7-11">    mesh &lt;-<span class="st"> </span><span class="kw">twoSheetsHyperboloidMesh</span>(b, a, c, <span class="st">"+--"</span>, nu, nv, vmin)</span>
<span id="cb7-12">    mesh<span class="op">$</span>vb &lt;-<span class="st"> </span>mesh<span class="op">$</span>vb[<span class="kw">c</span>(2L,1L,3L,4L),]</span>
<span id="cb7-13">    mesh<span class="op">$</span>normals &lt;-<span class="st"> </span>mesh<span class="op">$</span>normals[<span class="kw">c</span>(2L,1L,3L),]</span>
<span id="cb7-14">    mesh<span class="op">$</span>ib &lt;-<span class="st"> </span>mesh<span class="op">$</span>ib[4L<span class="op">:</span>1L,]</span>
<span id="cb7-15">    <span class="kw">return</span>(mesh)</span>
<span id="cb7-16">  }</span>
<span id="cb7-17">  a0 &lt;-<span class="st"> </span>a</span>
<span id="cb7-18">  <span class="cf">if</span>(b <span class="op">&gt;</span><span class="st"> </span>c){</span>
<span id="cb7-19">    exchange &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb7-20">    b0 &lt;-<span class="st"> </span>c; c0 &lt;-<span class="st"> </span>b</span>
<span id="cb7-21">  }<span class="cf">else</span>{</span>
<span id="cb7-22">    exchange &lt;-<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb7-23">    b0 &lt;-<span class="st"> </span>b; c0 &lt;-<span class="st"> </span>c</span>
<span id="cb7-24">  }</span>
<span id="cb7-25">  Nu2 &lt;-<span class="st"> </span>a0<span class="op">^</span><span class="dv">2</span></span>
<span id="cb7-26">  h2ab &lt;-<span class="st"> </span>b0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Nu2; h2ac &lt;-<span class="st"> </span>c0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Nu2</span>
<span id="cb7-27">  c2 &lt;-<span class="st"> </span><span class="dv">1</span>; a2 &lt;-<span class="st"> </span>c2 <span class="op">+</span><span class="st"> </span>h2ac; b2 &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>h2ab</span>
<span id="cb7-28">  h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb7-29">  <span class="co">#</span></span>
<span id="cb7-30">  vertices &lt;-<span class="st"> </span>Normals &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> nu<span class="op">*</span>nv)</span>
<span id="cb7-31">  indices &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 4L, <span class="dt">ncol =</span> (nu<span class="dv">-1</span>)<span class="op">*</span>(nv<span class="dv">-1</span>))</span>
<span id="cb7-32">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> nv)</span>
<span id="cb7-33">  <span class="co">#</span></span>
<span id="cb7-34">  <span class="cf">if</span>(b0 <span class="op">!=</span><span class="st"> </span>c0){</span>
<span id="cb7-35">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2, b2, <span class="dt">length.out =</span> nu)</span>
<span id="cb7-36">    x &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>u_)</span>
<span id="cb7-37">    y &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>u_)</span>
<span id="cb7-38">    z &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac) <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(u_<span class="op">-</span>c2)</span>
<span id="cb7-39">  }<span class="cf">else</span>{</span>
<span id="cb7-40">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L]</span>
<span id="cb7-41">    x &lt;-<span class="st"> </span><span class="kw">rep</span>(a0<span class="op">/</span><span class="kw">sqrt</span>(h2ac), nu)</span>
<span id="cb7-42">    myz &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ab)</span>
<span id="cb7-43">    y &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_)</span>
<span id="cb7-44">    z &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_)</span>
<span id="cb7-45">  }</span>
<span id="cb7-46">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nu){</span>
<span id="cb7-47">    <span class="cf">for</span>(j <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nv){</span>
<span id="cb7-48">      P &lt;-<span class="st"> </span>vertices[, (i<span class="dv">-1</span>)<span class="op">*</span>nv<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb7-49">        x[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>v_[j]),</span>
<span id="cb7-50">        y[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>v_[j]),</span>
<span id="cb7-51">        z[i] <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>v_[j])</span>
<span id="cb7-52">      )</span>
<span id="cb7-53">      Normals[, (i<span class="dv">-1</span>)<span class="op">*</span>nv<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(P[1L]<span class="op">/</span>a0<span class="op">^</span><span class="dv">2</span>, <span class="op">-</span>P[2L]<span class="op">/</span>b0<span class="op">^</span><span class="dv">2</span>, <span class="op">-</span>P[3L]<span class="op">/</span>c0<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb7-54">    }</span>
<span id="cb7-55">  }</span>
<span id="cb7-56">  <span class="co"># quads</span></span>
<span id="cb7-57">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>(nu<span class="dv">-1</span>)){</span>
<span id="cb7-58">    im1 &lt;-<span class="st"> </span>i<span class="op">-</span>1L</span>
<span id="cb7-59">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>(nv<span class="dv">-1</span>)){</span>
<span id="cb7-60">      jp1 &lt;-<span class="st"> </span>j<span class="op">+</span>1L</span>
<span id="cb7-61">      quad &lt;-<span class="st"> </span><span class="kw">c</span>(im1<span class="op">*</span>nv<span class="op">+</span>j, im1<span class="op">*</span>nv<span class="op">+</span>jp1, i<span class="op">*</span>nv<span class="op">+</span>jp1, i<span class="op">*</span>nv<span class="op">+</span>j)</span>
<span id="cb7-62">      indices[, im1<span class="op">*</span>(nv<span class="dv">-1</span>)<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) <span class="kw">rev</span>(quad) <span class="cf">else</span> quad</span>
<span id="cb7-63">    }</span>
<span id="cb7-64">  }</span>
<span id="cb7-65">  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb7-66">  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span>nu<span class="op">*</span>nv)</span>
<span id="cb7-67">  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb7-68">  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb7-69">  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>nu<span class="op">*</span>nv)</span>
<span id="cb7-70">  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb7-71">  vertices &lt;-<span class="st"> </span><span class="kw">cbind</span>(vertices, <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>vertices)</span>
<span id="cb7-72">  indices &lt;-<span class="st"> </span><span class="kw">cbind</span>(indices, indices[4L<span class="op">:</span>1L,] <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu<span class="op">*</span>nv)</span>
<span id="cb7-73">  Normals &lt;-<span class="st"> </span><span class="kw">cbind</span>(Normals, <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span><span class="st"> </span>Normals)</span>
<span id="cb7-74">  mesh &lt;-<span class="st"> </span><span class="kw">qmesh3d</span>(</span>
<span id="cb7-75">    <span class="dt">vertices =</span> <span class="cf">if</span>(exchange) vertices[<span class="kw">c</span>(1L,3L,2L),] <span class="cf">else</span> vertices,</span>
<span id="cb7-76">    <span class="dt">indices =</span> indices,</span>
<span id="cb7-77">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb7-78">    <span class="dt">normals =</span> <span class="op">-</span><span class="kw">t</span>(<span class="cf">if</span>(exchange) Normals[<span class="kw">c</span>(1L,3L,2L),] <span class="cf">else</span> Normals)</span>
<span id="cb7-79">  )</span>
<span id="cb7-80">  mesh</span>
<span id="cb7-81">}</span></code></pre>
      </div>
      <p>
        The <code>curvatureLinesH2</code> function below generates some
        curvature lines of the two-sheeted hyperboloid. The role of the
        arguments <code>du</code> and <code>dv</code> is similar to the role of
        the arguments <code>du</code> and <code>dv</code> in
        <code>curvatureLinesE</code>.
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1">curvatureLinesH2 &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, c, signature, nu, nv, vmin, du, dv, </span>
<span id="cb8-2">                             <span class="dt">npoints =</span> <span class="dv">100</span>){</span>
<span id="cb8-3">  <span class="kw">stopifnot</span>(signature <span class="op">%in%</span><span class="st"> </span><span class="kw">c</span>(<span class="st">"+--"</span>, <span class="st">"--+"</span>, <span class="st">"-+-"</span>))</span>
<span id="cb8-4">  <span class="kw">stopifnot</span>(du <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, dv <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, vmin <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>)</span>
<span id="cb8-5">  <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "--+"</span>){</span>
<span id="cb8-6">    clines &lt;-<span class="st"> </span></span>
<span id="cb8-7"><span class="st">      </span><span class="kw">curvatureLinesH2</span>(c, b, a, <span class="st">"+--"</span>, nu, nv, vmin, du, dv, npoints)</span>
<span id="cb8-8">    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[, <span class="kw">c</span>(3L,2L,1L)]))</span>
<span id="cb8-9">  }<span class="cf">else</span> <span class="cf">if</span>(signature <span class="op">==</span><span class="st"> "-+-"</span>){</span>
<span id="cb8-10">    clines &lt;-<span class="st"> </span></span>
<span id="cb8-11"><span class="st">      </span><span class="kw">curvatureLinesH2</span>(b, a, c, <span class="st">"+--"</span>, nu, nv, vmin, du, dv, npoints)</span>
<span id="cb8-12">    <span class="kw">return</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l) l[, <span class="kw">c</span>(2L,1L,3L)]))</span>
<span id="cb8-13">  }</span>
<span id="cb8-14">  a0 &lt;-<span class="st"> </span>a</span>
<span id="cb8-15">  <span class="cf">if</span>(b <span class="op">&gt;</span><span class="st"> </span>c){</span>
<span id="cb8-16">    exchange &lt;-<span class="st"> </span><span class="ot">TRUE</span></span>
<span id="cb8-17">    b0 &lt;-<span class="st"> </span>c; c0 &lt;-<span class="st"> </span>b</span>
<span id="cb8-18">  }<span class="cf">else</span>{</span>
<span id="cb8-19">    exchange &lt;-<span class="st"> </span><span class="ot">FALSE</span></span>
<span id="cb8-20">    b0 &lt;-<span class="st"> </span>b; c0 &lt;-<span class="st"> </span>c</span>
<span id="cb8-21">  }</span>
<span id="cb8-22">  Nu2 &lt;-<span class="st"> </span>a0<span class="op">^</span><span class="dv">2</span></span>
<span id="cb8-23">  h2ab &lt;-<span class="st"> </span>b0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Nu2; h2ac &lt;-<span class="st"> </span>c0<span class="op">^</span><span class="dv">2</span> <span class="op">+</span><span class="st"> </span>Nu2</span>
<span id="cb8-24">  c2 &lt;-<span class="st"> </span><span class="dv">1</span>; a2 &lt;-<span class="st"> </span>c2 <span class="op">+</span><span class="st"> </span>h2ac; b2 &lt;-<span class="st"> </span>a2 <span class="op">-</span><span class="st"> </span>h2ab</span>
<span id="cb8-25">  h2bc &lt;-<span class="st"> </span>b2 <span class="op">-</span><span class="st"> </span>c2</span>
<span id="cb8-26">  <span class="co">#</span></span>
<span id="cb8-27">  <span class="cf">if</span>(b0 <span class="op">!=</span><span class="st"> </span>c0 <span class="op">&amp;&amp;</span><span class="st"> </span>c2<span class="op">+</span>du <span class="op">&gt;=</span><span class="st"> </span>b2){</span>
<span id="cb8-28">    <span class="kw">stop</span>(<span class="st">"`du` is too large."</span>)</span>
<span id="cb8-29">  }</span>
<span id="cb8-30">  <span class="cf">if</span>(vmin <span class="op">&gt;=</span><span class="st"> </span>c2<span class="op">-</span>dv){</span>
<span id="cb8-31">    <span class="kw">stop</span>(<span class="st">"`dv` is too large"</span>)</span>
<span id="cb8-32">  }</span>
<span id="cb8-33">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2<span class="op">-</span>dv, <span class="dt">length.out =</span> nv)</span>
<span id="cb8-34">  t_ &lt;-<span class="st"> </span><span class="kw">seq</span>(vmin, c2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb8-35">  out &lt;-<span class="st"> </span><span class="kw">vector</span>(<span class="st">"list"</span>, <span class="dv">2</span><span class="op">*</span>nv <span class="op">+</span><span class="st"> </span><span class="dv">4</span><span class="op">*</span>nu <span class="op">-</span><span class="st"> </span><span class="dv">2</span>)</span>
<span id="cb8-36">  <span class="co">#</span></span>
<span id="cb8-37">  <span class="cf">if</span>(b0 <span class="op">!=</span><span class="st"> </span>c0){</span>
<span id="cb8-38">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2<span class="op">+</span>du, b2, <span class="dt">length.out =</span> nu)</span>
<span id="cb8-39">    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(c2, b2, <span class="dt">length.out =</span> npoints)</span>
<span id="cb8-40">    mx &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac<span class="op">*</span>h2ab)</span>
<span id="cb8-41">    my &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ab)</span>
<span id="cb8-42">    mz &lt;-<span class="st"> </span>c0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2bc<span class="op">*</span>h2ac)</span>
<span id="cb8-43">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>nv){</span>
<span id="cb8-44">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>s_)<span class="op">*</span>(a2<span class="op">-</span>v_[j]))</span>
<span id="cb8-45">      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((b2<span class="op">-</span>s_)<span class="op">*</span>(b2<span class="op">-</span>v_[j]))</span>
<span id="cb8-46">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((s_<span class="op">-</span>c2)<span class="op">*</span>(c2<span class="op">-</span>v_[j]))</span>
<span id="cb8-47">      M1 &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, <span class="op">-</span>y, z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb8-48">      M2 &lt;-<span class="st"> </span><span class="kw">cbind</span>(M1[,<span class="kw">c</span>(1L,2L)], <span class="op">-</span>M1[,3L])</span>
<span id="cb8-49">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(M1, M2[(<span class="dv">2</span><span class="op">*</span>npoints<span class="dv">-2</span>)<span class="op">:</span>1L,])</span>
<span id="cb8-50">      out[[j]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(1L,3L,2L)] <span class="cf">else</span> M</span>
<span id="cb8-51">      out[[nv<span class="op">+</span>j]] &lt;-<span class="st"> </span></span>
<span id="cb8-52"><span class="st">        </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], <span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(3L,2L)] <span class="cf">else</span> M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb8-53">    }</span>
<span id="cb8-54">    <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>nu){</span>
<span id="cb8-55">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((a2<span class="op">-</span>u_[i])<span class="op">*</span>(a2<span class="op">-</span>t_))</span>
<span id="cb8-56">      y &lt;-<span class="st"> </span>my <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((b2<span class="op">-</span>u_[i])<span class="op">*</span>(b2<span class="op">-</span>t_))</span>
<span id="cb8-57">      z &lt;-<span class="st"> </span>mz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>((u_[i]<span class="op">-</span>c2)<span class="op">*</span>(c2<span class="op">-</span>t_))</span>
<span id="cb8-58">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, y, <span class="op">-</span>z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb8-59">      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(1L,3L,2L)] <span class="cf">else</span> M</span>
<span id="cb8-60">      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb8-61">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) </span>
<span id="cb8-62">          <span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,3L)], <span class="op">-</span>M[,2L]) </span>
<span id="cb8-63">        <span class="cf">else</span> </span>
<span id="cb8-64">          <span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])</span>
<span id="cb8-65">      }</span>
<span id="cb8-66">    }</span>
<span id="cb8-67">  }<span class="cf">else</span>{ <span class="co"># b0 = c0</span></span>
<span id="cb8-68">    u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> nu<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span>1L] </span>
<span id="cb8-69">    s_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> npoints)</span>
<span id="cb8-70">    mx &lt;-<span class="st"> </span>a0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ac)</span>
<span id="cb8-71">    myz &lt;-<span class="st"> </span>b0 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(h2ab)</span>
<span id="cb8-72">    <span class="cf">for</span>(j <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nv){</span>
<span id="cb8-73">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>v_[j])</span>
<span id="cb8-74">      y &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>v_[j]) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(s_)</span>
<span id="cb8-75">      z &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>v_[j]) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(s_)</span>
<span id="cb8-76">      M &lt;-<span class="st"> </span><span class="kw">cbind</span>(x, y, z)</span>
<span id="cb8-77">      out[[j]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(1L,3L,2L)] <span class="cf">else</span> M</span>
<span id="cb8-78">      out[[nv<span class="op">+</span>j]] &lt;-<span class="st"> </span></span>
<span id="cb8-79"><span class="st">        </span><span class="kw">cbind</span>(<span class="op">-</span>M[,1L], <span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(3L,2L)] <span class="cf">else</span> M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb8-80">    }</span>
<span id="cb8-81">    <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nu){</span>
<span id="cb8-82">      x &lt;-<span class="st"> </span>mx <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(a2<span class="op">-</span>t_)</span>
<span id="cb8-83">      y &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(b2<span class="op">-</span>t_) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(u_[i])</span>
<span id="cb8-84">      z &lt;-<span class="st"> </span>myz <span class="op">*</span><span class="st"> </span><span class="kw">sqrt</span>(c2<span class="op">-</span>t_) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(u_[i])</span>
<span id="cb8-85">      M &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">cbind</span>(x, y, z), <span class="kw">cbind</span>(x, <span class="op">-</span>y, <span class="op">-</span>z)[(npoints<span class="dv">-1</span>)<span class="op">:</span>1L,])</span>
<span id="cb8-86">      out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) M[,<span class="kw">c</span>(1L,3L,2L)] <span class="cf">else</span> M</span>
<span id="cb8-87">      <span class="cf">if</span>(i <span class="op">&lt;</span><span class="st"> </span>nu){</span>
<span id="cb8-88">        out[[<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span>nu<span class="op">+</span>i]] &lt;-<span class="st"> </span><span class="cf">if</span>(exchange) </span>
<span id="cb8-89">          <span class="kw">cbind</span>(M[,<span class="kw">c</span>(1L,3L)], <span class="op">-</span>M[,2L]) </span>
<span id="cb8-90">        <span class="cf">else</span> </span>
<span id="cb8-91">          <span class="kw">cbind</span>(M[,1L], <span class="op">-</span>M[,2L], M[,3L])</span>
<span id="cb8-92">      }</span>
<span id="cb8-93">    }</span>
<span id="cb8-94">  }</span>
<span id="cb8-95">  <span class="co">#</span></span>
<span id="cb8-96">  out[(<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">2</span><span class="op">*</span>nu)<span class="op">:</span>(<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">4</span><span class="op">*</span>nu<span class="dv">-2</span>)] &lt;-<span class="st"> </span></span>
<span id="cb8-97"><span class="st">    </span><span class="kw">lapply</span>(out[(<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">1</span>)<span class="op">:</span>(<span class="dv">2</span><span class="op">*</span>nv<span class="op">+</span><span class="dv">2</span><span class="op">*</span>nu<span class="dv">-1</span>)], <span class="cf">function</span>(M){</span>
<span id="cb8-98">      <span class="kw">cbind</span>(<span class="op">-</span>M[,1L], M[,<span class="kw">c</span>(2L,3L)])</span>
<span id="cb8-99">    })</span>
<span id="cb8-100">  out</span>
<span id="cb8-101">}</span></code></pre>
      </div>
      <p>An example:</p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb9-1">a =<span class="st"> </span><span class="dv">6</span>; b =<span class="st"> </span><span class="dv">5</span>; c =<span class="st"> </span><span class="dv">3</span></span>
<span id="cb9-2">sgntr =<span class="st"> "-+-"</span></span>
<span id="cb9-3">mesh &lt;-<span class="st"> </span><span class="kw">twoSheetsHyperboloidMesh</span>(a, b, c, sgntr, <span class="dv">100</span>, <span class="dv">100</span>, <span class="dt">vmin =</span> <span class="dv">-500</span>)</span>
<span id="cb9-4">clines &lt;-<span class="st"> </span><span class="kw">curvatureLinesH2</span>(a, b, c, sgntr, <span class="dt">nu =</span> <span class="dv">5</span>, <span class="dt">nv =</span> <span class="dv">5</span>, <span class="dt">vmin =</span> <span class="dv">-500</span>, </span>
<span id="cb9-5">                           <span class="dt">du =</span> <span class="dv">1</span>, <span class="dt">dv =</span> <span class="dv">20</span>, <span class="dt">npoints =</span> <span class="dv">300</span>)</span>
<span id="cb9-6"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"navyblue"</span>, <span class="dt">back =</span> <span class="st">"culled"</span>) </span>
<span id="cb9-7"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"goldenrod"</span>, <span class="dt">front =</span> <span class="st">"culled"</span>)</span>
<span id="cb9-8"><span class="kw">invisible</span>(<span class="kw">lapply</span>(clines, <span class="cf">function</span>(l){</span>
<span id="cb9-9">  <span class="kw">shade3d</span>(<span class="kw">cylinder3d</span>(l, <span class="dt">radius =</span> <span class="fl">0.2</span>, <span class="dt">sides =</span> <span class="dv">30</span>))</span>
<span id="cb9-10">}))</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/quadrics_H2.png"
        />
      </p>
      <h1 id="general-quadric">General quadric</h1>
      <p>
        A general quadric in
        <span class="math inline">\(\mathbb{R}^3\)</span> has equation
        <span class="math display"
          >\[ (x \quad y \quad z)\, A \begin{pmatrix} x \\ y \\ z \end{pmatrix}
          + J' \begin{pmatrix} x \\ y \\ z \end{pmatrix} + K = 0, \]</span
        >
        where <span class="math inline">\(A\)</span> is a symmetric
        <span class="math inline">\((3\times 3)\)</span>-matrix,
        <span class="math inline">\(J \in \mathbb{R}^3\)</span>, and
        <span class="math inline">\(K \in \mathbb{R}\)</span>. Let’s treat an
        example. We follow the strategy given at page 45 of Brannan &amp; al’s
        book <em>Geometry</em> (<a
          href="http://math.haifa.ac.il/ROVENSKI/B2.pdf"
          >pdf</a
        >).
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb10-1">A =<span class="st"> </span><span class="kw">matrix</span>(<span class="kw">c</span>(</span>
<span id="cb10-2">   <span class="dv">5</span>, <span class="dv">-1</span>, <span class="dv">-1</span>, </span>
<span id="cb10-3">  <span class="dv">-1</span>,  <span class="dv">3</span>,  <span class="dv">1</span>,</span>
<span id="cb10-4">  <span class="dv">-1</span>,  <span class="dv">1</span>, <span class="dv">-3</span></span>
<span id="cb10-5">  ), <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> 3L)</span>
<span id="cb10-6">J =<span class="st"> </span><span class="kw">c</span>(<span class="dv">4</span>, <span class="dv">6</span>, <span class="dv">8</span>)</span>
<span id="cb10-7">K =<span class="st"> </span><span class="dv">-10</span></span>
<span id="cb10-8"><span class="co"># computes spectral decomposition of A</span></span>
<span id="cb10-9">eig &lt;-<span class="st"> </span><span class="kw">eigen</span>(A)</span>
<span id="cb10-10">P &lt;-<span class="st"> </span>eig<span class="op">$</span>vectors</span>
<span id="cb10-11">( evalues &lt;-<span class="st"> </span>eig<span class="op">$</span>values )</span>
<span id="cb10-12"><span class="co">## [1]  5.614627  2.632676 -3.247303</span></span></code></pre>
      </div>
      <p>
        There is no eigenvalue equal to <span class="math inline">\(0\)</span>;
        this is the first necessary condition in order for the solution of the
        equation to be a focal quadric.
      </p>
      <p>
        Now we write the equation in the form
        <span class="math display"
          >\[ \lambda_1 {(x'')}^2 + \lambda_2 {(y'')}^2 + \lambda_3 {(z'')}^2 =
          \mathrm{rhs} \]</span
        >
        where <span class="math inline">\(\lambda_1\)</span>,
        <span class="math inline">\(\lambda_2\)</span>,
        <span class="math inline">\(\lambda_3\)</span> are the eigenvalues of
        <span class="math inline">\(A\)</span>, and
        <span class="math inline">\((x'',y'',z'')\)</span> is a new coordinate
        system.
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb11-1">center &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">t</span>(J) <span class="op">%*%</span><span class="st"> </span>P) <span class="op">/</span><span class="st"> </span>evalues <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb11-2">( rhs &lt;-<span class="st"> </span><span class="kw">sum</span>(evalues <span class="op">*</span><span class="st"> </span>center<span class="op">^</span><span class="dv">2</span>) <span class="op">-</span><span class="st"> </span>K )</span>
<span id="cb11-3"><span class="co">## [1] 11.5</span></span></code></pre>
      </div>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb12-1">( sgntr &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="kw">ifelse</span>(rhs<span class="op">*</span>evalues <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, <span class="st">"+"</span>, <span class="st">"-"</span>), <span class="dt">collapse =</span> <span class="st">""</span>) )</span>
<span id="cb12-2"><span class="co">## [1] "++-"</span></span></code></pre>
      </div>
      <p>
        We find <span class="math inline">\(\mathrm{rhs} \neq 0\)</span>, so the
        solution of the equation is a focal quadric. If
        <span class="math inline">\(\mathrm{rhs} = 0\)</span>, the solution is a
        cone.
      </p>
      <p>
        The signature is <span class="math inline">\(++-\)</span>, so the
        solution of the equation is a one-sheeted hyperboloid. By dividing both
        members of the previous equality by
        <span class="math inline">\(\mathrm{rhs}\)</span>, we get its equation
        in standard form.
      </p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb13-1">abc &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">abs</span>(rhs<span class="op">/</span>evalues))</span>
<span id="cb13-2">a &lt;-<span class="st"> </span>abc[<span class="dv">1</span>]; b &lt;-<span class="st"> </span>abc[<span class="dv">2</span>]; c &lt;-<span class="st"> </span>abc[<span class="dv">3</span>]</span>
<span id="cb13-3">mesh0 &lt;-<span class="st"> </span><span class="kw">hyperboloidMesh</span>(a, b, c, sgntr, <span class="dv">100</span>, <span class="dv">100</span>, <span class="dv">-5</span>)</span>
<span id="cb13-4"><span class="co"># final quadric mesh:</span></span>
<span id="cb13-5">mesh &lt;-<span class="st"> </span><span class="kw">rotate3d</span>(</span>
<span id="cb13-6">  <span class="kw">translate3d</span>(mesh0, <span class="op">-</span>center[<span class="dv">1</span>], <span class="op">-</span>center[<span class="dv">2</span>], <span class="op">-</span>center[<span class="dv">3</span>]), </span>
<span id="cb13-7">  <span class="dt">matrix =</span> <span class="kw">t</span>(P)</span>
<span id="cb13-8">)</span></code></pre>
      </div>
      <p>
        We can check that the equation is fulfilled for some vertices of the
        final mesh:
      </p>
      <div class="sourceCode" id="cb14">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb14-1"><span class="kw">apply</span>(mesh<span class="op">$</span>vb[<span class="op">-</span><span class="dv">4</span>, <span class="dv">1</span><span class="op">:</span><span class="dv">5</span>], 2L, <span class="cf">function</span>(x){</span>
<span id="cb14-2">  <span class="kw">c</span>(<span class="kw">t</span>(x) <span class="op">%*%</span><span class="st"> </span>A <span class="op">%*%</span><span class="st"> </span>x <span class="op">+</span><span class="st"> </span><span class="kw">t</span>(J) <span class="op">%*%</span><span class="st"> </span>x) <span class="op">+</span><span class="st"> </span>K</span>
<span id="cb14-3">})</span>
<span id="cb14-4"><span class="co">## [1] 5.684342e-14 7.105427e-14 4.973799e-14 4.973799e-14 4.263256e-14</span></span></code></pre>
      </div>
      <p>
        Up to small numerical errors, we indeed get
        <span class="math inline">\(0\)</span> for each of the five vertices.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 03 May 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/focalQuadrics.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Drawing slices of a hypersurface with R</title>
      <link>https://laustep.github.io/stlahblog/posts/slicedHypersurface.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        Let
        <span class="math inline"
          >\(s \colon I \times J \times K \to \mathbb{R}^4\)</span
        >
        be a parameterization of a hypersurface
        <span class="math inline">\(\mathcal{S}\)</span>, where
        <span class="math inline">\(I,J,K \subset \mathbb{R}\)</span> are some
        intervals. I’m going to show how to draw the cross-section of
        <span class="math inline">\(\mathcal{S}\)</span> by a hyperplane with R.
      </p>
      <p>
        For the illustration, we consider the
        <a href="http://hi.gher.space/wiki/Tiger"><em>tiger</em></a
        >:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">R1 =<span class="st"> </span><span class="dv">2</span>; R2 =<span class="st"> </span><span class="dv">2</span>; r =<span class="st"> </span><span class="fl">0.5</span></span>
<span id="cb1-2">s &lt;-<span class="st"> </span><span class="cf">function</span>(u, v, w){</span>
<span id="cb1-3">  <span class="kw">rbind</span>(</span>
<span id="cb1-4">    <span class="kw">cos</span>(u) <span class="op">*</span><span class="st"> </span>(R1 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">cos</span>(w)),</span>
<span id="cb1-5">    <span class="kw">sin</span>(u) <span class="op">*</span><span class="st"> </span>(R1 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">cos</span>(w)),</span>
<span id="cb1-6">    <span class="kw">cos</span>(v) <span class="op">*</span><span class="st"> </span>(R2 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">sin</span>(w)),</span>
<span id="cb1-7">    <span class="kw">sin</span>(v) <span class="op">*</span><span class="st"> </span>(R2 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">sin</span>(w))</span>
<span id="cb1-8">  )</span>
<span id="cb1-9">}</span></code></pre>
      </div>
      <p>
        Take a hyperplane:
        <span class="math display"
          >\[ \mathcal{P}\colon \quad \langle \mathbf{a}, \mathbf{x} \rangle =
          b, \]</span
        >
        let
        <span class="math inline"
          >\(\vec{\mathbf{n}} = \frac{\mathbf{a}}{\Vert\mathbf{a}\Vert}\)</span
        >
        be a unit normal vector of
        <span class="math inline">\(\mathcal{P}\)</span>, and
        <span class="math inline">\(\mathbf{x}_0\)</span> be an arbitrary point
        in <span class="math inline">\(\mathcal{P}\)</span>.
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1">a =<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>); b =<span class="st"> </span><span class="dv">2</span>        <span class="co"># plane x+y+z+w = 2</span></span>
<span id="cb2-2">x0 =<span class="st"> </span><span class="kw">c</span>(b, b, b, b)<span class="op">/</span><span class="dv">4</span>            <span class="co"># a point in this plane</span></span>
<span id="cb2-3">nrml &lt;-<span class="st"> </span>a<span class="op">/</span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(a))) <span class="co"># unit normal</span></span></code></pre>
      </div>
      <p>
        Compute a mesh <span class="math inline">\(\mathcal{M}_0\)</span> of the
        isosurface
        <span class="math display"
          >\[ \bigl(s(u,v,w) - \mathbf{x}_0\bigr) \cdot \vec{\mathbf{n}} = 0.
          \]</span
        >
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(misc3d)</span>
<span id="cb3-2">f &lt;-<span class="st"> </span><span class="cf">function</span>(u, v, w){</span>
<span id="cb3-3">  <span class="kw">c</span>(<span class="kw">crossprod</span>(<span class="kw">s</span>(u, v, w), nrml))</span>
<span id="cb3-4">}</span>
<span id="cb3-5">u_ &lt;-<span class="st"> </span>v_ &lt;-<span class="st"> </span>w_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> 100L)</span>
<span id="cb3-6">g &lt;-<span class="st"> </span><span class="kw">expand.grid</span>(<span class="dt">u =</span> u_, <span class="dt">v =</span> v_, <span class="dt">w =</span> w_)</span>
<span id="cb3-7">voxel &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="kw">with</span>(g, <span class="kw">f</span>(u,v,w)), <span class="dt">dim =</span> <span class="kw">c</span>(100L,100L,100L))</span>
<span id="cb3-8">surf &lt;-<span class="st"> </span><span class="kw">computeContour3d</span>(voxel, <span class="dt">level =</span> <span class="kw">sum</span>(x0<span class="op">*</span>nrml), </span>
<span id="cb3-9">                         <span class="dt">x =</span> u_, <span class="dt">y =</span> v_, <span class="dt">z =</span> w_)</span>
<span id="cb3-10">trgls &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(surf)</span>
<span id="cb3-11">mesh0 &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(trgls)</span></code></pre>
      </div>
      <p>
        Denote by
        <span class="math inline"
          >\(\mathcal{V}\mathcal{S}_0 \subset I \times J \times K\)</span
        >
        the set of vertices of
        <span class="math inline">\(\mathcal{M}_0\)</span>, and set
        <span class="math inline"
          >\(\mathcal{V}\mathcal{S} = s(\mathcal{V}\mathcal{S}_0) \subset
          \mathbb{R}^4\)</span
        >.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">VS0 &lt;-<span class="st"> </span>mesh0<span class="op">$</span>vb</span>
<span id="cb4-2">VS &lt;-<span class="st"> </span><span class="kw">s</span>(VS0[1L,], VS0[2L,], VS0[3L,]) </span></code></pre>
      </div>
      <p>
        Let <span class="math inline">\(R\)</span> be a rotation in
        <span class="math inline">\(\mathbb{R}^4\)</span> which sends
        <span class="math inline"
          >\(\vec{\mathbf{n}} =: \vec{\mathbf{v}}_1\)</span
        >
        to the vector
        <span class="math inline">\((0,0,0,1) =: \vec{\mathbf{v}}_2\)</span>.
        One can take <span class="math inline">\(R\)</span> corresponding to the
        matrix
        <span class="math display"
          >\[ \frac{2}{{(\vec{\mathbf{v}}_1+\vec{\mathbf{v}}_2)}'
          (\vec{\mathbf{v}}_1+\vec{\mathbf{v}}_2)}
          (\vec{\mathbf{v}}_1+\vec{\mathbf{v}}_2)
          {(\vec{\mathbf{v}}_1+\vec{\mathbf{v}}_2)}' - I_4. \]</span
        >
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">rotationMatrix4D &lt;-<span class="st"> </span><span class="cf">function</span>(v1, v2){</span>
<span id="cb5-2">  v1 &lt;-<span class="st"> </span>v1 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v1)))</span>
<span id="cb5-3">  v2 &lt;-<span class="st"> </span>v2 <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v2)))</span>
<span id="cb5-4">  <span class="dv">2</span><span class="op">*</span><span class="kw">tcrossprod</span>(v1<span class="op">+</span>v2)<span class="op">/</span><span class="kw">c</span>(<span class="kw">crossprod</span>(v1<span class="op">+</span>v2)) <span class="op">-</span><span class="st"> </span><span class="kw">diag</span>(4L)</span>
<span id="cb5-5">}</span>
<span id="cb5-6">Rot &lt;-<span class="st"> </span><span class="kw">rotationMatrix4D</span>(nrml, <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">1</span>))</span></code></pre>
      </div>
      <p>
        Now define
        <span class="math inline"
          >\(\mathcal{V}\mathcal{S}' = R(\mathcal{V}\mathcal{S}) \subset
          \mathbb{R}^4\)</span
        >. Then all points in
        <span class="math inline">\(\mathcal{V}\mathcal{S}'\)</span> are equal
        on their fourth coordinate (up to numerical errors in R):
      </p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1">VSprime &lt;-<span class="st"> </span>Rot <span class="op">%*%</span><span class="st"> </span>VS</span>
<span id="cb6-2"><span class="kw">head</span>(<span class="kw">t</span>(VSprime))</span>
<span id="cb6-3"><span class="co">##           [,1]      [,2]      [,3]      [,4]</span></span>
<span id="cb6-4"><span class="co">## [1,]  2.203740 -1.329658 -1.620365 0.9999785</span></span>
<span id="cb6-5"><span class="co">## [2,] -1.324840  2.206491 -1.657871 1.0002417</span></span>
<span id="cb6-6"><span class="co">## [3,] -1.320131  2.212244 -1.636339 0.9999972</span></span>
<span id="cb6-7"><span class="co">## [4,] -1.417790  2.116178 -1.698381 0.9999926</span></span>
<span id="cb6-8"><span class="co">## [5,]  2.219859 -1.310784 -1.651340 0.9999841</span></span>
<span id="cb6-9"><span class="co">## [6,]  2.253515 -1.275147 -1.633245 1.0005005</span></span></code></pre>
      </div>
      <p>
        Finally, define
        <span class="math inline"
          >\(\mathcal{V}\mathcal{S}'' \subset \mathbb{R}^3\)</span
        >
        as the set obtained by removing the fourth coordinates of the elements
        of <span class="math inline">\(\mathcal{V}\mathcal{S}'\)</span>, and
        define the mesh <span class="math inline">\(\mathcal{M}\)</span> whose
        set of vertices is
        <span class="math inline">\(\mathcal{V}\mathcal{S}''\)</span> and with
        the same edges as <span class="math inline">\(\mathcal{M}_0\)</span>:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(rgl)</span>
<span id="cb7-2">mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb7-3">  <span class="dt">vertices =</span> VSprime[<span class="op">-</span>4L,],</span>
<span id="cb7-4">  <span class="dt">indices =</span> mesh0<span class="op">$</span>ib,</span>
<span id="cb7-5">  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb7-6">  <span class="dt">normals =</span> ?</span>
<span id="cb7-7">)</span></code></pre>
      </div>
      <p>
        What about the normals? If you have an implicit equation defining
        <span class="math inline">\(\mathcal{S}\)</span>, that is,
        <span class="math inline">\(\mathcal{S} = \iota^{-1}(0)\)</span> with
        <span class="math inline"
          >\(\iota\colon \mathbb{R}^4 \to \mathbb{R}\)</span
        >, then a normal to <span class="math inline">\(\mathcal{S}\)</span> at
        a point
        <span class="math inline">\(\mathbf{x} \in \mathbb{R}^4\)</span> is
        given by the gradient of <span class="math inline">\(\iota\)</span> at
        <span class="math inline">\(\mathbf{x}\)</span>. For the tiger, we know
        an implicit equation, and it is not difficult to get the gradient:
      </p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1">sNormal &lt;-<span class="st"> </span><span class="cf">function</span>(XYZT){</span>
<span id="cb8-2">  x &lt;-<span class="st"> </span>XYZT[1L,]; y &lt;-<span class="st"> </span>XYZT[2L,]; z &lt;-<span class="st"> </span>XYZT[3L,]; t &lt;-<span class="st"> </span>XYZT[4L,]</span>
<span id="cb8-3">  <span class="kw">rbind</span>(</span>
<span id="cb8-4">    x <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>R1<span class="op">/</span><span class="kw">sqrt</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>)),</span>
<span id="cb8-5">    y <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>R1<span class="op">/</span><span class="kw">sqrt</span>(x<span class="op">^</span><span class="dv">2</span><span class="op">+</span>y<span class="op">^</span><span class="dv">2</span>)),</span>
<span id="cb8-6">    z <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>R2<span class="op">/</span><span class="kw">sqrt</span>(z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>t<span class="op">^</span><span class="dv">2</span>)),</span>
<span id="cb8-7">    t <span class="op">*</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">-</span><span class="st"> </span>R2<span class="op">/</span><span class="kw">sqrt</span>(z<span class="op">^</span><span class="dv">2</span><span class="op">+</span>t<span class="op">^</span><span class="dv">2</span>))</span>
<span id="cb8-8">  )</span>
<span id="cb8-9">}</span>
<span id="cb8-10">Normals &lt;-<span class="st"> </span><span class="kw">sNormal</span>(VS)</span></code></pre>
      </div>
      <p>Once you get the normals:</p>
      <ul>
        <li>
          <p>
            project them to the hyperplane
            <span class="math inline">\(\mathcal{P}\)</span>;
          </p>
        </li>
        <li>
          <p>
            apply the rotation <span class="math inline">\(R\)</span> to the
            projected normals;
          </p>
        </li>
        <li><p>remove the fourth coordinates (all equal);</p></li>
        <li><p>if necessary, negate the normals.</p></li>
      </ul>
      <p>
        The projection of
        <span class="math inline">\(\mathbf{x} \in \mathbb{R}^4\)</span> to the
        hyperplane <span class="math inline">\(\mathcal{P}\)</span> is given by
        <span class="math display"
          >\[ \mathbf{x} - \frac{\langle \mathbf{a}, \mathbf{x} \rangle -
          b}{\Vert \mathbf{a} \Vert^2} \mathbf{a}. \]</span
        >
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb9-1"><span class="co"># projection onto hyperplane &lt;a,x&gt; = b</span></span>
<span id="cb9-2">projection &lt;-<span class="st"> </span><span class="cf">function</span>(a, b, X){</span>
<span id="cb9-3">  X <span class="op">-</span><span class="st"> </span><span class="kw">tcrossprod</span>(a<span class="op">/</span><span class="kw">c</span>(<span class="kw">crossprod</span>(a)), <span class="kw">colSums</span>(a<span class="op">*</span>X)<span class="op">-</span>b)</span>
<span id="cb9-4">}</span>
<span id="cb9-5">mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb9-6">  <span class="dt">vertices =</span> VSprime[<span class="op">-</span>4L,], </span>
<span id="cb9-7">  <span class="dt">indices =</span> mesh0<span class="op">$</span>ib, </span>
<span id="cb9-8">  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb9-9">  <span class="dt">normals =</span> <span class="op">-</span><span class="kw">t</span>((Rot <span class="op">%*%</span><span class="st"> </span><span class="kw">projection</span>(a, b, Normals))[<span class="op">-</span>4L,])</span>
<span id="cb9-10">)</span></code></pre>
      </div>
      <p>This works:</p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb10-1"><span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"darkmagenta"</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tiger1.png"
        />
      </p>
      <p>
        Here is another way to get the normals. The normal at the point
        <span class="math inline">\(s(u,v,w)\)</span> is
        <span class="math display"
          >\[ \frac{\partial s}{\partial u}(u,v,w) \times \frac{\partial
          s}{\partial v}(u,v,w) \times \frac{\partial s}{\partial w}(u,v,w)
          \]</span
        >
        where
        <span class="math inline">\(\cdot \times \cdot \times \cdot\)</span> is
        the <em>ternary cross-product</em> in
        <span class="math inline">\(\mathbb{R}^4\)</span>, defined by
        <span class="math display"
          >\[ \vec v_1 \times \vec v_2 \times \vec v_3 =
          \left\vert\begin{matrix} \vec i &amp; \vec j &amp; \vec k &amp; \vec l
          \\ v_{1x} &amp; v_{1y} &amp; v_{1z} &amp; v_{1t} \\ v_{2x} &amp;
          v_{2y} &amp; v_{2z} &amp; v_{2t} \\ v_{3x} &amp; v_{3y} &amp; v_{3z}
          &amp; v_{3t} \end{matrix}\right\vert. \]</span
        >
      </p>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb11-1">crossProd4D &lt;-<span class="st"> </span><span class="cf">function</span>(v1, v2, v3){</span>
<span id="cb11-2">  M &lt;-<span class="st"> </span><span class="kw">rbind</span>(v1, v2, v3)</span>
<span id="cb11-3">  <span class="kw">c</span>(<span class="kw">det</span>(M[,<span class="op">-</span>1L]), <span class="op">-</span><span class="kw">det</span>(M[,<span class="op">-</span>2L]), <span class="kw">det</span>(M[,<span class="op">-</span>3L]), <span class="op">-</span><span class="kw">det</span>(M[,<span class="op">-</span>4L]))</span>
<span id="cb11-4">}</span>
<span id="cb11-5">sNormal &lt;-<span class="st"> </span><span class="cf">function</span>(uvw){</span>
<span id="cb11-6">  u &lt;-<span class="st"> </span>uvw[1L]; v &lt;-<span class="st"> </span>uvw[2L]; w &lt;-<span class="st"> </span>uvw[3L]</span>
<span id="cb11-7">  Du &lt;-<span class="st"> </span><span class="kw">c</span>((R1 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">cos</span>(w))<span class="op">*</span><span class="kw">c</span>(<span class="op">-</span><span class="kw">sin</span>(u),<span class="kw">cos</span>(u)), <span class="dv">0</span>, <span class="dv">0</span>)</span>
<span id="cb11-8">  Dv &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="dv">0</span>, <span class="dv">0</span>, (R2 <span class="op">+</span><span class="st"> </span>r<span class="op">*</span><span class="kw">sin</span>(w))<span class="op">*</span><span class="kw">c</span>(<span class="op">-</span><span class="kw">sin</span>(v),<span class="kw">cos</span>(v)))</span>
<span id="cb11-9">  Dw &lt;-<span class="st"> </span>r <span class="op">*</span><span class="st"> </span><span class="kw">c</span>(<span class="op">-</span><span class="kw">sin</span>(w)<span class="op">*</span><span class="kw">c</span>(<span class="kw">cos</span>(u),<span class="kw">sin</span>(u)), <span class="kw">cos</span>(w)<span class="op">*</span><span class="kw">c</span>(<span class="kw">cos</span>(v),<span class="kw">sin</span>(v)))</span>
<span id="cb11-10">  <span class="kw">crossProd4D</span>(Du, Dv, Dw)</span>
<span id="cb11-11">}</span>
<span id="cb11-12">Normals &lt;-<span class="st"> </span><span class="kw">apply</span>(VS0, 2L, sNormal)</span></code></pre>
      </div>
      <p>
        Then you can calculate the normals in this way and proceed as before:
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb12-1">mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb12-2">  <span class="dt">vertices =</span> VSprime[<span class="op">-</span>4L,], </span>
<span id="cb12-3">  <span class="dt">indices =</span> mesh0<span class="op">$</span>ib, </span>
<span id="cb12-4">  <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb12-5">  <span class="dt">normals =</span> <span class="kw">t</span>((Rot <span class="op">%*%</span><span class="st"> </span><span class="kw">projection</span>(a, b, Normals))[<span class="op">-</span>4L,])</span>
<span id="cb12-6">)</span></code></pre>
      </div>
      <p>Here is how to do an animation:</p>
      <div class="sourceCode" id="cb13">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb13-1">b_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="op">-</span><span class="fl">11.5</span>, <span class="fl">11.5</span>, <span class="dt">length.out =</span> 60L)</span>
<span id="cb13-2"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">100</span>, <span class="dv">100</span>, <span class="dv">612</span>, <span class="dv">612</span>), <span class="dt">zoom =</span> <span class="fl">0.8</span>)</span>
<span id="cb13-3"><span class="kw">bg3d</span>(<span class="kw">rgb</span>(<span class="dv">54</span>, <span class="dv">57</span>, <span class="dv">64</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>))</span>
<span id="cb13-4"><span class="kw">view3d</span>(<span class="dv">45</span>, <span class="dv">40</span>)</span>
<span id="cb13-5"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">length</span>(b_)){</span>
<span id="cb13-6">  x0 &lt;-<span class="st"> </span><span class="kw">rep</span>(b_[i]<span class="op">/</span><span class="dv">4</span>, 4L) </span>
<span id="cb13-7">  surf &lt;-<span class="st"> </span><span class="kw">computeContour3d</span>(voxel, <span class="dt">level =</span> <span class="kw">sum</span>(x0<span class="op">*</span>nrml), </span>
<span id="cb13-8">                           <span class="dt">x =</span> u_, <span class="dt">y =</span> v_, <span class="dt">z =</span> w_)</span>
<span id="cb13-9">  trgls &lt;-<span class="st"> </span><span class="kw">makeTriangles</span>(surf)</span>
<span id="cb13-10">  mesh0 &lt;-<span class="st"> </span>misc3d<span class="op">:::</span><span class="kw">t2ve</span>(trgls)</span>
<span id="cb13-11">  VS0 &lt;-<span class="st"> </span>mesh0<span class="op">$</span>vb</span>
<span id="cb13-12">  VS &lt;-<span class="st"> </span><span class="kw">s</span>(VS0[1L,], VS0[2L,], VS0[3L,])</span>
<span id="cb13-13">  Normals &lt;-<span class="st"> </span><span class="kw">sNormal</span>(VS)</span>
<span id="cb13-14">  mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(</span>
<span id="cb13-15">    <span class="dt">vertices =</span> (Rot <span class="op">%*%</span><span class="st"> </span>VS)[<span class="op">-</span>4L,], </span>
<span id="cb13-16">    <span class="dt">indices =</span> mesh0<span class="op">$</span>ib, </span>
<span id="cb13-17">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb13-18">    <span class="dt">normals =</span> <span class="op">-</span><span class="kw">t</span>((Rot <span class="op">%*%</span><span class="st"> </span><span class="kw">projection</span>(a, b_[i], Normals))[<span class="op">-</span>4L,])</span>
<span id="cb13-19">  )</span>
<span id="cb13-20">  <span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"firebrick3"</span>)</span>
<span id="cb13-21">  <span class="kw">snapshot3d</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, i))</span>
<span id="cb13-22">  <span class="kw">clear3d</span>()</span>
<span id="cb13-23">}</span>
<span id="cb13-24"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>59L){</span>
<span id="cb13-25">  <span class="kw">file.copy</span>(<span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, <span class="dv">60</span><span class="op">-</span>i), <span class="kw">sprintf</span>(<span class="st">"pic%03d.png"</span>, <span class="dv">60</span><span class="op">+</span>i))</span>
<span id="cb13-26">}</span>
<span id="cb13-27"><span class="co"># run gifski</span></span>
<span id="cb13-28">command &lt;-<span class="st"> "gifski --fps 12 pic*.png -o slicedTiger.gif"</span></span>
<span id="cb13-29"><span class="kw">system</span>(command)</span>
<span id="cb13-30"><span class="co"># cleaning</span></span>
<span id="cb13-31">pngfiles &lt;-<span class="st"> </span><span class="kw">list.files</span>(<span class="dt">pattern =</span> <span class="st">"^pic.*png$"</span>)</span>
<span id="cb13-32"><span class="kw">file.remove</span>(pngfiles)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/tiger2.gif"
        />
      </p>
      <h2 id="toroidal-hyperboloid">Toroidal hyperboloid</h2>
      <p>
        Let’s give another example, a <em>toroidal hyperboloid</em>. This is a
        quadric with implicit equation
        <span class="math display"
          >\[ \frac{x^2}{a^2} + \frac{y^2}{b^2} - \frac{z^2}{c^2} -
          \frac{t^2}{d^2} = 1, \]</span
        >
        and a parameterization of this quadric is
        <span class="math display"
          >\[ \begin{array}{ccc} s \colon &amp; (0,2\pi) \times (0,2\pi) \times
          (0, +\infty[ &amp; \longrightarrow &amp; \mathbb{R}^4 \\ &amp; (u,v,w)
          &amp; \longmapsto &amp; \begin{pmatrix} a \cos u \cosh w \\ b \sin u
          \cosh w \\ c \cos v \sinh w \\ d \sin v \sinh w \end{pmatrix}
          \end{array}. \]</span
        >
      </p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/toroidalHyperboloid.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Fri, 01 May 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/slicedHypersurface.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Back to the parametric Hopf torus</title>
      <link>https://laustep.github.io/stlahblog/posts/HopfTorus2.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In a <a href="./HopfTorusParametric.html">previous post</a>, I explained
        how to get a parameterization of a Hopf cylinder or torus. There is a
        clearer way, which I present here.
      </p>
      <p>
        For the Hopf map, the preimage of a point
        <span class="math inline">\(p=(p_x,p_y,p_z)\)</span> on the unit sphere
        <span class="math inline">\(S^2\)</span> is the circle on
        <span class="math inline">\(S^3\)</span> with parametrization:
        <span class="math display"
          >\[ \begin{array}{ccc} \mathcal{C}_p \colon &amp; (0,2\pi[ &amp;
          \longrightarrow &amp; S^3 \\ &amp; \phi &amp; \longmapsto &amp;
          \mathcal{C}_p(\phi) \end{array} \]</span
        >
        where
        <span class="math display"
          >\[ \mathcal{C}_p(\phi) = \frac{1}{\sqrt{2(1+p_z)}} \begin{pmatrix}
          (1+p_z) \cos(\phi) \\ p_x \sin(\phi) - p_y \cos(\phi) \\ p_x
          \cos(\phi) + p_y \sin(\phi) \\ (1+p_z) \sin(\phi) \end{pmatrix}.
          \]</span
        >
      </p>
      <p>
        Now consider a spherical curve. That is, let
        <span class="math inline">\(\Gamma\)</span> be a function mapping an
        interval <span class="math inline">\(I \subset \mathbb{R}\)</span> to
        the unit sphere <span class="math inline">\(S^2\)</span>. Then the Hopf
        cylinder corresponding to
        <span class="math inline">\(\Gamma\)</span> has parameterization
        <span class="math display"
          >\[ \begin{array}{ccc} H_\Gamma \colon &amp; I \times (0,2\pi[ &amp;
          \longrightarrow &amp; S^3 \\ &amp; (t, \phi) &amp; \longmapsto &amp;
          \mathcal{C}_{\Gamma(t)}(\phi) \end{array}. \]</span
        >
        Recall the
        <a href="./HopfTorusTennisBall.html">tennis ball curve</a> example,
        given for a real constant <span class="math inline">\(A\)</span> and an
        integer constant <span class="math inline">\(n\)</span> by:
        <span class="math display"
          >\[ \Gamma(t) = \begin{pmatrix} \sin\bigl(\pi/2 - (\pi/2 - A)
          \cos(nt)\bigr) \cos\bigl(t + A \sin(2nt)\bigr) \\ \sin\bigl(\pi/2 -
          (\pi/2 - A) \cos(nt)\bigr) \sin\bigl(t + A \sin(2nt)\bigr) \\
          \cos\bigl(\pi/2 - (\pi/2 - A) \cos(nt)\bigr) \end{pmatrix}, \quad t
          \in (0,2\pi[. \]</span
        >
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">A &lt;-<span class="st"> </span><span class="fl">0.44</span></span>
<span id="cb1-2">n &lt;-<span class="st"> </span><span class="dv">3</span></span>
<span id="cb1-3">Gamma &lt;-<span class="st"> </span><span class="cf">function</span>(t){</span>
<span id="cb1-4">  alpha &lt;-<span class="st"> </span>pi<span class="op">/</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span>(pi<span class="op">/</span><span class="dv">2</span><span class="op">-</span>A)<span class="op">*</span><span class="kw">cos</span>(n<span class="op">*</span>t)</span>
<span id="cb1-5">  beta &lt;-<span class="st"> </span>t <span class="op">+</span><span class="st"> </span>A<span class="op">*</span><span class="kw">sin</span>(<span class="dv">2</span><span class="op">*</span>n<span class="op">*</span>t)</span>
<span id="cb1-6">  <span class="kw">c</span>(</span>
<span id="cb1-7">    <span class="kw">sin</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">cos</span>(beta),</span>
<span id="cb1-8">    <span class="kw">sin</span>(alpha) <span class="op">*</span><span class="st"> </span><span class="kw">sin</span>(beta),</span>
<span id="cb1-9">    <span class="kw">cos</span>(alpha)</span>
<span id="cb1-10">  )</span>
<span id="cb1-11">}</span>
<span id="cb1-12">HopfInverse &lt;-<span class="st"> </span><span class="cf">function</span>(p, phi){</span>
<span id="cb1-13">  <span class="kw">c</span>(</span>
<span id="cb1-14">    (<span class="dv">1</span><span class="op">+</span>p[<span class="dv">3</span>])<span class="op">*</span><span class="kw">cos</span>(phi),</span>
<span id="cb1-15">    p[<span class="dv">1</span>]<span class="op">*</span><span class="kw">sin</span>(phi) <span class="op">-</span><span class="st"> </span>p[<span class="dv">2</span>]<span class="op">*</span><span class="kw">cos</span>(phi), </span>
<span id="cb1-16">    p[<span class="dv">1</span>]<span class="op">*</span><span class="kw">cos</span>(phi) <span class="op">+</span><span class="st"> </span>p[<span class="dv">2</span>]<span class="op">*</span><span class="kw">sin</span>(phi),</span>
<span id="cb1-17">    (<span class="dv">1</span><span class="op">+</span>p[<span class="dv">3</span>])<span class="op">*</span><span class="kw">sin</span>(phi)</span>
<span id="cb1-18">  ) <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">*</span>(<span class="dv">1</span><span class="op">+</span>p[<span class="dv">3</span>])) </span>
<span id="cb1-19">}</span>
<span id="cb1-20">Stereo &lt;-<span class="st"> </span><span class="cf">function</span>(q){</span>
<span id="cb1-21">  <span class="dv">2</span><span class="op">*</span>q[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>] <span class="op">/</span><span class="st"> </span>(<span class="dv">1</span><span class="op">-</span>q[<span class="dv">4</span>])</span>
<span id="cb1-22">}</span>
<span id="cb1-23">F &lt;-<span class="st"> </span><span class="cf">function</span>(t, phi){</span>
<span id="cb1-24">  <span class="kw">Stereo</span>(<span class="kw">HopfInverse</span>(<span class="kw">Gamma</span>(t), phi))</span>
<span id="cb1-25">}</span></code></pre>
      </div>
      <p>
        Now we’re ready to plot the stereographic projection of the Hopf torus
        with <code>misc3d</code>:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1">fx &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(u,v) <span class="kw">F</span>(u,v)[<span class="dv">1</span>])</span>
<span id="cb2-2">fy &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(u,v) <span class="kw">F</span>(u,v)[<span class="dv">2</span>])</span>
<span id="cb2-3">fz &lt;-<span class="st"> </span><span class="kw">Vectorize</span>(<span class="cf">function</span>(u,v) <span class="kw">F</span>(u,v)[<span class="dv">3</span>])</span>
<span id="cb2-4"><span class="kw">library</span>(misc3d)</span>
<span id="cb2-5"><span class="kw">parametric3d</span>(fx, fy, fz, <span class="dt">umin =</span> <span class="dv">0</span>, <span class="dt">umax =</span> <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">vmin =</span> <span class="dv">0</span>, <span class="dt">vmax =</span> <span class="dv">2</span><span class="op">*</span>pi, </span>
<span id="cb2-6">             <span class="dt">n =</span> <span class="dv">300</span>, <span class="dt">smooth =</span> <span class="ot">TRUE</span>, <span class="dt">color =</span> <span class="st">"#363940"</span>)</span>
<span id="cb2-7">rgl<span class="op">::</span><span class="kw">view3d</span>(<span class="dv">90</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.65</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/HopfTorus_grey.png"
        />
      </p>
      <p>
        A ring cyclide is a Hopf torus. It corresponds to the case when
        <span class="math inline">\(\Gamma\)</span> describes a circle on the
        unit sphere <span class="math inline">\(S^2\)</span>. Below is a R
        function to compute such a circle.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="co"># helper function: plane passing by points p1, p2, p3 </span></span>
<span id="cb3-2">plane3pts &lt;-<span class="st"> </span><span class="cf">function</span>(p1,p2,p3){ </span>
<span id="cb3-3">    xcoef &lt;-<span class="st"> </span>(p1[<span class="dv">2</span>]<span class="op">-</span>p2[<span class="dv">2</span>])<span class="op">*</span>(p2[<span class="dv">3</span>]<span class="op">-</span>p3[<span class="dv">3</span>])<span class="op">-</span>(p1[<span class="dv">3</span>]<span class="op">-</span>p2[<span class="dv">3</span>])<span class="op">*</span>(p2[<span class="dv">2</span>]<span class="op">-</span>p3[<span class="dv">2</span>])</span>
<span id="cb3-4">    ycoef &lt;-<span class="st"> </span>(p1[<span class="dv">3</span>]<span class="op">-</span>p2[<span class="dv">3</span>])<span class="op">*</span>(p2[<span class="dv">1</span>]<span class="op">-</span>p3[<span class="dv">1</span>])<span class="op">-</span>(p1[<span class="dv">1</span>]<span class="op">-</span>p2[<span class="dv">1</span>])<span class="op">*</span>(p2[<span class="dv">3</span>]<span class="op">-</span>p3[<span class="dv">3</span>])</span>
<span id="cb3-5">    zcoef &lt;-<span class="st"> </span>(p1[<span class="dv">1</span>]<span class="op">-</span>p2[<span class="dv">1</span>])<span class="op">*</span>(p2[<span class="dv">2</span>]<span class="op">-</span>p3[<span class="dv">2</span>])<span class="op">-</span>(p1[<span class="dv">2</span>]<span class="op">-</span>p2[<span class="dv">2</span>])<span class="op">*</span>(p2[<span class="dv">1</span>]<span class="op">-</span>p3[<span class="dv">1</span>])</span>
<span id="cb3-6">    offset &lt;-<span class="st"> </span>p1[<span class="dv">1</span>]<span class="op">*</span>xcoef <span class="op">+</span><span class="st"> </span>p1[<span class="dv">2</span>]<span class="op">*</span>ycoef <span class="op">+</span><span class="st"> </span>p1[<span class="dv">3</span>]<span class="op">*</span>zcoef</span>
<span id="cb3-7">    <span class="kw">c</span>(xcoef, ycoef, zcoef, offset)</span>
<span id="cb3-8">}</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co"># helper function: cross product </span></span>
<span id="cb3-11">cross &lt;-<span class="st"> </span><span class="cf">function</span>(v, w){ </span>
<span id="cb3-12">  <span class="kw">c</span>(</span>
<span id="cb3-13">    v[<span class="dv">2</span>] <span class="op">*</span><span class="st"> </span>w[<span class="dv">3</span>] <span class="op">-</span><span class="st"> </span>v[<span class="dv">3</span>] <span class="op">*</span><span class="st"> </span>w[<span class="dv">2</span>], </span>
<span id="cb3-14">    v[<span class="dv">3</span>] <span class="op">*</span><span class="st"> </span>w[<span class="dv">1</span>] <span class="op">-</span><span class="st"> </span>v[<span class="dv">1</span>] <span class="op">*</span><span class="st"> </span>w[<span class="dv">3</span>], </span>
<span id="cb3-15">    v[<span class="dv">1</span>] <span class="op">*</span><span class="st"> </span>w[<span class="dv">2</span>] <span class="op">-</span><span class="st"> </span>v[<span class="dv">2</span>] <span class="op">*</span><span class="st"> </span>w[<span class="dv">1</span>]</span>
<span id="cb3-16">  )</span>
<span id="cb3-17">}</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co"># circle passing by points three points p1, p2, p3 </span></span>
<span id="cb3-20"><span class="co"># given in Cartesian coordinates</span></span>
<span id="cb3-21">circle3pts &lt;-<span class="st"> </span><span class="cf">function</span>(p1, p2, p3){</span>
<span id="cb3-22">  p12 &lt;-<span class="st"> </span>(p1<span class="op">+</span>p2)<span class="op">/</span><span class="dv">2</span></span>
<span id="cb3-23">  p23 &lt;-<span class="st"> </span>(p2<span class="op">+</span>p3)<span class="op">/</span><span class="dv">2</span></span>
<span id="cb3-24">  v12 &lt;-<span class="st"> </span>p2<span class="op">-</span>p1</span>
<span id="cb3-25">  v23 &lt;-<span class="st"> </span>p3<span class="op">-</span>p2</span>
<span id="cb3-26">  plane &lt;-<span class="st"> </span><span class="kw">plane3pts</span>(p1, p2, p3)</span>
<span id="cb3-27">  A &lt;-<span class="st"> </span><span class="kw">rbind</span>(plane[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>], v12, v23)</span>
<span id="cb3-28">  b &lt;-<span class="st"> </span><span class="kw">c</span>(plane[<span class="dv">4</span>], <span class="kw">sum</span>(p12<span class="op">*</span>v12), <span class="kw">sum</span>(p23<span class="op">*</span>v23))</span>
<span id="cb3-29">  center &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">solve</span>(A) <span class="op">%*%</span><span class="st"> </span>b)</span>
<span id="cb3-30">  r &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(p1<span class="op">-</span>center)))</span>
<span id="cb3-31">  i &lt;-<span class="st"> </span>(p1<span class="op">-</span>center) <span class="op">/</span><span class="st"> </span>r</span>
<span id="cb3-32">  normal &lt;-<span class="st"> </span>plane[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>] <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(plane[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>])))</span>
<span id="cb3-33">  <span class="kw">list</span>(<span class="dt">center =</span> center, <span class="dt">radius =</span> r, <span class="dt">i =</span> i, <span class="dt">j =</span> <span class="kw">cross</span>(i,normal))</span>
<span id="cb3-34">} <span class="co"># circle parameterization: center + radius*(cos(t)*i + sin(t)*j)</span></span>
<span id="cb3-35"></span>
<span id="cb3-36"><span class="co"># circle on unit sphere passing by three points </span></span>
<span id="cb3-37"><span class="co"># given in spherical coordinates </span></span>
<span id="cb3-38">circleOnUnitSphere &lt;-<span class="st"> </span><span class="cf">function</span>(thph1, thph2, thph3){</span>
<span id="cb3-39">  theta1 &lt;-<span class="st"> </span>thph1[<span class="dv">1</span>]; phi1 &lt;-<span class="st"> </span>thph1[<span class="dv">2</span>]</span>
<span id="cb3-40">  theta2 &lt;-<span class="st"> </span>thph2[<span class="dv">1</span>]; phi2 &lt;-<span class="st"> </span>thph2[<span class="dv">2</span>]</span>
<span id="cb3-41">  theta3 &lt;-<span class="st"> </span>thph3[<span class="dv">1</span>]; phi3 &lt;-<span class="st"> </span>thph3[<span class="dv">2</span>]</span>
<span id="cb3-42">  p1 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">sin</span>(theta1)<span class="op">*</span><span class="kw">cos</span>(phi1), <span class="kw">sin</span>(theta1)<span class="op">*</span><span class="kw">sin</span>(phi1), <span class="kw">cos</span>(theta1))</span>
<span id="cb3-43">  p2 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">sin</span>(theta2)<span class="op">*</span><span class="kw">cos</span>(phi2), <span class="kw">sin</span>(theta2)<span class="op">*</span><span class="kw">sin</span>(phi2), <span class="kw">cos</span>(theta2))</span>
<span id="cb3-44">  p3 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">sin</span>(theta3)<span class="op">*</span><span class="kw">cos</span>(phi3), <span class="kw">sin</span>(theta3)<span class="op">*</span><span class="kw">sin</span>(phi3), <span class="kw">cos</span>(theta3))</span>
<span id="cb3-45">  <span class="kw">circle3pts</span>(p1, p2, p3)</span>
<span id="cb3-46">}</span></code></pre>
      </div>
      <p>
        The function returns a list with four elements: a point
        <code>center</code>, a number <code>radius</code>, and two vectors
        <code>i</code> and <code>j</code>. The parameterization of the spherical
        circle is then <code>center + radius*(cos(t)*i + sin(t)*j)</code> for
        <code>t</code> <span class="math inline">\(\in (0, 2\pi[\)</span>.
      </p>
      <p>
        Let’s try. We enter three pairs of spherical coordinates and we apply
        the <code>circleOnUnitSphere</code> function:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">thph1 =<span class="st"> </span><span class="kw">c</span>(<span class="fl">1.3</span>, <span class="fl">1.5</span>)</span>
<span id="cb4-2">thph2 =<span class="st"> </span><span class="kw">c</span>(<span class="fl">1.9</span>, <span class="fl">2.8</span>)</span>
<span id="cb4-3">thph3 =<span class="st"> </span><span class="kw">c</span>(<span class="dv">1</span>, <span class="dv">2</span>)</span>
<span id="cb4-4">circ &lt;-<span class="st"> </span><span class="kw">circleOnUnitSphere</span>(thph1, thph2, thph3)</span></code></pre>
      </div>
      <p>
        Then we define the parametrization of the stereographically projected
        Hopf torus:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">F &lt;-<span class="st"> </span><span class="cf">function</span>(t, phi){</span>
<span id="cb5-2">  p &lt;-<span class="st"> </span><span class="kw">with</span>(circ, center <span class="op">+</span><span class="st"> </span>radius<span class="op">*</span>(<span class="kw">cos</span>(t)<span class="op">*</span>i <span class="op">+</span><span class="st"> </span><span class="kw">sin</span>(t)<span class="op">*</span>j))</span>
<span id="cb5-3">  <span class="kw">Stereo</span>(<span class="kw">HopfInverse</span>(p, phi))</span>
<span id="cb5-4">}</span></code></pre>
      </div>
      <p>And we plot:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">parametric3d</span>(fx, fy, fz, <span class="dt">umin =</span> <span class="dv">0</span>, <span class="dt">umax =</span> <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">vmin =</span> <span class="dv">0</span>, <span class="dt">vmax =</span> <span class="dv">2</span><span class="op">*</span>pi, </span>
<span id="cb6-2">             <span class="dt">n =</span> <span class="dv">250</span>, <span class="dt">smooth =</span> <span class="ot">TRUE</span>, <span class="dt">color =</span> <span class="st">"#363940"</span>)</span>
<span id="cb6-3">rgl<span class="op">::</span><span class="kw">view3d</span>(<span class="dv">90</span>, <span class="dv">0</span>, <span class="dt">zoom =</span> <span class="fl">0.65</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/cyclide_grey.png"
        />
      </p>
      <p>
        By rotating our spherical circle about the
        <span class="math inline">\(z\)</span>-axis, we can obtain the
        <a href="./linkedCyclidesParametric.html">linked cyclides</a>. Below is
        a R function to perform a rotation in spherical coordinates. See
        <a
          href="http://stla.github.io/stlapblog/posts/RotationSphericalCoordinates.html"
          >this post</a
        >
        on my former blog for some explanations.
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1"><span class="co"># helper functions: basic rotations ####</span></span>
<span id="cb7-2">Rx &lt;-<span class="st"> </span><span class="cf">function</span>(alpha){</span>
<span id="cb7-3">  <span class="kw">rbind</span>(<span class="kw">c</span>(<span class="kw">cos</span>(alpha<span class="op">/</span><span class="dv">2</span>), <span class="op">-</span>1i<span class="op">*</span><span class="kw">sin</span>(alpha<span class="op">/</span><span class="dv">2</span>)),</span>
<span id="cb7-4">        <span class="kw">c</span>(<span class="op">-</span>1i<span class="op">*</span><span class="kw">sin</span>(alpha<span class="op">/</span><span class="dv">2</span>), <span class="kw">cos</span>(alpha<span class="op">/</span><span class="dv">2</span>)))</span>
<span id="cb7-5">}</span>
<span id="cb7-6">Ry &lt;-<span class="st"> </span><span class="cf">function</span>(alpha){</span>
<span id="cb7-7">  <span class="kw">rbind</span>(<span class="kw">c</span>(<span class="kw">cos</span>(alpha<span class="op">/</span><span class="dv">2</span>), <span class="op">-</span><span class="kw">sin</span>(alpha<span class="op">/</span><span class="dv">2</span>)),</span>
<span id="cb7-8">        <span class="kw">c</span>(<span class="kw">sin</span>(alpha<span class="op">/</span><span class="dv">2</span>), <span class="kw">cos</span>(alpha<span class="op">/</span><span class="dv">2</span>)))</span>
<span id="cb7-9">}</span>
<span id="cb7-10">Rz &lt;-<span class="st"> </span><span class="cf">function</span>(alpha){</span>
<span id="cb7-11">  <span class="kw">rbind</span>(<span class="kw">c</span>(<span class="kw">exp</span>(<span class="op">-</span>1i<span class="op">*</span>alpha<span class="op">/</span><span class="dv">2</span>), <span class="dv">0</span>),</span>
<span id="cb7-12">        <span class="kw">c</span>(<span class="dv">0</span>, <span class="kw">exp</span>(1i<span class="op">*</span>alpha<span class="op">/</span><span class="dv">2</span>)))</span>
<span id="cb7-13">}</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="co"># 3D rotation in spherical coordinates ####</span></span>
<span id="cb7-16"><span class="co">#' @description Rotation of a vector given in spherical coordinates.</span></span>
<span id="cb7-17"><span class="co">#' @param theta_phi spherical coordinates, a vector containing the </span></span>
<span id="cb7-18"><span class="co">#' colatitude (or polar angle), between 0 and pi, and the longitude </span></span>
<span id="cb7-19"><span class="co">#' (or azimuthal angle), between 0 and 2pi</span></span>
<span id="cb7-20"><span class="co">#' @param axis either a letter 'x', 'y' or 'z', a numeric vector of </span></span>
<span id="cb7-21"><span class="co">#' length 2 (the spherical coordinates of the axis), or a numeric </span></span>
<span id="cb7-22"><span class="co">#' vector of length 3 (the Cartesian coordinates of the axis)</span></span>
<span id="cb7-23"><span class="co">#' @param alpha angle of rotation</span></span>
<span id="cb7-24"><span class="co">#' @return The spherical coordinates of the transformed vector.</span></span>
<span id="cb7-25">rotation &lt;-<span class="st"> </span><span class="cf">function</span>(theta_phi, <span class="dt">axis=</span><span class="st">"x"</span>, alpha){</span>
<span id="cb7-26">  <span class="cf">if</span>(<span class="kw">is.character</span>(axis)){</span>
<span id="cb7-27">    axis &lt;-<span class="st"> </span><span class="kw">match.arg</span>(axis, <span class="kw">c</span>(<span class="st">"x"</span>,<span class="st">"y"</span>,<span class="st">"z"</span>))</span>
<span id="cb7-28">    R &lt;-<span class="st"> </span><span class="cf">switch</span>(axis, </span>
<span id="cb7-29">                <span class="st">"x"</span> =<span class="st"> </span><span class="kw">Rx</span>(alpha),</span>
<span id="cb7-30">                <span class="st">"y"</span> =<span class="st"> </span><span class="kw">Ry</span>(alpha),</span>
<span id="cb7-31">                <span class="st">"z"</span> =<span class="st"> </span><span class="kw">Rz</span>(alpha))</span>
<span id="cb7-32">  }<span class="cf">else</span> <span class="cf">if</span>(<span class="kw">length</span>(axis) <span class="op">==</span><span class="st"> </span><span class="dv">2</span>){</span>
<span id="cb7-33">    Theta &lt;-<span class="st"> </span>axis[<span class="dv">1</span>]; Phi &lt;-<span class="st"> </span>axis[<span class="dv">2</span>]</span>
<span id="cb7-34">    R &lt;-<span class="st"> </span><span class="kw">Rz</span>(Phi) <span class="op">%*%</span><span class="st"> </span><span class="kw">Ry</span>(Theta) <span class="op">%*%</span><span class="st"> </span><span class="kw">Rz</span>(alpha) <span class="op">%*%</span><span class="st"> </span></span>
<span id="cb7-35"><span class="st">           </span><span class="kw">t</span>(<span class="kw">Ry</span>(Theta)) <span class="op">%*%</span><span class="st"> </span><span class="kw">t</span>(<span class="kw">Conj</span>(<span class="kw">Rz</span>(Phi)))</span>
<span id="cb7-36">  }<span class="cf">else</span> <span class="cf">if</span>(<span class="kw">length</span>(axis) <span class="op">==</span><span class="st"> </span><span class="dv">3</span>){</span>
<span id="cb7-37">    axis &lt;-<span class="st"> </span>axis <span class="op">/</span><span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(axis)))</span>
<span id="cb7-38">    X &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">1</span>), <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">0</span>))</span>
<span id="cb7-39">    Y &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">0</span>,<span class="op">-</span>1i), <span class="kw">c</span>(1i,<span class="dv">0</span>)) </span>
<span id="cb7-40">    Z &lt;-<span class="st"> </span><span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">0</span>), <span class="kw">c</span>(<span class="dv">0</span>,<span class="op">-</span><span class="dv">1</span>))</span>
<span id="cb7-41">    R &lt;-<span class="st"> </span><span class="kw">cos</span>(alpha<span class="op">/</span><span class="dv">2</span>)<span class="op">*</span><span class="kw">diag</span>(<span class="dv">2</span>) <span class="op">-</span><span class="st"> </span>1i<span class="op">*</span><span class="kw">sin</span>(alpha<span class="op">/</span><span class="dv">2</span>) <span class="op">*</span><span class="st"> </span></span>
<span id="cb7-42"><span class="st">           </span>(axis[<span class="dv">1</span>]<span class="op">*</span>X <span class="op">+</span><span class="st"> </span>axis[<span class="dv">2</span>]<span class="op">*</span>Y <span class="op">+</span><span class="st"> </span>axis[<span class="dv">3</span>]<span class="op">*</span>Z)</span>
<span id="cb7-43">  }<span class="cf">else</span>{</span>
<span id="cb7-44">    <span class="kw">stop</span>(<span class="st">"`axis` must be either:</span></span>
<span id="cb7-45"><span class="st">         - a letter ('x', 'y' or 'z')</span></span>
<span id="cb7-46"><span class="st">         - a numeric vector of length two (spherical coordinates)</span></span>
<span id="cb7-47"><span class="st">         - a numeric vector of length three (Cartesian coordinates)"</span>)</span>
<span id="cb7-48">  }</span>
<span id="cb7-49">  theta &lt;-<span class="st"> </span>theta_phi[<span class="dv">1</span>]; phi &lt;-<span class="st"> </span>theta_phi[<span class="dv">2</span>]</span>
<span id="cb7-50">  qubit &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">cos</span>(theta<span class="op">/</span><span class="dv">2</span>), <span class="kw">exp</span>(1i<span class="op">*</span>phi)<span class="op">*</span><span class="kw">sin</span>(theta<span class="op">/</span><span class="dv">2</span>))</span>
<span id="cb7-51">  newqubit &lt;-<span class="st"> </span>R <span class="op">%*%</span><span class="st"> </span>qubit</span>
<span id="cb7-52">  z0 &lt;-<span class="st"> </span>newqubit[<span class="dv">1</span>,<span class="dv">1</span>]; z1 &lt;-<span class="st"> </span>newqubit[<span class="dv">2</span>,<span class="dv">1</span>]</span>
<span id="cb7-53">  <span class="kw">c</span>(<span class="dv">2</span><span class="op">*</span><span class="kw">atan</span>(<span class="kw">Mod</span>(z1)<span class="op">/</span><span class="kw">Mod</span>(z0)), <span class="kw">Arg</span>(z1)<span class="op">-</span><span class="kw">Arg</span>(z0))</span>
<span id="cb7-54">}</span></code></pre>
      </div>
      <p>Now, let’s rotate our spherical circle and plot:</p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1">thph1 &lt;-<span class="st"> </span><span class="kw">rotation</span>(thph1, <span class="st">"z"</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">3</span>)</span>
<span id="cb8-2">thph2 &lt;-<span class="st"> </span><span class="kw">rotation</span>(thph2, <span class="st">"z"</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">3</span>)</span>
<span id="cb8-3">thph3 &lt;-<span class="st"> </span><span class="kw">rotation</span>(thph3, <span class="st">"z"</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">3</span>)</span>
<span id="cb8-4">circ &lt;-<span class="st"> </span><span class="kw">circleOnUnitSphere</span>(thph1, thph2, thph3)</span>
<span id="cb8-5"><span class="kw">parametric3d</span>(fx, fy, fz, <span class="dt">umin =</span> <span class="dv">0</span>, <span class="dt">umax =</span> <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">vmin =</span> <span class="dv">0</span>, <span class="dt">vmax =</span> <span class="dv">2</span><span class="op">*</span>pi, </span>
<span id="cb8-6">             <span class="dt">n =</span> <span class="dv">250</span>, <span class="dt">smooth =</span> <span class="ot">TRUE</span>, <span class="dt">color =</span> <span class="st">"#363940"</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>)</span>
<span id="cb8-7">thph1 &lt;-<span class="st"> </span><span class="kw">rotation</span>(thph1, <span class="st">"z"</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">3</span>)</span>
<span id="cb8-8">thph2 &lt;-<span class="st"> </span><span class="kw">rotation</span>(thph2, <span class="st">"z"</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">3</span>)</span>
<span id="cb8-9">thph3 &lt;-<span class="st"> </span><span class="kw">rotation</span>(thph3, <span class="st">"z"</span>, <span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span><span class="dv">3</span>)</span>
<span id="cb8-10">circ &lt;-<span class="st"> </span><span class="kw">circleOnUnitSphere</span>(thph1, thph2, thph3)</span>
<span id="cb8-11"><span class="kw">parametric3d</span>(fx, fy, fz, <span class="dt">umin =</span> <span class="dv">0</span>, <span class="dt">umax =</span> <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">vmin =</span> <span class="dv">0</span>, <span class="dt">vmax =</span> <span class="dv">2</span><span class="op">*</span>pi, </span>
<span id="cb8-12">             <span class="dt">n =</span> <span class="dv">250</span>, <span class="dt">smooth =</span> <span class="ot">TRUE</span>, <span class="dt">color =</span> <span class="st">"#363940"</span>, <span class="dt">add =</span> <span class="ot">TRUE</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/linkedCyclides_grey.png"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 12 Apr 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/HopfTorus2.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>An orbit of the modular tessellation</title>
      <link>https://laustep.github.io/stlahblog/posts/ModularTessellationOrbit.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        I came across this
        <a
          href="https://www3.risc.jku.at/publications/download/risc_5011/DiplomaThesisPonweiser.pdf"
          >interesting paper</a
        >
        entitled <em>Complex Variables Visualized</em> and written by Thomas
        Ponweiser.
      </p>
      <p>
        In particular, I was intrigued by the <em>generalized powers</em> of a
        Möbius transformation (of a matrix, actually), and their actions on the
        modular tessellation.
      </p>
      <p>
        So I firstly implemented the generalized powers in my package
        <code>PlaneGeometry</code>. Then I wrote the script below to visualize
        the orbit of the modular tessellation under the action of
        <span class="math inline">\(R^t\)</span>,
        <span class="math inline">\(0 \leqslant t &lt; 3\)</span>, with the
        notations of the paper. The command <code>fplot(u)</code> generates the
        modular tessellation under the action of
        <span class="math inline">\(R^t\)</span> when <code>u</code> is the
        value of <span class="math inline">\(t\)</span>. Then I use the
        <code>gifski</code> package to create the animation.
      </p>
      <p>
        To get the modular transformations
        <span class="math inline">\(z \mapsto \frac{az+b}{cz+d}\)</span>, I use
        the <code>unimodular</code> function of the
        <code>elliptic</code> package. It generates the quadruples
        <span class="math inline">\((a,b,c,d)\)</span> of
        <em>positive</em> integers such that
        <span class="math inline">\(ad-bc=1\)</span>. Then we can get all such
        quadruples
        <span class="math inline">\((a,b,c,d) \in \mathbb{Z}^4\)</span> by
        inverting these modular transformations, swapping
        <span class="math inline">\(a\)</span> and
        <span class="math inline">\(d\)</span> and changing their signs.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(PlaneGeometry)</span>
<span id="cb1-2"><span class="kw">library</span>(elliptic) <span class="co"># for the 'unimodular' function</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co"># Möbius transformations</span></span>
<span id="cb1-5">T &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(<span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">0</span>,<span class="op">-</span><span class="dv">1</span>), <span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">0</span>)))</span>
<span id="cb1-6">U &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(<span class="kw">rbind</span>(<span class="kw">c</span>(<span class="dv">1</span>,<span class="dv">1</span>), <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">1</span>)))</span>
<span id="cb1-7">R &lt;-<span class="st"> </span>U<span class="op">$</span><span class="kw">compose</span>(T)</span>
<span id="cb1-8"><span class="co"># R^t, generalized power</span></span>
<span id="cb1-9">Rt &lt;-<span class="st"> </span><span class="cf">function</span>(t) R<span class="op">$</span><span class="kw">gpower</span>(t)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co"># starting circles</span></span>
<span id="cb1-12">I &lt;-<span class="st"> </span>Circle<span class="op">$</span><span class="kw">new</span>(<span class="kw">c</span>(<span class="dv">0</span>,<span class="fl">1.5</span>), <span class="fl">0.5</span>)</span>
<span id="cb1-13">TI &lt;-<span class="st"> </span>T<span class="op">$</span><span class="kw">transformCircle</span>(I)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co"># modified Cayley transformation</span></span>
<span id="cb1-16">Phi &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(<span class="kw">rbind</span>(<span class="kw">c</span>(1i,<span class="dv">1</span>), <span class="kw">c</span>(<span class="dv">1</span>,1i)))</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co"># plotting function ####</span></span>
<span id="cb1-19">n &lt;-<span class="st"> </span>8L</span>
<span id="cb1-20">transfos &lt;-<span class="st"> </span><span class="kw">unimodular</span>(n)</span>
<span id="cb1-21">fplot &lt;-<span class="st"> </span><span class="cf">function</span>(u){</span>
<span id="cb1-22">  opar &lt;-<span class="st"> </span><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>), <span class="dt">bg =</span> <span class="st">"black"</span>)</span>
<span id="cb1-23">  <span class="kw">plot</span>(<span class="ot">NULL</span>, <span class="dt">asp =</span> <span class="dv">1</span>, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.1</span>,<span class="fl">1.1</span>), <span class="dt">ylim =</span> <span class="kw">c</span>(<span class="op">-</span><span class="fl">1.1</span>,<span class="fl">1.1</span>),</span>
<span id="cb1-24">       <span class="dt">xlab =</span> <span class="ot">NA</span>, <span class="dt">ylab =</span> <span class="ot">NA</span>, <span class="dt">axes =</span> <span class="ot">FALSE</span>)</span>
<span id="cb1-25">  <span class="kw">draw</span>(unitCircle, <span class="dt">col =</span> <span class="st">"black"</span>)</span>
<span id="cb1-26">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">dim</span>(transfos)[3L]){</span>
<span id="cb1-27">    transfo &lt;-<span class="st"> </span>transfos[,,i]</span>
<span id="cb1-28">    <span class="co">#</span></span>
<span id="cb1-29">    M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)</span>
<span id="cb1-30">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-31">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-32">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-33">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-34">    M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-35">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-36">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-37">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-38">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-39">    <span class="co">#</span></span>
<span id="cb1-40">    <span class="kw">diag</span>(transfo) &lt;-<span class="st"> </span><span class="op">-</span><span class="kw">diag</span>(transfo)</span>
<span id="cb1-41">    M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)</span>
<span id="cb1-42">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-43">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-44">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-45">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-46">    M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-47">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-48">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-49">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-50">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-51">    <span class="co">#</span></span>
<span id="cb1-52">    d &lt;-<span class="st"> </span><span class="kw">diag</span>(transfo)</span>
<span id="cb1-53">    <span class="cf">if</span>(d[1L] <span class="op">!=</span><span class="st"> </span>d[2L]){</span>
<span id="cb1-54">      <span class="kw">diag</span>(transfo) &lt;-<span class="st"> </span><span class="kw">rev</span>(d)</span>
<span id="cb1-55">      M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)</span>
<span id="cb1-56">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-57">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-58">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-59">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-60">      M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-61">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-62">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-63">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-64">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-65">    }</span>
<span id="cb1-66">  }</span>
<span id="cb1-67">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">dim</span>(transfos)[3L]){</span>
<span id="cb1-68">    transfo &lt;-<span class="st"> </span>transfos[,,i]</span>
<span id="cb1-69">    <span class="co">#</span></span>
<span id="cb1-70">    M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)<span class="op">$</span><span class="kw">compose</span>(T)</span>
<span id="cb1-71">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-72">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-73">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-74">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-75">    M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-76">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-77">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-78">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-79">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-80">    <span class="co">#</span></span>
<span id="cb1-81">    <span class="kw">diag</span>(transfo) &lt;-<span class="st"> </span><span class="op">-</span><span class="kw">diag</span>(transfo)</span>
<span id="cb1-82">    M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)<span class="op">$</span><span class="kw">compose</span>(T)</span>
<span id="cb1-83">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-84">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-85">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-86">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-87">    M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-88">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-89">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-90">    <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-91">         <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-92">    <span class="co">#</span></span>
<span id="cb1-93">    d &lt;-<span class="st"> </span><span class="kw">diag</span>(transfo)</span>
<span id="cb1-94">    <span class="cf">if</span>(d[1L] <span class="op">!=</span><span class="st"> </span>d[2L]){</span>
<span id="cb1-95">      <span class="kw">diag</span>(transfo) &lt;-<span class="st"> </span><span class="kw">rev</span>(d)</span>
<span id="cb1-96">      M &lt;-<span class="st"> </span>Mobius<span class="op">$</span><span class="kw">new</span>(transfo)<span class="op">$</span><span class="kw">compose</span>(T)</span>
<span id="cb1-97">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-98">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-99">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-100">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-101">      M &lt;-<span class="st"> </span>M<span class="op">$</span><span class="kw">inverse</span>()</span>
<span id="cb1-102">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(I),</span>
<span id="cb1-103">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-104">      <span class="kw">draw</span>(M<span class="op">$</span><span class="kw">compose</span>(<span class="kw">Rt</span>(u))<span class="op">$</span><span class="kw">compose</span>(Phi)<span class="op">$</span><span class="kw">transformCircle</span>(TI),</span>
<span id="cb1-105">           <span class="dt">border =</span> <span class="st">"black"</span>, <span class="dt">col =</span> <span class="st">"magenta"</span>)</span>
<span id="cb1-106">    }</span>
<span id="cb1-107">  }</span>
<span id="cb1-108">}</span>
<span id="cb1-109"></span>
<span id="cb1-110"><span class="co"># animation ####</span></span>
<span id="cb1-111"><span class="kw">library</span>(gifski)</span>
<span id="cb1-112">u_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">3</span>, <span class="dt">length.out =</span> 181L)[<span class="op">-</span>1L]</span>
<span id="cb1-113"><span class="kw">save_gif</span>({</span>
<span id="cb1-114">  <span class="cf">for</span>(u <span class="cf">in</span> u_){</span>
<span id="cb1-115">    <span class="kw">fplot</span>(u)</span>
<span id="cb1-116">  }</span>
<span id="cb1-117">}, <span class="st">"ModularTessellation.gif"</span>, <span class="dv">512</span>, <span class="dv">512</span>, <span class="dt">delay =</span> <span class="dv">1</span><span class="op">/</span><span class="dv">12</span>, <span class="dt">res =</span> <span class="dv">144</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/ModularTessellationOrbit.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 19 Feb 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/ModularTessellationOrbit.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Tooltips for the headers of a datatable in Shiny</title>
      <link>https://laustep.github.io/stlahblog/posts/DTqTips.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In this post, I show how to use the
        <a href="http://qtip2.com/">qTip2</a> JavaScript library to create some
        tooltips on the headers of a <code>DT</code> datatable in Shiny,
        displaying some information about the columns, such as summary
        statistics.
      </p>
      <p>
        Firstly, we write a function returning some JavaScript code that creates
        some hidden <code>div</code> elements which will contain the contents of
        the tooltips. This function takes two arguments: <code>n</code>, the
        number of <code>div</code> elements to create (this will be the number
        of columns of the table), and <code>prefixID</code>; the i-th
        <code>div</code> will have the identifier <code>{prefixID}-{i}</code>.
        We also set a class to each <code>div</code>, namely
        <code>qtip-big</code>.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">createDiv &lt;-<span class="st"> </span><span class="cf">function</span>(n, prefixID){</span>
<span id="cb1-2">  <span class="kw">sprintf</span>(<span class="kw">paste</span>(</span>
<span id="cb1-3">    <span class="st">"for(var i = 1; i &lt;= %d; i++){"</span>,</span>
<span id="cb1-4">    <span class="st">"  var div;"</span>,</span>
<span id="cb1-5">    <span class="kw">sprintf</span>(<span class="st">"  var id = '%s-' + i.toString();"</span>, prefixID),</span>
<span id="cb1-6">    <span class="st">"  if(document.getElementById(id) === null){"</span>,</span>
<span id="cb1-7">    <span class="st">"    div = document.createElement('div');"</span>,</span>
<span id="cb1-8">    <span class="st">"    div.setAttribute('id', id);"</span>,</span>
<span id="cb1-9">    <span class="st">"    div.setAttribute('class', 'qtip-big');"</span>,</span>
<span id="cb1-10">    <span class="st">"    div.style.display = 'none';"</span>,</span>
<span id="cb1-11">    <span class="st">"    document.body.appendChild(div);"</span>,</span>
<span id="cb1-12">    <span class="st">"  }"</span>,</span>
<span id="cb1-13">    <span class="st">"}"</span>,</span>
<span id="cb1-14">    <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span></span>
<span id="cb1-15">  ), n)</span>
<span id="cb1-16">}</span></code></pre>
      </div>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">cat</span>(<span class="kw">createDiv</span>(<span class="dv">3</span>, <span class="st">"TOOLTIP"</span>))</span>
<span id="cb2-2"><span class="co">## for(var i = 1; i &lt;= 3; i++){</span></span>
<span id="cb2-3"><span class="co">##   var div;</span></span>
<span id="cb2-4"><span class="co">##   var id = 'TOOLTIP-' + i.toString();</span></span>
<span id="cb2-5"><span class="co">##   if(document.getElementById(id) === null){</span></span>
<span id="cb2-6"><span class="co">##     div = document.createElement('div');</span></span>
<span id="cb2-7"><span class="co">##     div.setAttribute('id', id);</span></span>
<span id="cb2-8"><span class="co">##     div.setAttribute('class', 'qtip-big');</span></span>
<span id="cb2-9"><span class="co">##     div.style.display = 'none';</span></span>
<span id="cb2-10"><span class="co">##     document.body.appendChild(div);</span></span>
<span id="cb2-11"><span class="co">##   }</span></span>
<span id="cb2-12"><span class="co">## }</span></span></code></pre>
      </div>
      <p>
        Now we write a function returning some JavaScript code that writes the
        contents of the <code>div</code> elements. It takes as arguments
        <code>dat</code>, the dataframe for the table, <code>i</code>, the index
        of a column of <code>dat</code>, and <code>prefixID</code> as in the
        function <code>createDiv</code>. If the <code>i</code>-th column is
        numeric, we fill the <code>div</code> element with some summary
        statistics of this column, otherwise the information we provide in the
        <code>div</code> element is the number of levels of the contents of the
        column, an enumeration of the levels (at most three), and the number of
        missing values.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">fillDiv &lt;-<span class="st"> </span><span class="cf">function</span>(dat, i, prefixID){</span>
<span id="cb3-2">  x &lt;-<span class="st"> </span>dat[[i]]</span>
<span id="cb3-3">  <span class="cf">if</span>(<span class="kw">is.numeric</span>(x)){</span>
<span id="cb3-4">    <span class="kw">sprintf</span>(<span class="kw">paste</span>(</span>
<span id="cb3-5">      <span class="st">"var div = document.getElementById('%s-%d');"</span>,</span>
<span id="cb3-6">      <span class="st">"var html = '&lt;b&gt; Min: &lt;/b&gt; %s&lt;/br&gt;';"</span>,</span>
<span id="cb3-7">      <span class="st">"html = html + '&lt;b&gt; Max: &lt;/b&gt; %s&lt;/br&gt;';"</span>,</span>
<span id="cb3-8">      <span class="st">"html = html + '&lt;b&gt; Mean: &lt;/b&gt; %s&lt;/br&gt;';"</span>,</span>
<span id="cb3-9">      <span class="st">"html = html + '&lt;b&gt; Std. dev.: &lt;/b&gt; %s&lt;/br&gt;';"</span>,</span>
<span id="cb3-10">      <span class="st">"html = html + '&lt;b&gt; Missing values: &lt;/b&gt; %d';"</span>,</span>
<span id="cb3-11">      <span class="st">"div.innerHTML = html;"</span>,</span>
<span id="cb3-12">      <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span></span>
<span id="cb3-13">    ), </span>
<span id="cb3-14">    prefixID,</span>
<span id="cb3-15">    i, </span>
<span id="cb3-16">    <span class="kw">formatC</span>(<span class="kw">min</span>(x, <span class="dt">na.rm=</span><span class="ot">TRUE</span>)),</span>
<span id="cb3-17">    <span class="kw">formatC</span>(<span class="kw">max</span>(x, <span class="dt">na.rm=</span><span class="ot">TRUE</span>)),</span>
<span id="cb3-18">    <span class="kw">formatC</span>(<span class="kw">mean</span>(x, <span class="dt">na.rm=</span><span class="ot">TRUE</span>)),</span>
<span id="cb3-19">    <span class="kw">formatC</span>(<span class="kw">sd</span>(x, <span class="dt">na.rm=</span><span class="ot">TRUE</span>)),</span>
<span id="cb3-20">    <span class="kw">sum</span>(<span class="kw">is.na</span>(x)))</span>
<span id="cb3-21">  }<span class="cf">else</span>{</span>
<span id="cb3-22">    <span class="cf">if</span>(<span class="kw">is.factor</span>(x)) x &lt;-<span class="st"> </span><span class="kw">as.character</span>(x)</span>
<span id="cb3-23">    levels0 &lt;-<span class="st"> </span><span class="kw">sort</span>(<span class="kw">unique</span>(<span class="kw">na.omit</span>(x)))</span>
<span id="cb3-24">    nlevels &lt;-<span class="st"> </span><span class="kw">length</span>(levels0)</span>
<span id="cb3-25">    levels &lt;-<span class="st"> </span></span>
<span id="cb3-26"><span class="st">      </span><span class="cf">if</span>(nlevels<span class="op">&gt;</span><span class="dv">3</span>) <span class="kw">c</span>(levels0[<span class="dv">1</span><span class="op">:</span><span class="dv">2</span>], levels0[nlevels]) <span class="cf">else</span> levels0</span>
<span id="cb3-27">    ncharMax &lt;-<span class="st"> </span><span class="dv">25</span></span>
<span id="cb3-28">    nchars &lt;-<span class="st"> </span><span class="kw">nchar</span>(levels)</span>
<span id="cb3-29">    <span class="cf">if</span>(<span class="dv">7</span><span class="op">+</span><span class="kw">sum</span>(nchars) <span class="op">&gt;</span><span class="st"> </span>ncharMax){</span>
<span id="cb3-30">      levels[<span class="dv">1</span>] &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="st">"&lt;br/&gt;"</span>, levels[<span class="dv">1</span>])</span>
<span id="cb3-31">      <span class="cf">if</span>(nlevels <span class="op">&gt;=</span><span class="st"> </span><span class="dv">2</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">sum</span>(nchars) <span class="op">&gt;</span><span class="st"> </span>ncharMax){</span>
<span id="cb3-32">        levels[<span class="dv">2</span>] &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="st">"&lt;br/&gt;"</span>, levels[<span class="dv">2</span>])</span>
<span id="cb3-33">        <span class="cf">if</span>(nlevels <span class="op">&gt;=</span><span class="st"> </span><span class="dv">3</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">sum</span>(nchars[<span class="dv">2</span><span class="op">:</span><span class="dv">3</span>]) <span class="op">&gt;</span><span class="st"> </span>ncharMax){</span>
<span id="cb3-34">          levels[<span class="dv">3</span>] &lt;-<span class="st"> </span><span class="kw">paste0</span>(<span class="st">"&lt;br/&gt;"</span>, levels[<span class="dv">3</span>])</span>
<span id="cb3-35">        }</span>
<span id="cb3-36">      }</span>
<span id="cb3-37">    }</span>
<span id="cb3-38">    levelsSummary &lt;-<span class="st"> </span><span class="kw">ifelse</span>(nlevels <span class="op">&gt;</span><span class="st"> </span><span class="dv">3</span>,</span>
<span id="cb3-39">                            <span class="kw">paste0</span>(<span class="kw">c</span>(levels[<span class="dv">1</span>],</span>
<span id="cb3-40">                                     <span class="kw">paste0</span>(levels[<span class="dv">2</span>], <span class="st">", ..."</span>),</span>
<span id="cb3-41">                                     levels[<span class="dv">3</span>]),</span>
<span id="cb3-42">                                   <span class="dt">collapse =</span> <span class="st">", "</span>),</span>
<span id="cb3-43">                            <span class="kw">paste0</span>(levels, <span class="dt">collapse =</span> <span class="st">", "</span>))</span>
<span id="cb3-44">    <span class="kw">sprintf</span>(<span class="kw">paste</span>(</span>
<span id="cb3-45">      <span class="st">"var div = document.getElementById('%s-%d');"</span>,</span>
<span id="cb3-46">      <span class="st">"var html = '&lt;b&gt; Number of levels: &lt;/b&gt; %d&lt;/br&gt;';"</span>,</span>
<span id="cb3-47">      <span class="kw">sprintf</span>(<span class="st">"html = html + '&lt;b&gt; Level%s: &lt;/b&gt; %%s&lt;/br&gt;'"</span>, </span>
<span id="cb3-48">              <span class="kw">ifelse</span>(nlevels<span class="op">==</span><span class="dv">1</span>, <span class="st">""</span>, <span class="st">"s"</span>)),</span>
<span id="cb3-49">      <span class="st">"html = html + '&lt;b&gt; Missing values: &lt;/b&gt; %d'"</span>,</span>
<span id="cb3-50">      <span class="st">"div.innerHTML = html;"</span>,</span>
<span id="cb3-51">      <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span></span>
<span id="cb3-52">    ),</span>
<span id="cb3-53">    prefixID,</span>
<span id="cb3-54">    i, </span>
<span id="cb3-55">    nlevels,</span>
<span id="cb3-56">    levelsSummary,</span>
<span id="cb3-57">    <span class="kw">sum</span>(<span class="kw">is.na</span>(x)))</span>
<span id="cb3-58">  }</span>
<span id="cb3-59">}</span></code></pre>
      </div>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">cat</span>(<span class="kw">fillDiv</span>(iris, <span class="dv">1</span>, <span class="st">"TOOLTIP"</span>))</span>
<span id="cb4-2"><span class="co">## var div = document.getElementById('TOOLTIP-1');</span></span>
<span id="cb4-3"><span class="co">## var html = '&lt;b&gt; Min: &lt;/b&gt; 4.3&lt;/br&gt;';</span></span>
<span id="cb4-4"><span class="co">## html = html + '&lt;b&gt; Max: &lt;/b&gt; 7.9&lt;/br&gt;';</span></span>
<span id="cb4-5"><span class="co">## html = html + '&lt;b&gt; Mean: &lt;/b&gt; 5.843&lt;/br&gt;';</span></span>
<span id="cb4-6"><span class="co">## html = html + '&lt;b&gt; Std. dev.: &lt;/b&gt; 0.8281&lt;/br&gt;';</span></span>
<span id="cb4-7"><span class="co">## html = html + '&lt;b&gt; Missing values: &lt;/b&gt; 0';</span></span>
<span id="cb4-8"><span class="co">## div.innerHTML = html;</span></span>
<span id="cb4-9"><span class="kw">cat</span>(<span class="kw">fillDiv</span>(iris, <span class="dv">5</span>, <span class="st">"TOOLTIP"</span>))</span>
<span id="cb4-10"><span class="co">## var div = document.getElementById('TOOLTIP-5');</span></span>
<span id="cb4-11"><span class="co">## var html = '&lt;b&gt; Number of levels: &lt;/b&gt; 3&lt;/br&gt;';</span></span>
<span id="cb4-12"><span class="co">## html = html + '&lt;b&gt; Levels: &lt;/b&gt; &lt;br/&gt;setosa, versicolor, virginica&lt;/br&gt;'</span></span>
<span id="cb4-13"><span class="co">## html = html + '&lt;b&gt; Missing values: &lt;/b&gt; 0'</span></span>
<span id="cb4-14"><span class="co">## div.innerHTML = html;</span></span></code></pre>
      </div>
      <p>
        Finally we write a function returning the JavaScript code of the
        <code>qTip</code> tooltips. Its arguments are <code>n</code>, the number
        of columns of the table, and <code>prefixID</code> as before.
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">tooltips &lt;-<span class="st"> </span><span class="cf">function</span>(n, prefixID){</span>
<span id="cb5-2">  settings &lt;-<span class="st"> </span><span class="kw">sprintf</span>(<span class="kw">paste</span>(</span>
<span id="cb5-3">    <span class="st">"{"</span>,</span>
<span id="cb5-4">    <span class="st">"  overwrite: true,"</span>,</span>
<span id="cb5-5">    <span class="st">"  content: {"</span>,</span>
<span id="cb5-6">    <span class="kw">sprintf</span>(<span class="st">"    text: $('#%s-%%s').clone()"</span>, prefixID),</span>
<span id="cb5-7">    <span class="st">"  },"</span>,</span>
<span id="cb5-8">    <span class="st">"  show: {"</span>,</span>
<span id="cb5-9">    <span class="st">"    ready: false"</span>,</span>
<span id="cb5-10">    <span class="st">"  },"</span>,</span>
<span id="cb5-11">    <span class="st">"  position: {"</span>,</span>
<span id="cb5-12">    <span class="st">"    my: 'bottom %%s',"</span>,</span>
<span id="cb5-13">    <span class="st">"    at: 'top center'"</span>,</span>
<span id="cb5-14">    <span class="st">"  },"</span>,</span>
<span id="cb5-15">    <span class="st">"  style: {"</span>,</span>
<span id="cb5-16">    <span class="st">"    classes: 'qtip-youtube'"</span>,</span>
<span id="cb5-17">    <span class="st">"  }"</span>,</span>
<span id="cb5-18">    <span class="st">"}"</span>,</span>
<span id="cb5-19">    <span class="dt">sep =</span> <span class="st">"</span><span class="ch">\n</span><span class="st">"</span></span>
<span id="cb5-20">  ), <span class="dv">1</span><span class="op">:</span>n)</span>
<span id="cb5-21">  settings &lt;-<span class="st"> </span><span class="kw">sprintf</span>(settings, <span class="kw">ifelse</span>(<span class="dv">1</span><span class="op">:</span>n <span class="op">&gt;</span><span class="st"> </span>n<span class="op">/</span><span class="dv">2</span>, <span class="st">"right"</span>, <span class="st">"left"</span>))</span>
<span id="cb5-22">  <span class="kw">sprintf</span>(<span class="st">"var tooltips = [%s];"</span>, <span class="kw">paste0</span>(settings, <span class="dt">collapse=</span><span class="st">","</span>))</span>
<span id="cb5-23">}</span></code></pre>
      </div>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb6-1"><span class="kw">cat</span>(<span class="kw">tooltips</span>(<span class="dv">2</span>, <span class="st">"TOOLTIP"</span>))</span>
<span id="cb6-2"><span class="co">## var tooltips = [{</span></span>
<span id="cb6-3"><span class="co">##   overwrite: true,</span></span>
<span id="cb6-4"><span class="co">##   content: {</span></span>
<span id="cb6-5"><span class="co">##     text: $('#TOOLTIP-1').clone()</span></span>
<span id="cb6-6"><span class="co">##   },</span></span>
<span id="cb6-7"><span class="co">##   show: {</span></span>
<span id="cb6-8"><span class="co">##     ready: false</span></span>
<span id="cb6-9"><span class="co">##   },</span></span>
<span id="cb6-10"><span class="co">##   position: {</span></span>
<span id="cb6-11"><span class="co">##     my: 'bottom left',</span></span>
<span id="cb6-12"><span class="co">##     at: 'top center'</span></span>
<span id="cb6-13"><span class="co">##   },</span></span>
<span id="cb6-14"><span class="co">##   style: {</span></span>
<span id="cb6-15"><span class="co">##     classes: 'qtip-youtube'</span></span>
<span id="cb6-16"><span class="co">##   }</span></span>
<span id="cb6-17"><span class="co">## },{</span></span>
<span id="cb6-18"><span class="co">##   overwrite: true,</span></span>
<span id="cb6-19"><span class="co">##   content: {</span></span>
<span id="cb6-20"><span class="co">##     text: $('#TOOLTIP-2').clone()</span></span>
<span id="cb6-21"><span class="co">##   },</span></span>
<span id="cb6-22"><span class="co">##   show: {</span></span>
<span id="cb6-23"><span class="co">##     ready: false</span></span>
<span id="cb6-24"><span class="co">##   },</span></span>
<span id="cb6-25"><span class="co">##   position: {</span></span>
<span id="cb6-26"><span class="co">##     my: 'bottom right',</span></span>
<span id="cb6-27"><span class="co">##     at: 'top center'</span></span>
<span id="cb6-28"><span class="co">##   },</span></span>
<span id="cb6-29"><span class="co">##   style: {</span></span>
<span id="cb6-30"><span class="co">##     classes: 'qtip-youtube'</span></span>
<span id="cb6-31"><span class="co">##   }</span></span>
<span id="cb6-32"><span class="co">## }];</span></span></code></pre>
      </div>
      <p>
        Now we are ready to write the Shiny app. Put the files
        <strong>jquery.qtip.min.css</strong> and
        <strong>jquery.qtip.min.js</strong> in the
        <strong>www</strong> subfolder. We use the <code>shinyjs</code> package
        to run the JavaScript code with the function <code>runjs</code>.
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(shiny)</span>
<span id="cb7-2"><span class="kw">library</span>(shinyjs)</span>
<span id="cb7-3"><span class="kw">library</span>(DT)</span>
<span id="cb7-4"></span>
<span id="cb7-5">CSS &lt;-<span class="st"> "</span></span>
<span id="cb7-6"><span class="st">.qtip-big { </span></span>
<span id="cb7-7"><span class="st">  font-size: 15px;</span></span>
<span id="cb7-8"><span class="st">  line-height: 18px;</span></span>
<span id="cb7-9"><span class="st">  white-space: nowrap;</span></span>
<span id="cb7-10"><span class="st">  word-spacing: 1px;</span></span>
<span id="cb7-11"><span class="st">}</span></span>
<span id="cb7-12"><span class="st">"</span></span>
<span id="cb7-13"></span>
<span id="cb7-14">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb7-15">  tags<span class="op">$</span><span class="kw">head</span>(</span>
<span id="cb7-16">    tags<span class="op">$</span><span class="kw">link</span>(<span class="dt">rel =</span> <span class="st">"stylesheet"</span>, <span class="dt">href =</span> <span class="st">"jquery.qtip.min.css"</span>),</span>
<span id="cb7-17">    tags<span class="op">$</span><span class="kw">script</span>(<span class="dt">src =</span> <span class="st">"jquery.qtip.min.js"</span>),</span>
<span id="cb7-18">    tags<span class="op">$</span><span class="kw">style</span>(CSS)</span>
<span id="cb7-19">  ),</span>
<span id="cb7-20">  <span class="kw">useShinyjs</span>(),</span>
<span id="cb7-21">  <span class="kw">br</span>(), <span class="kw">br</span>(), <span class="kw">br</span>(), <span class="kw">br</span>(), <span class="kw">br</span>(), </span>
<span id="cb7-22">  <span class="kw">DTOutput</span>(<span class="st">"dtable"</span>)</span>
<span id="cb7-23">)</span>
<span id="cb7-24"></span>
<span id="cb7-25">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session){</span>
<span id="cb7-26">  </span>
<span id="cb7-27">  output[[<span class="st">"dtable"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb7-28">    </span>
<span id="cb7-29">    dat &lt;-<span class="st"> </span>iris</span>
<span id="cb7-30">    </span>
<span id="cb7-31">    <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(dat)){</span>
<span id="cb7-32">      <span class="kw">runjs</span>(<span class="kw">createDiv</span>(i, <span class="st">"TOOLTIP"</span>))</span>
<span id="cb7-33">      <span class="kw">runjs</span>(<span class="kw">fillDiv</span>(dat, i, <span class="st">"TOOLTIP"</span>))</span>
<span id="cb7-34">    }</span>
<span id="cb7-35">    </span>
<span id="cb7-36">    headerCallback &lt;-<span class="st"> </span><span class="kw">c</span>(</span>
<span id="cb7-37">      <span class="st">"function(thead, data, start, end, display){"</span>,</span>
<span id="cb7-38">      <span class="st">"  var ncols = data[0].length;"</span>,</span>
<span id="cb7-39">      <span class="kw">tooltips</span>(<span class="kw">ncol</span>(dat), <span class="st">"TOOLTIP"</span>),</span>
<span id="cb7-40">      <span class="st">"  for(var i = 1; i &lt; ncols; i++){"</span>,</span>
<span id="cb7-41">      <span class="st">"    $('th:eq(' + i + ')', thead).qtip(tooltips[i-1]);"</span>, </span>
<span id="cb7-42">      <span class="st">"  }"</span>,</span>
<span id="cb7-43">      <span class="st">"}"</span></span>
<span id="cb7-44">    )</span>
<span id="cb7-45">    </span>
<span id="cb7-46">    <span class="kw">datatable</span>(</span>
<span id="cb7-47">      dat, </span>
<span id="cb7-48">      <span class="dt">options =</span> <span class="kw">list</span>(</span>
<span id="cb7-49">        <span class="dt">headerCallback =</span> <span class="kw">JS</span>(headerCallback),</span>
<span id="cb7-50">        <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb7-51">          <span class="kw">list</span>(<span class="dt">className =</span> <span class="st">"dt-center"</span>, <span class="dt">targets =</span> <span class="st">"_all"</span>)</span>
<span id="cb7-52">        )</span>
<span id="cb7-53">      )</span>
<span id="cb7-54">    )</span>
<span id="cb7-55">  })</span>
<span id="cb7-56">  </span>
<span id="cb7-57">}</span>
<span id="cb7-58"></span>
<span id="cb7-59"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DTqTip.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sun, 16 Feb 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/DTqTips.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Drawing a stereographic duoprism</title>
      <link>https://laustep.github.io/stlahblog/posts/DuoprismStereo.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        In this post, I’ll show how to draw a stereographic
        <a href="./Duoprism.html">duoprism</a> using R, Asymptote and POV-Ray.
      </p>
      <h1 id="with-r">With R</h1>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(rgl)</span>
<span id="cb1-2"></span>
<span id="cb1-3">A &lt;-<span class="st"> </span>8L <span class="co"># number of sides of the first polygon</span></span>
<span id="cb1-4">B &lt;-<span class="st"> </span>4L <span class="co"># number of sides of the second polygon</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co"># construction of the vertices</span></span>
<span id="cb1-7">vertices &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="ot">NA_real_</span>, <span class="dt">dim =</span> <span class="kw">c</span>(A,B,4L))</span>
<span id="cb1-8"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>A){</span>
<span id="cb1-9">  v1 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">cos</span>(i<span class="op">/</span>A<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi), <span class="kw">sin</span>(i<span class="op">/</span>A<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi))</span>
<span id="cb1-10">  <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>B){</span>
<span id="cb1-11">    v2 &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">cos</span>(j<span class="op">/</span>B<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi), <span class="kw">sin</span>(j<span class="op">/</span>B<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi))</span>
<span id="cb1-12">    vertices[i,j,] &lt;-<span class="st"> </span><span class="kw">c</span>(v1,v2)</span>
<span id="cb1-13">  }</span>
<span id="cb1-14">}</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co"># construction of the edges</span></span>
<span id="cb1-17">edges &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="ot">NA_integer_</span>, <span class="dt">dim =</span> <span class="kw">c</span>(2L,2L,2L<span class="op">*</span>A<span class="op">*</span>B))</span>
<span id="cb1-18">dominates &lt;-<span class="st"> </span><span class="cf">function</span>(c1, c2){</span>
<span id="cb1-19">  c2[1L]<span class="op">&gt;</span>c1[1L] <span class="op">||</span><span class="st"> </span>(c2[1L]<span class="op">==</span>c1[1L] <span class="op">&amp;&amp;</span><span class="st"> </span>c2[2L]<span class="op">&gt;</span>c1[2L])</span>
<span id="cb1-20">}</span>
<span id="cb1-21">counter &lt;-<span class="st"> </span>1L</span>
<span id="cb1-22"><span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_len</span>(A)<span class="op">-</span>1L){</span>
<span id="cb1-23">  <span class="cf">for</span>(j <span class="cf">in</span> <span class="kw">seq_len</span>(B)<span class="op">-</span>1L){</span>
<span id="cb1-24">    c1 &lt;-<span class="st"> </span><span class="kw">c</span>(i,j)</span>
<span id="cb1-25">    candidate &lt;-<span class="st"> </span><span class="kw">c</span>(i, (j<span class="op">-</span>1L)<span class="op">%%</span>B)</span>
<span id="cb1-26">    <span class="cf">if</span>(<span class="kw">dominates</span>(c1, candidate)){</span>
<span id="cb1-27">      edges[,,counter] &lt;-<span class="st"> </span><span class="kw">cbind</span>(c1, candidate) <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb1-28">      counter &lt;-<span class="st"> </span>counter <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb1-29">    }</span>
<span id="cb1-30">    candidate &lt;-<span class="st"> </span><span class="kw">c</span>(i, (j<span class="op">+</span>1L)<span class="op">%%</span>B)</span>
<span id="cb1-31">    <span class="cf">if</span>(<span class="kw">dominates</span>(c1, candidate)){</span>
<span id="cb1-32">      edges[,,counter] &lt;-<span class="st"> </span><span class="kw">cbind</span>(c1, candidate) <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb1-33">      counter &lt;-<span class="st"> </span>counter <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb1-34">    }</span>
<span id="cb1-35">    candidate &lt;-<span class="st"> </span><span class="kw">c</span>((i<span class="op">-</span>1L)<span class="op">%%</span>A, j)</span>
<span id="cb1-36">    <span class="cf">if</span>(<span class="kw">dominates</span>(c1, candidate)){</span>
<span id="cb1-37">      edges[,,counter] &lt;-<span class="st"> </span><span class="kw">cbind</span>(c1, candidate) <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb1-38">      counter &lt;-<span class="st"> </span>counter <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb1-39">    }</span>
<span id="cb1-40">    candidate &lt;-<span class="st"> </span><span class="kw">c</span>((i<span class="op">+</span>1L)<span class="op">%%</span>A, j)</span>
<span id="cb1-41">    <span class="cf">if</span>(<span class="kw">dominates</span>(c1, candidate)){</span>
<span id="cb1-42">      edges[,,counter] &lt;-<span class="st"> </span><span class="kw">cbind</span>(c1, candidate) <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb1-43">      counter &lt;-<span class="st"> </span>counter <span class="op">+</span><span class="st"> </span>1L</span>
<span id="cb1-44">    }</span>
<span id="cb1-45">  }</span>
<span id="cb1-46">}</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="co"># stereographic projection</span></span>
<span id="cb1-49">stereog &lt;-<span class="st"> </span><span class="cf">function</span>(v){</span>
<span id="cb1-50">  v[1L<span class="op">:</span>3L] <span class="op">/</span><span class="st"> </span>(<span class="kw">sqrt</span>(<span class="dv">2</span>) <span class="op">-</span><span class="st"> </span>v[4L])</span>
<span id="cb1-51">}</span>
<span id="cb1-52"></span>
<span id="cb1-53"><span class="co"># spherical segment</span></span>
<span id="cb1-54">sphericalSegment &lt;-<span class="st"> </span><span class="cf">function</span>(P, Q, n){</span>
<span id="cb1-55">  out &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> n<span class="op">+</span>1L, <span class="dt">ncol =</span> 4L)</span>
<span id="cb1-56">  <span class="cf">for</span>(i <span class="cf">in</span> 0L<span class="op">:</span>n){</span>
<span id="cb1-57">    pt &lt;-<span class="st"> </span>P <span class="op">+</span><span class="st"> </span>(i<span class="op">/</span>n)<span class="op">*</span>(Q<span class="op">-</span>P)</span>
<span id="cb1-58">    out[i<span class="op">+</span>1L, ] &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span><span class="op">/</span><span class="kw">c</span>(<span class="kw">crossprod</span>(pt))) <span class="op">*</span><span class="st"> </span>pt</span>
<span id="cb1-59">  }</span>
<span id="cb1-60">  out</span>
<span id="cb1-61">}</span>
<span id="cb1-62"></span>
<span id="cb1-63"><span class="co"># stereographic edge</span></span>
<span id="cb1-64">stereoEdge &lt;-<span class="st"> </span><span class="cf">function</span>(verts, v1, v2){</span>
<span id="cb1-65">  P &lt;-<span class="st"> </span>verts[v1[1L], v1[2L], ]</span>
<span id="cb1-66">  Q &lt;-<span class="st"> </span>verts[v2[1L], v2[2L], ]</span>
<span id="cb1-67">  PQ &lt;-<span class="st"> </span><span class="kw">sphericalSegment</span>(P, Q, 100L)</span>
<span id="cb1-68">  pq &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(PQ, 1L, stereog))</span>
<span id="cb1-69">  dists &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">apply</span>(pq, 1L, crossprod))</span>
<span id="cb1-70">  <span class="kw">cylinder3d</span>(pq, <span class="dt">radius =</span> dists<span class="op">/</span><span class="dv">15</span>, <span class="dt">sides =</span> <span class="dv">60</span>)</span>
<span id="cb1-71">}</span>
<span id="cb1-72"></span>
<span id="cb1-73"><span class="co"># projected vertices</span></span>
<span id="cb1-74">vs &lt;-<span class="st"> </span><span class="kw">apply</span>(vertices, <span class="kw">c</span>(1L,2L), stereog)</span>
<span id="cb1-75"></span>
<span id="cb1-76"><span class="co">####~~~~ plot ~~~~####</span></span>
<span id="cb1-77"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.9</span>)</span>
<span id="cb1-78"><span class="kw">bg3d</span>(<span class="kw">rgb</span>(<span class="dv">54</span>, <span class="dv">57</span>, <span class="dv">64</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>))</span>
<span id="cb1-79"><span class="co">## plot the edges</span></span>
<span id="cb1-80"><span class="cf">for</span>(k <span class="cf">in</span> 1L<span class="op">:</span>(2L<span class="op">*</span>A<span class="op">*</span>B)){</span>
<span id="cb1-81">  v1 &lt;-<span class="st"> </span>edges[, 1L, k]</span>
<span id="cb1-82">  v2 &lt;-<span class="st"> </span>edges[, 2L, k]</span>
<span id="cb1-83">  edge &lt;-<span class="st"> </span><span class="kw">stereoEdge</span>(vertices, v1, v2)</span>
<span id="cb1-84">  <span class="kw">shade3d</span>(edge, <span class="dt">color =</span> <span class="st">"gold"</span>)</span>
<span id="cb1-85">}</span>
<span id="cb1-86"><span class="co">## plot the vertices</span></span>
<span id="cb1-87"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>A){</span>
<span id="cb1-88">  <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>B){</span>
<span id="cb1-89">    v &lt;-<span class="st"> </span>vs[,i,j]</span>
<span id="cb1-90">    <span class="kw">spheres3d</span>(v, <span class="dt">radius =</span> <span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v)))<span class="op">/</span><span class="dv">10</span> , <span class="dt">color =</span> <span class="st">"gold2"</span>)</span>
<span id="cb1-91">  }</span>
<span id="cb1-92">}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DuoprismStereo_R.png"
        />
      </p>
      <h1 id="with-asymptote">With Asymptote</h1>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource cpp numberLines"
        ><code class="sourceCode cpp"><span id="cb2-1">settings.render = <span class="dv">4</span>;</span>
<span id="cb2-2">settings.outformat = <span class="st">"eps"</span>;</span>
<span id="cb2-3"><span class="kw">import</span> tube;</span>
<span id="cb2-4">size(<span class="dv">200</span>,<span class="dv">0</span>);</span>
<span id="cb2-5"></span>
<span id="cb2-6">currentprojection = orthographic(<span class="dv">4</span>,<span class="dv">4</span>,<span class="dv">4</span>);</span>
<span id="cb2-7">currentlight = light(gray(<span class="fl">0.85</span>), ambient=black, specularfactor=<span class="dv">3</span>,</span>
<span id="cb2-8">                     (<span class="dv">100</span>,<span class="dv">100</span>,<span class="dv">100</span>), specular=gray(<span class="fl">0.9</span>), viewport=<span class="kw">false</span>);</span>
<span id="cb2-9">currentlight.background = rgb(<span class="st">"363940ff"</span>);</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co">// files to be saved -----------------------------------------------------------</span></span>
<span id="cb2-12">string[] files = {</span>
<span id="cb2-13">    <span class="st">"DP000"</span>, <span class="st">"DP001"</span>, <span class="st">"DP002"</span>, <span class="st">"DP003"</span>, <span class="st">"DP004"</span>, <span class="st">"DP005"</span>,</span>
<span id="cb2-14">    <span class="st">"DP006"</span>, <span class="st">"DP007"</span>, <span class="st">"DP008"</span>, <span class="st">"DP009"</span>, <span class="st">"DP010"</span>, <span class="st">"DP011"</span>,</span>
<span id="cb2-15">    <span class="st">"DP012"</span>, <span class="st">"DP013"</span>, <span class="st">"DP014"</span>, <span class="st">"DP015"</span>, <span class="st">"DP016"</span>, <span class="st">"DP017"</span>,</span>
<span id="cb2-16">    <span class="st">"DP018"</span>, <span class="st">"DP019"</span>, <span class="st">"DP020"</span>, <span class="st">"DP021"</span>, <span class="st">"DP022"</span>, <span class="st">"DP023"</span>,</span>
<span id="cb2-17">    <span class="st">"DP024"</span>, <span class="st">"DP025"</span>, <span class="st">"DP026"</span>, <span class="st">"DP027"</span>, <span class="st">"DP028"</span>, <span class="st">"DP029"</span>,</span>
<span id="cb2-18">    <span class="st">"DP030"</span>, <span class="st">"DP031"</span>, <span class="st">"DP032"</span>, <span class="st">"DP033"</span>, <span class="st">"DP034"</span>, <span class="st">"DP035"</span>,</span>
<span id="cb2-19">    <span class="st">"DP036"</span>, <span class="st">"DP037"</span>, <span class="st">"DP038"</span>, <span class="st">"DP039"</span>, <span class="st">"DP040"</span>, <span class="st">"DP041"</span>,</span>
<span id="cb2-20">    <span class="st">"DP042"</span>, <span class="st">"DP043"</span>, <span class="st">"DP044"</span>, <span class="st">"DP045"</span>, <span class="st">"DP046"</span>, <span class="st">"DP047"</span>,</span>
<span id="cb2-21">    <span class="st">"DP048"</span>, <span class="st">"DP049"</span>, <span class="st">"DP050"</span>, <span class="st">"DP051"</span>, <span class="st">"DP052"</span>, <span class="st">"DP053"</span>,</span>
<span id="cb2-22">    <span class="st">"DP054"</span>, <span class="st">"DP055"</span>, <span class="st">"DP056"</span>, <span class="st">"DP057"</span>, <span class="st">"DP058"</span>, <span class="st">"DP059"</span>,</span>
<span id="cb2-23">    <span class="st">"DP060"</span>, <span class="st">"DP061"</span>, <span class="st">"DP062"</span>, <span class="st">"DP063"</span>, <span class="st">"DP064"</span>, <span class="st">"DP065"</span>,</span>
<span id="cb2-24">    <span class="st">"DP066"</span>, <span class="st">"DP067"</span>, <span class="st">"DP068"</span>, <span class="st">"DP069"</span>, <span class="st">"DP070"</span>, <span class="st">"DP071"</span>,</span>
<span id="cb2-25">    <span class="st">"DP072"</span>, <span class="st">"DP073"</span>, <span class="st">"DP074"</span>, <span class="st">"DP075"</span>, <span class="st">"DP076"</span>, <span class="st">"DP077"</span>,</span>
<span id="cb2-26">    <span class="st">"DP078"</span>, <span class="st">"DP079"</span>, <span class="st">"DP080"</span>, <span class="st">"DP081"</span>, <span class="st">"DP082"</span>, <span class="st">"DP083"</span>,</span>
<span id="cb2-27">    <span class="st">"DP084"</span>, <span class="st">"DP085"</span>, <span class="st">"DP086"</span>, <span class="st">"DP087"</span>, <span class="st">"DP088"</span>, <span class="st">"DP089"</span>,</span>
<span id="cb2-28">    <span class="st">"DP090"</span>, <span class="st">"DP091"</span>, <span class="st">"DP092"</span>, <span class="st">"DP093"</span>, <span class="st">"DP094"</span>, <span class="st">"DP095"</span>,</span>
<span id="cb2-29">    <span class="st">"DP096"</span>, <span class="st">"DP097"</span>, <span class="st">"DP098"</span>, <span class="st">"DP099"</span>, <span class="st">"DP100"</span>, <span class="st">"DP101"</span>,</span>
<span id="cb2-30">    <span class="st">"DP102"</span>, <span class="st">"DP103"</span>, <span class="st">"DP104"</span>, <span class="st">"DP105"</span>, <span class="st">"DP106"</span>, <span class="st">"DP107"</span>,</span>
<span id="cb2-31">    <span class="st">"DP108"</span>, <span class="st">"DP109"</span>, <span class="st">"DP110"</span>, <span class="st">"DP111"</span>, <span class="st">"DP112"</span>, <span class="st">"DP113"</span>,</span>
<span id="cb2-32">    <span class="st">"DP114"</span>, <span class="st">"DP115"</span>, <span class="st">"DP116"</span>, <span class="st">"DP117"</span>, <span class="st">"DP118"</span>, <span class="st">"DP119"</span>,</span>
<span id="cb2-33">    <span class="st">"DP120"</span>, <span class="st">"DP121"</span>, <span class="st">"DP122"</span>, <span class="st">"DP123"</span>, <span class="st">"DP124"</span>, <span class="st">"DP125"</span>,</span>
<span id="cb2-34">    <span class="st">"DP126"</span>, <span class="st">"DP127"</span>, <span class="st">"DP128"</span>, <span class="st">"DP129"</span>, <span class="st">"DP130"</span>, <span class="st">"DP131"</span>,</span>
<span id="cb2-35">    <span class="st">"DP132"</span>, <span class="st">"DP133"</span>, <span class="st">"DP134"</span>, <span class="st">"DP135"</span>, <span class="st">"DP136"</span>, <span class="st">"DP137"</span>,</span>
<span id="cb2-36">    <span class="st">"DP138"</span>, <span class="st">"DP139"</span>, <span class="st">"DP140"</span>, <span class="st">"DP141"</span>, <span class="st">"DP142"</span>, <span class="st">"DP143"</span>,</span>
<span id="cb2-37">    <span class="st">"DP144"</span>, <span class="st">"DP145"</span>, <span class="st">"DP146"</span>, <span class="st">"DP147"</span>, <span class="st">"DP148"</span>, <span class="st">"DP149"</span>,</span>
<span id="cb2-38">    <span class="st">"DP150"</span>, <span class="st">"DP151"</span>, <span class="st">"DP152"</span>, <span class="st">"DP153"</span>, <span class="st">"DP154"</span>, <span class="st">"DP155"</span>,</span>
<span id="cb2-39">    <span class="st">"DP156"</span>, <span class="st">"DP157"</span>, <span class="st">"DP158"</span>, <span class="st">"DP159"</span>, <span class="st">"DP160"</span>, <span class="st">"DP161"</span>,</span>
<span id="cb2-40">    <span class="st">"DP162"</span>, <span class="st">"DP163"</span>, <span class="st">"DP164"</span>, <span class="st">"DP165"</span>, <span class="st">"DP166"</span>, <span class="st">"DP167"</span>,</span>
<span id="cb2-41">    <span class="st">"DP168"</span>, <span class="st">"DP169"</span>, <span class="st">"DP170"</span>, <span class="st">"DP171"</span>, <span class="st">"DP172"</span>, <span class="st">"DP173"</span>,</span>
<span id="cb2-42">    <span class="st">"DP174"</span>, <span class="st">"DP175"</span>, <span class="st">"DP176"</span>, <span class="st">"DP177"</span>, <span class="st">"DP178"</span>, <span class="st">"DP179"</span>};</span>
<span id="cb2-43"></span>
<span id="cb2-44"><span class="co">// lexicographic order ---------------------------------------------------------</span></span>
<span id="cb2-45"><span class="dt">bool</span> dominates(<span class="dt">int</span>[] e1, <span class="dt">int</span>[] e2){</span>
<span id="cb2-46">    <span class="cf">return</span> e2[<span class="dv">0</span>]&gt;e1[<span class="dv">0</span>] || (e2[<span class="dv">0</span>]==e1[<span class="dv">0</span>] &amp;&amp; e2[<span class="dv">1</span>]&gt;e1[<span class="dv">1</span>]);</span>
<span id="cb2-47">}</span>
<span id="cb2-48"></span>
<span id="cb2-49"><span class="co">// vertices --------------------------------------------------------------------</span></span>
<span id="cb2-50"><span class="dt">int</span> A = <span class="dv">8</span>;</span>
<span id="cb2-51"><span class="dt">int</span> B = <span class="dv">4</span>;</span>
<span id="cb2-52"></span>
<span id="cb2-53"><span class="kw">struct</span> quadruple {</span>
<span id="cb2-54">    real x;</span>
<span id="cb2-55">    real y;</span>
<span id="cb2-56">    real z;</span>
<span id="cb2-57">    real t;</span>
<span id="cb2-58">}</span>
<span id="cb2-59"></span>
<span id="cb2-60">real[][] poly1 = <span class="kw">new</span> real[A][<span class="dv">2</span>];</span>
<span id="cb2-61"><span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; A; ++i){</span>
<span id="cb2-62">    poly1[i][<span class="dv">0</span>] = cos(i/A*<span class="dv">2</span><span class="er">pi</span>);</span>
<span id="cb2-63">    poly1[i][<span class="dv">1</span>] = sin(i/A*<span class="dv">2</span><span class="er">pi</span>);</span>
<span id="cb2-64">}</span>
<span id="cb2-65">real[][] poly2 = <span class="kw">new</span> real[B][<span class="dv">2</span>];</span>
<span id="cb2-66"><span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; B; ++i){</span>
<span id="cb2-67">    poly2[i][<span class="dv">0</span>] = cos(pi/B+i/B*<span class="dv">2</span><span class="er">pi</span>);</span>
<span id="cb2-68">    poly2[i][<span class="dv">1</span>] = sin(pi/B+i/B*<span class="dv">2</span><span class="er">pi</span>);</span>
<span id="cb2-69">}</span>
<span id="cb2-70">quadruple[][] vertices = <span class="kw">new</span> quadruple[A][B];</span>
<span id="cb2-71"><span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; A; ++i){</span>
<span id="cb2-72">    <span class="cf">for</span>(<span class="dt">int</span> j = <span class="dv">0</span>; j &lt; B; ++j){</span>
<span id="cb2-73">        quadruple v;</span>
<span id="cb2-74">        v.x = poly1[i][<span class="dv">0</span>]; v.y = poly1[i][<span class="dv">1</span>]; </span>
<span id="cb2-75">        v.z = poly2[j][<span class="dv">0</span>]; v.t = poly2[j][<span class="dv">1</span>];</span>
<span id="cb2-76">        vertices[i][j] = v;</span>
<span id="cb2-77">    }</span>
<span id="cb2-78">}</span>
<span id="cb2-79"></span>
<span id="cb2-80"><span class="co">// edges -----------------------------------------------------------------------</span></span>
<span id="cb2-81"><span class="dt">int</span>[][][] edges;</span>
<span id="cb2-82"><span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; A; ++i){</span>
<span id="cb2-83">    <span class="cf">for</span>(<span class="dt">int</span> j = <span class="dv">0</span>; j &lt; B; ++j){</span>
<span id="cb2-84">        <span class="dt">int</span>[] e = {i,j};</span>
<span id="cb2-85">        <span class="dt">int</span>[] candidate = {i,(j-<span class="dv">1</span>)%B};</span>
<span id="cb2-86">        <span class="cf">if</span>(dominates(e,candidate)){</span>
<span id="cb2-87">            <span class="dt">int</span>[][] edge = {e,candidate}; </span>
<span id="cb2-88">            edges.push(edge);</span>
<span id="cb2-89">        }</span>
<span id="cb2-90">        <span class="dt">int</span>[] candidate = {i,(j+<span class="dv">1</span>)%B};</span>
<span id="cb2-91">        <span class="cf">if</span>(dominates(e,candidate)){</span>
<span id="cb2-92">            <span class="dt">int</span>[][] edge = {e,candidate}; </span>
<span id="cb2-93">            edges.push(edge);</span>
<span id="cb2-94">        }</span>
<span id="cb2-95">        <span class="dt">int</span>[] candidate = {(i-<span class="dv">1</span>)%A,j};</span>
<span id="cb2-96">        <span class="cf">if</span>(dominates(e,candidate)){</span>
<span id="cb2-97">            <span class="dt">int</span>[][] edge = {e,candidate}; </span>
<span id="cb2-98">            edges.push(edge);</span>
<span id="cb2-99">        }</span>
<span id="cb2-100">        <span class="dt">int</span>[] candidate = {(i+<span class="dv">1</span>)%A,j};</span>
<span id="cb2-101">        <span class="cf">if</span>(dominates(e,candidate)){</span>
<span id="cb2-102">            <span class="dt">int</span>[][] edge = {e,candidate}; </span>
<span id="cb2-103">            edges.push(edge);</span>
<span id="cb2-104">        }</span>
<span id="cb2-105">    }</span>
<span id="cb2-106">}</span>
<span id="cb2-107"></span>
<span id="cb2-108"><span class="co">// rotation in 4D space (right-isoclinic) --------------------------------------</span></span>
<span id="cb2-109">quadruple rotate4d(real alpha, real beta, real xi, quadruple vec){</span>
<span id="cb2-110">    real a = cos(xi);</span>
<span id="cb2-111">    real b = sin(alpha)*cos(beta)*sin(xi);</span>
<span id="cb2-112">    real c = sin(alpha)*sin(beta)*sin(xi);</span>
<span id="cb2-113">    real d = cos(alpha)*sin(xi);</span>
<span id="cb2-114">    real p = vec.x;</span>
<span id="cb2-115">    real q = vec.y;</span>
<span id="cb2-116">    real r = vec.z;</span>
<span id="cb2-117">    real s = vec.t;</span>
<span id="cb2-118">    quadruple out;</span>
<span id="cb2-119">    out.x = a*p - b*q - c*r - d*s;</span>
<span id="cb2-120">    out.y = a*q + b*p + c*s - d*r;</span>
<span id="cb2-121">    out.z = a*r - b*s + c*p + d*q;</span>
<span id="cb2-122">    out.t = a*s + b*r - c*q + d*p;</span>
<span id="cb2-123">    <span class="cf">return</span> out;</span>
<span id="cb2-124">}</span>
<span id="cb2-125"></span>
<span id="cb2-126"><span class="co">// stereographic projection ----------------------------------------------------</span></span>
<span id="cb2-127">triple stereog(quadruple A, real r){</span>
<span id="cb2-128">    <span class="cf">return</span> (A.x, A.y, A.z) / (r - A.t);</span>
<span id="cb2-129">}</span>
<span id="cb2-130"></span>
<span id="cb2-131"><span class="co">// stereographic path ----------------------------------------------------------</span></span>
<span id="cb2-132">path3 stereoPath(quadruple A, quadruple B, real r, <span class="dt">int</span> n){</span>
<span id="cb2-133">    path3 out;</span>
<span id="cb2-134">    <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt;= n; ++i){</span>
<span id="cb2-135">        real t = i/n;</span>
<span id="cb2-136">        quadruple M;</span>
<span id="cb2-137">        real x = (<span class="dv">1</span>-t)*A.x + t*B.x;</span>
<span id="cb2-138">        real y = (<span class="dv">1</span>-t)*A.y + t*B.y;</span>
<span id="cb2-139">        real z = (<span class="dv">1</span>-t)*A.z + t*B.z;</span>
<span id="cb2-140">        real t = (<span class="dv">1</span>-t)*A.t + t*B.t;</span>
<span id="cb2-141">        real lg = sqrt(x*x + y*y + z*z + t*t) / r;</span>
<span id="cb2-142">        M.x = x / lg; M.y = y / lg; M.z = z / lg; M.t = t / lg;</span>
<span id="cb2-143">        out = out .. stereog(M, r);</span>
<span id="cb2-144">    }</span>
<span id="cb2-145">    <span class="cf">return</span> out;</span>
<span id="cb2-146">}</span>
<span id="cb2-147"></span>
<span id="cb2-148"><span class="co">// section transformation ------------------------------------------------------</span></span>
<span id="cb2-149">transform T(path3 p3, real t, <span class="dt">int</span> n){</span>
<span id="cb2-150">    triple M = relpoint(p3, t/(n/<span class="dv">4</span>));</span>
<span id="cb2-151">    <span class="cf">return</span> scale(length(M)/<span class="dv">15</span>); </span>
<span id="cb2-152">}</span>
<span id="cb2-153"></span>
<span id="cb2-154"><span class="co">// bounding box ----------------------------------------------------------------</span></span>
<span id="cb2-155">real f=<span class="dv">3</span>, h = <span class="fl">4.5</span>, g = <span class="fl">1.5</span>;</span>
<span id="cb2-156">path3 boundingbox = (-h,<span class="dv">0</span>,-f)--(-h,<span class="dv">0</span>,g)--(h,<span class="dv">0</span>,f)--(h,<span class="dv">0</span>,-g)--cycle;</span>
<span id="cb2-157"></span>
<span id="cb2-158"><span class="co">// draw the duoprism -----------------------------------------------------------</span></span>
<span id="cb2-159"><span class="dt">int</span> n = <span class="dv">100</span>;</span>
<span id="cb2-160">real r = sqrt(<span class="dv">2</span>);</span>
<span id="cb2-161">real alpha = pi/<span class="dv">2</span>, beta = <span class="dv">0</span>;</span>
<span id="cb2-162"></span>
<span id="cb2-163"><span class="cf">for</span>(<span class="dt">int</span> file = <span class="dv">0</span>; file &lt; <span class="dv">180</span>; ++file){</span>
<span id="cb2-164">    real xi = <span class="dv">2</span>*file*pi/<span class="dv">180</span>;</span>
<span id="cb2-165">    picture pic;</span>
<span id="cb2-166">    <span class="co">// draw bounding box</span></span>
<span id="cb2-167">    draw(pic, boundingbox, rgb(<span class="st">"363940ff"</span>)+opacity(<span class="dv">0</span>));</span>
<span id="cb2-168">    <span class="co">// draw edges</span></span>
<span id="cb2-169">    <span class="cf">for</span>(<span class="dt">int</span> k = <span class="dv">0</span>; k &lt; <span class="dv">2</span>*A*B; ++k){</span>
<span id="cb2-170">        quadruple A = vertices[edges[k][<span class="dv">0</span>][<span class="dv">0</span>]][edges[k][<span class="dv">0</span>][<span class="dv">1</span>]];</span>
<span id="cb2-171">        quadruple B = vertices[edges[k][<span class="dv">1</span>][<span class="dv">0</span>]][edges[k][<span class="dv">1</span>][<span class="dv">1</span>]];</span>
<span id="cb2-172">        path3 p3 = </span>
<span id="cb2-173">            stereoPath(rotate4d(alpha, beta, xi, A), </span>
<span id="cb2-174">                       rotate4d(alpha, beta, xi, B), r, n);</span>
<span id="cb2-175">        transform S(real t){</span>
<span id="cb2-176">            <span class="cf">return</span> T(p3, t, n);</span>
<span id="cb2-177">        }</span>
<span id="cb2-178">        draw(pic, tube(p3, unitcircle, S), rgb(<span class="dv">139</span>,<span class="dv">0</span>,<span class="dv">139</span>), </span>
<span id="cb2-179">                                render(compression=Low, merge=<span class="kw">true</span>));</span>
<span id="cb2-180">    }</span>
<span id="cb2-181">    <span class="co">// draw vertices</span></span>
<span id="cb2-182">    <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; A; ++i){</span>
<span id="cb2-183">        <span class="cf">for</span>(<span class="dt">int</span> j = <span class="dv">0</span>; j &lt; B; ++j){</span>
<span id="cb2-184">            triple Asg = </span>
<span id="cb2-185">                stereog(rotate4d(alpha, beta, xi, vertices[i][j]), r);</span>
<span id="cb2-186">            draw(pic, shift(Asg)*scale3(length(Asg)/<span class="dv">10</span>)*unitsphere, purple);</span>
<span id="cb2-187">        }</span>
<span id="cb2-188">    }</span>
<span id="cb2-189">    <span class="co">// add and save picture</span></span>
<span id="cb2-190">    add(pic);</span>
<span id="cb2-191">    shipout(files[file], bbox(rgb(<span class="st">"363940ff"</span>), FillDraw(rgb(<span class="st">"363940ff"</span>))));</span>
<span id="cb2-192">    erase();</span>
<span id="cb2-193">}</span>
<span id="cb2-194"></span>
<span id="cb2-195"><span class="co">/* to do the animation</span></span>
<span id="cb2-196"><span class="co">gs -dSAFER -dBATCH -dNOPAUSE -dEPSCrop -sDEVICE=png16m -r600 -sOutputFile=zpic%03d.png DP*.eps</span></span>
<span id="cb2-197"><span class="co">mogrify -resize 512x zpic*.png</span></span>
<span id="cb2-198"><span class="co">gifski --fps 12 zpic*.png -o DuoprismStereo.gif</span></span>
<span id="cb2-199"><span class="co">*/</span></span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DuoprismStereo_Asy.gif"
        />
      </p>
      <h1 id="with-pov-ray">With POV-Ray</h1>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource povray numberLines"
        ><code class="sourceCode povray"><span id="cb3-1"><span class="ot">#version</span> <span class="fl">3.7</span>;</span>
<span id="cb3-2"><span class="kw">global_settings</span> { <span class="kw">assumed_gamma</span> <span class="fl">1</span> }</span>
<span id="cb3-3"><span class="ot">#include</span> <span class="st">"colors.inc"</span></span>
<span id="cb3-4"><span class="ot">#include</span> <span class="st">"textures.inc"</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co">/* camera */</span></span>
<span id="cb3-7"><span class="kw">camera</span> {</span>
<span id="cb3-8">  <span class="kw">location</span> &lt;-<span class="fl">11</span>, <span class="fl">7</span>, <span class="fl">-32</span>&gt;</span>
<span id="cb3-9">  <span class="kw">look_at</span> <span class="fl">0</span></span>
<span id="cb3-10">  <span class="kw">angle</span> <span class="fl">45</span></span>
<span id="cb3-11">  <span class="kw">right</span> <span class="kw">x</span>*<span class="kw">image_width</span>/<span class="kw">image_height</span></span>
<span id="cb3-12">}</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co">// sun -------------------------------------------------------------------------</span></span>
<span id="cb3-15"><span class="kw">light_source</span> {&lt; <span class="fl">4000</span>,<span class="fl">6000</span>,-<span class="fl">6000</span>&gt; <span class="kw">color</span> <span class="kw">rgb</span>&lt;<span class="fl">1</span>,<span class="fl">1</span>,<span class="fl">1</span>&gt;*<span class="fl">0.9</span>}           <span class="co">// sun </span></span>
<span id="cb3-16"><span class="kw">light_source</span> {&lt;-<span class="fl">11</span>, <span class="fl">7</span>,-<span class="fl">32</span>&gt;  <span class="kw">color</span> <span class="kw">rgb</span>&lt;<span class="fl">0.9</span>,<span class="fl">0.9</span>,<span class="fl">1</span>&gt;*<span class="fl">0.1</span> <span class="kw">shadowless</span>} <span class="co">// flash</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co">// sky -------------------------------------------------------------------------</span></span>
<span id="cb3-19"><span class="kw">plane</span> {</span>
<span id="cb3-20">  &lt;<span class="fl">0</span>,<span class="fl">1</span>,<span class="fl">0</span>&gt;, <span class="fl">1</span> <span class="kw">hollow</span>  </span>
<span id="cb3-21">  <span class="kw">texture</span> {</span>
<span id="cb3-22">    <span class="kw">pigment</span> { </span>
<span id="cb3-23">      <span class="kw">bozo</span> <span class="kw">turbulence</span> <span class="fl">1.3</span></span>
<span id="cb3-24">      <span class="kw">color_map</span> {</span>
<span id="cb3-25">        [<span class="fl">0.00</span> <span class="kw">rgb</span> &lt;<span class="fl">0.24</span>, <span class="fl">0.32</span>, <span class="fl">1.0</span>&gt;*<span class="fl">0.6</span>]</span>
<span id="cb3-26">        [<span class="fl">0.75</span> <span class="kw">rgb</span> &lt;<span class="fl">0.24</span>, <span class="fl">0.32</span>, <span class="fl">1.0</span>&gt;*<span class="fl">0.6</span>]</span>
<span id="cb3-27">        [<span class="fl">0.83</span> <span class="kw">rgb</span> &lt;<span class="fl">1</span>,<span class="fl">1</span>,<span class="fl">1</span>&gt;]</span>
<span id="cb3-28">        [<span class="fl">0.95</span> <span class="kw">rgb</span> &lt;<span class="fl">0.25</span>,<span class="fl">0.25</span>,<span class="fl">0.25</span>&gt;]</span>
<span id="cb3-29">        [<span class="fl">1.0</span> <span class="kw">rgb</span> &lt;<span class="fl">0.5</span>,<span class="fl">0.5</span>,<span class="fl">0.5</span>&gt;]</span>
<span id="cb3-30">      }</span>
<span id="cb3-31">      <span class="kw">scale</span>&lt;<span class="fl">1</span>,<span class="fl">1</span>,<span class="fl">1</span>&gt;*<span class="fl">2.5</span>  <span class="kw">translate</span>&lt; <span class="fl">0</span>,<span class="fl">0</span>,<span class="fl">3</span>&gt;</span>
<span id="cb3-32">    }</span>
<span id="cb3-33">    <span class="kw">finish</span> {</span>
<span id="cb3-34">      <span class="kw">ambient</span> <span class="fl">1</span> </span>
<span id="cb3-35">      <span class="kw">diffuse</span> <span class="fl">0</span></span>
<span id="cb3-36">    } </span>
<span id="cb3-37">  }      </span>
<span id="cb3-38">  <span class="kw">scale</span> <span class="fl">10000</span></span>
<span id="cb3-39">}</span>
<span id="cb3-40"></span>
<span id="cb3-41"><span class="co">// fog on the ground -----------------------------------------------------------</span></span>
<span id="cb3-42"><span class="kw">fog</span> {</span>
<span id="cb3-43">  <span class="kw">fog_type</span>   <span class="fl">2</span></span>
<span id="cb3-44">  <span class="kw">distance</span>   <span class="fl">50</span></span>
<span id="cb3-45">  <span class="kw">color</span>      Gray10  </span>
<span id="cb3-46">  <span class="kw">fog_offset</span> <span class="fl">0.1</span></span>
<span id="cb3-47">  <span class="kw">fog_alt</span>    <span class="fl">1.5</span></span>
<span id="cb3-48">  <span class="kw">turbulence</span> <span class="fl">1.8</span></span>
<span id="cb3-49">}</span>
<span id="cb3-50"></span>
<span id="cb3-51"><span class="co">// ground ----------------------------------------------------------------------</span></span>
<span id="cb3-52"><span class="kw">plane</span> {</span>
<span id="cb3-53">  &lt;<span class="fl">0</span>,<span class="fl">1</span>,<span class="fl">0</span>&gt;, <span class="fl">0</span> </span>
<span id="cb3-54">  <span class="kw">texture</span> {</span>
<span id="cb3-55">    <span class="kw">pigment</span> { <span class="kw">color</span> <span class="kw">rgb</span> &lt;<span class="fl">0.95</span>,<span class="fl">0.9</span>,<span class="fl">0.73</span>&gt;*<span class="fl">0.35</span> }</span>
<span id="cb3-56">    <span class="kw">normal</span> { <span class="kw">bumps</span> <span class="fl">2</span> <span class="kw">scale</span> &lt;<span class="fl">0.25</span>,<span class="fl">0.25</span>,<span class="fl">0.25</span>&gt;*<span class="fl">0.5</span> <span class="kw">turbulence</span> <span class="fl">0.5</span> } </span>
<span id="cb3-57">    <span class="kw">finish</span> { <span class="kw">phong</span> <span class="fl">0.1</span> }</span>
<span id="cb3-58">  } </span>
<span id="cb3-59">} </span>
<span id="cb3-60"></span>
<span id="cb3-61"></span>
<span id="cb3-62"><span class="co">/* ----- vertices ----- */</span></span>
<span id="cb3-63"><span class="kw">#declare A </span>= <span class="fl">4</span>;</span>
<span id="cb3-64"><span class="kw">#declare B </span>= <span class="fl">30</span>;</span>
<span id="cb3-65"></span>
<span id="cb3-66"><span class="kw">#declare poly1 </span>= <span class="kw">array</span>[A];</span>
<span id="cb3-67">#for(i,<span class="fl">0</span>,A<span class="fl">-1</span>)</span>
<span id="cb3-68">  <span class="kw">#declare poly1</span>[i] = <span class="kw">array</span>[<span class="fl">2</span>] {<span class="kw">cos</span>(i/A*<span class="fl">2</span>*<span class="fl">pi</span>), <span class="kw">sin</span>(i/A*<span class="fl">2</span>*<span class="fl">pi</span>)};</span>
<span id="cb3-69"><span class="ot">#end</span></span>
<span id="cb3-70"><span class="kw">#declare poly2 </span>= <span class="kw">array</span>[B];</span>
<span id="cb3-71">#for(i,<span class="fl">0</span>,B<span class="fl">-1</span>)</span>
<span id="cb3-72">  <span class="kw">#declare poly2</span>[i] = <span class="kw">array</span>[<span class="fl">2</span>] {<span class="kw">cos</span>(i/B*<span class="fl">2</span>*<span class="fl">pi</span>), <span class="kw">sin</span>(i/B*<span class="fl">2</span>*<span class="fl">pi</span>)};</span>
<span id="cb3-73"><span class="ot">#end</span></span>
<span id="cb3-74"><span class="kw">#declare vertices </span>= <span class="kw">array</span>[A][B];</span>
<span id="cb3-75">#for(i,<span class="fl">0</span>,A<span class="fl">-1</span>)</span>
<span id="cb3-76">  #for(j,<span class="fl">0</span>,B<span class="fl">-1</span>)</span>
<span id="cb3-77">    <span class="kw">#declare vertices</span>[i][j] = </span>
<span id="cb3-78">      &lt; poly1[i][<span class="fl">0</span>], poly1[i][<span class="fl">1</span>], poly2[j][<span class="fl">0</span>], poly2[j][<span class="fl">1</span>] &gt;;</span>
<span id="cb3-79">  <span class="ot">#end</span></span>
<span id="cb3-80"><span class="ot">#end</span></span>
<span id="cb3-81"></span>
<span id="cb3-82"><span class="co">/* ----- edges ----- */</span></span>
<span id="cb3-83"><span class="kw">#macro dominates</span>(e1,e2)</span>
<span id="cb3-84">  (e2[<span class="fl">0</span>]&gt;e1[<span class="fl">0</span>]) | ((e2[<span class="fl">0</span>]=e1[<span class="fl">0</span>]) &amp; (e2[<span class="fl">1</span>]&gt;e1[<span class="fl">1</span>]))</span>
<span id="cb3-85"><span class="ot">#end</span></span>
<span id="cb3-86"><span class="kw">#declare nedges </span>= <span class="fl">2</span>*A*B;</span>
<span id="cb3-87"><span class="kw">#declare edges </span>= <span class="kw">array</span>[nedges];</span>
<span id="cb3-88"><span class="kw">#declare k</span>=<span class="fl">0</span>;</span>
<span id="cb3-89">#for(i,<span class="fl">0</span>,A<span class="fl">-1</span>)</span>
<span id="cb3-90">  #for(j,<span class="fl">0</span>,B<span class="fl">-1</span>)</span>
<span id="cb3-91">    <span class="kw">#local e </span>= <span class="kw">array</span>[<span class="fl">2</span>] {i,j};</span>
<span id="cb3-92">    <span class="kw">#local candidate </span>= <span class="kw">array</span>[<span class="fl">2</span>] {i,<span class="kw">mod</span>(<span class="kw">mod</span>(j<span class="fl">-1</span>,B)+B,B)};</span>
<span id="cb3-93">    <span class="ot">#if</span>(dominates(e,candidate))</span>
<span id="cb3-94">      <span class="kw">#local edge </span>= <span class="kw">array</span>[<span class="fl">2</span>] {e,candidate};</span>
<span id="cb3-95">      <span class="kw">#declare edges</span>[k] = edge;</span>
<span id="cb3-96">      <span class="kw">#declare k </span>= k+<span class="fl">1</span>;</span>
<span id="cb3-97">    <span class="ot">#end</span></span>
<span id="cb3-98">    <span class="kw">#local candidate </span>= <span class="kw">array</span>[<span class="fl">2</span>] {i,<span class="kw">mod</span>(<span class="kw">mod</span>(j+<span class="fl">1</span>,B)+B,B)};</span>
<span id="cb3-99">    <span class="ot">#if</span>(dominates(e,candidate))</span>
<span id="cb3-100">      <span class="kw">#local edge </span>= <span class="kw">array</span>[<span class="fl">2</span>] {e,candidate};</span>
<span id="cb3-101">      <span class="kw">#declare edges</span>[k] = edge;</span>
<span id="cb3-102">      <span class="kw">#declare k </span>= k+<span class="fl">1</span>;</span>
<span id="cb3-103">    <span class="ot">#end</span></span>
<span id="cb3-104">    <span class="kw">#local candidate </span>= <span class="kw">array</span>[<span class="fl">2</span>] {<span class="kw">mod</span>(<span class="kw">mod</span>(i<span class="fl">-1</span>,A)+A,A),j};</span>
<span id="cb3-105">    <span class="ot">#if</span>(dominates(e,candidate))</span>
<span id="cb3-106">      <span class="kw">#local edge </span>= <span class="kw">array</span>[<span class="fl">2</span>] {e,candidate};</span>
<span id="cb3-107">      <span class="kw">#declare edges</span>[k] = edge;</span>
<span id="cb3-108">      <span class="kw">#declare k </span>= k+<span class="fl">1</span>;</span>
<span id="cb3-109">    <span class="ot">#end</span></span>
<span id="cb3-110">    <span class="kw">#local candidate </span>= <span class="kw">array</span>[<span class="fl">2</span>] {<span class="kw">mod</span>(<span class="kw">mod</span>(i+<span class="fl">1</span>,A)+A,A),j};</span>
<span id="cb3-111">    <span class="ot">#if</span>(dominates(e,candidate))</span>
<span id="cb3-112">      <span class="kw">#local edge </span>= <span class="kw">array</span>[<span class="fl">2</span>] {e,candidate};</span>
<span id="cb3-113">      <span class="kw">#declare edges</span>[k] = edge;</span>
<span id="cb3-114">      <span class="kw">#declare k </span>= k+<span class="fl">1</span>;</span>
<span id="cb3-115">    <span class="ot">#end</span></span>
<span id="cb3-116">  <span class="ot">#end</span></span>
<span id="cb3-117"><span class="ot">#end</span></span>
<span id="cb3-118"></span>
<span id="cb3-119"><span class="co">/* rotation in 4D space */</span></span>
<span id="cb3-120"><span class="kw">#macro rotate4d</span>(theta,phi,xi,vec)</span>
<span id="cb3-121">  <span class="kw">#local a </span>= <span class="kw">cos</span>(xi);</span>
<span id="cb3-122">  <span class="kw">#local b </span>= <span class="kw">sin</span>(theta)*<span class="kw">cos</span>(phi)*<span class="kw">sin</span>(xi);</span>
<span id="cb3-123">  <span class="kw">#local c </span>= <span class="kw">sin</span>(theta)*<span class="kw">sin</span>(phi)*<span class="kw">sin</span>(xi);</span>
<span id="cb3-124">  <span class="kw">#local d </span>= <span class="kw">cos</span>(theta)*<span class="kw">sin</span>(xi);</span>
<span id="cb3-125">  <span class="kw">#local p </span>= vec.<span class="kw">x</span>;</span>
<span id="cb3-126">  <span class="kw">#local q </span>= vec.<span class="kw">y</span>;</span>
<span id="cb3-127">  <span class="kw">#local r </span>= vec.<span class="kw">z</span>;</span>
<span id="cb3-128">  <span class="kw">#local s </span>= vec.<span class="kw">t</span>;</span>
<span id="cb3-129">  &lt; a*p - b*q - c*r - d*s</span>
<span id="cb3-130">  , a*q + b*p + c*s - d*r</span>
<span id="cb3-131">  , a*r - b*s + c*p + d*q</span>
<span id="cb3-132">  , a*s + b*r - c*q + d*p &gt;</span>
<span id="cb3-133"><span class="ot">#end</span></span>
<span id="cb3-134"></span>
<span id="cb3-135"><span class="co">/* stereographic projection */</span></span>
<span id="cb3-136"><span class="kw">#macro StereographicProjection</span>(q)</span>
<span id="cb3-137">  &lt;q.<span class="kw">x</span>,q.<span class="kw">y</span>,q.<span class="kw">z</span>&gt; / (<span class="kw">sqrt</span>(<span class="fl">2</span>)-q.<span class="kw">t</span>)</span>
<span id="cb3-138"><span class="ot">#end</span></span>
<span id="cb3-139"></span>
<span id="cb3-140"><span class="co">/* rotated and projected vertices */</span></span>
<span id="cb3-141"><span class="kw">#macro ProjectedVertices</span>(theta,phi,xi)</span>
<span id="cb3-142">  <span class="kw">#local out </span>= <span class="kw">array</span>[A][B];</span>
<span id="cb3-143">  #for(i,<span class="fl">0</span>,A<span class="fl">-1</span>)</span>
<span id="cb3-144">    #for(j,<span class="fl">0</span>,B<span class="fl">-1</span>)</span>
<span id="cb3-145">      <span class="kw">#local out</span>[i][j] = StereographicProjection(</span>
<span id="cb3-146">                            rotate4d(theta,phi,xi,vertices[i][j])</span>
<span id="cb3-147">                          );</span>
<span id="cb3-148">    <span class="ot">#end</span></span>
<span id="cb3-149">  <span class="ot">#end</span></span>
<span id="cb3-150">  out</span>
<span id="cb3-151"><span class="ot">#end</span></span>
<span id="cb3-152"></span>
<span id="cb3-153"><span class="co">/* macro spherical segment */</span></span>
<span id="cb3-154"><span class="kw">#macro vlength4</span>(P)</span>
<span id="cb3-155">  <span class="kw">sqrt</span>(P.<span class="kw">x</span>*P.<span class="kw">x</span> + P.<span class="kw">y</span>*P.<span class="kw">y</span> + P.<span class="kw">z</span>*P.<span class="kw">z</span> + P.<span class="kw">t</span>*P.<span class="kw">t</span>)</span>
<span id="cb3-156"><span class="ot">#end</span></span>
<span id="cb3-157"></span>
<span id="cb3-158"><span class="kw">#macro sphericalSegment</span>(P, Q, n)</span>
<span id="cb3-159">  <span class="kw">#local out </span>= <span class="kw">array</span>[n+<span class="fl">1</span>];</span>
<span id="cb3-160">  #for(i, <span class="fl">0</span>, n)</span>
<span id="cb3-161">    <span class="kw">#local pt </span>= P + (i/n)*(Q-P);</span>
<span id="cb3-162">    <span class="kw">#local out</span>[i] = <span class="kw">sqrt</span>(<span class="fl">2</span>)/vlength4(pt) * pt;</span>
<span id="cb3-163">  <span class="ot">#end</span></span>
<span id="cb3-164">  out</span>
<span id="cb3-165"><span class="ot">#end</span></span>
<span id="cb3-166"></span>
<span id="cb3-167"><span class="co">/* macro to draw an edge */</span></span>
<span id="cb3-168"><span class="kw">#macro Edge</span>(verts, v1, v2, theta, phi, xi, Tex)</span>
<span id="cb3-169">  <span class="kw">#local P </span>= verts[v1[<span class="fl">0</span>]][v1[<span class="fl">1</span>]];</span>
<span id="cb3-170">  <span class="kw">#local Q </span>= verts[v2[<span class="fl">0</span>]][v2[<span class="fl">1</span>]];</span>
<span id="cb3-171">  <span class="kw">#local PQ </span>= sphericalSegment(P, Q, <span class="fl">100</span>);</span>
<span id="cb3-172">  <span class="kw">sphere_sweep</span> {</span>
<span id="cb3-173">    <span class="kw">b_spline</span> <span class="fl">101</span></span>
<span id="cb3-174">    #for(k,<span class="fl">0</span>,<span class="fl">100</span>)</span>
<span id="cb3-175">      <span class="kw">#local O </span>= </span>
<span id="cb3-176">        StereographicProjection(rotate4d(theta,phi,xi,PQ[k]));</span>
<span id="cb3-177">      O <span class="kw">vlength</span>(O)/<span class="fl">15</span></span>
<span id="cb3-178">    <span class="ot">#end</span></span>
<span id="cb3-179">    <span class="kw">texture</span> { Tex }</span>
<span id="cb3-180">  }</span>
<span id="cb3-181"><span class="ot">#end</span></span>
<span id="cb3-182"></span>
<span id="cb3-183"><span class="co">/*-----------------------------------------*/</span></span>
<span id="cb3-184"><span class="co">/*-----      draw the duoprism       ------*/</span></span>
<span id="cb3-185"><span class="co">/*-----------------------------------------*/</span></span>
<span id="cb3-186"><span class="kw">#declare theta </span>= <span class="fl">pi</span>/<span class="fl">2</span>;</span>
<span id="cb3-187"><span class="kw">#declare phi </span>= <span class="fl">0</span>;</span>
<span id="cb3-188"><span class="kw">#declare xi </span>= <span class="fl">2</span>*<span class="kw">frame_number</span>*<span class="fl">pi</span>/<span class="fl">180</span>; </span>
<span id="cb3-189"></span>
<span id="cb3-190"><span class="kw">#declare vs </span>= ProjectedVertices(theta, phi, xi);</span>
<span id="cb3-191"></span>
<span id="cb3-192"><span class="kw">#declare edgeTexture </span>= <span class="kw">texture</span> {</span>
<span id="cb3-193">  <span class="kw">pigment</span> { <span class="kw">color</span> Red }</span>
<span id="cb3-194">  <span class="kw">finish</span> {</span>
<span id="cb3-195">    <span class="kw">ambient</span> <span class="fl">.1</span></span>
<span id="cb3-196">    <span class="kw">diffuse</span> <span class="fl">.9</span></span>
<span id="cb3-197">    <span class="kw">reflection</span> <span class="fl">0</span></span>
<span id="cb3-198">    <span class="kw">specular</span> <span class="fl">1</span></span>
<span id="cb3-199">    <span class="kw">metallic</span></span>
<span id="cb3-200">  }</span>
<span id="cb3-201">};</span>
<span id="cb3-202"></span>
<span id="cb3-203"><span class="kw">object</span> {</span>
<span id="cb3-204">  <span class="kw">union</span> {</span>
<span id="cb3-205">    <span class="co">/* draw edges */</span></span>
<span id="cb3-206">    #for(i, <span class="fl">0</span>, <span class="fl">2</span>*A*B<span class="fl">-1</span>)</span>
<span id="cb3-207">      Edge(vertices, edges[i][<span class="fl">0</span>], edges[i][<span class="fl">1</span>], </span>
<span id="cb3-208">                    theta, phi, xi, edgeTexture)</span>
<span id="cb3-209">    <span class="ot">#end</span></span>
<span id="cb3-210">    <span class="co">/* draw vertices */</span></span>
<span id="cb3-211">    #for(i,<span class="fl">0</span>,A<span class="fl">-1</span>)</span>
<span id="cb3-212">      #for(j,<span class="fl">0</span>,B<span class="fl">-1</span>)</span>
<span id="cb3-213">        <span class="kw">sphere</span> {</span>
<span id="cb3-214">          vs[i][j], <span class="kw">vlength</span>(vs[i][j])/<span class="fl">10</span></span>
<span id="cb3-215">          <span class="kw">texture</span> { edgeTexture }</span>
<span id="cb3-216">        }</span>
<span id="cb3-217">      <span class="ot">#end</span></span>
<span id="cb3-218">    <span class="ot">#end</span>  </span>
<span id="cb3-219">  }</span>
<span id="cb3-220">  <span class="kw">translate</span> &lt;-<span class="fl">3</span>, <span class="fl">6</span>, <span class="fl">-15</span>&gt;</span>
<span id="cb3-221">  <span class="kw">scale</span> <span class="fl">0.8</span></span>
<span id="cb3-222">}</span>
<span id="cb3-223"></span>
<span id="cb3-224"><span class="co">/* ini file </span></span>
<span id="cb3-225"><span class="co">Width = 512</span></span>
<span id="cb3-226"><span class="co">Height = 512</span></span>
<span id="cb3-227"><span class="co">Antialias = On</span></span>
<span id="cb3-228"><span class="co">Antialias_Threshold = 0.3</span></span>
<span id="cb3-229"><span class="co">Input_File_Name = DuoprismStereographic.pov</span></span>
<span id="cb3-230"><span class="co">Initial_Clock = 0</span></span>
<span id="cb3-231"><span class="co">Final_Clock = 1</span></span>
<span id="cb3-232"><span class="co">Initial_Frame = 0</span></span>
<span id="cb3-233"><span class="co">Final_Frame = 179</span></span>
<span id="cb3-234"><span class="co">Subset_Start_Frame = 0</span></span>
<span id="cb3-235"><span class="co">Cyclic_Animation = on</span></span>
<span id="cb3-236"><span class="co">*/</span></span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DuoprismStereo_POVRAY.gif"
        />
      </p>
      <p><br /></p>
      <p>
        Here is another one. This is a hexagonal duoprism with a cell colored in
        red.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode povray"
        ><code class="sourceCode povray"><span id="cb4-1"><span class="ot">#version</span> <span class="fl">3.7</span>;</span>
<span id="cb4-2"><span class="kw">global_settings</span> { <span class="kw">assumed_gamma</span> <span class="fl">1</span> } </span>
<span id="cb4-3"><span class="ot">#include</span> <span class="st">"colors.inc"</span></span>
<span id="cb4-4"><span class="ot">#include</span> <span class="st">"textures.inc"</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co">// camera ----------------------------------------------------------------------</span></span>
<span id="cb4-7"><span class="kw">camera</span> {</span>
<span id="cb4-8">  <span class="kw">location</span> &lt;<span class="fl">0</span>, <span class="fl">0</span>,-<span class="fl">10</span>&gt;</span>
<span id="cb4-9">  <span class="kw">look_at</span> <span class="fl">0</span></span>
<span id="cb4-10">  <span class="kw">angle</span> <span class="fl">45</span></span>
<span id="cb4-11">  <span class="kw">right</span> <span class="kw">x</span>*<span class="kw">image_width</span>/<span class="kw">image_height</span></span>
<span id="cb4-12">}</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co">// light sources ---------------------------------------------------------------</span></span>
<span id="cb4-15"><span class="kw">light_source</span> { &lt;<span class="fl">0</span>,<span class="fl">0</span>,-<span class="fl">100</span>&gt; White <span class="kw">shadowless</span> } </span>
<span id="cb4-16"><span class="kw">light_source</span> { &lt;<span class="fl">100</span>,<span class="fl">0</span>,-<span class="fl">100</span>&gt; White <span class="kw">shadowless</span> } </span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="co">// moon ------------------------------------------------------------------------</span></span>
<span id="cb4-19"><span class="kw">light_source</span> { </span>
<span id="cb4-20">  &lt;-<span class="fl">1000</span>, <span class="fl">800</span>, <span class="fl">3000</span>&gt; </span>
<span id="cb4-21">  <span class="kw">color</span> White</span>
<span id="cb4-22">  <span class="kw">shadowless</span></span>
<span id="cb4-23">  <span class="kw">looks_like</span> { </span>
<span id="cb4-24">    <span class="kw">sphere</span> { </span>
<span id="cb4-25">      &lt;<span class="fl">0</span>,<span class="fl">0</span>,<span class="fl">0</span>&gt;, <span class="fl">300</span> </span>
<span id="cb4-26">      <span class="kw">texture</span> { </span>
<span id="cb4-27">        <span class="kw">pigment</span> { </span>
<span id="cb4-28">          <span class="kw">color</span> Yellow</span>
<span id="cb4-29">        }</span>
<span id="cb4-30">        <span class="kw">normal</span> { </span>
<span id="cb4-31">          <span class="kw">bumps</span> <span class="fl">0.5</span></span>
<span id="cb4-32">          <span class="kw">scale</span> <span class="fl">50</span></span>
<span id="cb4-33">        }</span>
<span id="cb4-34">        <span class="kw">finish</span> { </span>
<span id="cb4-35">          <span class="kw">emission</span> <span class="fl">0.8</span>   </span>
<span id="cb4-36">          <span class="kw">diffuse</span> <span class="fl">0.2</span></span>
<span id="cb4-37">          <span class="kw">phong</span> <span class="fl">1</span></span>
<span id="cb4-38">        }                                        </span>
<span id="cb4-39">      } </span>
<span id="cb4-40">    } </span>
<span id="cb4-41">  } </span>
<span id="cb4-42">} </span>
<span id="cb4-43"></span>
<span id="cb4-44"><span class="co">// sky -------------------------------------------------------------------------</span></span>
<span id="cb4-45"><span class="kw">plane</span> { </span>
<span id="cb4-46">  &lt;<span class="fl">0</span>,<span class="fl">1</span>,<span class="fl">0</span>&gt;, <span class="fl">1</span> <span class="kw">hollow</span>  </span>
<span id="cb4-47">  <span class="kw">texture</span> { </span>
<span id="cb4-48">    <span class="kw">pigment</span> { </span>
<span id="cb4-49">      <span class="kw">color</span> <span class="kw">rgb</span> &lt;<span class="fl">0.01</span>, <span class="fl">0.01</span>, <span class="fl">0.2</span>&gt; </span>
<span id="cb4-50">    }</span>
<span id="cb4-51">    <span class="kw">finish</span> { </span>
<span id="cb4-52">      <span class="kw">emission</span> <span class="fl">0.5</span> </span>
<span id="cb4-53">      <span class="kw">diffuse</span> <span class="fl">0.5</span> </span>
<span id="cb4-54">    } </span>
<span id="cb4-55">  }  </span>
<span id="cb4-56">  <span class="kw">scale</span> <span class="fl">10000</span></span>
<span id="cb4-57">}</span>
<span id="cb4-58"></span>
<span id="cb4-59"><span class="co">// the clouds ------------------------------------------------------------------</span></span>
<span id="cb4-60"><span class="kw">plane</span> { </span>
<span id="cb4-61">  &lt;<span class="fl">0</span>,<span class="fl">1</span>,<span class="fl">0</span>&gt;,<span class="fl">1</span> <span class="kw">hollow</span>  </span>
<span id="cb4-62">  <span class="kw">texture</span> { </span>
<span id="cb4-63">    <span class="kw">pigment</span> { </span>
<span id="cb4-64">      <span class="kw">bozo</span> <span class="kw">turbulence</span> <span class="fl">1.3</span></span>
<span id="cb4-65">      <span class="kw">color_map</span> { </span>
<span id="cb4-66">        [<span class="fl">0.00</span> <span class="kw">rgb</span> &lt;<span class="fl">0.24</span>, <span class="fl">0.32</span>, <span class="fl">1.0</span>&gt;*<span class="fl">0.6</span>]</span>
<span id="cb4-67">        [<span class="fl">0.75</span> <span class="kw">rgb</span> &lt;<span class="fl">0.24</span>, <span class="fl">0.32</span>, <span class="fl">1.0</span>&gt;*<span class="fl">0.6</span>]</span>
<span id="cb4-68">        [<span class="fl">0.83</span> <span class="kw">rgb</span> &lt;<span class="fl">1</span>,<span class="fl">1</span>,<span class="fl">1</span>&gt;              ]</span>
<span id="cb4-69">        [<span class="fl">0.95</span> <span class="kw">rgb</span> &lt;<span class="fl">0.25</span>,<span class="fl">0.25</span>,<span class="fl">0.25</span>&gt;     ]</span>
<span id="cb4-70">        [<span class="fl">1.00</span> <span class="kw">rgb</span> &lt;<span class="fl">0.5</span>,<span class="fl">0.5</span>,<span class="fl">0.5</span>&gt;        ]</span>
<span id="cb4-71">      }</span>
<span id="cb4-72">      <span class="kw">scale</span> <span class="fl">2.5</span></span>
<span id="cb4-73">      <span class="kw">translate</span> &lt;<span class="fl">0</span>,<span class="fl">1</span>,<span class="fl">0</span>&gt;</span>
<span id="cb4-74">    }</span>
<span id="cb4-75">    <span class="kw">finish</span> { </span>
<span id="cb4-76">      <span class="kw">emission</span> <span class="fl">0.25</span> </span>
<span id="cb4-77">      <span class="kw">diffuse</span> <span class="fl">0</span></span>
<span id="cb4-78">    } </span>
<span id="cb4-79">  }      </span>
<span id="cb4-80">  <span class="kw">scale</span> <span class="fl">5000</span></span>
<span id="cb4-81">}</span>
<span id="cb4-82"></span>
<span id="cb4-83"><span class="co">// fog on the ground -----------------------------------------------------------</span></span>
<span id="cb4-84"><span class="kw">fog</span> { </span>
<span id="cb4-85">  <span class="kw">fog_type</span>   <span class="fl">2</span></span>
<span id="cb4-86">  <span class="kw">distance</span>   <span class="fl">50</span></span>
<span id="cb4-87">  <span class="kw">color</span>      Gray50  </span>
<span id="cb4-88">  <span class="kw">fog_offset</span> <span class="fl">0.1</span></span>
<span id="cb4-89">  <span class="kw">fog_alt</span>    <span class="fl">1.5</span></span>
<span id="cb4-90">  <span class="kw">turbulence</span> <span class="fl">1.8</span></span>
<span id="cb4-91">}</span>
<span id="cb4-92"></span>
<span id="cb4-93"><span class="co">// sea -------------------------------------------------------------------------</span></span>
<span id="cb4-94"><span class="kw">plane</span> { </span>
<span id="cb4-95">  &lt;<span class="fl">0</span>,<span class="fl">1</span>,<span class="fl">0</span>&gt;, <span class="fl">-1</span> <span class="kw">hollow</span></span>
<span id="cb4-96">  <span class="kw">texture</span>{</span>
<span id="cb4-97">    <span class="kw">pigment</span>{</span>
<span id="cb4-98">      <span class="kw">rgb</span> &lt;.<span class="fl">098</span>,.<span class="fl">098</span>,.<span class="fl">439</span>&gt;</span>
<span id="cb4-99">    }</span>
<span id="cb4-100">    <span class="kw">finish</span> {</span>
<span id="cb4-101">      <span class="kw">ambient</span> <span class="fl">0.15</span></span>
<span id="cb4-102">      <span class="kw">diffuse</span> <span class="fl">0.55</span></span>
<span id="cb4-103">      <span class="kw">brilliance</span> <span class="fl">6.0</span></span>
<span id="cb4-104">      <span class="kw">phong</span> <span class="fl">0.8</span></span>
<span id="cb4-105">      <span class="kw">phong_size</span> <span class="fl">120</span></span>
<span id="cb4-106">      <span class="kw">reflection</span> <span class="fl">0.2</span></span>
<span id="cb4-107">    }</span>
<span id="cb4-108">    <span class="kw">normal</span> { </span>
<span id="cb4-109">      <span class="kw">bumps</span> <span class="fl">0.95</span></span>
<span id="cb4-110">      <span class="kw">turbulence</span> <span class="fl">.05</span> </span>
<span id="cb4-111">      <span class="kw">scale</span> &lt;<span class="fl">1</span>,<span class="fl">0.25</span>,<span class="fl">1</span>&gt; </span>
<span id="cb4-112">    }</span>
<span id="cb4-113">  }</span>
<span id="cb4-114">}</span>
<span id="cb4-115"></span>
<span id="cb4-116"><span class="co">// vertices --------------------------------------------------------------------</span></span>
<span id="cb4-117"><span class="kw">#declare a </span>= <span class="kw">sqrt</span>(<span class="fl">3</span>) / <span class="fl">2</span>;</span>
<span id="cb4-118"><span class="kw">#declare vertices </span>= <span class="kw">array</span>[<span class="fl">36</span>]</span>
<span id="cb4-119">  {</span>
<span id="cb4-120">    &lt;a, <span class="fl">0.5</span>, a, <span class="fl">0.5</span>&gt;,</span>
<span id="cb4-121">    &lt;a, <span class="fl">0.5</span>, <span class="fl">0.0</span>, <span class="fl">1.0</span>&gt;,</span>
<span id="cb4-122">    &lt;a, <span class="fl">0.5</span>, -a, <span class="fl">0.5</span>&gt;,</span>
<span id="cb4-123">    &lt;a, <span class="fl">0.5</span>, -a, <span class="fl">-0.5</span>&gt;,</span>
<span id="cb4-124">    &lt;a, <span class="fl">0.5</span>, <span class="fl">0.0</span>, <span class="fl">-1.0</span>&gt;,</span>
<span id="cb4-125">    &lt;a, <span class="fl">0.5</span>, a, <span class="fl">-0.5</span>&gt;,</span>
<span id="cb4-126">    &lt;<span class="fl">0.0</span>, <span class="fl">1.0</span>, a, <span class="fl">0.5</span>&gt;,</span>
<span id="cb4-127">    &lt;<span class="fl">0.0</span>, <span class="fl">1.0</span>, <span class="fl">0.0</span>, <span class="fl">1.0</span>&gt;,</span>
<span id="cb4-128">    &lt;<span class="fl">0.0</span>, <span class="fl">1.0</span>, -a, <span class="fl">0.5</span>&gt;,</span>
<span id="cb4-129">    &lt;<span class="fl">0.0</span>, <span class="fl">1.0</span>, -a, <span class="fl">-0.5</span>&gt;,</span>
<span id="cb4-130">    &lt;<span class="fl">0.0</span>, <span class="fl">1.0</span>, <span class="fl">0.0</span>, <span class="fl">-1.0</span>&gt;,</span>
<span id="cb4-131">    &lt;<span class="fl">0.0</span>, <span class="fl">1.0</span>, a, <span class="fl">-0.5</span>&gt;,</span>
<span id="cb4-132">    &lt;-a, <span class="fl">0.5</span>, a, <span class="fl">0.5</span>&gt;,</span>
<span id="cb4-133">    &lt;-a, <span class="fl">0.5</span>, <span class="fl">0.0</span>, <span class="fl">1.0</span>&gt;,</span>
<span id="cb4-134">    &lt;-a, <span class="fl">0.5</span>, -a, <span class="fl">0.5</span>&gt;,</span>
<span id="cb4-135">    &lt;-a, <span class="fl">0.5</span>, -a, <span class="fl">-0.5</span>&gt;,</span>
<span id="cb4-136">    &lt;-a, <span class="fl">0.5</span>, <span class="fl">0.0</span>, <span class="fl">-1.0</span>&gt;,</span>
<span id="cb4-137">    &lt;-a, <span class="fl">0.5</span>, a, <span class="fl">-0.5</span>&gt;,</span>
<span id="cb4-138">    &lt;-a, <span class="fl">-0.5</span>, a, <span class="fl">0.5</span>&gt;,</span>
<span id="cb4-139">    &lt;-a, <span class="fl">-0.5</span>, <span class="fl">0.0</span>, <span class="fl">1.0</span>&gt;,</span>
<span id="cb4-140">    &lt;-a, <span class="fl">-0.5</span>, -a, <span class="fl">0.5</span>&gt;,</span>
<span id="cb4-141">    &lt;-a, <span class="fl">-0.5</span>, -a, <span class="fl">-0.5</span>&gt;,</span>
<span id="cb4-142">    &lt;-a, <span class="fl">-0.5</span>, <span class="fl">0.0</span>, <span class="fl">-1.0</span>&gt;,</span>
<span id="cb4-143">    &lt;-a, <span class="fl">-0.5</span>, a, <span class="fl">-0.5</span>&gt;,</span>
<span id="cb4-144">    &lt;<span class="fl">0.0</span>, <span class="fl">-1.0</span>, a, <span class="fl">0.5</span>&gt;,</span>
<span id="cb4-145">    &lt;<span class="fl">0.0</span>, <span class="fl">-1.0</span>, <span class="fl">0.0</span>, <span class="fl">1.0</span>&gt;,</span>
<span id="cb4-146">    &lt;<span class="fl">0.0</span>, <span class="fl">-1.0</span>, -a, <span class="fl">0.5</span>&gt;,</span>
<span id="cb4-147">    &lt;<span class="fl">0.0</span>, <span class="fl">-1.0</span>, -a, <span class="fl">-0.5</span>&gt;,</span>
<span id="cb4-148">    &lt;<span class="fl">0.0</span>, <span class="fl">-1.0</span>, <span class="fl">0.0</span>, <span class="fl">-1.0</span>&gt;,</span>
<span id="cb4-149">    &lt;<span class="fl">0.0</span>, <span class="fl">-1.0</span>, a, <span class="fl">-0.5</span>&gt;,</span>
<span id="cb4-150">    &lt;a, <span class="fl">-0.5</span>, a, <span class="fl">0.5</span>&gt;,</span>
<span id="cb4-151">    &lt;a, <span class="fl">-0.5</span>, <span class="fl">0.0</span>, <span class="fl">1.0</span>&gt;,</span>
<span id="cb4-152">    &lt;a, <span class="fl">-0.5</span>, -a, <span class="fl">0.5</span>&gt;,</span>
<span id="cb4-153">    &lt;a, <span class="fl">-0.5</span>, -a, <span class="fl">-0.5</span>&gt;,</span>
<span id="cb4-154">    &lt;a, <span class="fl">-0.5</span>, <span class="fl">0.0</span>, <span class="fl">-1.0</span>&gt;,</span>
<span id="cb4-155">    &lt;a, <span class="fl">-0.5</span>, a, <span class="fl">-0.5</span>&gt;</span>
<span id="cb4-156">  };</span>
<span id="cb4-157"><span class="kw">#declare facetVertices </span>= <span class="kw">array</span>[<span class="fl">12</span>] {<span class="fl">0</span>,<span class="fl">5</span>,<span class="fl">6</span>,<span class="fl">30</span>,<span class="fl">11</span>,<span class="fl">35</span>,<span class="fl">12</span>,<span class="fl">17</span>,<span class="fl">18</span>,<span class="fl">23</span>,<span class="fl">24</span>,<span class="fl">29</span>};</span>
<span id="cb4-158"><span class="kw">#declare otherVertices </span>= <span class="kw">array</span>[<span class="fl">24</span>] </span>
<span id="cb4-159">  {<span class="fl">1</span>,<span class="fl">2</span>,<span class="fl">3</span>,<span class="fl">4</span>,<span class="fl">7</span>,<span class="fl">8</span>,</span>
<span id="cb4-160">  <span class="fl">9</span>,<span class="fl">10</span>,<span class="fl">13</span>,<span class="fl">14</span>,<span class="fl">15</span>,<span class="fl">16</span>,</span>
<span id="cb4-161">  <span class="fl">19</span>,<span class="fl">20</span>,<span class="fl">21</span>,<span class="fl">22</span>,<span class="fl">25</span>,<span class="fl">26</span>,</span>
<span id="cb4-162">  <span class="fl">27</span>,<span class="fl">28</span>,<span class="fl">31</span>,<span class="fl">32</span>,<span class="fl">33</span>,<span class="fl">34</span>};</span>
<span id="cb4-163"></span>
<span id="cb4-164"><span class="co">// edges -------------------------------------------------------------------</span></span>
<span id="cb4-165"><span class="kw">#declare facetEdges </span>= <span class="kw">array</span>[<span class="fl">18</span>][<span class="fl">2</span>]</span>
<span id="cb4-166">  {</span>
<span id="cb4-167">    {<span class="fl">0</span>, <span class="fl">5</span>},</span>
<span id="cb4-168">    {<span class="fl">0</span>, <span class="fl">6</span>},</span>
<span id="cb4-169">    {<span class="fl">0</span>, <span class="fl">30</span>},</span>
<span id="cb4-170">    {<span class="fl">5</span>, <span class="fl">11</span>},</span>
<span id="cb4-171">    {<span class="fl">5</span>, <span class="fl">35</span>},</span>
<span id="cb4-172">    {<span class="fl">6</span>, <span class="fl">11</span>},</span>
<span id="cb4-173">    {<span class="fl">6</span>, <span class="fl">12</span>},</span>
<span id="cb4-174">    {<span class="fl">11</span>, <span class="fl">17</span>},</span>
<span id="cb4-175">    {<span class="fl">12</span>, <span class="fl">17</span>},</span>
<span id="cb4-176">    {<span class="fl">12</span>, <span class="fl">18</span>},</span>
<span id="cb4-177">    {<span class="fl">17</span>, <span class="fl">23</span>},</span>
<span id="cb4-178">    {<span class="fl">18</span>, <span class="fl">23</span>},</span>
<span id="cb4-179">    {<span class="fl">18</span>, <span class="fl">24</span>},</span>
<span id="cb4-180">    {<span class="fl">23</span>, <span class="fl">29</span>},</span>
<span id="cb4-181">    {<span class="fl">24</span>, <span class="fl">29</span>},</span>
<span id="cb4-182">    {<span class="fl">24</span>, <span class="fl">30</span>},</span>
<span id="cb4-183">    {<span class="fl">29</span>, <span class="fl">35</span>},</span>
<span id="cb4-184">    {<span class="fl">30</span>, <span class="fl">35</span>}</span>
<span id="cb4-185">  };</span>
<span id="cb4-186"><span class="kw">#declare otherEdges </span>= <span class="kw">array</span>[<span class="fl">54</span>][<span class="fl">2</span>]</span>
<span id="cb4-187">  {</span>
<span id="cb4-188">    {<span class="fl">0</span>, <span class="fl">1</span>},</span>
<span id="cb4-189">    {<span class="fl">1</span>, <span class="fl">2</span>},</span>
<span id="cb4-190">    {<span class="fl">1</span>, <span class="fl">7</span>},</span>
<span id="cb4-191">    {<span class="fl">1</span>, <span class="fl">31</span>},</span>
<span id="cb4-192">    {<span class="fl">2</span>, <span class="fl">3</span>},</span>
<span id="cb4-193">    {<span class="fl">2</span>, <span class="fl">8</span>},</span>
<span id="cb4-194">    {<span class="fl">2</span>, <span class="fl">32</span>},</span>
<span id="cb4-195">    {<span class="fl">3</span>, <span class="fl">4</span>},</span>
<span id="cb4-196">    {<span class="fl">3</span>, <span class="fl">9</span>},</span>
<span id="cb4-197">    {<span class="fl">3</span>, <span class="fl">33</span>},</span>
<span id="cb4-198">    {<span class="fl">4</span>, <span class="fl">5</span>},</span>
<span id="cb4-199">    {<span class="fl">4</span>, <span class="fl">10</span>},</span>
<span id="cb4-200">    {<span class="fl">4</span>, <span class="fl">34</span>},</span>
<span id="cb4-201">    {<span class="fl">6</span>, <span class="fl">7</span>},</span>
<span id="cb4-202">    {<span class="fl">7</span>, <span class="fl">8</span>},</span>
<span id="cb4-203">    {<span class="fl">7</span>, <span class="fl">13</span>},</span>
<span id="cb4-204">    {<span class="fl">8</span>, <span class="fl">9</span>},</span>
<span id="cb4-205">    {<span class="fl">8</span>, <span class="fl">14</span>},</span>
<span id="cb4-206">    {<span class="fl">9</span>, <span class="fl">10</span>},</span>
<span id="cb4-207">    {<span class="fl">9</span>, <span class="fl">15</span>},</span>
<span id="cb4-208">    {<span class="fl">10</span>, <span class="fl">11</span>},</span>
<span id="cb4-209">    {<span class="fl">10</span>, <span class="fl">16</span>},</span>
<span id="cb4-210">    {<span class="fl">12</span>, <span class="fl">13</span>},</span>
<span id="cb4-211">    {<span class="fl">13</span>, <span class="fl">14</span>},</span>
<span id="cb4-212">    {<span class="fl">13</span>, <span class="fl">19</span>},</span>
<span id="cb4-213">    {<span class="fl">14</span>, <span class="fl">15</span>},</span>
<span id="cb4-214">    {<span class="fl">14</span>, <span class="fl">20</span>},</span>
<span id="cb4-215">    {<span class="fl">15</span>, <span class="fl">16</span>},</span>
<span id="cb4-216">    {<span class="fl">15</span>, <span class="fl">21</span>},</span>
<span id="cb4-217">    {<span class="fl">16</span>, <span class="fl">17</span>},</span>
<span id="cb4-218">    {<span class="fl">16</span>, <span class="fl">22</span>},</span>
<span id="cb4-219">    {<span class="fl">18</span>, <span class="fl">19</span>},</span>
<span id="cb4-220">    {<span class="fl">19</span>, <span class="fl">20</span>},</span>
<span id="cb4-221">    {<span class="fl">19</span>, <span class="fl">25</span>},</span>
<span id="cb4-222">    {<span class="fl">20</span>, <span class="fl">21</span>},</span>
<span id="cb4-223">    {<span class="fl">20</span>, <span class="fl">26</span>},</span>
<span id="cb4-224">    {<span class="fl">21</span>, <span class="fl">22</span>},</span>
<span id="cb4-225">    {<span class="fl">21</span>, <span class="fl">27</span>},</span>
<span id="cb4-226">    {<span class="fl">22</span>, <span class="fl">23</span>},</span>
<span id="cb4-227">    {<span class="fl">22</span>, <span class="fl">28</span>},</span>
<span id="cb4-228">    {<span class="fl">24</span>, <span class="fl">25</span>},</span>
<span id="cb4-229">    {<span class="fl">25</span>, <span class="fl">26</span>},</span>
<span id="cb4-230">    {<span class="fl">25</span>, <span class="fl">31</span>},</span>
<span id="cb4-231">    {<span class="fl">26</span>, <span class="fl">27</span>},</span>
<span id="cb4-232">    {<span class="fl">26</span>, <span class="fl">32</span>},</span>
<span id="cb4-233">    {<span class="fl">27</span>, <span class="fl">28</span>},</span>
<span id="cb4-234">    {<span class="fl">27</span>, <span class="fl">33</span>},</span>
<span id="cb4-235">    {<span class="fl">28</span>, <span class="fl">29</span>},</span>
<span id="cb4-236">    {<span class="fl">28</span>, <span class="fl">34</span>},</span>
<span id="cb4-237">    {<span class="fl">30</span>, <span class="fl">31</span>},</span>
<span id="cb4-238">    {<span class="fl">31</span>, <span class="fl">32</span>},</span>
<span id="cb4-239">    {<span class="fl">32</span>, <span class="fl">33</span>},</span>
<span id="cb4-240">    {<span class="fl">33</span>, <span class="fl">34</span>},</span>
<span id="cb4-241">    {<span class="fl">34</span>, <span class="fl">35</span>}</span>
<span id="cb4-242">  };</span>
<span id="cb4-243"></span>
<span id="cb4-244"><span class="co">// macros ----------------------------------------------------------------------</span></span>
<span id="cb4-245"><span class="kw">#macro vlength4</span>(P)</span>
<span id="cb4-246">  <span class="kw">sqrt</span>(P.<span class="kw">x</span>*P.<span class="kw">x</span> + P.<span class="kw">y</span>*P.<span class="kw">y</span> + P.<span class="kw">z</span>*P.<span class="kw">z</span> + P.<span class="kw">t</span>*P.<span class="kw">t</span>)</span>
<span id="cb4-247"><span class="ot">#end</span></span>
<span id="cb4-248"></span>
<span id="cb4-249"><span class="kw">#macro sphericalSegment</span>(P, Q, n)</span>
<span id="cb4-250">  <span class="kw">#local out </span>= <span class="kw">array</span>[n+<span class="fl">1</span>];</span>
<span id="cb4-251">  #for(i, <span class="fl">0</span>, n)</span>
<span id="cb4-252">    <span class="kw">#local pt </span>= P + (i/n)*(Q-P);</span>
<span id="cb4-253">    <span class="kw">#local out</span>[i] = <span class="kw">sqrt</span>(<span class="fl">2</span>)/vlength4(pt) * pt;</span>
<span id="cb4-254">  <span class="ot">#end</span></span>
<span id="cb4-255">  out</span>
<span id="cb4-256"><span class="ot">#end</span></span>
<span id="cb4-257"></span>
<span id="cb4-258"><span class="kw">#macro rotate4d</span>(theta,phi,xi,vec)</span>
<span id="cb4-259">  <span class="kw">#local a </span>= <span class="kw">cos</span>(xi);</span>
<span id="cb4-260">  <span class="kw">#local b </span>= <span class="kw">sin</span>(theta)*<span class="kw">cos</span>(phi)*<span class="kw">sin</span>(xi);</span>
<span id="cb4-261">  <span class="kw">#local c </span>= <span class="kw">sin</span>(theta)*<span class="kw">sin</span>(phi)*<span class="kw">sin</span>(xi);</span>
<span id="cb4-262">  <span class="kw">#local d </span>= <span class="kw">cos</span>(theta)*<span class="kw">sin</span>(xi);</span>
<span id="cb4-263">  <span class="kw">#local p </span>= vec.<span class="kw">x</span>;</span>
<span id="cb4-264">  <span class="kw">#local q </span>= vec.<span class="kw">y</span>;</span>
<span id="cb4-265">  <span class="kw">#local r </span>= vec.<span class="kw">z</span>;</span>
<span id="cb4-266">  <span class="kw">#local s </span>= vec.<span class="kw">t</span>;</span>
<span id="cb4-267">  &lt; a*p - b*q - c*r - d*s</span>
<span id="cb4-268">  , a*q + b*p + c*s - d*r</span>
<span id="cb4-269">  , a*r - b*s + c*p + d*q</span>
<span id="cb4-270">  , a*s + b*r - c*q + d*p &gt;</span>
<span id="cb4-271"><span class="ot">#end</span></span>
<span id="cb4-272"></span>
<span id="cb4-273"><span class="kw">#macro StereographicProjection</span>(q) </span>
<span id="cb4-274">  <span class="kw">acos</span>(q.<span class="kw">t</span>/<span class="kw">sqrt</span>(<span class="fl">2</span>))/<span class="kw">sqrt</span>(<span class="fl">2</span>-q.<span class="kw">t</span>*q.<span class="kw">t</span>) * &lt;q.<span class="kw">x</span>,q.<span class="kw">y</span>,q.<span class="kw">z</span>&gt;</span>
<span id="cb4-275"><span class="ot">#end</span></span>
<span id="cb4-276"></span>
<span id="cb4-277"><span class="kw">#macro ProjectedFacetVertices</span>(theta, phi, xi)</span>
<span id="cb4-278">  <span class="kw">#local out </span>= <span class="kw">array</span>[<span class="fl">12</span>];</span>
<span id="cb4-279">  #for(i, <span class="fl">0</span>, <span class="fl">11</span>)</span>
<span id="cb4-280">    <span class="kw">#local out</span>[i] = </span>
<span id="cb4-281">      StereographicProjection(</span>
<span id="cb4-282">        rotate4d(theta, phi, xi, vertices[facetVertices[i]])</span>
<span id="cb4-283">      );</span>
<span id="cb4-284">  <span class="ot">#end</span></span>
<span id="cb4-285">  out</span>
<span id="cb4-286"><span class="ot">#end</span></span>
<span id="cb4-287"></span>
<span id="cb4-288"><span class="kw">#macro ProjectedOtherVertices</span>(theta, phi, xi)</span>
<span id="cb4-289">  <span class="kw">#local out </span>= <span class="kw">array</span>[<span class="fl">24</span>];</span>
<span id="cb4-290">  #for(i, <span class="fl">0</span>, <span class="fl">23</span>)</span>
<span id="cb4-291">    <span class="kw">#local out</span>[i] = </span>
<span id="cb4-292">      StereographicProjection(</span>
<span id="cb4-293">        rotate4d(theta, phi, xi, vertices[otherVertices[i]])</span>
<span id="cb4-294">      );</span>
<span id="cb4-295">  <span class="ot">#end</span></span>
<span id="cb4-296">  out</span>
<span id="cb4-297"><span class="ot">#end</span></span>
<span id="cb4-298"></span>
<span id="cb4-299"><span class="co">// texture ---------------------------------------------------------------------</span></span>
<span id="cb4-300"><span class="kw">#declare edgeTexture1 </span>= </span>
<span id="cb4-301">  <span class="kw">texture</span> {</span>
<span id="cb4-302">    New_Penny</span>
<span id="cb4-303">    <span class="kw">finish</span> {</span>
<span id="cb4-304">      <span class="kw">ambient</span> <span class="fl">0.01</span></span>
<span id="cb4-305">      <span class="kw">diffuse</span> <span class="fl">2</span></span>
<span id="cb4-306">      <span class="kw">reflection</span> <span class="fl">0</span></span>
<span id="cb4-307">      <span class="kw">brilliance</span> <span class="fl">8</span></span>
<span id="cb4-308">      <span class="kw">specular</span> <span class="fl">0.1</span></span>
<span id="cb4-309">      <span class="kw">roughness</span> <span class="fl">0.1</span></span>
<span id="cb4-310">    }</span>
<span id="cb4-311">  };</span>
<span id="cb4-312"></span>
<span id="cb4-313"><span class="kw">#declare edgeTexture2 </span>= </span>
<span id="cb4-314">  <span class="kw">texture</span> {</span>
<span id="cb4-315">    <span class="kw">pigment</span> { Red }</span>
<span id="cb4-316">    <span class="kw">finish</span> {</span>
<span id="cb4-317">      <span class="kw">ambient</span> <span class="fl">0.01</span></span>
<span id="cb4-318">      <span class="kw">diffuse</span> <span class="fl">2</span></span>
<span id="cb4-319">      <span class="kw">reflection</span> <span class="fl">0</span></span>
<span id="cb4-320">      <span class="kw">brilliance</span> <span class="fl">8</span></span>
<span id="cb4-321">      <span class="kw">specular</span> <span class="fl">0.1</span></span>
<span id="cb4-322">      <span class="kw">roughness</span> <span class="fl">0.1</span></span>
<span id="cb4-323">    }</span>
<span id="cb4-324">  };</span>
<span id="cb4-325"></span>
<span id="cb4-326"><span class="co">// draw an edge ----------------------------------------------------------------</span></span>
<span id="cb4-327"><span class="kw">#macro Edge</span>(verts, v1, v2, theta, phi, xi, Tex)</span>
<span id="cb4-328">  <span class="kw">#local P </span>= verts[v1];</span>
<span id="cb4-329">  <span class="kw">#local Q </span>= verts[v2];</span>
<span id="cb4-330">  <span class="kw">#local PQ </span>= sphericalSegment(P, Q, <span class="fl">100</span>);</span>
<span id="cb4-331">  <span class="kw">sphere_sweep</span> {</span>
<span id="cb4-332">    <span class="kw">b_spline</span> <span class="fl">101</span></span>
<span id="cb4-333">    #for(k,<span class="fl">0</span>,<span class="fl">100</span>)</span>
<span id="cb4-334">      <span class="kw">#local O </span>= StereographicProjection(rotate4d(theta,phi,xi,PQ[k]));</span>
<span id="cb4-335">      O <span class="kw">vlength</span>(O)/<span class="fl">20</span></span>
<span id="cb4-336">    <span class="ot">#end</span></span>
<span id="cb4-337">    <span class="kw">texture</span> { </span>
<span id="cb4-338">        Tex</span>
<span id="cb4-339">    }</span>
<span id="cb4-340">  }</span>
<span id="cb4-341"><span class="ot">#end</span></span>
<span id="cb4-342"></span>
<span id="cb4-343"><span class="co">// draw ------------------------------------------------------------------------</span></span>
<span id="cb4-344"><span class="kw">#declare theta </span>= <span class="fl">pi</span>/<span class="fl">2</span>;</span>
<span id="cb4-345"><span class="kw">#declare phi </span>= <span class="fl">0</span>;</span>
<span id="cb4-346"><span class="kw">#declare xi </span>= <span class="fl">2</span>*<span class="kw">frame_number</span>*<span class="fl">pi</span>/<span class="fl">180</span>;</span>
<span id="cb4-347"><span class="kw">#declare vsFacet </span>= ProjectedFacetVertices(theta, phi, xi);</span>
<span id="cb4-348"><span class="kw">#declare vsOther </span>= ProjectedOtherVertices(theta, phi, xi);</span>
<span id="cb4-349"><span class="kw">object</span> {</span>
<span id="cb4-350">  <span class="kw">union</span> {</span>
<span id="cb4-351">    #for(i, <span class="fl">0</span>, <span class="fl">53</span>)</span>
<span id="cb4-352">      Edge(vertices, otherEdges[i][<span class="fl">0</span>], otherEdges[i][<span class="fl">1</span>], </span>
<span id="cb4-353">                            theta, phi, xi, edgeTexture1)</span>
<span id="cb4-354">    <span class="ot">#end</span></span>
<span id="cb4-355">    #for(i, <span class="fl">0</span>, <span class="fl">17</span>)</span>
<span id="cb4-356">      Edge(vertices, facetEdges[i][<span class="fl">0</span>], facetEdges[i][<span class="fl">1</span>], </span>
<span id="cb4-357">                            theta, phi, xi, edgeTexture2)</span>
<span id="cb4-358">    <span class="ot">#end</span></span>
<span id="cb4-359">    #for(i, <span class="fl">0</span>, <span class="fl">23</span>)</span>
<span id="cb4-360">      <span class="kw">sphere</span> {</span>
<span id="cb4-361">        vsOther[i], <span class="kw">vlength</span>(vsOther[i])/<span class="fl">10</span></span>
<span id="cb4-362">        <span class="kw">texture</span> { edgeTexture1 }</span>
<span id="cb4-363">      }</span>
<span id="cb4-364">    <span class="ot">#end</span>  </span>
<span id="cb4-365">    #for(i, <span class="fl">0</span>, <span class="fl">11</span>)</span>
<span id="cb4-366">      <span class="kw">sphere</span> {</span>
<span id="cb4-367">        vsFacet[i], <span class="kw">vlength</span>(vsFacet[i])/<span class="fl">10</span></span>
<span id="cb4-368">        <span class="kw">texture</span> { edgeTexture2 }</span>
<span id="cb4-369">      }</span>
<span id="cb4-370">    <span class="ot">#end</span>  </span>
<span id="cb4-371">  }</span>
<span id="cb4-372">  <span class="kw">scale</span> <span class="fl">0.5</span></span>
<span id="cb4-373">  <span class="kw">rotate</span> &lt;<span class="fl">60</span>, <span class="fl">0</span>, <span class="fl">0</span>&gt;</span>
<span id="cb4-374">  <span class="kw">translate</span> &lt;<span class="fl">0</span>, <span class="fl">0.5</span>, <span class="fl">-2</span>&gt;</span>
<span id="cb4-375">}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/DuoprismStereo_POVRAY2.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Tue, 11 Feb 2020 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/DuoprismStereo.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Stereographic truncated tesseract</title>
      <link>https://laustep.github.io/stlahblog/posts/StereoTruncatedTesseract.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <ul>
        <li>
          <a href="#the-stereographic-truncated-tesseract"
            >The stereographic truncated tesseract</a
          >
        </li>
        <li><a href="#drawing-with-rgl-r">Drawing with rgl (R)</a></li>
        <li><a href="#drawing-with-asymptote">Drawing with Asymptote</a></li>
        <li><a href="#drawing-with-pov-ray">Drawing with POV-Ray</a></li>
      </ul>
      <h1 id="the-stereographic-truncated-tesseract">
        The stereographic truncated tesseract
      </h1>
      <p>
        We show how to draw a stereographic truncated tesseract with rgl (R),
        Asymptote, and POV-Ray.
      </p>
      <p>
        The truncated tesseract is a uniform polychoron. Among its cells, there
        are sixteen tetrahedra, and we fill the faces of these tetrahedra.
      </p>
      <p>
        Using Asymptote and POV-Ray, we include a 4D rotation to animate the
        figure.
      </p>
      <p>
        We call it <em>stereographic</em> because we map each edge to the
        3-sphere before applying the stereographic projection.
      </p>
      <h1 id="drawing-with-rgl-r">Drawing with rgl (R)</h1>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(rgl)</span>
<span id="cb1-2"><span class="kw">library</span>(cxhull)</span>
<span id="cb1-3"><span class="kw">library</span>(abind)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co"># vertices #####################################################################</span></span>
<span id="cb1-6">sqr2p1 &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">2</span>) <span class="op">+</span><span class="st"> </span><span class="dv">1</span></span>
<span id="cb1-7">vertices &lt;-<span class="st"> </span><span class="kw">rbind</span>(</span>
<span id="cb1-8">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-9">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, sqr2p1),</span>
<span id="cb1-10">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, <span class="op">-</span>sqr2p1, sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-11">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, <span class="op">-</span>sqr2p1, sqr2p1, sqr2p1),</span>
<span id="cb1-12">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-13">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, sqr2p1, <span class="op">-</span>sqr2p1, sqr2p1),</span>
<span id="cb1-14">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, sqr2p1, sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-15">  <span class="kw">c</span>(<span class="op">-</span><span class="dv">1</span>, sqr2p1, sqr2p1, sqr2p1),</span>
<span id="cb1-16">  <span class="kw">c</span>(<span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-17">  <span class="kw">c</span>(<span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, sqr2p1),</span>
<span id="cb1-18">  <span class="kw">c</span>(<span class="dv">1</span>, <span class="op">-</span>sqr2p1, sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-19">  <span class="kw">c</span>(<span class="dv">1</span>, <span class="op">-</span>sqr2p1, sqr2p1, sqr2p1),</span>
<span id="cb1-20">  <span class="kw">c</span>(<span class="dv">1</span>, sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-21">  <span class="kw">c</span>(<span class="dv">1</span>, sqr2p1, <span class="op">-</span>sqr2p1, sqr2p1),</span>
<span id="cb1-22">  <span class="kw">c</span>(<span class="dv">1</span>, sqr2p1, sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-23">  <span class="kw">c</span>(<span class="dv">1</span>, sqr2p1, sqr2p1, sqr2p1),</span>
<span id="cb1-24">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="dv">-1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-25">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="dv">-1</span>, <span class="op">-</span>sqr2p1, sqr2p1),</span>
<span id="cb1-26">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="dv">-1</span>, sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-27">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="dv">-1</span>, sqr2p1, sqr2p1),</span>
<span id="cb1-28">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-29">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="dv">1</span>, <span class="op">-</span>sqr2p1, sqr2p1),</span>
<span id="cb1-30">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="dv">1</span>, sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-31">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="dv">1</span>, sqr2p1, sqr2p1),</span>
<span id="cb1-32">  <span class="kw">c</span>(sqr2p1, <span class="dv">-1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-33">  <span class="kw">c</span>(sqr2p1, <span class="dv">-1</span>, <span class="op">-</span>sqr2p1, sqr2p1),</span>
<span id="cb1-34">  <span class="kw">c</span>(sqr2p1, <span class="dv">-1</span>, sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-35">  <span class="kw">c</span>(sqr2p1, <span class="dv">-1</span>, sqr2p1, sqr2p1),</span>
<span id="cb1-36">  <span class="kw">c</span>(sqr2p1, <span class="dv">1</span>, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-37">  <span class="kw">c</span>(sqr2p1, <span class="dv">1</span>, <span class="op">-</span>sqr2p1, sqr2p1),</span>
<span id="cb1-38">  <span class="kw">c</span>(sqr2p1, <span class="dv">1</span>, sqr2p1, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-39">  <span class="kw">c</span>(sqr2p1, <span class="dv">1</span>, sqr2p1, sqr2p1),</span>
<span id="cb1-40">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">-1</span>, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-41">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">-1</span>, sqr2p1),</span>
<span id="cb1-42">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">1</span>, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-43">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">1</span>, sqr2p1),</span>
<span id="cb1-44">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, sqr2p1, <span class="dv">-1</span>, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-45">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, sqr2p1, <span class="dv">-1</span>, sqr2p1),</span>
<span id="cb1-46">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, sqr2p1, <span class="dv">1</span>, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-47">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, sqr2p1, <span class="dv">1</span>, sqr2p1),</span>
<span id="cb1-48">  <span class="kw">c</span>(sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">-1</span>, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-49">  <span class="kw">c</span>(sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">-1</span>, sqr2p1),</span>
<span id="cb1-50">  <span class="kw">c</span>(sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">1</span>, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-51">  <span class="kw">c</span>(sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">1</span>, sqr2p1),</span>
<span id="cb1-52">  <span class="kw">c</span>(sqr2p1, sqr2p1, <span class="dv">-1</span>, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-53">  <span class="kw">c</span>(sqr2p1, sqr2p1, <span class="dv">-1</span>, sqr2p1),</span>
<span id="cb1-54">  <span class="kw">c</span>(sqr2p1, sqr2p1, <span class="dv">1</span>, <span class="op">-</span>sqr2p1),</span>
<span id="cb1-55">  <span class="kw">c</span>(sqr2p1, sqr2p1, <span class="dv">1</span>, sqr2p1),</span>
<span id="cb1-56">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">-1</span>),</span>
<span id="cb1-57">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">1</span>),</span>
<span id="cb1-58">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, sqr2p1, <span class="dv">-1</span>),</span>
<span id="cb1-59">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, sqr2p1, <span class="dv">1</span>),</span>
<span id="cb1-60">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">-1</span>),</span>
<span id="cb1-61">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">1</span>),</span>
<span id="cb1-62">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, sqr2p1, sqr2p1, <span class="dv">-1</span>),</span>
<span id="cb1-63">  <span class="kw">c</span>(<span class="op">-</span>sqr2p1, sqr2p1, sqr2p1, <span class="dv">1</span>),</span>
<span id="cb1-64">  <span class="kw">c</span>(sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">-1</span>),</span>
<span id="cb1-65">  <span class="kw">c</span>(sqr2p1, <span class="op">-</span>sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">1</span>),</span>
<span id="cb1-66">  <span class="kw">c</span>(sqr2p1, <span class="op">-</span>sqr2p1, sqr2p1, <span class="dv">-1</span>),</span>
<span id="cb1-67">  <span class="kw">c</span>(sqr2p1, <span class="op">-</span>sqr2p1, sqr2p1, <span class="dv">1</span>),</span>
<span id="cb1-68">  <span class="kw">c</span>(sqr2p1, sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">-1</span>),</span>
<span id="cb1-69">  <span class="kw">c</span>(sqr2p1, sqr2p1, <span class="op">-</span>sqr2p1, <span class="dv">1</span>),</span>
<span id="cb1-70">  <span class="kw">c</span>(sqr2p1, sqr2p1, sqr2p1, <span class="dv">-1</span>),</span>
<span id="cb1-71">  <span class="kw">c</span>(sqr2p1, sqr2p1, sqr2p1, <span class="dv">1</span>)</span>
<span id="cb1-72">)</span>
<span id="cb1-73"></span>
<span id="cb1-74"><span class="co"># convex hull is the polytope itself, since it is convex #######################</span></span>
<span id="cb1-75">hull &lt;-<span class="st"> </span><span class="kw">cxhull</span>(vertices)</span>
<span id="cb1-76"></span>
<span id="cb1-77"><span class="co"># edges ########################################################################</span></span>
<span id="cb1-78">edges &lt;-<span class="st"> </span>hull<span class="op">$</span>edges</span>
<span id="cb1-79"></span>
<span id="cb1-80"><span class="co"># (triangular) faces of the tetrahedra ######################################### </span></span>
<span id="cb1-81">ridgeSizes &lt;-<span class="st"> </span><span class="kw">sapply</span>(hull<span class="op">$</span>ridges, <span class="cf">function</span>(ridge) <span class="kw">length</span>(ridge<span class="op">$</span>vertices))</span>
<span id="cb1-82">triangles &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">sapply</span>(hull<span class="op">$</span>ridges[<span class="kw">which</span>(ridgeSizes<span class="op">==</span><span class="dv">3</span>)], </span>
<span id="cb1-83">                      <span class="cf">function</span>(ridge) ridge<span class="op">$</span>vertices))</span>
<span id="cb1-84"></span>
<span id="cb1-85"><span class="co"># stereographic projection #####################################################</span></span>
<span id="cb1-86">sproj &lt;-<span class="st"> </span><span class="cf">function</span>(p, r){</span>
<span id="cb1-87">  <span class="kw">c</span>(p[<span class="dv">1</span>], p[<span class="dv">2</span>], p[<span class="dv">3</span>])<span class="op">/</span>(r<span class="op">-</span>p[<span class="dv">4</span>])</span>
<span id="cb1-88">}</span>
<span id="cb1-89"></span>
<span id="cb1-90"><span class="co"># spherical segment ############################################################</span></span>
<span id="cb1-91">sphericalSegment &lt;-<span class="st"> </span><span class="cf">function</span>(P, Q, r, n){</span>
<span id="cb1-92">  out &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> n<span class="op">+</span><span class="dv">1</span>, <span class="dt">ncol =</span> <span class="dv">4</span>)</span>
<span id="cb1-93">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">0</span><span class="op">:</span>n){</span>
<span id="cb1-94">    pt &lt;-<span class="st"> </span>P <span class="op">+</span><span class="st"> </span>(i<span class="op">/</span>n)<span class="op">*</span>(Q<span class="op">-</span>P)</span>
<span id="cb1-95">    out[i<span class="op">+</span>1L, ] &lt;-<span class="st"> </span>r<span class="op">/</span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(pt))) <span class="op">*</span><span class="st"> </span>pt</span>
<span id="cb1-96">  }</span>
<span id="cb1-97">  out</span>
<span id="cb1-98">}</span>
<span id="cb1-99"></span>
<span id="cb1-100"><span class="co"># stereographic edge ###########################################################</span></span>
<span id="cb1-101">stereoEdge &lt;-<span class="st"> </span><span class="cf">function</span>(verts, edge, r, n){</span>
<span id="cb1-102">  P &lt;-<span class="st"> </span>verts[edge[<span class="dv">1</span>], ]</span>
<span id="cb1-103">  Q &lt;-<span class="st"> </span>verts[edge[<span class="dv">2</span>], ]</span>
<span id="cb1-104">  PQ &lt;-<span class="st"> </span><span class="kw">sphericalSegment</span>(P, Q, r, n)</span>
<span id="cb1-105">  pq &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(PQ, <span class="dv">1</span>, <span class="cf">function</span>(M){<span class="kw">sproj</span>(M, r)}))</span>
<span id="cb1-106">  dists &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">apply</span>(pq, <span class="dv">1</span>, crossprod))</span>
<span id="cb1-107">  <span class="kw">cylinder3d</span>(pq, <span class="dt">radius =</span> <span class="kw">log1p</span>(dists<span class="op">/</span><span class="dv">4</span>)<span class="op">/</span><span class="dv">4</span>, <span class="dt">sides =</span> <span class="dv">60</span>)</span>
<span id="cb1-108">}</span>
<span id="cb1-109"></span>
<span id="cb1-110"><span class="co"># stereographic subdivision (to fill the triangles) ############################</span></span>
<span id="cb1-111">midpoint4 &lt;-<span class="st"> </span><span class="cf">function</span>(A, B, r){</span>
<span id="cb1-112">  M &lt;-<span class="st"> </span>(A <span class="op">+</span><span class="st"> </span>B) <span class="op">/</span><span class="st"> </span><span class="dv">2</span></span>
<span id="cb1-113">  lg &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(M))) <span class="op">/</span><span class="st"> </span>r</span>
<span id="cb1-114">  M <span class="op">/</span><span class="st"> </span>lg</span>
<span id="cb1-115">} </span>
<span id="cb1-116"></span>
<span id="cb1-117">subdiv0 &lt;-<span class="st"> </span><span class="cf">function</span>(A, B, C, r){</span>
<span id="cb1-118">  mAB &lt;-<span class="st"> </span><span class="kw">midpoint4</span>(A, B, r)</span>
<span id="cb1-119">  mAC &lt;-<span class="st"> </span><span class="kw">midpoint4</span>(A, C, r)</span>
<span id="cb1-120">  mBC &lt;-<span class="st"> </span><span class="kw">midpoint4</span>(B, C, r)</span>
<span id="cb1-121">  out &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="ot">NA_real_</span>, <span class="dt">dim =</span> <span class="kw">c</span>(4L, 3L, 4L))</span>
<span id="cb1-122">  out[<span class="dv">1</span>,,] &lt;-<span class="st"> </span><span class="kw">rbind</span>(A, mAB, mAC)</span>
<span id="cb1-123">  out[<span class="dv">2</span>,,] &lt;-<span class="st"> </span><span class="kw">rbind</span>(B, mBC, mAB)</span>
<span id="cb1-124">  out[<span class="dv">3</span>,,] &lt;-<span class="st"> </span><span class="kw">rbind</span>(C, mAC, mBC)</span>
<span id="cb1-125">  out[<span class="dv">4</span>,,] &lt;-<span class="st"> </span><span class="kw">rbind</span>(mAB, mBC, mAC)</span>
<span id="cb1-126">  out</span>
<span id="cb1-127">}</span>
<span id="cb1-128"></span>
<span id="cb1-129">subdiv &lt;-<span class="st"> </span><span class="cf">function</span>(n, A, B, C, r){</span>
<span id="cb1-130">  <span class="cf">if</span>(n <span class="op">==</span><span class="st"> </span><span class="dv">1</span>){</span>
<span id="cb1-131">    <span class="kw">return</span>(<span class="kw">subdiv0</span>(A, B, C, r))</span>
<span id="cb1-132">  }</span>
<span id="cb1-133">  triangles &lt;-<span class="st"> </span><span class="kw">subdiv</span>(n<span class="dv">-1</span>, A, B, C, r)</span>
<span id="cb1-134">  out &lt;-<span class="st"> </span><span class="kw">array</span>(<span class="ot">NA_real_</span>, <span class="dt">dim =</span> <span class="kw">c</span>(0L, 3L, 4L))</span>
<span id="cb1-135">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>(<span class="dv">4</span><span class="op">^</span>(n<span class="dv">-1</span>))){</span>
<span id="cb1-136">    trgl &lt;-<span class="st"> </span>triangles[i,,]</span>
<span id="cb1-137">    out &lt;-<span class="st"> </span><span class="kw">abind</span>(out, <span class="kw">subdiv0</span>(trgl[1L,], trgl[2L,], trgl[3L,], r), <span class="dt">along =</span> 1L)</span>
<span id="cb1-138">  }</span>
<span id="cb1-139">  out</span>
<span id="cb1-140">}</span>
<span id="cb1-141"></span>
<span id="cb1-142"><span class="co"># mesh maker ###################################################################</span></span>
<span id="cb1-143">stereoTriangle &lt;-<span class="st"> </span><span class="cf">function</span>(n, A, B, C, r){</span>
<span id="cb1-144">  triangles &lt;-<span class="st"> </span><span class="kw">subdiv</span>(n, A, B, C, r)</span>
<span id="cb1-145">  ntriangles &lt;-<span class="st"> </span><span class="kw">dim</span>(triangles)[1L]</span>
<span id="cb1-146">  indices &lt;-<span class="st"> </span><span class="kw">matrix</span>(1L<span class="op">:</span>(3L<span class="op">*</span>ntriangles), <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> ntriangles)</span>
<span id="cb1-147">  vertices &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> 3L<span class="op">*</span>ntriangles)</span>
<span id="cb1-148">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>ntriangles){</span>
<span id="cb1-149">    trgl &lt;-<span class="st"> </span>triangles[i,,]</span>
<span id="cb1-150">    vertices[, 3L<span class="op">*</span>(i<span class="op">-</span>1L)<span class="op">+</span>1L] &lt;-<span class="st"> </span><span class="kw">sproj</span>(trgl[1L,], r)</span>
<span id="cb1-151">    vertices[, 3L<span class="op">*</span>(i<span class="op">-</span>1L)<span class="op">+</span>2L] &lt;-<span class="st"> </span><span class="kw">sproj</span>(trgl[2L,], r)</span>
<span id="cb1-152">    vertices[, 3L<span class="op">*</span>(i<span class="op">-</span>1L)<span class="op">+</span>3L] &lt;-<span class="st"> </span><span class="kw">sproj</span>(trgl[3L,], r)</span>
<span id="cb1-153">  }</span>
<span id="cb1-154">  mesh &lt;-<span class="st"> </span><span class="kw">tmesh3d</span>(vertices, indices, <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>)</span>
<span id="cb1-155">  Rvcg<span class="op">::</span><span class="kw">vcgClean</span>(mesh, <span class="dt">sel =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">7</span>), <span class="dt">silent =</span> <span class="ot">TRUE</span>)</span>
<span id="cb1-156">}</span>
<span id="cb1-157"></span>
<span id="cb1-158"><span class="co"># projected vertices ###########################################################</span></span>
<span id="cb1-159">r &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="dv">1</span><span class="op">+</span><span class="dv">3</span><span class="op">*</span>sqr2p1<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb1-160">vs &lt;-<span class="st"> </span><span class="kw">t</span>(<span class="kw">apply</span>(vertices, 1L, <span class="cf">function</span>(M){<span class="kw">sproj</span>(M, r)}))</span>
<span id="cb1-161"></span>
<span id="cb1-162"><span class="co">####~~~~ plot ~~~~##############################################################</span></span>
<span id="cb1-163"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>, <span class="dv">50</span>, <span class="dv">562</span>, <span class="dv">562</span>), <span class="dt">zoom =</span> <span class="fl">0.9</span>)</span>
<span id="cb1-164"><span class="kw">bg3d</span>(<span class="kw">rgb</span>(<span class="dv">54</span>, <span class="dv">57</span>, <span class="dv">64</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>))</span>
<span id="cb1-165"><span class="co">## plot the edges</span></span>
<span id="cb1-166"><span class="cf">for</span>(k <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(edges)){</span>
<span id="cb1-167">  edge &lt;-<span class="st"> </span><span class="kw">stereoEdge</span>(vertices, edges[k,], r, <span class="dt">n =</span> <span class="dv">100</span>)</span>
<span id="cb1-168">  <span class="kw">shade3d</span>(edge, <span class="dt">color =</span> <span class="st">"gold"</span>)</span>
<span id="cb1-169">}</span>
<span id="cb1-170"><span class="co">## plot the vertices</span></span>
<span id="cb1-171"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(vs)){</span>
<span id="cb1-172">  v &lt;-<span class="st"> </span>vs[i,]</span>
<span id="cb1-173">  <span class="kw">spheres3d</span>(v, <span class="dt">radius =</span> <span class="kw">log1p</span>(<span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(v)))<span class="op">/</span><span class="dv">4</span>)<span class="op">/</span><span class="dv">3</span>, <span class="dt">color =</span> <span class="st">"gold2"</span>)</span>
<span id="cb1-174">}</span>
<span id="cb1-175"><span class="co">## plot the filled triangles</span></span>
<span id="cb1-176"><span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span><span class="kw">nrow</span>(triangles)){</span>
<span id="cb1-177">  trgl &lt;-<span class="st"> </span>triangles[i,]</span>
<span id="cb1-178">  A &lt;-<span class="st"> </span>vertices[trgl[1L], ]</span>
<span id="cb1-179">  B &lt;-<span class="st"> </span>vertices[trgl[2L], ]</span>
<span id="cb1-180">  C &lt;-<span class="st"> </span>vertices[trgl[3L], ]</span>
<span id="cb1-181">  mesh &lt;-<span class="st"> </span><span class="kw">stereoTriangle</span>(<span class="dv">6</span>, A, B, C, r)</span>
<span id="cb1-182">  <span class="kw">shade3d</span>(mesh, <span class="dt">color =</span> <span class="st">"red"</span>)</span>
<span id="cb1-183">}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/truncatedTesseract_stereographic_rgl.gif"
        />
      </p>
      <h1 id="drawing-with-asymptote">Drawing with Asymptote</h1>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource cpp numberLines"
        ><code class="sourceCode cpp"><span id="cb2-1">settings.render = <span class="dv">4</span>;</span>
<span id="cb2-2">settings.outformat = <span class="st">"eps"</span>;</span>
<span id="cb2-3"><span class="kw">import</span> tube;</span>
<span id="cb2-4">size(<span class="dv">200</span>,<span class="dv">0</span>);</span>
<span id="cb2-5"></span>
<span id="cb2-6">currentprojection = orthographic(<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">4</span>);</span>
<span id="cb2-7">currentlight = light(gray(<span class="fl">0.85</span>), ambient=black, specularfactor=<span class="dv">3</span>,</span>
<span id="cb2-8">                     (<span class="dv">100</span>,<span class="dv">100</span>,<span class="dv">100</span>), specular=gray(<span class="fl">0.9</span>), viewport=<span class="kw">false</span>);</span>
<span id="cb2-9">currentlight.background = rgb(<span class="st">"363940ff"</span>);</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co">// files to be saved -----------------------------------------------------------</span></span>
<span id="cb2-12">string[] files = {</span>
<span id="cb2-13">    <span class="st">"TT000"</span>, <span class="st">"TT001"</span>, <span class="st">"TT002"</span>, <span class="st">"TT003"</span>, <span class="st">"TT004"</span>, <span class="st">"TT005"</span>,</span>
<span id="cb2-14">    <span class="st">"TT006"</span>, <span class="st">"TT007"</span>, <span class="st">"TT008"</span>, <span class="st">"TT009"</span>, <span class="st">"TT010"</span>, <span class="st">"TT011"</span>,</span>
<span id="cb2-15">    <span class="st">"TT012"</span>, <span class="st">"TT013"</span>, <span class="st">"TT014"</span>, <span class="st">"TT015"</span>, <span class="st">"TT016"</span>, <span class="st">"TT017"</span>,</span>
<span id="cb2-16">    <span class="st">"TT018"</span>, <span class="st">"TT019"</span>, <span class="st">"TT020"</span>, <span class="st">"TT021"</span>, <span class="st">"TT022"</span>, <span class="st">"TT023"</span>,</span>
<span id="cb2-17">    <span class="st">"TT024"</span>, <span class="st">"TT025"</span>, <span class="st">"TT026"</span>, <span class="st">"TT027"</span>, <span class="st">"TT028"</span>, <span class="st">"TT029"</span>,</span>
<span id="cb2-18">    <span class="st">"TT030"</span>, <span class="st">"TT031"</span>, <span class="st">"TT032"</span>, <span class="st">"TT033"</span>, <span class="st">"TT034"</span>, <span class="st">"TT035"</span>,</span>
<span id="cb2-19">    <span class="st">"TT036"</span>, <span class="st">"TT037"</span>, <span class="st">"TT038"</span>, <span class="st">"TT039"</span>, <span class="st">"TT040"</span>, <span class="st">"TT041"</span>,</span>
<span id="cb2-20">    <span class="st">"TT042"</span>, <span class="st">"TT043"</span>, <span class="st">"TT044"</span>, <span class="st">"TT045"</span>, <span class="st">"TT046"</span>, <span class="st">"TT047"</span>,</span>
<span id="cb2-21">    <span class="st">"TT048"</span>, <span class="st">"TT049"</span>, <span class="st">"TT050"</span>, <span class="st">"TT051"</span>, <span class="st">"TT052"</span>, <span class="st">"TT053"</span>,</span>
<span id="cb2-22">    <span class="st">"TT054"</span>, <span class="st">"TT055"</span>, <span class="st">"TT056"</span>, <span class="st">"TT057"</span>, <span class="st">"TT058"</span>, <span class="st">"TT059"</span>,</span>
<span id="cb2-23">    <span class="st">"TT060"</span>, <span class="st">"TT061"</span>, <span class="st">"TT062"</span>, <span class="st">"TT063"</span>, <span class="st">"TT064"</span>, <span class="st">"TT065"</span>,</span>
<span id="cb2-24">    <span class="st">"TT066"</span>, <span class="st">"TT067"</span>, <span class="st">"TT068"</span>, <span class="st">"TT069"</span>, <span class="st">"TT070"</span>, <span class="st">"TT071"</span>,</span>
<span id="cb2-25">    <span class="st">"TT072"</span>, <span class="st">"TT073"</span>, <span class="st">"TT074"</span>, <span class="st">"TT075"</span>, <span class="st">"TT076"</span>, <span class="st">"TT077"</span>,</span>
<span id="cb2-26">    <span class="st">"TT078"</span>, <span class="st">"TT079"</span>, <span class="st">"TT080"</span>, <span class="st">"TT081"</span>, <span class="st">"TT082"</span>, <span class="st">"TT083"</span>,</span>
<span id="cb2-27">    <span class="st">"TT084"</span>, <span class="st">"TT085"</span>, <span class="st">"TT086"</span>, <span class="st">"TT087"</span>, <span class="st">"TT088"</span>, <span class="st">"TT089"</span>,</span>
<span id="cb2-28">    <span class="st">"TT090"</span>, <span class="st">"TT091"</span>, <span class="st">"TT092"</span>, <span class="st">"TT093"</span>, <span class="st">"TT094"</span>, <span class="st">"TT095"</span>,</span>
<span id="cb2-29">    <span class="st">"TT096"</span>, <span class="st">"TT097"</span>, <span class="st">"TT098"</span>, <span class="st">"TT099"</span>, <span class="st">"TT100"</span>, <span class="st">"TT101"</span>,</span>
<span id="cb2-30">    <span class="st">"TT102"</span>, <span class="st">"TT103"</span>, <span class="st">"TT104"</span>, <span class="st">"TT105"</span>, <span class="st">"TT106"</span>, <span class="st">"TT107"</span>,</span>
<span id="cb2-31">    <span class="st">"TT108"</span>, <span class="st">"TT109"</span>, <span class="st">"TT110"</span>, <span class="st">"TT111"</span>, <span class="st">"TT112"</span>, <span class="st">"TT113"</span>,</span>
<span id="cb2-32">    <span class="st">"TT114"</span>, <span class="st">"TT115"</span>, <span class="st">"TT116"</span>, <span class="st">"TT117"</span>, <span class="st">"TT118"</span>, <span class="st">"TT119"</span>,</span>
<span id="cb2-33">    <span class="st">"TT120"</span>, <span class="st">"TT121"</span>, <span class="st">"TT122"</span>, <span class="st">"TT123"</span>, <span class="st">"TT124"</span>, <span class="st">"TT125"</span>,</span>
<span id="cb2-34">    <span class="st">"TT126"</span>, <span class="st">"TT127"</span>, <span class="st">"TT128"</span>, <span class="st">"TT129"</span>, <span class="st">"TT130"</span>, <span class="st">"TT131"</span>,</span>
<span id="cb2-35">    <span class="st">"TT132"</span>, <span class="st">"TT133"</span>, <span class="st">"TT134"</span>, <span class="st">"TT135"</span>, <span class="st">"TT136"</span>, <span class="st">"TT137"</span>,</span>
<span id="cb2-36">    <span class="st">"TT138"</span>, <span class="st">"TT139"</span>, <span class="st">"TT140"</span>, <span class="st">"TT141"</span>, <span class="st">"TT142"</span>, <span class="st">"TT143"</span>,</span>
<span id="cb2-37">    <span class="st">"TT144"</span>, <span class="st">"TT145"</span>, <span class="st">"TT146"</span>, <span class="st">"TT147"</span>, <span class="st">"TT148"</span>, <span class="st">"TT149"</span>,</span>
<span id="cb2-38">    <span class="st">"TT150"</span>, <span class="st">"TT151"</span>, <span class="st">"TT152"</span>, <span class="st">"TT153"</span>, <span class="st">"TT154"</span>, <span class="st">"TT155"</span>,</span>
<span id="cb2-39">    <span class="st">"TT156"</span>, <span class="st">"TT157"</span>, <span class="st">"TT158"</span>, <span class="st">"TT159"</span>, <span class="st">"TT160"</span>, <span class="st">"TT161"</span>,</span>
<span id="cb2-40">    <span class="st">"TT162"</span>, <span class="st">"TT163"</span>, <span class="st">"TT164"</span>, <span class="st">"TT165"</span>, <span class="st">"TT166"</span>, <span class="st">"TT167"</span>,</span>
<span id="cb2-41">    <span class="st">"TT168"</span>, <span class="st">"TT169"</span>, <span class="st">"TT170"</span>, <span class="st">"TT171"</span>, <span class="st">"TT172"</span>, <span class="st">"TT173"</span>,</span>
<span id="cb2-42">    <span class="st">"TT174"</span>, <span class="st">"TT175"</span>, <span class="st">"TT176"</span>, <span class="st">"TT177"</span>, <span class="st">"TT178"</span>, <span class="st">"TT179"</span>};</span>
<span id="cb2-43"></span>
<span id="cb2-44"><span class="co">// vertices --------------------------------------------------------------------</span></span>
<span id="cb2-45"><span class="kw">struct</span> quadruple {</span>
<span id="cb2-46">    real x;</span>
<span id="cb2-47">    real y;</span>
<span id="cb2-48">    real z;</span>
<span id="cb2-49">    real t;</span>
<span id="cb2-50">}</span>
<span id="cb2-51"></span>
<span id="cb2-52">quadruple array2quadruple(real[] v){</span>
<span id="cb2-53">    quadruple q;</span>
<span id="cb2-54">    q.x = v[<span class="dv">0</span>]; q.y = v[<span class="dv">1</span>]; q.z = v[<span class="dv">2</span>]; q.t = v[<span class="dv">3</span>];</span>
<span id="cb2-55">    <span class="cf">return</span> q;</span>
<span id="cb2-56">}</span>
<span id="cb2-57"></span>
<span id="cb2-58">real x = <span class="dv">1</span> + sqrt(<span class="dv">2</span>);</span>
<span id="cb2-59">real r = sqrt(<span class="dv">1</span> + <span class="dv">3</span> * x * x);</span>
<span id="cb2-60">real[][] vertices0 = {</span>
<span id="cb2-61">    {-<span class="fl">1.0</span>, -x, -x, -x},</span>
<span id="cb2-62">    {-<span class="fl">1.0</span>, -x, -x, x},</span>
<span id="cb2-63">    {-<span class="fl">1.0</span>, -x, x, -x},</span>
<span id="cb2-64">    {-<span class="fl">1.0</span>, -x, x, x},</span>
<span id="cb2-65">    {-<span class="fl">1.0</span>, x, -x, -x},</span>
<span id="cb2-66">    {-<span class="fl">1.0</span>, x, -x, x},</span>
<span id="cb2-67">    {-<span class="fl">1.0</span>, x, x, -x},</span>
<span id="cb2-68">    {-<span class="fl">1.0</span>, x, x, x},</span>
<span id="cb2-69">    {<span class="fl">1.0</span>, -x, -x, -x},</span>
<span id="cb2-70">    {<span class="fl">1.0</span>, -x, -x, x},</span>
<span id="cb2-71">    {<span class="fl">1.0</span>, -x, x, -x},</span>
<span id="cb2-72">    {<span class="fl">1.0</span>, -x, x, x},</span>
<span id="cb2-73">    {<span class="fl">1.0</span>, x, -x, -x},</span>
<span id="cb2-74">    {<span class="fl">1.0</span>, x, -x, x},</span>
<span id="cb2-75">    {<span class="fl">1.0</span>, x, x, -x},</span>
<span id="cb2-76">    {<span class="fl">1.0</span>, x, x, x},</span>
<span id="cb2-77">    {-x, -<span class="fl">1.0</span>, -x, -x},</span>
<span id="cb2-78">    {-x, -<span class="fl">1.0</span>, -x, x},</span>
<span id="cb2-79">    {-x, -<span class="fl">1.0</span>, x, -x},</span>
<span id="cb2-80">    {-x, -<span class="fl">1.0</span>, x, x},</span>
<span id="cb2-81">    {-x, <span class="fl">1.0</span>, -x, -x},</span>
<span id="cb2-82">    {-x, <span class="fl">1.0</span>, -x, x},</span>
<span id="cb2-83">    {-x, <span class="fl">1.0</span>, x, -x},</span>
<span id="cb2-84">    {-x, <span class="fl">1.0</span>, x, x},</span>
<span id="cb2-85">    {x, -<span class="fl">1.0</span>, -x, -x},</span>
<span id="cb2-86">    {x, -<span class="fl">1.0</span>, -x, x},</span>
<span id="cb2-87">    {x, -<span class="fl">1.0</span>, x, -x},</span>
<span id="cb2-88">    {x, -<span class="fl">1.0</span>, x, x},</span>
<span id="cb2-89">    {x, <span class="fl">1.0</span>, -x, -x},</span>
<span id="cb2-90">    {x, <span class="fl">1.0</span>, -x, x},</span>
<span id="cb2-91">    {x, <span class="fl">1.0</span>, x, -x},</span>
<span id="cb2-92">    {x, <span class="fl">1.0</span>, x, x},</span>
<span id="cb2-93">    {-x, -x, -<span class="fl">1.0</span>, -x},</span>
<span id="cb2-94">    {-x, -x, -<span class="fl">1.0</span>, x},</span>
<span id="cb2-95">    {-x, -x, <span class="fl">1.0</span>, -x},</span>
<span id="cb2-96">    {-x, -x, <span class="fl">1.0</span>, x},</span>
<span id="cb2-97">    {-x, x, -<span class="fl">1.0</span>, -x},</span>
<span id="cb2-98">    {-x, x, -<span class="fl">1.0</span>, x},</span>
<span id="cb2-99">    {-x, x, <span class="fl">1.0</span>, -x},</span>
<span id="cb2-100">    {-x, x, <span class="fl">1.0</span>, x},</span>
<span id="cb2-101">    {x, -x, -<span class="fl">1.0</span>, -x},</span>
<span id="cb2-102">    {x, -x, -<span class="fl">1.0</span>, x},</span>
<span id="cb2-103">    {x, -x, <span class="fl">1.0</span>, -x},</span>
<span id="cb2-104">    {x, -x, <span class="fl">1.0</span>, x},</span>
<span id="cb2-105">    {x, x, -<span class="fl">1.0</span>, -x},</span>
<span id="cb2-106">    {x, x, -<span class="fl">1.0</span>, x},</span>
<span id="cb2-107">    {x, x, <span class="fl">1.0</span>, -x},</span>
<span id="cb2-108">    {x, x, <span class="fl">1.0</span>, x},</span>
<span id="cb2-109">    {-x, -x, -x, -<span class="fl">1.0</span>},</span>
<span id="cb2-110">    {-x, -x, -x, <span class="fl">1.0</span>},</span>
<span id="cb2-111">    {-x, -x, x, -<span class="fl">1.0</span>},</span>
<span id="cb2-112">    {-x, -x, x, <span class="fl">1.0</span>},</span>
<span id="cb2-113">    {-x, x, -x, -<span class="fl">1.0</span>},</span>
<span id="cb2-114">    {-x, x, -x, <span class="fl">1.0</span>},</span>
<span id="cb2-115">    {-x, x, x, -<span class="fl">1.0</span>},</span>
<span id="cb2-116">    {-x, x, x, <span class="fl">1.0</span>},</span>
<span id="cb2-117">    {x, -x, -x, -<span class="fl">1.0</span>},</span>
<span id="cb2-118">    {x, -x, -x, <span class="fl">1.0</span>},</span>
<span id="cb2-119">    {x, -x, x, -<span class="fl">1.0</span>},</span>
<span id="cb2-120">    {x, -x, x, <span class="fl">1.0</span>},</span>
<span id="cb2-121">    {x, x, -x, -<span class="fl">1.0</span>},</span>
<span id="cb2-122">    {x, x, -x, <span class="fl">1.0</span>},</span>
<span id="cb2-123">    {x, x, x, -<span class="fl">1.0</span>},</span>
<span id="cb2-124">    {x, x, x, <span class="fl">1.0</span>} };</span>
<span id="cb2-125">    </span>
<span id="cb2-126">quadruple[] vertices = <span class="kw">new</span> quadruple[vertices0.length];</span>
<span id="cb2-127"><span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; vertices0.length; ++i){</span>
<span id="cb2-128">    vertices[i] = array2quadruple(vertices0[i]);</span>
<span id="cb2-129">}</span>
<span id="cb2-130"></span>
<span id="cb2-131"><span class="co">// edges -----------------------------------------------------------------------</span></span>
<span id="cb2-132"><span class="dt">int</span>[][] edges = {</span>
<span id="cb2-133">    {<span class="dv">0</span>, <span class="dv">8</span>},</span>
<span id="cb2-134">    {<span class="dv">0</span>, <span class="dv">16</span>},</span>
<span id="cb2-135">    {<span class="dv">0</span>, <span class="dv">32</span>},</span>
<span id="cb2-136">    {<span class="dv">0</span>, <span class="dv">48</span>},</span>
<span id="cb2-137">    {<span class="dv">1</span>, <span class="dv">9</span>},</span>
<span id="cb2-138">    {<span class="dv">1</span>, <span class="dv">17</span>},</span>
<span id="cb2-139">    {<span class="dv">1</span>, <span class="dv">33</span>},</span>
<span id="cb2-140">    {<span class="dv">1</span>, <span class="dv">49</span>},</span>
<span id="cb2-141">    {<span class="dv">2</span>, <span class="dv">10</span>},</span>
<span id="cb2-142">    {<span class="dv">2</span>, <span class="dv">18</span>},</span>
<span id="cb2-143">    {<span class="dv">2</span>, <span class="dv">34</span>},</span>
<span id="cb2-144">    {<span class="dv">2</span>, <span class="dv">50</span>},</span>
<span id="cb2-145">    {<span class="dv">3</span>, <span class="dv">11</span>},</span>
<span id="cb2-146">    {<span class="dv">3</span>, <span class="dv">19</span>},</span>
<span id="cb2-147">    {<span class="dv">3</span>, <span class="dv">35</span>},</span>
<span id="cb2-148">    {<span class="dv">3</span>, <span class="dv">51</span>},</span>
<span id="cb2-149">    {<span class="dv">4</span>, <span class="dv">12</span>},</span>
<span id="cb2-150">    {<span class="dv">4</span>, <span class="dv">20</span>},</span>
<span id="cb2-151">    {<span class="dv">4</span>, <span class="dv">36</span>},</span>
<span id="cb2-152">    {<span class="dv">4</span>, <span class="dv">52</span>},</span>
<span id="cb2-153">    {<span class="dv">5</span>, <span class="dv">13</span>},</span>
<span id="cb2-154">    {<span class="dv">5</span>, <span class="dv">21</span>},</span>
<span id="cb2-155">    {<span class="dv">5</span>, <span class="dv">37</span>},</span>
<span id="cb2-156">    {<span class="dv">5</span>, <span class="dv">53</span>},</span>
<span id="cb2-157">    {<span class="dv">6</span>, <span class="dv">14</span>},</span>
<span id="cb2-158">    {<span class="dv">6</span>, <span class="dv">22</span>},</span>
<span id="cb2-159">    {<span class="dv">6</span>, <span class="dv">38</span>},</span>
<span id="cb2-160">    {<span class="dv">6</span>, <span class="dv">54</span>},</span>
<span id="cb2-161">    {<span class="dv">7</span>, <span class="dv">15</span>},</span>
<span id="cb2-162">    {<span class="dv">7</span>, <span class="dv">23</span>},</span>
<span id="cb2-163">    {<span class="dv">7</span>, <span class="dv">39</span>},</span>
<span id="cb2-164">    {<span class="dv">7</span>, <span class="dv">55</span>},</span>
<span id="cb2-165">    {<span class="dv">8</span>, <span class="dv">24</span>},</span>
<span id="cb2-166">    {<span class="dv">8</span>, <span class="dv">40</span>},</span>
<span id="cb2-167">    {<span class="dv">8</span>, <span class="dv">56</span>},</span>
<span id="cb2-168">    {<span class="dv">9</span>, <span class="dv">25</span>},</span>
<span id="cb2-169">    {<span class="dv">9</span>, <span class="dv">41</span>},</span>
<span id="cb2-170">    {<span class="dv">9</span>, <span class="dv">57</span>},</span>
<span id="cb2-171">    {<span class="dv">10</span>, <span class="dv">26</span>},</span>
<span id="cb2-172">    {<span class="dv">10</span>, <span class="dv">42</span>},</span>
<span id="cb2-173">    {<span class="dv">10</span>, <span class="dv">58</span>},</span>
<span id="cb2-174">    {<span class="dv">11</span>, <span class="dv">27</span>},</span>
<span id="cb2-175">    {<span class="dv">11</span>, <span class="dv">43</span>},</span>
<span id="cb2-176">    {<span class="dv">11</span>, <span class="dv">59</span>},</span>
<span id="cb2-177">    {<span class="dv">12</span>, <span class="dv">28</span>},</span>
<span id="cb2-178">    {<span class="dv">12</span>, <span class="dv">44</span>},</span>
<span id="cb2-179">    {<span class="dv">12</span>, <span class="dv">60</span>},</span>
<span id="cb2-180">    {<span class="dv">13</span>, <span class="dv">29</span>},</span>
<span id="cb2-181">    {<span class="dv">13</span>, <span class="dv">45</span>},</span>
<span id="cb2-182">    {<span class="dv">13</span>, <span class="dv">61</span>},</span>
<span id="cb2-183">    {<span class="dv">14</span>, <span class="dv">30</span>},</span>
<span id="cb2-184">    {<span class="dv">14</span>, <span class="dv">46</span>},</span>
<span id="cb2-185">    {<span class="dv">14</span>, <span class="dv">62</span>},</span>
<span id="cb2-186">    {<span class="dv">15</span>, <span class="dv">31</span>},</span>
<span id="cb2-187">    {<span class="dv">15</span>, <span class="dv">47</span>},</span>
<span id="cb2-188">    {<span class="dv">15</span>, <span class="dv">63</span>},</span>
<span id="cb2-189">    {<span class="dv">16</span>, <span class="dv">20</span>},</span>
<span id="cb2-190">    {<span class="dv">16</span>, <span class="dv">32</span>},</span>
<span id="cb2-191">    {<span class="dv">16</span>, <span class="dv">48</span>},</span>
<span id="cb2-192">    {<span class="dv">17</span>, <span class="dv">21</span>},</span>
<span id="cb2-193">    {<span class="dv">17</span>, <span class="dv">33</span>},</span>
<span id="cb2-194">    {<span class="dv">17</span>, <span class="dv">49</span>},</span>
<span id="cb2-195">    {<span class="dv">18</span>, <span class="dv">22</span>},</span>
<span id="cb2-196">    {<span class="dv">18</span>, <span class="dv">34</span>},</span>
<span id="cb2-197">    {<span class="dv">18</span>, <span class="dv">50</span>},</span>
<span id="cb2-198">    {<span class="dv">19</span>, <span class="dv">23</span>},</span>
<span id="cb2-199">    {<span class="dv">19</span>, <span class="dv">35</span>},</span>
<span id="cb2-200">    {<span class="dv">19</span>, <span class="dv">51</span>},</span>
<span id="cb2-201">    {<span class="dv">20</span>, <span class="dv">36</span>},</span>
<span id="cb2-202">    {<span class="dv">20</span>, <span class="dv">52</span>},</span>
<span id="cb2-203">    {<span class="dv">21</span>, <span class="dv">37</span>},</span>
<span id="cb2-204">    {<span class="dv">21</span>, <span class="dv">53</span>},</span>
<span id="cb2-205">    {<span class="dv">22</span>, <span class="dv">38</span>},</span>
<span id="cb2-206">    {<span class="dv">22</span>, <span class="dv">54</span>},</span>
<span id="cb2-207">    {<span class="dv">23</span>, <span class="dv">39</span>},</span>
<span id="cb2-208">    {<span class="dv">23</span>, <span class="dv">55</span>},</span>
<span id="cb2-209">    {<span class="dv">24</span>, <span class="dv">28</span>},</span>
<span id="cb2-210">    {<span class="dv">24</span>, <span class="dv">40</span>},</span>
<span id="cb2-211">    {<span class="dv">24</span>, <span class="dv">56</span>},</span>
<span id="cb2-212">    {<span class="dv">25</span>, <span class="dv">29</span>},</span>
<span id="cb2-213">    {<span class="dv">25</span>, <span class="dv">41</span>},</span>
<span id="cb2-214">    {<span class="dv">25</span>, <span class="dv">57</span>},</span>
<span id="cb2-215">    {<span class="dv">26</span>, <span class="dv">30</span>},</span>
<span id="cb2-216">    {<span class="dv">26</span>, <span class="dv">42</span>},</span>
<span id="cb2-217">    {<span class="dv">26</span>, <span class="dv">58</span>},</span>
<span id="cb2-218">    {<span class="dv">27</span>, <span class="dv">31</span>},</span>
<span id="cb2-219">    {<span class="dv">27</span>, <span class="dv">43</span>},</span>
<span id="cb2-220">    {<span class="dv">27</span>, <span class="dv">59</span>},</span>
<span id="cb2-221">    {<span class="dv">28</span>, <span class="dv">44</span>},</span>
<span id="cb2-222">    {<span class="dv">28</span>, <span class="dv">60</span>},</span>
<span id="cb2-223">    {<span class="dv">29</span>, <span class="dv">45</span>},</span>
<span id="cb2-224">    {<span class="dv">29</span>, <span class="dv">61</span>},</span>
<span id="cb2-225">    {<span class="dv">30</span>, <span class="dv">46</span>},</span>
<span id="cb2-226">    {<span class="dv">30</span>, <span class="dv">62</span>},</span>
<span id="cb2-227">    {<span class="dv">31</span>, <span class="dv">47</span>},</span>
<span id="cb2-228">    {<span class="dv">31</span>, <span class="dv">63</span>},</span>
<span id="cb2-229">    {<span class="dv">32</span>, <span class="dv">34</span>},</span>
<span id="cb2-230">    {<span class="dv">32</span>, <span class="dv">48</span>},</span>
<span id="cb2-231">    {<span class="dv">33</span>, <span class="dv">35</span>},</span>
<span id="cb2-232">    {<span class="dv">33</span>, <span class="dv">49</span>},</span>
<span id="cb2-233">    {<span class="dv">34</span>, <span class="dv">50</span>},</span>
<span id="cb2-234">    {<span class="dv">35</span>, <span class="dv">51</span>},</span>
<span id="cb2-235">    {<span class="dv">36</span>, <span class="dv">38</span>},</span>
<span id="cb2-236">    {<span class="dv">36</span>, <span class="dv">52</span>},</span>
<span id="cb2-237">    {<span class="dv">37</span>, <span class="dv">39</span>},</span>
<span id="cb2-238">    {<span class="dv">37</span>, <span class="dv">53</span>},</span>
<span id="cb2-239">    {<span class="dv">38</span>, <span class="dv">54</span>},</span>
<span id="cb2-240">    {<span class="dv">39</span>, <span class="dv">55</span>},</span>
<span id="cb2-241">    {<span class="dv">40</span>, <span class="dv">42</span>},</span>
<span id="cb2-242">    {<span class="dv">40</span>, <span class="dv">56</span>},</span>
<span id="cb2-243">    {<span class="dv">41</span>, <span class="dv">43</span>},</span>
<span id="cb2-244">    {<span class="dv">41</span>, <span class="dv">57</span>},</span>
<span id="cb2-245">    {<span class="dv">42</span>, <span class="dv">58</span>},</span>
<span id="cb2-246">    {<span class="dv">43</span>, <span class="dv">59</span>},</span>
<span id="cb2-247">    {<span class="dv">44</span>, <span class="dv">46</span>},</span>
<span id="cb2-248">    {<span class="dv">44</span>, <span class="dv">60</span>},</span>
<span id="cb2-249">    {<span class="dv">45</span>, <span class="dv">47</span>},</span>
<span id="cb2-250">    {<span class="dv">45</span>, <span class="dv">61</span>},</span>
<span id="cb2-251">    {<span class="dv">46</span>, <span class="dv">62</span>},</span>
<span id="cb2-252">    {<span class="dv">47</span>, <span class="dv">63</span>},</span>
<span id="cb2-253">    {<span class="dv">48</span>, <span class="dv">49</span>},</span>
<span id="cb2-254">    {<span class="dv">50</span>, <span class="dv">51</span>},</span>
<span id="cb2-255">    {<span class="dv">52</span>, <span class="dv">53</span>},</span>
<span id="cb2-256">    {<span class="dv">54</span>, <span class="dv">55</span>},</span>
<span id="cb2-257">    {<span class="dv">56</span>, <span class="dv">57</span>},</span>
<span id="cb2-258">    {<span class="dv">58</span>, <span class="dv">59</span>},</span>
<span id="cb2-259">    {<span class="dv">60</span>, <span class="dv">61</span>},</span>
<span id="cb2-260">    {<span class="dv">62</span>, <span class="dv">63</span>} };</span>
<span id="cb2-261"></span>
<span id="cb2-262"><span class="co">// tetrahedra ------------------------------------------------------------------</span></span>
<span id="cb2-263"><span class="dt">int</span>[][] tetrahedra = {</span>
<span id="cb2-264">    {<span class="dv">0</span>, <span class="dv">16</span>, <span class="dv">32</span>, <span class="dv">48</span>},</span>
<span id="cb2-265">    {<span class="dv">11</span>, <span class="dv">27</span>, <span class="dv">43</span>, <span class="dv">59</span>},</span>
<span id="cb2-266">    {<span class="dv">12</span>, <span class="dv">28</span>, <span class="dv">44</span>, <span class="dv">60</span>},</span>
<span id="cb2-267">    {<span class="dv">8</span>, <span class="dv">24</span>, <span class="dv">40</span>, <span class="dv">56</span>},</span>
<span id="cb2-268">    {<span class="dv">9</span>, <span class="dv">25</span>, <span class="dv">41</span>, <span class="dv">57</span>},</span>
<span id="cb2-269">    {<span class="dv">15</span>, <span class="dv">31</span>, <span class="dv">47</span>, <span class="dv">63</span>},</span>
<span id="cb2-270">    {<span class="dv">13</span>, <span class="dv">29</span>, <span class="dv">45</span>, <span class="dv">61</span>},</span>
<span id="cb2-271">    {<span class="dv">14</span>, <span class="dv">30</span>, <span class="dv">46</span>, <span class="dv">62</span>},</span>
<span id="cb2-272">    {<span class="dv">10</span>, <span class="dv">26</span>, <span class="dv">42</span>, <span class="dv">58</span>},</span>
<span id="cb2-273">    {<span class="dv">3</span>, <span class="dv">19</span>, <span class="dv">35</span>, <span class="dv">51</span>},</span>
<span id="cb2-274">    {<span class="dv">2</span>, <span class="dv">18</span>, <span class="dv">34</span>, <span class="dv">50</span>},</span>
<span id="cb2-275">    {<span class="dv">1</span>, <span class="dv">17</span>, <span class="dv">33</span>, <span class="dv">49</span>},</span>
<span id="cb2-276">    {<span class="dv">4</span>, <span class="dv">20</span>, <span class="dv">36</span>, <span class="dv">52</span>},</span>
<span id="cb2-277">    {<span class="dv">5</span>, <span class="dv">21</span>, <span class="dv">37</span>, <span class="dv">53</span>},</span>
<span id="cb2-278">    {<span class="dv">6</span>, <span class="dv">22</span>, <span class="dv">38</span>, <span class="dv">54</span>},</span>
<span id="cb2-279">    {<span class="dv">7</span>, <span class="dv">23</span>, <span class="dv">39</span>, <span class="dv">55</span>} };</span>
<span id="cb2-280"></span>
<span id="cb2-281"><span class="co">// rotation in 4D space (right-isoclinic) --------------------------------------</span></span>
<span id="cb2-282">quadruple rotate4d(real alpha, real beta, real xi, quadruple vec){</span>
<span id="cb2-283">    real a = cos(xi);</span>
<span id="cb2-284">    real b = sin(alpha)*cos(beta)*sin(xi);</span>
<span id="cb2-285">    real c = sin(alpha)*sin(beta)*sin(xi);</span>
<span id="cb2-286">    real d = cos(alpha)*sin(xi);</span>
<span id="cb2-287">    real p = vec.x;</span>
<span id="cb2-288">    real q = vec.y;</span>
<span id="cb2-289">    real r = vec.z;</span>
<span id="cb2-290">    real s = vec.t;</span>
<span id="cb2-291">    quadruple out;</span>
<span id="cb2-292">    out.x = a*p - b*q - c*r - d*s;</span>
<span id="cb2-293">    out.y = a*q + b*p + c*s - d*r;</span>
<span id="cb2-294">    out.z = a*r - b*s + c*p + d*q;</span>
<span id="cb2-295">    out.t = a*s + b*r - c*q + d*p;</span>
<span id="cb2-296">    <span class="cf">return</span> out;</span>
<span id="cb2-297">}</span>
<span id="cb2-298"></span>
<span id="cb2-299"></span>
<span id="cb2-300"><span class="co">// stereographic projection ----------------------------------------------------</span></span>
<span id="cb2-301">triple stereog(quadruple A, real r){</span>
<span id="cb2-302">    <span class="cf">return</span> (A.x, A.y, A.z) / (r - A.t);</span>
<span id="cb2-303">}</span>
<span id="cb2-304"></span>
<span id="cb2-305"><span class="co">// stereographic path ----------------------------------------------------------</span></span>
<span id="cb2-306">path3 stereoPath(quadruple A, quadruple B, real r, <span class="dt">int</span> n){</span>
<span id="cb2-307">    path3 out;</span>
<span id="cb2-308">    <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt;= n; ++i){</span>
<span id="cb2-309">        real t = i/n;</span>
<span id="cb2-310">        quadruple M;</span>
<span id="cb2-311">        real x = (<span class="dv">1</span>-t)*A.x + t*B.x;</span>
<span id="cb2-312">        real y = (<span class="dv">1</span>-t)*A.y + t*B.y;</span>
<span id="cb2-313">        real z = (<span class="dv">1</span>-t)*A.z + t*B.z;</span>
<span id="cb2-314">        real t = (<span class="dv">1</span>-t)*A.t + t*B.t;</span>
<span id="cb2-315">        real lg = sqrt(x*x + y*y + z*z + t*t) / r;</span>
<span id="cb2-316">        M.x = x / lg; M.y = y / lg; M.z = z / lg; M.t = t / lg;</span>
<span id="cb2-317">        out = out .. stereog(M, r);</span>
<span id="cb2-318">    }</span>
<span id="cb2-319">    <span class="cf">return</span> out;</span>
<span id="cb2-320">}</span>
<span id="cb2-321"></span>
<span id="cb2-322"><span class="co">// section transformation ------------------------------------------------------</span></span>
<span id="cb2-323">transform T(path3 p3, real t, <span class="dt">int</span> n){</span>
<span id="cb2-324">    triple M = relpoint(p3, t/(n/<span class="dv">4</span>));</span>
<span id="cb2-325">    <span class="cf">return</span> scale(length(M)/<span class="dv">15</span>); </span>
<span id="cb2-326">}</span>
<span id="cb2-327"></span>
<span id="cb2-328"><span class="co">// stereographic subdivision (to fill the tetrahedra) --------------------------</span></span>
<span id="cb2-329">quadruple midpoint4(quadruple A, quadruple B, real r){</span>
<span id="cb2-330">    quadruple M;</span>
<span id="cb2-331">    real x = (A.x + B.x)/<span class="dv">2</span>;</span>
<span id="cb2-332">    real y = (A.y + B.y)/<span class="dv">2</span>;</span>
<span id="cb2-333">    real z = (A.z + B.z)/<span class="dv">2</span>;</span>
<span id="cb2-334">    real t = (A.t + B.t)/<span class="dv">2</span>;</span>
<span id="cb2-335">    real lg = sqrt(x*x + y*y + z*z + t*t) / r;</span>
<span id="cb2-336">    M.x = x / lg; M.y = y / lg; M.z = z / lg; M.t = t / lg;</span>
<span id="cb2-337">    <span class="cf">return</span>(M);</span>
<span id="cb2-338">} </span>
<span id="cb2-339"></span>
<span id="cb2-340">quadruple[][] subdiv0(quadruple A, quadruple B, quadruple C, real r){</span>
<span id="cb2-341">    quadruple m01 = midpoint4(A, B, r);</span>
<span id="cb2-342">    quadruple m02 = midpoint4(A, C, r);</span>
<span id="cb2-343">    quadruple m12 = midpoint4(B, C, r);</span>
<span id="cb2-344">    <span class="cf">return</span> <span class="kw">new</span> quadruple[][] {</span>
<span id="cb2-345">        {A, m01, m02}, </span>
<span id="cb2-346">        {B, m12, m01}, </span>
<span id="cb2-347">        {C, m02, m12}, </span>
<span id="cb2-348">        {m01, m12, m02}</span>
<span id="cb2-349">    };</span>
<span id="cb2-350">}</span>
<span id="cb2-351"></span>
<span id="cb2-352">quadruple[][] subdiv(<span class="dt">int</span> n, quadruple A, quadruple B, quadruple C, real r){</span>
<span id="cb2-353">  <span class="cf">if</span>(n == <span class="dv">1</span>){</span>
<span id="cb2-354">    <span class="cf">return</span> subdiv0(A, B, C, r);</span>
<span id="cb2-355">  }</span>
<span id="cb2-356">  quadruple[][] triangles = subdiv(n-<span class="dv">1</span>, A, B, C, r);</span>
<span id="cb2-357">  quadruple[][] out = <span class="kw">new</span> quadruple[<span class="dv">0</span>][<span class="dv">3</span>];</span>
<span id="cb2-358">  <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; <span class="dv">4</span>^(n-<span class="dv">1</span>); ++i){</span>
<span id="cb2-359">    quadruple[] trgl = triangles[i];</span>
<span id="cb2-360">    out.append(subdiv0(trgl[<span class="dv">0</span>], trgl[<span class="dv">1</span>], trgl[<span class="dv">2</span>], r));</span>
<span id="cb2-361">  }</span>
<span id="cb2-362">  <span class="cf">return</span> out;</span>
<span id="cb2-363">}</span>
<span id="cb2-364"></span>
<span id="cb2-365"><span class="co">// mesh maker ------------------------------------------------------------------</span></span>
<span id="cb2-366"><span class="kw">struct</span> Mesh {</span>
<span id="cb2-367">    triple[] vertices;</span>
<span id="cb2-368">    <span class="dt">int</span>[][] indices;</span>
<span id="cb2-369">}</span>
<span id="cb2-370">Mesh stereoTriangle(<span class="dt">int</span> n, quadruple A, quadruple B, quadruple C, real r){</span>
<span id="cb2-371">    quadruple[][] triangles = subdiv(n, A, B, C, r);</span>
<span id="cb2-372">    triple[] vertices;</span>
<span id="cb2-373">    <span class="dt">int</span>[][] indices;</span>
<span id="cb2-374">    <span class="dt">int</span> faceIndex = <span class="dv">0</span>;</span>
<span id="cb2-375">    <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; triangles.length; ++i){</span>
<span id="cb2-376">        quadruple[] triangle = triangles[i];</span>
<span id="cb2-377">        vertices.push(stereog(triangle[<span class="dv">0</span>], r));</span>
<span id="cb2-378">        vertices.push(stereog(triangle[<span class="dv">1</span>], r));</span>
<span id="cb2-379">        vertices.push(stereog(triangle[<span class="dv">2</span>], r));</span>
<span id="cb2-380">        <span class="dt">int</span>[] x = {faceIndex, faceIndex+<span class="dv">1</span>, faceIndex+<span class="dv">2</span>};</span>
<span id="cb2-381">        indices.push(x);</span>
<span id="cb2-382">        faceIndex += <span class="dv">3</span>;</span>
<span id="cb2-383">    }</span>
<span id="cb2-384">    Mesh out;</span>
<span id="cb2-385">    out.vertices = vertices;</span>
<span id="cb2-386">    out.indices = indices;</span>
<span id="cb2-387">    <span class="cf">return</span> out;</span>
<span id="cb2-388">}</span>
<span id="cb2-389"></span>
<span id="cb2-390"></span>
<span id="cb2-391"><span class="co">// "bounding box" (to clip the animation) --------------------------------------</span></span>
<span id="cb2-392">path3 boundingbox = scale(<span class="fl">0.5</span>,<span class="dv">1</span>,<span class="dv">1</span>)*circle(c=O, r=<span class="dv">4</span>, normal=Z);</span>
<span id="cb2-393"></span>
<span id="cb2-394"><span class="co">// plot ------------------------------------------------------------------------</span></span>
<span id="cb2-395"><span class="dt">int</span> n = <span class="dv">75</span>;</span>
<span id="cb2-396"><span class="dt">int</span> depth = <span class="dv">6</span>;</span>
<span id="cb2-397">real alpha = <span class="dv">0</span>, beta = <span class="dv">0</span>;</span>
<span id="cb2-398"></span>
<span id="cb2-399"><span class="cf">for</span>(<span class="dt">int</span> f = <span class="dv">0</span>; f &lt; <span class="dv">180</span>; ++f){</span>
<span id="cb2-400">    <span class="co">// rotation angle</span></span>
<span id="cb2-401">    real xi = <span class="dv">2</span>*f*pi/<span class="dv">180</span>;</span>
<span id="cb2-402">    <span class="co">// rotated vertices</span></span>
<span id="cb2-403">    quadruple[] vs = <span class="kw">new</span> quadruple[vertices.length];</span>
<span id="cb2-404">    <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; vertices.length; ++i){</span>
<span id="cb2-405">        vs[i] = rotate4d(alpha, beta, xi, vertices[i]);</span>
<span id="cb2-406">    }</span>
<span id="cb2-407">    <span class="co">// new picture</span></span>
<span id="cb2-408">    picture pic;</span>
<span id="cb2-409">    <span class="co">// draw boundingbox</span></span>
<span id="cb2-410">    draw(pic, boundingbox, rgb(<span class="st">"363940ff"</span>)+opacity(<span class="dv">0</span>));</span>
<span id="cb2-411">    <span class="co">// draw edges</span></span>
<span id="cb2-412">    <span class="cf">for</span>(<span class="dt">int</span> k = <span class="dv">0</span>; k &lt; edges.length; ++k){</span>
<span id="cb2-413">        quadruple A = vs[edges[k][<span class="dv">0</span>]];</span>
<span id="cb2-414">        quadruple B = vs[edges[k][<span class="dv">1</span>]];</span>
<span id="cb2-415">        path3 p3 = stereoPath(A, B, r, n);</span>
<span id="cb2-416">        transform S(real t){</span>
<span id="cb2-417">            <span class="cf">return</span> T(p3, t, n);</span>
<span id="cb2-418">        }</span>
<span id="cb2-419">        draw(pic, tube(p3, unitcircle, S), rgb(<span class="dv">139</span>, <span class="dv">0</span>, <span class="dv">139</span>), </span>
<span id="cb2-420">                render(compression=Low, merge=<span class="kw">true</span>));</span>
<span id="cb2-421">    }</span>
<span id="cb2-422">    <span class="co">// draw vertices</span></span>
<span id="cb2-423">    <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; vertices.length; ++i){</span>
<span id="cb2-424">        triple Asg = stereog(vs[i], r);</span>
<span id="cb2-425">        draw(pic, shift(Asg)*scale3(length(Asg)/<span class="dv">10</span>)*unitsphere, purple);</span>
<span id="cb2-426">    }</span>
<span id="cb2-427">    <span class="co">// draw tetrahedra</span></span>
<span id="cb2-428">    <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; tetrahedra.length; ++i){</span>
<span id="cb2-429">        <span class="dt">int</span>[] t = tetrahedra[i];</span>
<span id="cb2-430">        Mesh mesh = stereoTriangle(depth, vs[t[<span class="dv">0</span>]], vs[t[<span class="dv">1</span>]], vs[t[<span class="dv">2</span>]], r);</span>
<span id="cb2-431">        draw(pic, mesh.vertices, mesh.indices, m = red);</span>
<span id="cb2-432">        Mesh mesh = stereoTriangle(depth, vs[t[<span class="dv">0</span>]], vs[t[<span class="dv">1</span>]], vs[t[<span class="dv">3</span>]], r);</span>
<span id="cb2-433">        draw(pic, mesh.vertices, mesh.indices, m = red);</span>
<span id="cb2-434">        Mesh mesh = stereoTriangle(depth, vs[t[<span class="dv">0</span>]], vs[t[<span class="dv">2</span>]], vs[t[<span class="dv">3</span>]], r);</span>
<span id="cb2-435">        draw(pic, mesh.vertices, mesh.indices, m = red);</span>
<span id="cb2-436">        Mesh mesh = stereoTriangle(depth, vs[t[<span class="dv">1</span>]], vs[t[<span class="dv">2</span>]], vs[t[<span class="dv">3</span>]], r);</span>
<span id="cb2-437">        draw(pic, mesh.vertices, mesh.indices, m = red);</span>
<span id="cb2-438">    }</span>
<span id="cb2-439">    <span class="co">// add picture and save</span></span>
<span id="cb2-440">    add(pic);</span>
<span id="cb2-441">    shipout(files[f], bbox(rgb(<span class="st">"363940ff"</span>), FillDraw(rgb(<span class="st">"363940ff"</span>))));</span>
<span id="cb2-442">    erase();</span>
<span id="cb2-443">}   </span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/truncatedTesseract_stereographic_asy.gif"
        />
      </p>
      <h1 id="drawing-with-pov-ray">Drawing with POV-Ray</h1>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource povray numberLines"
        ><code class="sourceCode povray"><span id="cb3-1"><span class="ot">#version</span> <span class="fl">3.7</span>;</span>
<span id="cb3-2"><span class="kw">global_settings</span> { <span class="kw">assumed_gamma</span> <span class="fl">1</span> }</span>
<span id="cb3-3"><span class="ot">#include</span> <span class="st">"colors.inc"</span></span>
<span id="cb3-4"><span class="ot">#include</span> <span class="st">"textures.inc"</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co">/* camera */</span></span>
<span id="cb3-7"><span class="kw">camera</span> {</span>
<span id="cb3-8">    <span class="kw">location</span> &lt;-<span class="fl">11</span>, <span class="fl">7</span>,-<span class="fl">32</span>&gt;</span>
<span id="cb3-9">    <span class="kw">look_at</span> <span class="fl">0</span></span>
<span id="cb3-10">    <span class="kw">angle</span> <span class="fl">45</span></span>
<span id="cb3-11">}</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co">// sun -------------------------------------------------------------------------</span></span>
<span id="cb3-14"><span class="kw">light_source</span> {&lt; <span class="fl">1000</span>,<span class="fl">3000</span>,-<span class="fl">6000</span>&gt; <span class="kw">color</span> <span class="kw">rgb</span>&lt;<span class="fl">1</span>,<span class="fl">1</span>,<span class="fl">1</span>&gt;*<span class="fl">0.9</span>}             <span class="co">// sun </span></span>
<span id="cb3-15"><span class="kw">light_source</span> {&lt;-<span class="fl">11</span>, <span class="fl">7</span>,-<span class="fl">32</span>&gt;  <span class="kw">color</span> <span class="kw">rgb</span>&lt;<span class="fl">0.9</span>,<span class="fl">0.9</span>,<span class="fl">1</span>&gt;*<span class="fl">0.1</span> <span class="kw">shadowless</span>}   <span class="co">// flash</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co">// sky -------------------------------------------------------------------------</span></span>
<span id="cb3-18"><span class="kw">plane</span>{&lt;<span class="fl">0</span>,<span class="fl">1</span>,<span class="fl">0</span>&gt;,<span class="fl">1</span> <span class="kw">hollow</span>  </span>
<span id="cb3-19">       <span class="kw">texture</span>{ <span class="kw">pigment</span>{ <span class="kw">bozo</span> <span class="kw">turbulence</span> <span class="fl">1.3</span></span>
<span id="cb3-20">                         <span class="kw">color_map</span> { [<span class="fl">0.00</span> <span class="kw">rgb</span> &lt;<span class="fl">0.24</span>, <span class="fl">0.32</span>, <span class="fl">1.0</span>&gt;*<span class="fl">0.6</span>]</span>
<span id="cb3-21">                                     [<span class="fl">0.75</span> <span class="kw">rgb</span> &lt;<span class="fl">0.24</span>, <span class="fl">0.32</span>, <span class="fl">1.0</span>&gt;*<span class="fl">0.6</span>]</span>
<span id="cb3-22">                                     [<span class="fl">0.83</span> <span class="kw">rgb</span> &lt;<span class="fl">1</span>,<span class="fl">1</span>,<span class="fl">1</span>&gt;]</span>
<span id="cb3-23">                                     [<span class="fl">0.95</span> <span class="kw">rgb</span> &lt;<span class="fl">0.25</span>,<span class="fl">0.25</span>,<span class="fl">0.25</span>&gt;]</span>
<span id="cb3-24">                                     [<span class="fl">1.0</span> <span class="kw">rgb</span> &lt;<span class="fl">0.5</span>,<span class="fl">0.5</span>,<span class="fl">0.5</span>&gt;]}</span>
<span id="cb3-25">                        <span class="kw">scale</span>&lt;<span class="fl">1</span>,<span class="fl">1</span>,<span class="fl">1</span>&gt;*<span class="fl">2.5</span>  <span class="kw">translate</span>&lt; <span class="fl">0</span>,<span class="fl">0</span>,<span class="fl">3</span>&gt;</span>
<span id="cb3-26">                       }</span>
<span id="cb3-27">                <span class="kw">finish</span> {<span class="kw">ambient</span> <span class="fl">1</span> <span class="kw">diffuse</span> <span class="fl">0</span>} }      </span>
<span id="cb3-28">       <span class="kw">scale</span> <span class="fl">10000</span>}</span>
<span id="cb3-29"></span>
<span id="cb3-30"><span class="co">// fog on the ground -----------------------------------------------------------</span></span>
<span id="cb3-31"><span class="kw">fog</span> { <span class="kw">fog_type</span>   <span class="fl">2</span></span>
<span id="cb3-32">      <span class="kw">distance</span>   <span class="fl">50</span></span>
<span id="cb3-33">      <span class="kw">color</span>      Gray10  </span>
<span id="cb3-34">      <span class="kw">fog_offset</span> <span class="fl">0.1</span></span>
<span id="cb3-35">      <span class="kw">fog_alt</span>    <span class="fl">1.5</span></span>
<span id="cb3-36">      <span class="kw">turbulence</span> <span class="fl">1.8</span></span>
<span id="cb3-37">    }</span>
<span id="cb3-38"></span>
<span id="cb3-39"><span class="co">// ground ----------------------------------------------------------------------</span></span>
<span id="cb3-40"><span class="kw">plane</span> { &lt;<span class="fl">0</span>,<span class="fl">1</span>,<span class="fl">0</span>&gt;, <span class="fl">0</span> </span>
<span id="cb3-41">    <span class="kw">texture</span> {</span>
<span id="cb3-42">        <span class="kw">pigment</span> { <span class="kw">color</span> <span class="kw">rgb</span> &lt;<span class="fl">0.95</span>,<span class="fl">0.9</span>,<span class="fl">0.73</span>&gt;*<span class="fl">0.35</span> }</span>
<span id="cb3-43">        <span class="kw">normal</span> { <span class="kw">bumps</span> <span class="fl">2</span> <span class="kw">scale</span> &lt;<span class="fl">0.25</span>,<span class="fl">0.25</span>,<span class="fl">0.25</span>&gt;*<span class="fl">0.5</span> <span class="kw">turbulence</span> <span class="fl">0.5</span> } </span>
<span id="cb3-44">        <span class="kw">finish</span> { <span class="kw">phong</span> <span class="fl">0.1</span> }</span>
<span id="cb3-45">    } </span>
<span id="cb3-46">} </span>
<span id="cb3-47"></span>
<span id="cb3-48"></span>
<span id="cb3-49"><span class="co">/* vertices */</span></span>
<span id="cb3-50"><span class="kw">#declare sqr2p1 </span>= <span class="kw">sqrt</span>(<span class="fl">2</span>) + <span class="fl">1</span>;</span>
<span id="cb3-51"><span class="kw">#declare v0 </span>= &lt; <span class="fl">-1.0</span> , -sqr2p1 , -sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-52"><span class="kw">#declare v1 </span>= &lt; <span class="fl">-1.0</span> , -sqr2p1 , -sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-53"><span class="kw">#declare v2 </span>= &lt; <span class="fl">-1.0</span> , -sqr2p1 , sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-54"><span class="kw">#declare v3 </span>= &lt; <span class="fl">-1.0</span> , -sqr2p1 , sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-55"><span class="kw">#declare v4 </span>= &lt; <span class="fl">-1.0</span> , sqr2p1 , -sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-56"><span class="kw">#declare v5 </span>= &lt; <span class="fl">-1.0</span> , sqr2p1 , -sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-57"><span class="kw">#declare v6 </span>= &lt; <span class="fl">-1.0</span> , sqr2p1 , sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-58"><span class="kw">#declare v7 </span>= &lt; <span class="fl">-1.0</span> , sqr2p1 , sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-59"><span class="kw">#declare v8 </span>= &lt; <span class="fl">1.0</span> , -sqr2p1 , -sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-60"><span class="kw">#declare v9 </span>= &lt; <span class="fl">1.0</span> , -sqr2p1 , -sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-61"><span class="kw">#declare v10 </span>= &lt; <span class="fl">1.0</span> , -sqr2p1 , sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-62"><span class="kw">#declare v11 </span>= &lt; <span class="fl">1.0</span> , -sqr2p1 , sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-63"><span class="kw">#declare v12 </span>= &lt; <span class="fl">1.0</span> , sqr2p1 , -sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-64"><span class="kw">#declare v13 </span>= &lt; <span class="fl">1.0</span> , sqr2p1 , -sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-65"><span class="kw">#declare v14 </span>= &lt; <span class="fl">1.0</span> , sqr2p1 , sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-66"><span class="kw">#declare v15 </span>= &lt; <span class="fl">1.0</span> , sqr2p1 , sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-67"><span class="kw">#declare v16 </span>= &lt; -sqr2p1 , <span class="fl">-1.0</span> , -sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-68"><span class="kw">#declare v17 </span>= &lt; -sqr2p1 , <span class="fl">-1.0</span> , -sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-69"><span class="kw">#declare v18 </span>= &lt; -sqr2p1 , <span class="fl">-1.0</span> , sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-70"><span class="kw">#declare v19 </span>= &lt; -sqr2p1 , <span class="fl">-1.0</span> , sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-71"><span class="kw">#declare v20 </span>= &lt; -sqr2p1 , <span class="fl">1.0</span> , -sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-72"><span class="kw">#declare v21 </span>= &lt; -sqr2p1 , <span class="fl">1.0</span> , -sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-73"><span class="kw">#declare v22 </span>= &lt; -sqr2p1 , <span class="fl">1.0</span> , sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-74"><span class="kw">#declare v23 </span>= &lt; -sqr2p1 , <span class="fl">1.0</span> , sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-75"><span class="kw">#declare v24 </span>= &lt; sqr2p1 , <span class="fl">-1.0</span> , -sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-76"><span class="kw">#declare v25 </span>= &lt; sqr2p1 , <span class="fl">-1.0</span> , -sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-77"><span class="kw">#declare v26 </span>= &lt; sqr2p1 , <span class="fl">-1.0</span> , sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-78"><span class="kw">#declare v27 </span>= &lt; sqr2p1 , <span class="fl">-1.0</span> , sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-79"><span class="kw">#declare v28 </span>= &lt; sqr2p1 , <span class="fl">1.0</span> , -sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-80"><span class="kw">#declare v29 </span>= &lt; sqr2p1 , <span class="fl">1.0</span> , -sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-81"><span class="kw">#declare v30 </span>= &lt; sqr2p1 , <span class="fl">1.0</span> , sqr2p1 , -sqr2p1 &gt;;</span>
<span id="cb3-82"><span class="kw">#declare v31 </span>= &lt; sqr2p1 , <span class="fl">1.0</span> , sqr2p1 , sqr2p1 &gt;;</span>
<span id="cb3-83"><span class="kw">#declare v32 </span>= &lt; -sqr2p1 , -sqr2p1 , <span class="fl">-1.0</span> , -sqr2p1 &gt;;</span>
<span id="cb3-84"><span class="kw">#declare v33 </span>= &lt; -sqr2p1 , -sqr2p1 , <span class="fl">-1.0</span> , sqr2p1 &gt;;</span>
<span id="cb3-85"><span class="kw">#declare v34 </span>= &lt; -sqr2p1 , -sqr2p1 , <span class="fl">1.0</span> , -sqr2p1 &gt;;</span>
<span id="cb3-86"><span class="kw">#declare v35 </span>= &lt; -sqr2p1 , -sqr2p1 , <span class="fl">1.0</span> , sqr2p1 &gt;;</span>
<span id="cb3-87"><span class="kw">#declare v36 </span>= &lt; -sqr2p1 , sqr2p1 , <span class="fl">-1.0</span> , -sqr2p1 &gt;;</span>
<span id="cb3-88"><span class="kw">#declare v37 </span>= &lt; -sqr2p1 , sqr2p1 , <span class="fl">-1.0</span> , sqr2p1 &gt;;</span>
<span id="cb3-89"><span class="kw">#declare v38 </span>= &lt; -sqr2p1 , sqr2p1 , <span class="fl">1.0</span> , -sqr2p1 &gt;;</span>
<span id="cb3-90"><span class="kw">#declare v39 </span>= &lt; -sqr2p1 , sqr2p1 , <span class="fl">1.0</span> , sqr2p1 &gt;;</span>
<span id="cb3-91"><span class="kw">#declare v40 </span>= &lt; sqr2p1 , -sqr2p1 , <span class="fl">-1.0</span> , -sqr2p1 &gt;;</span>
<span id="cb3-92"><span class="kw">#declare v41 </span>= &lt; sqr2p1 , -sqr2p1 , <span class="fl">-1.0</span> , sqr2p1 &gt;;</span>
<span id="cb3-93"><span class="kw">#declare v42 </span>= &lt; sqr2p1 , -sqr2p1 , <span class="fl">1.0</span> , -sqr2p1 &gt;;</span>
<span id="cb3-94"><span class="kw">#declare v43 </span>= &lt; sqr2p1 , -sqr2p1 , <span class="fl">1.0</span> , sqr2p1 &gt;;</span>
<span id="cb3-95"><span class="kw">#declare v44 </span>= &lt; sqr2p1 , sqr2p1 , <span class="fl">-1.0</span> , -sqr2p1 &gt;;</span>
<span id="cb3-96"><span class="kw">#declare v45 </span>= &lt; sqr2p1 , sqr2p1 , <span class="fl">-1.0</span> , sqr2p1 &gt;;</span>
<span id="cb3-97"><span class="kw">#declare v46 </span>= &lt; sqr2p1 , sqr2p1 , <span class="fl">1.0</span> , -sqr2p1 &gt;;</span>
<span id="cb3-98"><span class="kw">#declare v47 </span>= &lt; sqr2p1 , sqr2p1 , <span class="fl">1.0</span> , sqr2p1 &gt;;</span>
<span id="cb3-99"><span class="kw">#declare v48 </span>= &lt; -sqr2p1 , -sqr2p1 , -sqr2p1 , <span class="fl">-1.0</span> &gt;;</span>
<span id="cb3-100"><span class="kw">#declare v49 </span>= &lt; -sqr2p1 , -sqr2p1 , -sqr2p1 , <span class="fl">1.0</span> &gt;;</span>
<span id="cb3-101"><span class="kw">#declare v50 </span>= &lt; -sqr2p1 , -sqr2p1 , sqr2p1 , <span class="fl">-1.0</span> &gt;;</span>
<span id="cb3-102"><span class="kw">#declare v51 </span>= &lt; -sqr2p1 , -sqr2p1 , sqr2p1 , <span class="fl">1.0</span> &gt;;</span>
<span id="cb3-103"><span class="kw">#declare v52 </span>= &lt; -sqr2p1 , sqr2p1 , -sqr2p1 , <span class="fl">-1.0</span> &gt;;</span>
<span id="cb3-104"><span class="kw">#declare v53 </span>= &lt; -sqr2p1 , sqr2p1 , -sqr2p1 , <span class="fl">1.0</span> &gt;;</span>
<span id="cb3-105"><span class="kw">#declare v54 </span>= &lt; -sqr2p1 , sqr2p1 , sqr2p1 , <span class="fl">-1.0</span> &gt;;</span>
<span id="cb3-106"><span class="kw">#declare v55 </span>= &lt; -sqr2p1 , sqr2p1 , sqr2p1 , <span class="fl">1.0</span> &gt;;</span>
<span id="cb3-107"><span class="kw">#declare v56 </span>= &lt; sqr2p1 , -sqr2p1 , -sqr2p1 , <span class="fl">-1.0</span> &gt;;</span>
<span id="cb3-108"><span class="kw">#declare v57 </span>= &lt; sqr2p1 , -sqr2p1 , -sqr2p1 , <span class="fl">1.0</span> &gt;;</span>
<span id="cb3-109"><span class="kw">#declare v58 </span>= &lt; sqr2p1 , -sqr2p1 , sqr2p1 , <span class="fl">-1.0</span> &gt;;</span>
<span id="cb3-110"><span class="kw">#declare v59 </span>= &lt; sqr2p1 , -sqr2p1 , sqr2p1 , <span class="fl">1.0</span> &gt;;</span>
<span id="cb3-111"><span class="kw">#declare v60 </span>= &lt; sqr2p1 , sqr2p1 , -sqr2p1 , <span class="fl">-1.0</span> &gt;;</span>
<span id="cb3-112"><span class="kw">#declare v61 </span>= &lt; sqr2p1 , sqr2p1 , -sqr2p1 , <span class="fl">1.0</span> &gt;;</span>
<span id="cb3-113"><span class="kw">#declare v62 </span>= &lt; sqr2p1 , sqr2p1 , sqr2p1 , <span class="fl">-1.0</span> &gt;;</span>
<span id="cb3-114"><span class="kw">#declare v63 </span>= &lt; sqr2p1 , sqr2p1 , sqr2p1 , <span class="fl">1.0</span> &gt;;</span>
<span id="cb3-115"><span class="kw">#declare vertices </span>= <span class="kw">array</span>[<span class="fl">64</span>] </span>
<span id="cb3-116">    {v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,</span>
<span id="cb3-117">    v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29,v30,v31,</span>
<span id="cb3-118">    v32,v33,v34,v35,v36,v37,v38,v39,v40,v41,v42,v43,v44,v45,v46,v47,</span>
<span id="cb3-119">    v48,v49,v50,v51,v52,v53,v54,v55,v56,v57,v58,v59,v60,v61,v62,v63};</span>
<span id="cb3-120"></span>
<span id="cb3-121"><span class="co">/* edges */</span></span>
<span id="cb3-122"><span class="kw">#declare edges </span>= <span class="kw">array</span>[<span class="fl">128</span>][<span class="fl">2</span>] </span>
<span id="cb3-123">{ { <span class="fl">0</span> , <span class="fl">8</span> }</span>
<span id="cb3-124">, { <span class="fl">0</span> , <span class="fl">16</span> }</span>
<span id="cb3-125">, { <span class="fl">0</span> , <span class="fl">32</span> }</span>
<span id="cb3-126">, { <span class="fl">0</span> , <span class="fl">48</span> }</span>
<span id="cb3-127">, { <span class="fl">1</span> , <span class="fl">9</span> }</span>
<span id="cb3-128">, { <span class="fl">1</span> , <span class="fl">17</span> }</span>
<span id="cb3-129">, { <span class="fl">1</span> , <span class="fl">33</span> }</span>
<span id="cb3-130">, { <span class="fl">1</span> , <span class="fl">49</span> }</span>
<span id="cb3-131">, { <span class="fl">2</span> , <span class="fl">10</span> }</span>
<span id="cb3-132">, { <span class="fl">2</span> , <span class="fl">18</span> }</span>
<span id="cb3-133">, { <span class="fl">2</span> , <span class="fl">34</span> }</span>
<span id="cb3-134">, { <span class="fl">2</span> , <span class="fl">50</span> }</span>
<span id="cb3-135">, { <span class="fl">3</span> , <span class="fl">11</span> }</span>
<span id="cb3-136">, { <span class="fl">3</span> , <span class="fl">19</span> }</span>
<span id="cb3-137">, { <span class="fl">3</span> , <span class="fl">35</span> }</span>
<span id="cb3-138">, { <span class="fl">3</span> , <span class="fl">51</span> }</span>
<span id="cb3-139">, { <span class="fl">4</span> , <span class="fl">12</span> }</span>
<span id="cb3-140">, { <span class="fl">4</span> , <span class="fl">20</span> }</span>
<span id="cb3-141">, { <span class="fl">4</span> , <span class="fl">36</span> }</span>
<span id="cb3-142">, { <span class="fl">4</span> , <span class="fl">52</span> }</span>
<span id="cb3-143">, { <span class="fl">5</span> , <span class="fl">13</span> }</span>
<span id="cb3-144">, { <span class="fl">5</span> , <span class="fl">21</span> }</span>
<span id="cb3-145">, { <span class="fl">5</span> , <span class="fl">37</span> }</span>
<span id="cb3-146">, { <span class="fl">5</span> , <span class="fl">53</span> }</span>
<span id="cb3-147">, { <span class="fl">6</span> , <span class="fl">14</span> }</span>
<span id="cb3-148">, { <span class="fl">6</span> , <span class="fl">22</span> }</span>
<span id="cb3-149">, { <span class="fl">6</span> , <span class="fl">38</span> }</span>
<span id="cb3-150">, { <span class="fl">6</span> , <span class="fl">54</span> }</span>
<span id="cb3-151">, { <span class="fl">7</span> , <span class="fl">15</span> }</span>
<span id="cb3-152">, { <span class="fl">7</span> , <span class="fl">23</span> }</span>
<span id="cb3-153">, { <span class="fl">7</span> , <span class="fl">39</span> }</span>
<span id="cb3-154">, { <span class="fl">7</span> , <span class="fl">55</span> }</span>
<span id="cb3-155">, { <span class="fl">8</span> , <span class="fl">24</span> }</span>
<span id="cb3-156">, { <span class="fl">8</span> , <span class="fl">40</span> }</span>
<span id="cb3-157">, { <span class="fl">8</span> , <span class="fl">56</span> }</span>
<span id="cb3-158">, { <span class="fl">9</span> , <span class="fl">25</span> }</span>
<span id="cb3-159">, { <span class="fl">9</span> , <span class="fl">41</span> }</span>
<span id="cb3-160">, { <span class="fl">9</span> , <span class="fl">57</span> }</span>
<span id="cb3-161">, { <span class="fl">10</span> , <span class="fl">26</span> }</span>
<span id="cb3-162">, { <span class="fl">10</span> , <span class="fl">42</span> }</span>
<span id="cb3-163">, { <span class="fl">10</span> , <span class="fl">58</span> }</span>
<span id="cb3-164">, { <span class="fl">11</span> , <span class="fl">27</span> }</span>
<span id="cb3-165">, { <span class="fl">11</span> , <span class="fl">43</span> }</span>
<span id="cb3-166">, { <span class="fl">11</span> , <span class="fl">59</span> }</span>
<span id="cb3-167">, { <span class="fl">12</span> , <span class="fl">28</span> }</span>
<span id="cb3-168">, { <span class="fl">12</span> , <span class="fl">44</span> }</span>
<span id="cb3-169">, { <span class="fl">12</span> , <span class="fl">60</span> }</span>
<span id="cb3-170">, { <span class="fl">13</span> , <span class="fl">29</span> }</span>
<span id="cb3-171">, { <span class="fl">13</span> , <span class="fl">45</span> }</span>
<span id="cb3-172">, { <span class="fl">13</span> , <span class="fl">61</span> }</span>
<span id="cb3-173">, { <span class="fl">14</span> , <span class="fl">30</span> }</span>
<span id="cb3-174">, { <span class="fl">14</span> , <span class="fl">46</span> }</span>
<span id="cb3-175">, { <span class="fl">14</span> , <span class="fl">62</span> }</span>
<span id="cb3-176">, { <span class="fl">15</span> , <span class="fl">31</span> }</span>
<span id="cb3-177">, { <span class="fl">15</span> , <span class="fl">47</span> }</span>
<span id="cb3-178">, { <span class="fl">15</span> , <span class="fl">63</span> }</span>
<span id="cb3-179">, { <span class="fl">16</span> , <span class="fl">20</span> }</span>
<span id="cb3-180">, { <span class="fl">16</span> , <span class="fl">32</span> }</span>
<span id="cb3-181">, { <span class="fl">16</span> , <span class="fl">48</span> }</span>
<span id="cb3-182">, { <span class="fl">17</span> , <span class="fl">21</span> }</span>
<span id="cb3-183">, { <span class="fl">17</span> , <span class="fl">33</span> }</span>
<span id="cb3-184">, { <span class="fl">17</span> , <span class="fl">49</span> }</span>
<span id="cb3-185">, { <span class="fl">18</span> , <span class="fl">22</span> }</span>
<span id="cb3-186">, { <span class="fl">18</span> , <span class="fl">34</span> }</span>
<span id="cb3-187">, { <span class="fl">18</span> , <span class="fl">50</span> }</span>
<span id="cb3-188">, { <span class="fl">19</span> , <span class="fl">23</span> }</span>
<span id="cb3-189">, { <span class="fl">19</span> , <span class="fl">35</span> }</span>
<span id="cb3-190">, { <span class="fl">19</span> , <span class="fl">51</span> }</span>
<span id="cb3-191">, { <span class="fl">20</span> , <span class="fl">36</span> }</span>
<span id="cb3-192">, { <span class="fl">20</span> , <span class="fl">52</span> }</span>
<span id="cb3-193">, { <span class="fl">21</span> , <span class="fl">37</span> }</span>
<span id="cb3-194">, { <span class="fl">21</span> , <span class="fl">53</span> }</span>
<span id="cb3-195">, { <span class="fl">22</span> , <span class="fl">38</span> }</span>
<span id="cb3-196">, { <span class="fl">22</span> , <span class="fl">54</span> }</span>
<span id="cb3-197">, { <span class="fl">23</span> , <span class="fl">39</span> }</span>
<span id="cb3-198">, { <span class="fl">23</span> , <span class="fl">55</span> }</span>
<span id="cb3-199">, { <span class="fl">24</span> , <span class="fl">28</span> }</span>
<span id="cb3-200">, { <span class="fl">24</span> , <span class="fl">40</span> }</span>
<span id="cb3-201">, { <span class="fl">24</span> , <span class="fl">56</span> }</span>
<span id="cb3-202">, { <span class="fl">25</span> , <span class="fl">29</span> }</span>
<span id="cb3-203">, { <span class="fl">25</span> , <span class="fl">41</span> }</span>
<span id="cb3-204">, { <span class="fl">25</span> , <span class="fl">57</span> }</span>
<span id="cb3-205">, { <span class="fl">26</span> , <span class="fl">30</span> }</span>
<span id="cb3-206">, { <span class="fl">26</span> , <span class="fl">42</span> }</span>
<span id="cb3-207">, { <span class="fl">26</span> , <span class="fl">58</span> }</span>
<span id="cb3-208">, { <span class="fl">27</span> , <span class="fl">31</span> }</span>
<span id="cb3-209">, { <span class="fl">27</span> , <span class="fl">43</span> }</span>
<span id="cb3-210">, { <span class="fl">27</span> , <span class="fl">59</span> }</span>
<span id="cb3-211">, { <span class="fl">28</span> , <span class="fl">44</span> }</span>
<span id="cb3-212">, { <span class="fl">28</span> , <span class="fl">60</span> }</span>
<span id="cb3-213">, { <span class="fl">29</span> , <span class="fl">45</span> }</span>
<span id="cb3-214">, { <span class="fl">29</span> , <span class="fl">61</span> }</span>
<span id="cb3-215">, { <span class="fl">30</span> , <span class="fl">46</span> }</span>
<span id="cb3-216">, { <span class="fl">30</span> , <span class="fl">62</span> }</span>
<span id="cb3-217">, { <span class="fl">31</span> , <span class="fl">47</span> }</span>
<span id="cb3-218">, { <span class="fl">31</span> , <span class="fl">63</span> }</span>
<span id="cb3-219">, { <span class="fl">32</span> , <span class="fl">34</span> }</span>
<span id="cb3-220">, { <span class="fl">32</span> , <span class="fl">48</span> }</span>
<span id="cb3-221">, { <span class="fl">33</span> , <span class="fl">35</span> }</span>
<span id="cb3-222">, { <span class="fl">33</span> , <span class="fl">49</span> }</span>
<span id="cb3-223">, { <span class="fl">34</span> , <span class="fl">50</span> }</span>
<span id="cb3-224">, { <span class="fl">35</span> , <span class="fl">51</span> }</span>
<span id="cb3-225">, { <span class="fl">36</span> , <span class="fl">38</span> }</span>
<span id="cb3-226">, { <span class="fl">36</span> , <span class="fl">52</span> }</span>
<span id="cb3-227">, { <span class="fl">37</span> , <span class="fl">39</span> }</span>
<span id="cb3-228">, { <span class="fl">37</span> , <span class="fl">53</span> }</span>
<span id="cb3-229">, { <span class="fl">38</span> , <span class="fl">54</span> }</span>
<span id="cb3-230">, { <span class="fl">39</span> , <span class="fl">55</span> }</span>
<span id="cb3-231">, { <span class="fl">40</span> , <span class="fl">42</span> }</span>
<span id="cb3-232">, { <span class="fl">40</span> , <span class="fl">56</span> }</span>
<span id="cb3-233">, { <span class="fl">41</span> , <span class="fl">43</span> }</span>
<span id="cb3-234">, { <span class="fl">41</span> , <span class="fl">57</span> }</span>
<span id="cb3-235">, { <span class="fl">42</span> , <span class="fl">58</span> }</span>
<span id="cb3-236">, { <span class="fl">43</span> , <span class="fl">59</span> }</span>
<span id="cb3-237">, { <span class="fl">44</span> , <span class="fl">46</span> }</span>
<span id="cb3-238">, { <span class="fl">44</span> , <span class="fl">60</span> }</span>
<span id="cb3-239">, { <span class="fl">45</span> , <span class="fl">47</span> }</span>
<span id="cb3-240">, { <span class="fl">45</span> , <span class="fl">61</span> }</span>
<span id="cb3-241">, { <span class="fl">46</span> , <span class="fl">62</span> }</span>
<span id="cb3-242">, { <span class="fl">47</span> , <span class="fl">63</span> }</span>
<span id="cb3-243">, { <span class="fl">48</span> , <span class="fl">49</span> }</span>
<span id="cb3-244">, { <span class="fl">50</span> , <span class="fl">51</span> }</span>
<span id="cb3-245">, { <span class="fl">52</span> , <span class="fl">53</span> }</span>
<span id="cb3-246">, { <span class="fl">54</span> , <span class="fl">55</span> }</span>
<span id="cb3-247">, { <span class="fl">56</span> , <span class="fl">57</span> }</span>
<span id="cb3-248">, { <span class="fl">58</span> , <span class="fl">59</span> }</span>
<span id="cb3-249">, { <span class="fl">60</span> , <span class="fl">61</span> }</span>
<span id="cb3-250">, { <span class="fl">62</span> , <span class="fl">63</span> } };</span>
<span id="cb3-251"></span>
<span id="cb3-252"><span class="co">/* tetrahedra */</span></span>
<span id="cb3-253"><span class="kw">#declare tetrahedra </span>= <span class="kw">array</span>[<span class="fl">16</span>][<span class="fl">4</span>]</span>
<span id="cb3-254">{ { <span class="fl">0</span> , <span class="fl">16</span> , <span class="fl">32</span> , <span class="fl">48</span> }</span>
<span id="cb3-255">, { <span class="fl">11</span> , <span class="fl">27</span> , <span class="fl">43</span> , <span class="fl">59</span> }</span>
<span id="cb3-256">, { <span class="fl">12</span> , <span class="fl">28</span> , <span class="fl">44</span> , <span class="fl">60</span> }</span>
<span id="cb3-257">, { <span class="fl">8</span> , <span class="fl">24</span> , <span class="fl">40</span> , <span class="fl">56</span> }</span>
<span id="cb3-258">, { <span class="fl">9</span> , <span class="fl">25</span> , <span class="fl">41</span> , <span class="fl">57</span> }</span>
<span id="cb3-259">, { <span class="fl">15</span> , <span class="fl">31</span> , <span class="fl">47</span> , <span class="fl">63</span> }</span>
<span id="cb3-260">, { <span class="fl">13</span> , <span class="fl">29</span> , <span class="fl">45</span> , <span class="fl">61</span> }</span>
<span id="cb3-261">, { <span class="fl">14</span> , <span class="fl">30</span> , <span class="fl">46</span> , <span class="fl">62</span> }</span>
<span id="cb3-262">, { <span class="fl">10</span> , <span class="fl">26</span> , <span class="fl">42</span> , <span class="fl">58</span> }</span>
<span id="cb3-263">, { <span class="fl">3</span> , <span class="fl">19</span> , <span class="fl">35</span> , <span class="fl">51</span> }</span>
<span id="cb3-264">, { <span class="fl">2</span> , <span class="fl">18</span> , <span class="fl">34</span> , <span class="fl">50</span> }</span>
<span id="cb3-265">, { <span class="fl">1</span> , <span class="fl">17</span> , <span class="fl">33</span> , <span class="fl">49</span> }</span>
<span id="cb3-266">, { <span class="fl">4</span> , <span class="fl">20</span> , <span class="fl">36</span> , <span class="fl">52</span> }</span>
<span id="cb3-267">, { <span class="fl">5</span> , <span class="fl">21</span> , <span class="fl">37</span> , <span class="fl">53</span> }</span>
<span id="cb3-268">, { <span class="fl">6</span> , <span class="fl">22</span> , <span class="fl">38</span> , <span class="fl">54</span> }</span>
<span id="cb3-269">, { <span class="fl">7</span> , <span class="fl">23</span> , <span class="fl">39</span> , <span class="fl">55</span> } };</span>
<span id="cb3-270"></span>
<span id="cb3-271"><span class="kw">#declare faces </span>= <span class="kw">array</span>[<span class="fl">64</span>][<span class="fl">3</span>];</span>
<span id="cb3-272">#for(i, <span class="fl">0</span>, <span class="fl">15</span>)</span>
<span id="cb3-273">    <span class="kw">#declare faces</span>[<span class="fl">4</span>*i][<span class="fl">0</span>] = tetrahedra[i][<span class="fl">0</span>];</span>
<span id="cb3-274">    <span class="kw">#declare faces</span>[<span class="fl">4</span>*i][<span class="fl">1</span>] = tetrahedra[i][<span class="fl">1</span>];</span>
<span id="cb3-275">    <span class="kw">#declare faces</span>[<span class="fl">4</span>*i][<span class="fl">2</span>] = tetrahedra[i][<span class="fl">2</span>];</span>
<span id="cb3-276">    <span class="kw">#declare faces</span>[<span class="fl">4</span>*i+<span class="fl">1</span>][<span class="fl">0</span>] = tetrahedra[i][<span class="fl">0</span>];</span>
<span id="cb3-277">    <span class="kw">#declare faces</span>[<span class="fl">4</span>*i+<span class="fl">1</span>][<span class="fl">1</span>] = tetrahedra[i][<span class="fl">1</span>];</span>
<span id="cb3-278">    <span class="kw">#declare faces</span>[<span class="fl">4</span>*i+<span class="fl">1</span>][<span class="fl">2</span>] = tetrahedra[i][<span class="fl">3</span>];</span>
<span id="cb3-279">    <span class="kw">#declare faces</span>[<span class="fl">4</span>*i+<span class="fl">2</span>][<span class="fl">0</span>] = tetrahedra[i][<span class="fl">0</span>];</span>
<span id="cb3-280">    <span class="kw">#declare faces</span>[<span class="fl">4</span>*i+<span class="fl">2</span>][<span class="fl">1</span>] = tetrahedra[i][<span class="fl">2</span>];</span>
<span id="cb3-281">    <span class="kw">#declare faces</span>[<span class="fl">4</span>*i+<span class="fl">2</span>][<span class="fl">2</span>] = tetrahedra[i][<span class="fl">3</span>];</span>
<span id="cb3-282">    <span class="kw">#declare faces</span>[<span class="fl">4</span>*i+<span class="fl">3</span>][<span class="fl">0</span>] = tetrahedra[i][<span class="fl">1</span>];</span>
<span id="cb3-283">    <span class="kw">#declare faces</span>[<span class="fl">4</span>*i+<span class="fl">3</span>][<span class="fl">1</span>] = tetrahedra[i][<span class="fl">2</span>];</span>
<span id="cb3-284">    <span class="kw">#declare faces</span>[<span class="fl">4</span>*i+<span class="fl">3</span>][<span class="fl">2</span>] = tetrahedra[i][<span class="fl">3</span>];</span>
<span id="cb3-285"><span class="ot">#end</span></span>
<span id="cb3-286"></span>
<span id="cb3-287"></span>
<span id="cb3-288"><span class="co">/* rotation in 4D space */</span></span>
<span id="cb3-289"><span class="kw">#macro rotate4d</span>(theta, phi, xi, vec)</span>
<span id="cb3-290">    <span class="kw">#local a </span>= <span class="kw">cos</span>(xi);</span>
<span id="cb3-291">    <span class="kw">#local b </span>= <span class="kw">sin</span>(theta)*<span class="kw">cos</span>(phi)*<span class="kw">sin</span>(xi);</span>
<span id="cb3-292">    <span class="kw">#local c </span>= <span class="kw">sin</span>(theta)*<span class="kw">sin</span>(phi)*<span class="kw">sin</span>(xi);</span>
<span id="cb3-293">    <span class="kw">#local d </span>= <span class="kw">cos</span>(theta)*<span class="kw">sin</span>(xi);</span>
<span id="cb3-294">    <span class="kw">#local p </span>= vec.<span class="kw">x</span>;</span>
<span id="cb3-295">    <span class="kw">#local q </span>= vec.<span class="kw">y</span>;</span>
<span id="cb3-296">    <span class="kw">#local r </span>= vec.<span class="kw">z</span>;</span>
<span id="cb3-297">    <span class="kw">#local s </span>= vec.<span class="kw">t</span>;</span>
<span id="cb3-298">    &lt; a*p - b*q - c*r - d*s</span>
<span id="cb3-299">    , a*q + b*p + c*s - d*r</span>
<span id="cb3-300">    , a*r - b*s + c*p + d*q</span>
<span id="cb3-301">    , a*s + b*r - c*q + d*p &gt;</span>
<span id="cb3-302"><span class="ot">#end</span></span>
<span id="cb3-303"></span>
<span id="cb3-304"><span class="co">/* stereographic projection */</span></span>
<span id="cb3-305"><span class="kw">#macro StereographicProjection</span>(q, r)</span>
<span id="cb3-306">    &lt;q.<span class="kw">x</span>,q.<span class="kw">y</span>,q.<span class="kw">z</span>&gt;/(r-q.<span class="kw">t</span>)</span>
<span id="cb3-307"><span class="ot">#end</span></span>
<span id="cb3-308"></span>
<span id="cb3-309"><span class="co">/* rotated and projected vertices */</span></span>
<span id="cb3-310"><span class="kw">#macro ProjectedVertices</span>(theta, phi, xi, r)</span>
<span id="cb3-311">    <span class="kw">#local out </span>= <span class="kw">array</span>[<span class="fl">64</span>];</span>
<span id="cb3-312">    #for(i, <span class="fl">0</span>, <span class="fl">63</span>)</span>
<span id="cb3-313">        <span class="kw">#local out</span>[i] = StereographicProjection(</span>
<span id="cb3-314">                            rotate4d(theta,phi,xi,vertices[i]), r</span>
<span id="cb3-315">                        );</span>
<span id="cb3-316">    <span class="ot">#end</span></span>
<span id="cb3-317">    out</span>
<span id="cb3-318"><span class="ot">#end</span></span>
<span id="cb3-319"></span>
<span id="cb3-320"><span class="co">/* macro spherical segment */</span></span>
<span id="cb3-321"><span class="kw">#macro vlength4</span>(P)</span>
<span id="cb3-322">    <span class="kw">sqrt</span>(P.<span class="kw">x</span>*P.<span class="kw">x</span> + P.<span class="kw">y</span>*P.<span class="kw">y</span> + P.<span class="kw">z</span>*P.<span class="kw">z</span> + P.<span class="kw">t</span>*P.<span class="kw">t</span>)</span>
<span id="cb3-323"><span class="ot">#end</span></span>
<span id="cb3-324"></span>
<span id="cb3-325"><span class="kw">#macro sphericalSegment</span>(P, Q, r, n)</span>
<span id="cb3-326">    <span class="kw">#local out </span>= <span class="kw">array</span>[n+<span class="fl">1</span>];</span>
<span id="cb3-327">    #for(i, <span class="fl">0</span>, n)</span>
<span id="cb3-328">        <span class="kw">#local pt </span>= P + (i/n)*(Q-P);</span>
<span id="cb3-329">        <span class="kw">#local out</span>[i] = r/vlength4(pt) * pt;</span>
<span id="cb3-330">    <span class="ot">#end</span></span>
<span id="cb3-331">    out</span>
<span id="cb3-332"><span class="ot">#end</span></span>
<span id="cb3-333"></span>
<span id="cb3-334"><span class="co">/* macro to draw an edge */</span></span>
<span id="cb3-335"><span class="kw">#macro Edge</span>(verts, v1, v2, theta, phi, xi, r, Tex)</span>
<span id="cb3-336">    <span class="kw">#local P </span>= verts[v1];</span>
<span id="cb3-337">    <span class="kw">#local Q </span>= verts[v2];</span>
<span id="cb3-338">    <span class="kw">#local PQ </span>= sphericalSegment(P, Q, r, <span class="fl">100</span>);</span>
<span id="cb3-339">    <span class="kw">sphere_sweep</span> {</span>
<span id="cb3-340">        <span class="kw">b_spline</span> <span class="fl">101</span></span>
<span id="cb3-341">        #for(k,<span class="fl">0</span>,<span class="fl">100</span>)</span>
<span id="cb3-342">            <span class="kw">#local O </span>= </span>
<span id="cb3-343">                StereographicProjection(rotate4d(theta,phi,xi,PQ[k]), r);</span>
<span id="cb3-344">            O <span class="kw">log</span>(<span class="fl">1</span>+<span class="kw">vlength</span>(O)/<span class="fl">4</span>)/<span class="fl">2</span></span>
<span id="cb3-345">        <span class="ot">#end</span></span>
<span id="cb3-346">        <span class="kw">texture</span> { </span>
<span id="cb3-347">            Tex</span>
<span id="cb3-348">        }</span>
<span id="cb3-349">    }</span>
<span id="cb3-350"><span class="ot">#end</span></span>
<span id="cb3-351"></span>
<span id="cb3-352"><span class="co">/* stereographic subdivision (to fill the triangular faces) */</span></span>
<span id="cb3-353"><span class="kw">#macro midpoint4</span>(A, B, r)</span>
<span id="cb3-354">    <span class="kw">#local xmid </span>= (A.<span class="kw">x</span> + B.<span class="kw">x</span>)/<span class="fl">2</span>;</span>
<span id="cb3-355">    <span class="kw">#local ymid </span>= (A.<span class="kw">y</span> + B.<span class="kw">y</span>)/<span class="fl">2</span>;</span>
<span id="cb3-356">    <span class="kw">#local zmid </span>= (A.<span class="kw">z</span> + B.<span class="kw">z</span>)/<span class="fl">2</span>;</span>
<span id="cb3-357">    <span class="kw">#local tmid </span>= (A.<span class="kw">t</span> + B.<span class="kw">t</span>)/<span class="fl">2</span>;</span>
<span id="cb3-358">    <span class="kw">#local lg </span>= <span class="kw">sqrt</span>(xmid*xmid + ymid*ymid + zmid*zmid + tmid*tmid) / r;</span>
<span id="cb3-359">    &lt; xmid / lg, ymid / lg, zmid / lg, tmid / lg &gt;</span>
<span id="cb3-360"><span class="ot">#end</span></span>
<span id="cb3-361"></span>
<span id="cb3-362"><span class="kw">#macro subdiv0</span>(A, B, C, r)</span>
<span id="cb3-363">    <span class="kw">#local mAB </span>= midpoint4(A, B, r);</span>
<span id="cb3-364">    <span class="kw">#local mAC </span>= midpoint4(A, C, r);</span>
<span id="cb3-365">    <span class="kw">#local mBC </span>= midpoint4(B, C, r);</span>
<span id="cb3-366">    <span class="kw">#local trgl1 </span>= <span class="kw">array</span>[<span class="fl">3</span>] {A, mAB, mAC};</span>
<span id="cb3-367">    <span class="kw">#local trgl2 </span>= <span class="kw">array</span>[<span class="fl">3</span>] {B, mAB, mBC};</span>
<span id="cb3-368">    <span class="kw">#local trgl3 </span>= <span class="kw">array</span>[<span class="fl">3</span>] {C, mBC, mAC};</span>
<span id="cb3-369">    <span class="kw">#local trgl4 </span>= <span class="kw">array</span>[<span class="fl">3</span>] {mAB, mAC, mBC};</span>
<span id="cb3-370">    <span class="kw">array</span>[<span class="fl">4</span>] {trgl1, trgl2, trgl3, trgl4}</span>
<span id="cb3-371"><span class="ot">#end</span></span>
<span id="cb3-372"></span>
<span id="cb3-373"><span class="kw">#macro subdiv</span>(A, B, C, r, depth)</span>
<span id="cb3-374">    <span class="ot">#if</span>(depth=<span class="fl">1</span>)</span>
<span id="cb3-375">        <span class="kw">#local out </span>= subdiv0(A, B, C, r);</span>
<span id="cb3-376">    <span class="ot">#else</span></span>
<span id="cb3-377">        <span class="kw">#local triangles </span>= subdiv(A, B, C, r, depth<span class="fl">-1</span>);</span>
<span id="cb3-378">        <span class="kw">#local out </span>= <span class="kw">array</span>[<span class="kw">pow</span>(<span class="fl">4</span>,depth)];</span>
<span id="cb3-379">        #for(i, <span class="fl">0</span>, <span class="kw">pow</span>(<span class="fl">4</span>,depth<span class="fl">-1</span>)-<span class="fl">1</span>)</span>
<span id="cb3-380">            <span class="kw">#local trgl </span>= triangles[i];</span>
<span id="cb3-381">            <span class="kw">#local trgls </span>= subdiv0(trgl[<span class="fl">0</span>], trgl[<span class="fl">1</span>], trgl[<span class="fl">2</span>], r);</span>
<span id="cb3-382">            <span class="kw">#local out</span>[<span class="fl">4</span>*i] = trgls[<span class="fl">0</span>];</span>
<span id="cb3-383">            <span class="kw">#local out</span>[<span class="fl">4</span>*i+<span class="fl">1</span>] = trgls[<span class="fl">1</span>];</span>
<span id="cb3-384">            <span class="kw">#local out</span>[<span class="fl">4</span>*i+<span class="fl">2</span>] = trgls[<span class="fl">2</span>];</span>
<span id="cb3-385">            <span class="kw">#local out</span>[<span class="fl">4</span>*i+<span class="fl">3</span>] = trgls[<span class="fl">3</span>];</span>
<span id="cb3-386">        <span class="ot">#end</span></span>
<span id="cb3-387">    <span class="ot">#end</span></span>
<span id="cb3-388">    out</span>
<span id="cb3-389"><span class="ot">#end</span></span>
<span id="cb3-390"></span>
<span id="cb3-391"><span class="co">/*-------------------------------------------*/</span></span>
<span id="cb3-392"><span class="co">/*-----      draw the polychoron       ------*/</span></span>
<span id="cb3-393"><span class="co">/*-------------------------------------------*/</span></span>
<span id="cb3-394"><span class="kw">#declare theta </span>= <span class="fl">pi</span>/<span class="fl">2</span>;</span>
<span id="cb3-395"><span class="kw">#declare phi </span>= <span class="fl">0</span>;</span>
<span id="cb3-396"><span class="kw">#declare xi </span>= <span class="fl">2</span>*<span class="kw">frame_number</span>*<span class="fl">pi</span>/<span class="fl">180</span>;</span>
<span id="cb3-397"><span class="kw">#declare r </span>= <span class="kw">sqrt</span>(<span class="fl">1</span>+<span class="fl">3</span>*sqr2p1*sqr2p1); </span>
<span id="cb3-398"><span class="kw">#declare depth </span>= <span class="fl">5</span>;</span>
<span id="cb3-399"></span>
<span id="cb3-400"><span class="kw">#declare vs </span>= ProjectedVertices(theta, phi, xi, r);</span>
<span id="cb3-401"></span>
<span id="cb3-402"><span class="kw">#declare stereoTriangles </span>= <span class="kw">array</span>[<span class="fl">64</span>];</span>
<span id="cb3-403">#for(i, <span class="fl">0</span>, <span class="fl">63</span>)</span>
<span id="cb3-404">    <span class="kw">#local triangles4 </span>= </span>
<span id="cb3-405">        subdiv(</span>
<span id="cb3-406">            vertices[faces[i][<span class="fl">0</span>]], </span>
<span id="cb3-407">            vertices[faces[i][<span class="fl">1</span>]], </span>
<span id="cb3-408">            vertices[faces[i][<span class="fl">2</span>]], r, depth);</span>
<span id="cb3-409">    <span class="kw">#declare stereoTriangles</span>[i] = <span class="kw">array</span>[<span class="kw">dimension_size</span>(triangles4,<span class="fl">1</span>)][<span class="fl">3</span>];</span>
<span id="cb3-410">    #for(j, <span class="fl">0</span>, <span class="kw">dimension_size</span>(triangles4,<span class="fl">1</span>)-<span class="fl">1</span>)</span>
<span id="cb3-411">        <span class="kw">#local trgl4 </span>= triangles4[j];</span>
<span id="cb3-412">        <span class="kw">#declare stereoTriangles</span>[i][j][<span class="fl">0</span>] = </span>
<span id="cb3-413">            StereographicProjection(rotate4d(theta, phi, xi, trgl4[<span class="fl">0</span>]), r);</span>
<span id="cb3-414">        <span class="kw">#declare stereoTriangles</span>[i][j][<span class="fl">1</span>] = </span>
<span id="cb3-415">            StereographicProjection(rotate4d(theta, phi, xi, trgl4[<span class="fl">1</span>]), r);</span>
<span id="cb3-416">        <span class="kw">#declare stereoTriangles</span>[i][j][<span class="fl">2</span>] = </span>
<span id="cb3-417">            StereographicProjection(rotate4d(theta, phi, xi, trgl4[<span class="fl">2</span>]), r);</span>
<span id="cb3-418">    <span class="ot">#end</span></span>
<span id="cb3-419"><span class="ot">#end</span></span>
<span id="cb3-420"></span>
<span id="cb3-421"><span class="kw">#declare edgeTexture </span>= <span class="kw">texture</span> {</span>
<span id="cb3-422">    <span class="kw">pigment</span> { <span class="kw">color</span> DarkPurple }</span>
<span id="cb3-423">    <span class="kw">finish</span> {</span>
<span id="cb3-424">      <span class="kw">ambient</span> <span class="fl">.1</span></span>
<span id="cb3-425">      <span class="kw">diffuse</span> <span class="fl">.9</span></span>
<span id="cb3-426">      <span class="kw">reflection</span> <span class="fl">0</span></span>
<span id="cb3-427">      <span class="kw">specular</span> <span class="fl">1</span></span>
<span id="cb3-428">      <span class="kw">metallic</span></span>
<span id="cb3-429">    }</span>
<span id="cb3-430">};</span>
<span id="cb3-431"></span>
<span id="cb3-432"><span class="kw">object</span> {</span>
<span id="cb3-433">    <span class="kw">union</span> {</span>
<span id="cb3-434">        <span class="co">/* draw edges */</span></span>
<span id="cb3-435">        #for(i, <span class="fl">0</span>, <span class="fl">127</span>)</span>
<span id="cb3-436">            Edge(vertices, edges[i][<span class="fl">0</span>], edges[i][<span class="fl">1</span>], </span>
<span id="cb3-437">                    theta, phi, xi, r, edgeTexture)</span>
<span id="cb3-438">        <span class="ot">#end</span></span>
<span id="cb3-439">        <span class="co">/* draw vertices */</span> </span>
<span id="cb3-440">        #for(i,<span class="fl">0</span>,<span class="fl">63</span>)</span>
<span id="cb3-441">            <span class="kw">sphere</span> {</span>
<span id="cb3-442">                vs[i], <span class="kw">vlength</span>(vs[i])/<span class="fl">15</span></span>
<span id="cb3-443">                <span class="kw">texture</span> { edgeTexture }</span>
<span id="cb3-444">            }</span>
<span id="cb3-445">        <span class="ot">#end</span>  </span>
<span id="cb3-446">        <span class="co">/* fill triangles */</span></span>
<span id="cb3-447">        <span class="kw">mesh</span> {</span>
<span id="cb3-448">            #for(i, <span class="fl">0</span>, <span class="fl">63</span>)</span>
<span id="cb3-449">                <span class="kw">#local trgl </span>= stereoTriangles[i];</span>
<span id="cb3-450">                #for(j, <span class="fl">0</span>, <span class="kw">dimension_size</span>(trgl,<span class="fl">1</span>)-<span class="fl">1</span>)</span>
<span id="cb3-451">                    <span class="kw">triangle</span> {</span>
<span id="cb3-452">                        trgl[j][<span class="fl">0</span>], trgl[j][<span class="fl">1</span>], trgl[j][<span class="fl">2</span>]</span>
<span id="cb3-453">                    }</span>
<span id="cb3-454">                <span class="ot">#end</span></span>
<span id="cb3-455">            <span class="ot">#end</span></span>
<span id="cb3-456">            <span class="kw">texture</span> {</span>
<span id="cb3-457">                <span class="kw">pigment</span> { Red }</span>
<span id="cb3-458">                <span class="kw">finish</span> {</span>
<span id="cb3-459">                    <span class="kw">ambient</span> <span class="fl">0.5</span></span>
<span id="cb3-460">                    <span class="kw">reflection</span> <span class="fl">0</span></span>
<span id="cb3-461">                    <span class="kw">brilliance</span> <span class="fl">4</span></span>
<span id="cb3-462">                }</span>
<span id="cb3-463">            }</span>
<span id="cb3-464">        }</span>
<span id="cb3-465">     }</span>
<span id="cb3-466">     <span class="kw">scale</span> <span class="fl">0.5</span></span>
<span id="cb3-467">     <span class="kw">translate</span> &lt;-<span class="fl">8</span>, <span class="fl">6</span>, <span class="fl">-25</span>&gt;</span>
<span id="cb3-468">}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/truncatedTesseract_stereographic_povray.gif"
        />
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 16 Dec 2019 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/StereoTruncatedTesseract.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>A shinytest script in testthat</title>
      <link>https://laustep.github.io/stlahblog/posts/shinytestthat.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <h2 id="the-shiny-app">The shiny app</h2>
      <p>Here is a simple shiny app:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">library</span>(ggplot2)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co"># UI ####</span></span>
<span id="cb1-5">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb1-6">  </span>
<span id="cb1-7">  <span class="kw">titlePanel</span>(<span class="st">"Set axis breaks"</span>),</span>
<span id="cb1-8">  </span>
<span id="cb1-9">  <span class="kw">sidebarLayout</span>(</span>
<span id="cb1-10">    <span class="co"># sidebar ####</span></span>
<span id="cb1-11">    <span class="kw">sidebarPanel</span>(</span>
<span id="cb1-12">      <span class="kw">fluidRow</span>(</span>
<span id="cb1-13">        <span class="kw">column</span>(</span>
<span id="cb1-14">          <span class="dt">width =</span> <span class="dv">4</span>,</span>
<span id="cb1-15">          <span class="kw">numericInput</span>(<span class="st">"from"</span>, <span class="st">"From:"</span>, <span class="dt">value =</span> <span class="ot">NULL</span>)</span>
<span id="cb1-16">        ),</span>
<span id="cb1-17">        <span class="kw">column</span>(</span>
<span id="cb1-18">          <span class="dt">width =</span> <span class="dv">4</span>,</span>
<span id="cb1-19">          <span class="kw">numericInput</span>(<span class="st">"to"</span>, <span class="st">"To:"</span>, <span class="dt">value =</span> <span class="ot">NULL</span>)</span>
<span id="cb1-20">        ),</span>
<span id="cb1-21">        <span class="kw">column</span>(</span>
<span id="cb1-22">          <span class="dt">width =</span> <span class="dv">4</span>,</span>
<span id="cb1-23">          <span class="kw">numericInput</span>(<span class="st">"by"</span>, <span class="st">"By:"</span>, <span class="dt">value =</span> <span class="ot">NULL</span>)</span>
<span id="cb1-24">        )</span>
<span id="cb1-25">      )</span>
<span id="cb1-26">    ),</span>
<span id="cb1-27">    </span>
<span id="cb1-28">    <span class="co"># main panel ####</span></span>
<span id="cb1-29">    <span class="kw">mainPanel</span>(</span>
<span id="cb1-30">      <span class="kw">plotOutput</span>(<span class="st">"ggplot"</span>)</span>
<span id="cb1-31">    )</span>
<span id="cb1-32">  )</span>
<span id="cb1-33">)</span>
<span id="cb1-34"></span>
<span id="cb1-35"><span class="co"># SERVER ####</span></span>
<span id="cb1-36">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output) {</span>
<span id="cb1-37">  </span>
<span id="cb1-38">  FromToBy &lt;-<span class="st"> </span><span class="kw">reactiveVal</span>()</span>
<span id="cb1-39">  </span>
<span id="cb1-40">  <span class="kw">observe</span>({</span>
<span id="cb1-41">    breaks &lt;-<span class="st"> </span><span class="kw">tryCatch</span>({</span>
<span id="cb1-42">      <span class="kw">seq</span>(input[[<span class="st">"from"</span>]], input[[<span class="st">"to"</span>]], input[[<span class="st">"by"</span>]])</span>
<span id="cb1-43">    }, <span class="dt">error =</span> <span class="cf">function</span>(e) <span class="ot">NULL</span>)</span>
<span id="cb1-44">    <span class="kw">FromToBy</span>(breaks)</span>
<span id="cb1-45">  })</span>
<span id="cb1-46">  </span>
<span id="cb1-47">  scatterplot &lt;-<span class="st"> </span><span class="kw">reactive</span>({</span>
<span id="cb1-48">    gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(iris, <span class="kw">aes</span>(Sepal.Length, Petal.Length)) <span class="op">+</span><span class="st"> </span><span class="kw">geom_point</span>()</span>
<span id="cb1-49">    <span class="cf">if</span>(<span class="op">!</span><span class="kw">is.null</span>(<span class="kw">FromToBy</span>())){</span>
<span id="cb1-50">      gg &lt;-<span class="st"> </span>gg <span class="op">+</span><span class="st"> </span><span class="kw">scale_y_continuous</span>(<span class="dt">breaks =</span> <span class="kw">FromToBy</span>())</span>
<span id="cb1-51">    }</span>
<span id="cb1-52">    gg <span class="op">+</span><span class="st"> </span><span class="kw">theme</span>(</span>
<span id="cb1-53">      <span class="dt">axis.text =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">20</span>),</span>
<span id="cb1-54">      <span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">18</span>)</span>
<span id="cb1-55">    )</span>
<span id="cb1-56">  })</span>
<span id="cb1-57">  </span>
<span id="cb1-58">  output[[<span class="st">"ggplot"</span>]] &lt;-<span class="st"> </span><span class="kw">renderPlot</span>({</span>
<span id="cb1-59">    <span class="kw">scatterplot</span>()</span>
<span id="cb1-60">  })</span>
<span id="cb1-61">  </span>
<span id="cb1-62">  <span class="kw">observe</span>({ <span class="co"># this is for shinytest - see later ####</span></span>
<span id="cb1-63">    <span class="kw">req</span>(<span class="kw">scatterplot</span>())</span>
<span id="cb1-64">    ggg &lt;-<span class="st"> </span><span class="kw">ggplot_build</span>(<span class="kw">scatterplot</span>())</span>
<span id="cb1-65">    <span class="kw">exportTestValues</span>(<span class="dt">panelParams =</span> ggg<span class="op">$</span>layout<span class="op">$</span>panel_params[[1L]])</span>
<span id="cb1-66">  })</span>
<span id="cb1-67">  </span>
<span id="cb1-68">}</span>
<span id="cb1-69"></span>
<span id="cb1-70"><span class="co"># Run the application ####</span></span>
<span id="cb1-71"><span class="kw">shinyApp</span>(<span class="dt">ui =</span> ui, <span class="dt">server =</span> server)</span></code></pre>
      </div>
      <p>It allows to set the breaks of the y-axis of the graph:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/shinyFromToBy.gif"
          width="650"
        />
      </p>
      <h2 id="unit-test">Unit test</h2>
      <p>Say we want to test whether the app correctly sets the axis breaks.</p>
      <p>
        When you have a <code>ggplot</code>, you can get the y-axis breaks as
        follows:
      </p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(ggplot2)</span>
<span id="cb2-2">gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(iris, <span class="kw">aes</span>(Sepal.Length, Petal.Length)) <span class="op">+</span><span class="st"> </span><span class="kw">geom_point</span>()</span>
<span id="cb2-3">ggg &lt;-<span class="st"> </span><span class="kw">ggplot_build</span>(gg)</span>
<span id="cb2-4">ggg<span class="op">$</span>layout<span class="op">$</span>panel_params[[1L]][[<span class="st">"y.major_source"</span>]]</span>
<span id="cb2-5"><span class="co">## [1] 2 4 6</span></span></code></pre>
      </div>
      <p>With this piece of code of the app:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">observe</span>({ <span class="co"># this is for shinytest - see later ####</span></span>
<span id="cb3-2">  <span class="kw">req</span>(<span class="kw">scatterplot</span>())</span>
<span id="cb3-3">  ggg &lt;-<span class="st"> </span><span class="kw">ggplot_build</span>(<span class="kw">scatterplot</span>())</span>
<span id="cb3-4">  <span class="kw">exportTestValues</span>(<span class="dt">panelParams =</span> ggg<span class="op">$</span>layout<span class="op">$</span>panel_params[[1L]])</span>
<span id="cb3-5">})</span></code></pre>
      </div>
      <p>we export <code>ggg$layout$panel_params[[1L]]</code>.</p>
      <p>
        Assume our package is named <code>shinyFromToBy</code> and the shiny app
        is saved in file <code>app.R</code> in the
        <code>inst/shinyApp</code> folder. Then, here is our unit test (to put
        in the <code>tests/testthat</code> folder):
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode r"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">context</span>(<span class="st">"y-axis breaks"</span>)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw">test_that</span>(<span class="st">"y-breaks are correct"</span>, {</span>
<span id="cb4-4"></span>
<span id="cb4-5">  <span class="kw">skip_if_not_installed</span>(<span class="st">"shinytest"</span>)</span>
<span id="cb4-6">  <span class="kw">library</span>(shinytest)</span>
<span id="cb4-7"></span>
<span id="cb4-8">  app &lt;-<span class="st"> </span>ShinyDriver<span class="op">$</span><span class="kw">new</span>(</span>
<span id="cb4-9">    <span class="kw">system.file</span>(<span class="st">"shinyApp"</span>, <span class="dt">package =</span> <span class="st">"shinyFromToBy"</span>),</span>
<span id="cb4-10">    <span class="dt">loadTimeout =</span> <span class="fl">1e+05</span>,</span>
<span id="cb4-11">    <span class="dt">shinyOptions =</span> <span class="kw">list</span>(<span class="dt">test.mode =</span> <span class="ot">TRUE</span>)</span>
<span id="cb4-12">  )</span>
<span id="cb4-13">  app<span class="op">$</span><span class="kw">setInputs</span>(<span class="dt">from =</span> <span class="dv">1</span>)</span>
<span id="cb4-14">  app<span class="op">$</span><span class="kw">setInputs</span>(<span class="dt">to =</span> <span class="dv">7</span>)</span>
<span id="cb4-15">  app<span class="op">$</span><span class="kw">setInputs</span>(<span class="dt">by =</span> <span class="fl">0.5</span>)</span>
<span id="cb4-16">  panelParams &lt;-<span class="st"> </span>app<span class="op">$</span><span class="kw">getAllValues</span>()<span class="op">$</span>export[[<span class="st">"panelParams"</span>]]</span>
<span id="cb4-17"></span>
<span id="cb4-18">  <span class="kw">expect_identical</span>(</span>
<span id="cb4-19">    panelParams[[<span class="st">"y.major_source"</span>]],</span>
<span id="cb4-20">    <span class="kw">seq</span>(<span class="dv">1</span>, <span class="dv">7</span>, <span class="dt">by =</span> <span class="fl">0.5</span>)</span>
<span id="cb4-21">  )</span>
<span id="cb4-22"></span>
<span id="cb4-23">  app<span class="op">$</span><span class="kw">stop</span>()</span>
<span id="cb4-24"></span>
<span id="cb4-25">})</span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 23 Nov 2019 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/shinytestthat.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Five-parameters logistic regression</title>
      <link>https://laustep.github.io/stlahblog/posts/5pl.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        The five-parameters logistic curve is commonly defined by
        <span class="math display"
          >\[ f(x) = A + \frac{D-A}{\Bigl(1+\exp\bigl(B(C-x)\bigr)\Bigr)^S}.
          \]</span
        >
        Assuming <span class="math inline">\(B&gt;0\)</span> and
        <span class="math inline">\(S&gt;0\)</span>,
      </p>
      <ul>
        <li>
          <p>
            <span class="math inline">\(A\)</span> is the value of the
            horizontal asymptote when
            <span class="math inline">\(x \to -\infty\)</span>;
          </p>
        </li>
        <li>
          <p>
            <span class="math inline">\(D\)</span> is the value of the
            horizontal asymptote when
            <span class="math inline">\(x \to +\infty\)</span>;
          </p>
        </li>
        <li>
          <p>
            <span class="math inline">\(B\)</span> describes how rapidly the
            curve makes its transition between the two asymptotes;
          </p>
        </li>
        <li>
          <p>
            <span class="math inline">\(C\)</span> is a location parameter,
            which does not have a nice interpretation (except if
            <span class="math inline">\(S=1\)</span>);
          </p>
        </li>
        <li>
          <p>
            <span class="math inline">\(S\)</span> describes the asymmetry of
            the curve (the curve is symmetric when
            <span class="math inline">\(S=1\)</span>).
          </p>
        </li>
      </ul>
      <p>
        In the case when <span class="math inline">\(S=1\)</span>, the parameter
        <span class="math inline">\(C\)</span> is the value of
        <span class="math inline">\(x\)</span> for which the corresponding value
        <span class="math inline">\(f(x)\)</span> is the midpoint between the
        two asymptotes; moreover, the curve has an inflection point at
        <span class="math inline">\(x = C\)</span>.
      </p>
      <p>
        In the general case, the value of
        <span class="math inline">\(x\)</span> for which the corresponding value
        <span class="math inline">\(f(x)\)</span> is the midpoint between the
        two asymptotes is
        <span class="math display"
          >\[ x_{\text{mid}} = C - \frac{\log\Bigl(2^{\frac{1}{S}}-1\Bigr)}{B}.
          \]</span
        >
        It is obtained by solving
        <span class="math inline"
          >\(\Bigl(1+\exp\bigl(B(C-x)\bigr)\Bigr)^S = 2\)</span
        >.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">n &lt;-<span class="st"> </span><span class="dv">100</span></span>
<span id="cb1-2">x &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">49</span>, <span class="dv">60</span>, <span class="dt">length.out =</span> n)</span>
<span id="cb1-3">A &lt;-<span class="st"> </span><span class="dv">30</span>; D &lt;-<span class="st"> </span><span class="dv">100</span>; B &lt;-<span class="st"> </span><span class="dv">1</span>; C &lt;-<span class="st"> </span><span class="dv">50</span>; S &lt;-<span class="st"> </span><span class="dv">10</span></span>
<span id="cb1-4">f &lt;-<span class="st"> </span><span class="cf">function</span>(x) A <span class="op">+</span><span class="st"> </span>(D<span class="op">-</span>A) <span class="op">/</span><span class="st"> </span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">exp</span>(B<span class="op">*</span>(C<span class="op">-</span>x)))<span class="op">^</span>S</span>
<span id="cb1-5">y0 &lt;-<span class="st"> </span><span class="kw">f</span>(x) </span>
<span id="cb1-6"><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">4</span>, <span class="dv">4</span>, <span class="fl">0.5</span>, <span class="dv">1</span>))</span>
<span id="cb1-7"><span class="kw">plot</span>(x, y0, <span class="dt">type =</span> <span class="st">"l"</span>, <span class="dt">cex.axis =</span> <span class="fl">0.5</span>, <span class="dt">ylab =</span> <span class="st">"f(x)"</span>)</span>
<span id="cb1-8"><span class="kw">abline</span>(<span class="dt">v =</span> C, <span class="dt">col =</span> <span class="st">"green"</span>, <span class="dt">lty =</span> <span class="st">"dashed"</span>)</span>
<span id="cb1-9">( xmid &lt;-<span class="st"> </span>C <span class="op">-</span><span class="st"> </span><span class="kw">log</span>(<span class="dv">2</span><span class="op">^</span>(<span class="dv">1</span><span class="op">/</span>S) <span class="op">-</span><span class="st"> </span><span class="dv">1</span>)<span class="op">/</span>B )</span>
<span id="cb1-10"><span class="co">## [1] 52.63424</span></span></code></pre>
      </div>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">abline</span>(<span class="dt">v =</span> xmid, <span class="dt">col =</span> <span class="st">"red"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>) </span>
<span id="cb2-2"><span class="kw">abline</span>(<span class="dt">h =</span> (A<span class="op">+</span>D)<span class="op">/</span><span class="dv">2</span>, <span class="dt">col =</span> <span class="st">"red"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/5pl-plot_5pl-1.png"
          style="display: block; margin: auto"
        />
      </p>
      <p>
        Note that the inflection point of the curve is <em>not</em> the point
        correspoding to <span class="math inline">\(x_{\text{mid}}\)</span>:
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="kw">library</span>(numDeriv)</span>
<span id="cb3-2">df &lt;-<span class="st"> </span><span class="kw">grad</span>(f, x)</span>
<span id="cb3-3"><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">4</span>, <span class="dv">4</span>, <span class="fl">0.5</span>, <span class="dv">1</span>))</span>
<span id="cb3-4"><span class="kw">plot</span>(x, df, <span class="dt">type =</span> <span class="st">"l"</span>, <span class="dt">cex.axis =</span> <span class="fl">0.5</span>, <span class="dt">ylab=</span><span class="st">"f'(x)"</span>)</span>
<span id="cb3-5"><span class="kw">abline</span>(<span class="dt">v =</span> xmid, <span class="dt">col =</span> <span class="st">"red"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>) </span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/5pl-inflection-1.png"
          style="display: block; margin: auto"
        />
      </p>
      <p>
        In practice, we are often interested in estimating
        <span class="math inline">\(x_{\text{mid}}\)</span>. So it is better to
        use this other parameterization of the five-parameters logistic curve:
        <span class="math display"
          >\[ g(x) = A +
          \frac{D-A}{{\biggl(1+\exp\Bigl(\log\bigl(2^{\frac{1}{S}}-1\bigr) +
          B(x_{\text{mid}}-x)\Bigr)\biggr)}^S} \]</span
        >
        because fitting this curve will directly give the estimate of
        <span class="math inline">\(x_{\text{mid}}\)</span> and its standard
        error.
      </p>
      <p>
        Another advantage of this parameterization is that there is a way to get
        a good starting value of
        <span class="math inline">\(x_{\text{mid}}\)</span> when one wants to
        fit the five-parameters logistic regression model:
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1">getInitial1 &lt;-<span class="st"> </span><span class="cf">function</span>(x, y){</span>
<span id="cb4-2">  s &lt;-<span class="st"> </span><span class="kw">getInitial</span>(y <span class="op">~</span><span class="st"> </span><span class="kw">SSfpl</span>(x, A, D, xmid, inverseB),</span>
<span id="cb4-3">             <span class="dt">data =</span> <span class="kw">data.frame</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y))</span>
<span id="cb4-4">  <span class="kw">c</span>(<span class="dt">A =</span> s[[<span class="st">"A"</span>]], </span>
<span id="cb4-5">    <span class="dt">B =</span> <span class="dv">1</span><span class="op">/</span>s[[<span class="st">"inverseB"</span>]], </span>
<span id="cb4-6">    <span class="dt">xmid =</span> s[[<span class="st">"xmid"</span>]], </span>
<span id="cb4-7">    <span class="dt">D =</span> s[[<span class="st">"D"</span>]], </span>
<span id="cb4-8">    <span class="dt">S =</span> <span class="dv">1</span>)</span>
<span id="cb4-9">}</span></code></pre>
      </div>
      <p>
        I don’t know how to get a good starting value for
        <span class="math inline">\(S\)</span>, so I always take
        <span class="math inline">\(1\)</span>.
      </p>
      <p>
        Sometimes, <code>SSfpl</code> can fail. Here is another function which
        returns some starting values:
      </p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">getInitial2 &lt;-<span class="st"> </span><span class="cf">function</span>(x, y){</span>
<span id="cb5-2">  NAs &lt;-<span class="st"> </span><span class="kw">union</span>(<span class="kw">which</span>(<span class="kw">is.na</span>(x)), <span class="kw">which</span>(<span class="kw">is.na</span>(y)))</span>
<span id="cb5-3">  <span class="cf">if</span>(<span class="kw">length</span>(NAs)){</span>
<span id="cb5-4">    x &lt;-<span class="st"> </span>x[<span class="op">-</span>NAs]</span>
<span id="cb5-5">    y &lt;-<span class="st"> </span>y[<span class="op">-</span>NAs]</span>
<span id="cb5-6">  }</span>
<span id="cb5-7">  low_init &lt;-<span class="st"> </span><span class="kw">min</span>(y)</span>
<span id="cb5-8">  high_init &lt;-<span class="st"> </span><span class="kw">max</span>(y)</span>
<span id="cb5-9">  minmax &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="kw">which</span>(y <span class="op">==</span><span class="st"> </span>low_init), <span class="kw">which</span>(y <span class="op">==</span><span class="st"> </span>high_init))</span>
<span id="cb5-10">  X &lt;-<span class="st"> </span><span class="kw">cbind</span>(<span class="dv">1</span>, x[<span class="op">-</span>minmax])</span>
<span id="cb5-11">  Y &lt;-<span class="st"> </span><span class="kw">log</span>((high_init<span class="op">-</span>y[<span class="op">-</span>minmax])<span class="op">/</span>(y[<span class="op">-</span>minmax]<span class="op">-</span>low_init))</span>
<span id="cb5-12">  fit &lt;-<span class="st"> </span><span class="kw">lm.fit</span>(<span class="dt">x =</span> X, <span class="dt">y =</span> Y)</span>
<span id="cb5-13">  b_init &lt;-<span class="st"> </span>fit<span class="op">$</span>coefficients[[<span class="dv">2</span>]]</span>
<span id="cb5-14">  xmid_init &lt;-<span class="st"> </span><span class="op">-</span>fit<span class="op">$</span>coefficients[[<span class="dv">1</span>]] <span class="op">/</span><span class="st"> </span>b_init</span>
<span id="cb5-15">  <span class="cf">if</span>(b_init <span class="op">&lt;</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb5-16">    b_init &lt;-<span class="st"> </span><span class="op">-</span>b_init</span>
<span id="cb5-17">    A &lt;-<span class="st"> </span>low_init</span>
<span id="cb5-18">    D &lt;-<span class="st"> </span>high_init</span>
<span id="cb5-19">  }<span class="cf">else</span>{</span>
<span id="cb5-20">    A &lt;-<span class="st"> </span>high_init</span>
<span id="cb5-21">    D &lt;-<span class="st"> </span>low_init</span>
<span id="cb5-22">  }</span>
<span id="cb5-23">  <span class="kw">c</span>(<span class="dt">A =</span> A, <span class="dt">B =</span> b_init, <span class="dt">xmid =</span> xmid_init, <span class="dt">D =</span> D, <span class="dt">S =</span> <span class="dv">1</span>)</span>
<span id="cb5-24">}</span></code></pre>
      </div>
      <p>Now we wrap these two functions into a single one:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1">getInitial5PL &lt;-<span class="st"> </span><span class="cf">function</span>(x, y){</span>
<span id="cb6-2">  <span class="kw">tryCatch</span>({</span>
<span id="cb6-3">    <span class="kw">getInitial1</span>(x, y)</span>
<span id="cb6-4">  }, <span class="dt">error =</span> <span class="cf">function</span>(e){</span>
<span id="cb6-5">    <span class="kw">getInitial2</span>(x, y)</span>
<span id="cb6-6">  })</span>
<span id="cb6-7">}</span></code></pre>
      </div>
      <p>And finally we can write a function for the fitting:</p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1"><span class="kw">library</span>(minpack.lm)</span>
<span id="cb7-2">fit5pl &lt;-<span class="st"> </span><span class="cf">function</span>(x, y){</span>
<span id="cb7-3">  startingValues &lt;-<span class="st"> </span><span class="kw">getInitial5PL</span>(x, y)</span>
<span id="cb7-4">  fit &lt;-<span class="st"> </span><span class="kw">tryCatch</span>({</span>
<span id="cb7-5">    <span class="kw">nlsLM</span>(</span>
<span id="cb7-6">      y <span class="op">~</span><span class="st"> </span>A <span class="op">+</span><span class="st"> </span>(D<span class="op">-</span>A)<span class="op">/</span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">exp</span>(<span class="kw">log</span>(<span class="dv">2</span><span class="op">^</span>(<span class="dv">1</span><span class="op">/</span>S)<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span><span class="st"> </span>B<span class="op">*</span>(xmid<span class="op">-</span>x)))<span class="op">^</span>S,</span>
<span id="cb7-7">      <span class="dt">data =</span> <span class="kw">data.frame</span>(<span class="dt">x =</span> x, <span class="dt">y =</span> y),</span>
<span id="cb7-8">      <span class="dt">start =</span> startingValues,</span>
<span id="cb7-9">      <span class="dt">lower =</span> <span class="kw">c</span>(<span class="op">-</span><span class="ot">Inf</span>, <span class="dv">0</span>, <span class="op">-</span><span class="ot">Inf</span>, <span class="op">-</span><span class="ot">Inf</span>, <span class="dv">0</span>),</span>
<span id="cb7-10">      <span class="dt">control =</span> <span class="kw">nls.lm.control</span>(<span class="dt">maxiter =</span> <span class="dv">1024</span>, <span class="dt">maxfev=</span><span class="dv">10000</span>))</span>
<span id="cb7-11">  }, <span class="dt">error =</span> <span class="cf">function</span>(e){</span>
<span id="cb7-12">    <span class="kw">paste0</span>(<span class="st">"Failure of model fitting: "</span>, e<span class="op">$</span>message)</span>
<span id="cb7-13">  })</span>
<span id="cb7-14">  <span class="cf">if</span>(<span class="kw">class</span>(fit) <span class="op">==</span><span class="st"> "nls"</span> <span class="op">&amp;&amp;</span><span class="st"> </span>fit[[<span class="st">"convInfo"</span>]][[<span class="st">"isConv"</span>]]){</span>
<span id="cb7-15">    fit</span>
<span id="cb7-16">  }<span class="cf">else</span> <span class="cf">if</span>(<span class="kw">class</span>(fit) <span class="op">==</span><span class="st"> "nls"</span> <span class="op">&amp;&amp;</span><span class="st"> </span><span class="op">!</span>fit[[<span class="st">"convInfo"</span>]][[<span class="st">"isConv"</span>]]){</span>
<span id="cb7-17">    <span class="st">"Convergence not achieved"</span></span>
<span id="cb7-18">  }<span class="cf">else</span>{ <span class="co"># in this case, 'fit' is the error message</span></span>
<span id="cb7-19">    fit</span>
<span id="cb7-20">  }</span>
<span id="cb7-21">}</span></code></pre>
      </div>
      <p>Let’s try it on a couple of simulated samples:</p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1"><span class="kw">set.seed</span>(<span class="dv">666</span>)</span>
<span id="cb8-2">nsims &lt;-<span class="st"> </span><span class="dv">25</span></span>
<span id="cb8-3">epsilon &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="kw">rnorm</span>(nsims<span class="op">*</span>n, <span class="dv">0</span>, <span class="dv">5</span>), <span class="dt">nrow =</span> nsims, <span class="dt">ncol =</span> n)</span>
<span id="cb8-4">estimates &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> nsims, <span class="dt">ncol =</span> <span class="dv">5</span>)</span>
<span id="cb8-5"><span class="kw">colnames</span>(estimates) &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="st">"A"</span>, <span class="st">"B"</span>, <span class="st">"xmid"</span>, <span class="st">"D"</span>, <span class="st">"S"</span>)</span>
<span id="cb8-6"><span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>nsims){</span>
<span id="cb8-7">  fit &lt;-<span class="st"> </span><span class="kw">fit5pl</span>(x, y0 <span class="op">+</span><span class="st"> </span>epsilon[i,])</span>
<span id="cb8-8">  <span class="cf">if</span>(<span class="kw">class</span>(fit) <span class="op">==</span><span class="st"> "nls"</span>){</span>
<span id="cb8-9">    estimates[i, ] &lt;-<span class="st"> </span><span class="kw">coef</span>(fit)</span>
<span id="cb8-10">  }<span class="cf">else</span>{</span>
<span id="cb8-11">    estimates[i, ] &lt;-<span class="st"> </span><span class="kw">c</span>(<span class="ot">NaN</span>, <span class="ot">NaN</span>, <span class="ot">NaN</span>, <span class="ot">NaN</span>, <span class="ot">NaN</span>)</span>
<span id="cb8-12">  }</span>
<span id="cb8-13">}</span>
<span id="cb8-14"><span class="kw">summary</span>(estimates)</span></code></pre>
      </div>
      <pre><code>##        A               B               xmid             D         
##  Min.   :24.19   Min.   :0.8918   Min.   :52.52   Min.   : 98.63  
##  1st Qu.:27.99   1st Qu.:0.9566   1st Qu.:52.58   1st Qu.: 99.71  
##  Median :29.54   Median :1.0121   Median :52.64   Median :100.31  
##  Mean   :29.22   Mean   :1.0367   Mean   :52.63   Mean   :100.22  
##  3rd Qu.:30.18   3rd Qu.:1.1207   3rd Qu.:52.67   3rd Qu.:100.64  
##  Max.   :32.23   Max.   :1.2599   Max.   :52.76   Max.   :101.80  
##        S           
##  Min.   :   1.001  
##  1st Qu.:   2.262  
##  Median :  36.444  
##  Mean   :1357.639  
##  3rd Qu.:2003.601  
##  Max.   :7261.694</code></pre>
      <p>
        The estimate of <span class="math inline">\(x_{\text{mid}}\)</span> is
        excellent. As you can see, the estimate of
        <span class="math inline">\(S\)</span> is sometimes much larger than the
        true value. Let’s have a look at the worst case:
      </p>
      <div class="sourceCode" id="cb10">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb10-1">i0 &lt;-<span class="st"> </span><span class="kw">match</span>(<span class="kw">max</span>(estimates[, <span class="st">"S"</span>]), estimates[, <span class="st">"S"</span>])</span>
<span id="cb10-2">estimates[i0, ]</span>
<span id="cb10-3"><span class="co">##            A            B         xmid            D            S </span></span>
<span id="cb10-4"><span class="co">##   29.9159582    0.8917679   52.5992848  100.0519760 7261.6944532</span></span></code></pre>
      </div>
      <div class="sourceCode" id="cb11">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb11-1"><span class="co"># sample</span></span>
<span id="cb11-2"><span class="kw">par</span>(<span class="dt">mar =</span> <span class="kw">c</span>(<span class="dv">4</span>, <span class="dv">4</span>, <span class="fl">0.5</span>, <span class="dv">1</span>))</span>
<span id="cb11-3"><span class="kw">plot</span>(x, y0 <span class="op">+</span><span class="st"> </span>epsilon[i0, ], <span class="dt">col =</span> <span class="st">"yellow"</span>, <span class="dt">cex.axis =</span> <span class="fl">0.6</span>)</span>
<span id="cb11-4"><span class="co"># true curve</span></span>
<span id="cb11-5"><span class="kw">curve</span>(A <span class="op">+</span><span class="st"> </span>(D<span class="op">-</span>A)<span class="op">/</span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">exp</span>(<span class="kw">log</span>(<span class="dv">2</span><span class="op">^</span>(<span class="dv">1</span><span class="op">/</span>S)<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span><span class="st"> </span>B<span class="op">*</span>(xmid<span class="op">-</span>x)))<span class="op">^</span>S, </span>
<span id="cb11-6">      <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"red"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span>
<span id="cb11-7"><span class="co"># fitted curve</span></span>
<span id="cb11-8"><span class="kw">with</span>(<span class="kw">as.list</span>(estimates[i0, ]), </span>
<span id="cb11-9">     <span class="kw">curve</span>(A <span class="op">+</span><span class="st"> </span>(D<span class="op">-</span>A)<span class="op">/</span>(<span class="dv">1</span> <span class="op">+</span><span class="st"> </span><span class="kw">exp</span>(<span class="kw">log</span>(<span class="dv">2</span><span class="op">^</span>(<span class="dv">1</span><span class="op">/</span>S)<span class="op">-</span><span class="dv">1</span>) <span class="op">+</span><span class="st"> </span>B<span class="op">*</span>(xmid<span class="op">-</span>x)))<span class="op">^</span>S, </span>
<span id="cb11-10">           <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"blue"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>, <span class="dt">lty =</span> <span class="st">"dashed"</span>)</span>
<span id="cb11-11">)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/5pl-worstcase-1.png"
          style="display: block; margin: auto"
        />
      </p>
      <p>
        Thus, while the estimate of <span class="math inline">\(S\)</span> is
        very far from the true value of <span class="math inline">\(S\)</span>,
        the fitted curve correctly estimates the true curve. And in such cases,
        the standard error of the estimate of
        <span class="math inline">\(S\)</span> is big:
      </p>
      <div class="sourceCode" id="cb12">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb12-1">fit &lt;-<span class="st"> </span><span class="kw">fit5pl</span>(x, y0 <span class="op">+</span><span class="st"> </span>epsilon[i0,])</span>
<span id="cb12-2"><span class="kw">summary</span>(fit)</span></code></pre>
      </div>
      <pre><code>## 
## Formula: y ~ A + (D - A)/(1 + exp(log(2^(1/S) - 1) + B * (xmid - x)))^S
## 
## Parameters:
##       Estimate Std. Error t value Pr(&gt;|t|)    
## A    2.992e+01  1.334e+00  22.424   &lt;2e-16 ***
## B    8.918e-01  7.058e-02  12.635   &lt;2e-16 ***
## xmid 5.260e+01  7.310e-02 719.542   &lt;2e-16 ***
## D    1.001e+02  9.347e-01 107.038   &lt;2e-16 ***
## S    7.262e+03  1.757e+06   0.004    0.997    
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## Residual standard error: 5.224 on 95 degrees of freedom
## 
## Number of iterations to convergence: 27 
## Achieved convergence tolerance: 1.49e-08</code></pre>
      <p>
        Note that <code>nlsLM</code> provides a test of the nullity of
        <span class="math inline">\(S\)</span>. This is not interesting, whereas
        the equality <span class="math inline">\(S = 1\)</span> is of interest.
        So it is better to parametrize the logistic function with
        <span class="math inline">\(L = \log(S)\)</span> instead of
        <span class="math inline">\(S\)</span>:
        <span class="math display"
          >\[ h(x) = A +
          \frac{D-A}{{\biggl(1+\exp\Bigl(\log\bigl(2^{\exp(-L)}-1\bigr) +
          B(x_{\text{mid}}-x)\Bigr)\biggr)}^{\exp(L)}}. \]</span
        >
        In this way we can get a test of
        <span class="math inline">\(L = 0\)</span>, that is
        <span class="math inline">\(S = 1\)</span>.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 20 Nov 2019 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/5pl.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>The Beta distribution of the third kind (or generalised Beta prime)</title>
      <link>https://laustep.github.io/stlahblog/posts/Beta3.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <ul>
        <li>
          <a href="#preliminaries-the-scaled-beta-prime-distribution"
            >Preliminaries: the (scaled) Beta prime distribution</a
          >
        </li>
        <li>
          <a href="#beta-distribution-of-the-third-kind"
            >Beta distribution of the third kind</a
          >
        </li>
        <li>
          <a href="#update-2019-09-05-generalised-beta-distribution"
            >Update 2019-09-05: generalised Beta distribution</a
          >
        </li>
        <li>
          <a href="#cumulative-distribution-function"
            >Cumulative distribution function</a
          >
        </li>
        <li>
          <a href="#sampling-the-beta-distribution-of-the-third-kind"
            >Sampling the Beta distribution of the third kind</a
          >
        </li>
        <li>
          <a href="#application-to-the-bayesian-binomial-model"
            >Application to the Bayesian binomial model</a
          >
        </li>
        <li>
          <a href="#application-to-the-bayesian-two-poisson-samples-model"
            >Application to the Bayesian “two Poisson samples” model</a
          >
        </li>
      </ul>
      <p>
        We present the family of so-called
        <em>Beta distributions of the third kind</em>. In the context of
        Bayesian statistics, it is a conjugate family of prior distributions on
        the odds parameter of the binomial model. This distribution is known,
        but nobody provided a way to sample from it. We show how one can sample
        from this distribution in R.
      </p>
      <h1 id="preliminaries-the-scaled-beta-prime-distribution">
        Preliminaries: the (scaled) Beta prime distribution
      </h1>
      <p>
        The Beta distribution of the third kind generalizes the Beta
        distribution of the second kind, also known under the name
        <em>Beta prime distribution</em>.
      </p>
      <p>
        The <em>Beta prime distribution</em>
        <span class="math inline">\(\mathcal{B}'(c,d,\lambda)\)</span> is the
        distribution of the random variable
        <span class="math inline">\(\lambda\frac{U}{1-U}\)</span> where
        <span class="math inline">\(U \sim \mathcal{B}(c,d)\)</span>.
      </p>
      <p>
        Its density function at
        <span class="math inline">\(x \geqslant 0\)</span> is
        <span class="math display"
          >\[ \frac{1}{\lambda^c B(c,d)}
          \frac{x^{c-1}}{\left(1+\frac{x}{\lambda}\right)^{c+d}}. \]</span
        >
        Usually the definition does not include the scale parameter
        <span class="math inline">\(\lambda\)</span> (that is, it is usually
        defined for <span class="math inline">\(\lambda=1\)</span> only).
      </p>
      <p>
        It is easy to implement a sampler for this distribution, the density
        function and the cumulative density function:
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1">rbetaprime &lt;-<span class="st"> </span><span class="cf">function</span>(n, c, d, <span class="dt">lambda =</span> <span class="dv">1</span>){</span>
<span id="cb1-2">  <span class="kw">stopifnot</span>(lambda <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-3">  u &lt;-<span class="st"> </span><span class="kw">rbeta</span>(n, c, d)</span>
<span id="cb1-4">  lambda <span class="op">*</span><span class="st"> </span>u<span class="op">/</span>(<span class="dv">1</span><span class="op">-</span>u)</span>
<span id="cb1-5">}</span>
<span id="cb1-6">dbetaprime &lt;-<span class="st"> </span><span class="cf">function</span>(x, c, d, <span class="dt">lambda =</span> <span class="dv">1</span>){</span>
<span id="cb1-7">  <span class="kw">stopifnot</span>(lambda <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-8">  lambda<span class="op">/</span>(lambda<span class="op">+</span>x)<span class="op">^</span><span class="dv">2</span> <span class="op">*</span><span class="st"> </span><span class="kw">dbeta</span>(x<span class="op">/</span>lambda<span class="op">/</span>(<span class="dv">1</span><span class="op">+</span>x<span class="op">/</span>lambda), c, d)</span>
<span id="cb1-9">}</span>
<span id="cb1-10">pbetaprime &lt;-<span class="st"> </span><span class="cf">function</span>(q, c, d, lambda){</span>
<span id="cb1-11">  <span class="kw">stopifnot</span>(lambda <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb1-12">  <span class="kw">pbeta</span>(q<span class="op">/</span>lambda<span class="op">/</span>(<span class="dv">1</span><span class="op">+</span>q<span class="op">/</span>lambda), c, d)</span>
<span id="cb1-13">}</span></code></pre>
      </div>
      <h1 id="beta-distribution-of-the-third-kind">
        Beta distribution of the third kind
      </h1>
      <p>
        The <em>Beta distribution of the third kind</em>
        <span class="math inline">\(\mathcal{B}_3\)</span> was firstly
        introduced (as far as I know) in the paper
        <em>Some Poisson mixtures with a hyperscale parameter</em>, written by
        myself.
      </p>
      <p>
        For parameters <span class="math inline">\(c&gt;0\)</span>,
        <span class="math inline">\(d&gt;0\)</span>,
        <span class="math inline">\(\kappa \in \mathbb{R}\)</span>,
        <span class="math inline">\(\tau&gt;0\)</span>, the density function of
        <span class="math inline">\(\mathcal{B}_3(c,d,\kappa,\tau)\)</span> is
        <span class="math display"
          >\[ f(\phi) = \frac{1} {B(c,d){}_2\!F_1\left(c, c+d-\kappa, c+d; 1 -
          \frac{1}{\tau}\right)} \frac{\phi^{c-1}(1+\phi)^{-\kappa}}
          {\left(1+\frac{\phi}{\tau}\right)^{c+d-\kappa}}, \quad \phi \geqslant
          0. \]</span
        >
        Thus, for <span class="math inline">\(\kappa=0\)</span>, the
        <span class="math inline">\(\mathcal{B}_3(c,d,\kappa,\tau)\)</span>
        distribution equals
        <span class="math inline">\(\mathcal{B}'(c,d,\tau)\)</span>, and for
        <span class="math inline">\(\kappa = c+d\)</span> or
        <span class="math inline">\(\tau=1\)</span>, it equals
        <span class="math inline">\(\mathcal{B}'(c,d,1)\)</span>. Note that in
        general, <span class="math inline">\(\tau\)</span> is not a scale
        parameter.
      </p>
      <p>Let’s write a R function computing this density:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="kw">library</span>(gsl)</span>
<span id="cb2-2">Gauss2F1 &lt;-<span class="st"> </span><span class="cf">function</span>(a,b,c,x){ </span>
<span id="cb2-3">  <span class="cf">if</span>(x<span class="op">&gt;=</span><span class="dv">0</span> <span class="op">&amp;&amp;</span><span class="st"> </span>x<span class="op">&lt;</span><span class="dv">1</span>){ <span class="co"># hyperg_2F1 works fine in this situation</span></span>
<span id="cb2-4">    <span class="kw">hyperg_2F1</span>(a, b, c, x)</span>
<span id="cb2-5">  }<span class="cf">else</span>{ <span class="co"># transform to come down to the first situation</span></span>
<span id="cb2-6">    <span class="kw">hyperg_2F1</span>(c<span class="op">-</span>a, b, c, <span class="dv">1-1</span><span class="op">/</span>(<span class="dv">1</span><span class="op">-</span>x)) <span class="op">/</span><span class="st"> </span>(<span class="dv">1</span><span class="op">-</span>x)<span class="op">^</span>b</span>
<span id="cb2-7">  }</span>
<span id="cb2-8">}</span>
<span id="cb2-9">dB3 &lt;-<span class="st"> </span><span class="cf">function</span>(x, c, d, kappa, tau){</span>
<span id="cb2-10">  <span class="kw">stopifnot</span>(c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, d <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, tau <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb2-11">  <span class="cf">if</span>(kappa <span class="op">==</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb2-12">    <span class="kw">dbetaprime</span>(x, c, d, tau)</span>
<span id="cb2-13">  }<span class="cf">else</span> <span class="cf">if</span>(kappa <span class="op">==</span><span class="st"> </span>c<span class="op">+</span>d){</span>
<span id="cb2-14">    <span class="kw">dbetaprime</span>(x, c, d, <span class="dv">1</span>)</span>
<span id="cb2-15">  }<span class="cf">else</span>{</span>
<span id="cb2-16">    <span class="dv">1</span><span class="op">/</span><span class="kw">beta</span>(c,d) <span class="op">*</span><span class="st"> </span>x<span class="op">^</span>(c<span class="dv">-1</span>)<span class="op">*</span>(<span class="dv">1</span><span class="op">+</span>x)<span class="op">^</span>(<span class="op">-</span>kappa)<span class="op">/</span>(<span class="dv">1</span><span class="op">+</span>x<span class="op">/</span>tau)<span class="op">^</span>(c<span class="op">+</span>d<span class="op">-</span>kappa) <span class="op">/</span><span class="st"> </span></span>
<span id="cb2-17"><span class="st">      </span><span class="kw">Gauss2F1</span>(c, c<span class="op">+</span>d<span class="op">-</span>kappa, c<span class="op">+</span>d, <span class="dv">1-1</span><span class="op">/</span>tau)</span>
<span id="cb2-18">  }</span>
<span id="cb2-19">}</span></code></pre>
      </div>
      <p>
        This distribution is related to the
        <em>four-parameter generalized Beta distribution</em> introduced by Chen
        &amp; Novick in the paper
        <em
          >Bayesian analysis for binomial models with generalized beta prior
          distributions</em
        >
        (1984); this distribution takes its value in
        <span class="math inline">\([0,1]\)</span>. They are related by an
        elementary transformation:
        <span class="math display"
          >\[ \Theta \sim GB4(c, d, \kappa, \tau) \quad \iff\quad
          \frac{\Theta}{1-\Theta} \sim \mathcal{B}_3\left(c, d, c+d-\kappa,
          \frac{1}{\tau}\right). \]</span
        >
      </p>
      <h1 id="update-2019-09-05-generalised-beta-distribution">
        Update 2019-09-05: generalised Beta distribution
      </h1>
      <p>
        I’ve just discovered that the
        <span class="math inline">\(GB4\)</span> distribution appears in the
        paper
        <em
          >On Kummer’s distributions of type two and generalized Beta
          distributions</em
        >
        written by Hamza &amp; Vallois. It is named
        <em>generalised Beta distribution</em> in this paper, it is denoted by
        <span class="math inline">\(\beta_\delta(a,b,c)\)</span> and its density
        function at <span class="math inline">\(u \in [0,1]\)</span> is given by
        <span class="math display"
          >\[ \frac{1}{\beta(a,b){}_2\!F_1(-c,a;a+b;1-\delta)}
          u^{a-1}(1-u)^{b-1}\bigl(1+(\delta-1)u\bigr)^c \]</span
        >
        for <span class="math inline">\(a,b,\delta&gt;0\)</span> and
        <span class="math inline">\(c \in \mathbb{R}\)</span>.
      </p>
      <p>
        We have the following relation: if
        <span class="math inline"
          >\(\Phi \sim \mathcal{B}_3(c, d, \kappa, \tau)\)</span
        >, then
        <span class="math display"
          >\[ \frac{\Phi}{1+\Phi} \sim \beta_{\frac{1}{\tau}}(c, d, \kappa-c-d).
          \]</span
        >
      </p>
      <p>
        So, maybe a better name for
        <span class="math inline">\(\mathcal{B}_3\)</span> would be
        <em>generalised Beta prime distribution</em>.
      </p>
      <h1 id="cumulative-distribution-function">
        Cumulative distribution function
      </h1>
      <p>
        The cumulative distribution function of
        <span class="math inline">\(\mathcal{B}_3\)</span> involves the
        <em>Appell hypergeometric function</em>
        <span class="math inline">\(F_1\)</span>. A Fortran implementation of
        this function is available in the R package <code>appell</code>. This
        package has been removed from CRAN, but you can still install it. If
        <span class="math inline"
          >\(\Phi \sim \mathcal{B}_3(c,d,\kappa,\tau)\)</span
        >, then, for <span class="math inline">\(q \geqslant 0\)</span>,
        <span class="math display"
          >\[ \Pr(\Phi \leqslant q) = \frac{q^c F_1\left(c; \kappa, c+d-\kappa;
          c+1; -q, -\frac{q}{\tau}\right)} {cB(c,d){}_2\!F_1\left(c, c+d-\kappa,
          c+d; 1 - \frac{1}{\tau}\right)}. \]</span
        >
        Here is a R implementation. I found that it works well with the option
        <code>userflag = 0</code> of the <code>appellf1</code> function.
      </p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1">pB3 &lt;-<span class="st"> </span><span class="cf">function</span>(q, c, d, kappa, tau, <span class="dt">userflag =</span> <span class="dv">0</span>){</span>
<span id="cb3-2">  <span class="kw">stopifnot</span>(c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, d <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, tau <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb3-3">  <span class="cf">if</span>(kappa <span class="op">==</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb3-4">    <span class="kw">pbetaprime</span>(q, c, d, tau)</span>
<span id="cb3-5">  }<span class="cf">else</span> <span class="cf">if</span>(kappa <span class="op">==</span><span class="st"> </span>c<span class="op">+</span>d){</span>
<span id="cb3-6">    <span class="kw">pbetaprime</span>(q, c, d, <span class="dv">1</span>)</span>
<span id="cb3-7">  }<span class="cf">else</span>{</span>
<span id="cb3-8">    C &lt;-<span class="st"> </span><span class="kw">beta</span>(c,d) <span class="op">*</span><span class="st"> </span><span class="kw">Gauss2F1</span>(c, c<span class="op">+</span>d<span class="op">-</span>kappa, c<span class="op">+</span>d, <span class="dv">1-1</span><span class="op">/</span>tau)</span>
<span id="cb3-9">    Appell &lt;-<span class="st"> </span></span>
<span id="cb3-10"><span class="st">      </span>appell<span class="op">::</span><span class="kw">appellf1</span>(c, kappa, c<span class="op">+</span>d<span class="op">-</span>kappa, c<span class="op">+</span><span class="dv">1</span>, <span class="op">-</span>q, <span class="op">-</span>q<span class="op">/</span>tau, </span>
<span id="cb3-11">                       <span class="dt">userflag =</span> userflag)</span>
<span id="cb3-12">    q<span class="op">^</span>c<span class="op">/</span>c <span class="op">*</span><span class="st"> </span><span class="kw">Re</span>(Appell<span class="op">$</span>val) <span class="op">/</span><span class="st"> </span>C</span>
<span id="cb3-13">  }</span>
<span id="cb3-14">}</span></code></pre>
      </div>
      <h1 id="sampling-the-beta-distribution-of-the-third-kind">
        Sampling the Beta distribution of the third kind
      </h1>
      <p>
        It is not very easy to sample the
        <span class="math inline">\(\mathcal{B}_3\)</span> distribution. In her
        <a
          href="https://savoirs.usherbrooke.ca/bitstream/handle/11143/9640/Chabot_Myriam_MSc_2016.pdf"
          >master thesis</a
        >, Myriam Chabot proved that it can be represented as a discrete mixture
        of <span class="math inline">\(\mathcal{B}_2\)</span> distributions, and
        we will use this result.
      </p>
      <p>This result is the following one.</p>
      <ul>
        <li>
          <p>
            For <span class="math inline">\(\tau &lt; 1\)</span>, let
            <span class="math inline">\(K\)</span> be a random variable on
            <span class="math inline">\(\mathbb{N}\)</span> whose probability
            mass at <span class="math inline">\(k\in\mathbb{N}\)</span> is given
            by
            <span class="math display"
              >\[ \frac{1}{{}_2\!F_1(d, c+d-\kappa, c+d, 1-\tau)}
              \frac{(1-\tau)^k}{k!} \frac{{(c+d-\kappa)}_k{(d)}_k}{{(c+d)}_k}
              \]</span
            >
            and let <span class="math inline">\(\Phi\)</span> be a random
            variable such that
            <span class="math display"
              >\[ (\Phi \mid K=k) \sim \mathcal{B}'(c, d+k, 1). \]</span
            >
            Then
            <span class="math inline"
              >\(\Phi \sim \mathcal{B}_3(c,d,\kappa,\tau)\)</span
            >.
          </p>
        </li>
        <li>
          <p>
            For <span class="math inline">\(\tau &gt; 1\)</span>, let
            <span class="math inline">\(K\)</span> be a random variable on
            <span class="math inline">\(\mathbb{N}\)</span> whose probability
            mass at <span class="math inline">\(k\in\mathbb{N}\)</span> is given
            by
            <span class="math display"
              >\[ \frac{1}{{}_2\!F_1\left(c, c+d-\kappa, c+d,
              1-\frac{1}{\tau}\right)}
              \frac{\left(1-\frac{1}{\tau}\right)^k}{k!}
              \frac{{(c+d-\kappa)}_k{(c)}_k}{{(c+d)}_k} \]</span
            >
            and let <span class="math inline">\(\Phi\)</span> be a random
            variable such that
            <span class="math display"
              >\[ (\Phi \mid K=k) \sim \mathcal{B}'(c+k, d, 1). \]</span
            >
            Then
            <span class="math inline"
              >\(\Phi \sim \mathcal{B}_3(c,d,\kappa,\tau)\)</span
            >.
          </p>
        </li>
      </ul>
      <p>
        So we can sample
        <span class="math inline">\(\mathcal{B}_3(c,d,\kappa,\tau)\)</span> if
        we are able to sample these discrete distributions. To do so, we use the
        <code>Runuran</code> package.
      </p>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb4-1"><span class="kw">library</span>(Runuran)</span>
<span id="cb4-2">pmf_unnormalized &lt;-<span class="st"> </span><span class="cf">function</span>(k, c, d, kappa, tau){</span>
<span id="cb4-3">  out &lt;-<span class="st"> </span><span class="kw">numeric</span>(<span class="kw">length</span>(k))</span>
<span id="cb4-4">  positive &lt;-<span class="st"> </span>k <span class="op">&gt;=</span><span class="st"> </span><span class="dv">0</span></span>
<span id="cb4-5">  k &lt;-<span class="st"> </span>k[positive]</span>
<span id="cb4-6">  out[positive] &lt;-<span class="st"> </span></span>
<span id="cb4-7"><span class="st">    </span><span class="cf">if</span>(tau <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>){</span>
<span id="cb4-8">      <span class="kw">exp</span>(k<span class="op">*</span><span class="kw">log</span>(<span class="dv">1</span><span class="op">-</span>tau) <span class="op">-</span><span class="st"> </span><span class="kw">lfactorial</span>(k) <span class="op">+</span><span class="st"> </span></span>
<span id="cb4-9"><span class="st">            </span><span class="kw">lnpoch</span>(c<span class="op">+</span>d<span class="op">-</span>kappa,k) <span class="op">+</span><span class="st"> </span><span class="kw">lnpoch</span>(d,k) <span class="op">-</span><span class="st"> </span><span class="kw">lnpoch</span>(c<span class="op">+</span>d,k)) </span>
<span id="cb4-10">    }<span class="cf">else</span>{</span>
<span id="cb4-11">      <span class="kw">exp</span>(k<span class="op">*</span><span class="kw">log</span>(<span class="dv">1-1</span><span class="op">/</span>tau) <span class="op">-</span><span class="st"> </span><span class="kw">lfactorial</span>(k) <span class="op">+</span><span class="st"> </span></span>
<span id="cb4-12"><span class="st">            </span><span class="kw">lnpoch</span>(c<span class="op">+</span>d<span class="op">-</span>kappa,k) <span class="op">+</span><span class="st"> </span><span class="kw">lnpoch</span>(c,k) <span class="op">-</span><span class="st"> </span><span class="kw">lnpoch</span>(c<span class="op">+</span>d,k))</span>
<span id="cb4-13">    }</span>
<span id="cb4-14">  out</span>
<span id="cb4-15">}</span>
<span id="cb4-16">NormalizingConstant &lt;-<span class="st"> </span><span class="cf">function</span>(c, d, kappa, tau){</span>
<span id="cb4-17">  <span class="cf">if</span>(tau <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>){</span>
<span id="cb4-18">    <span class="kw">hyperg_2F1</span>(d, c<span class="op">+</span>d<span class="op">-</span>kappa, c<span class="op">+</span>d, <span class="dv">1</span><span class="op">-</span>tau) </span>
<span id="cb4-19">  }<span class="cf">else</span>{</span>
<span id="cb4-20">    <span class="kw">hyperg_2F1</span>(c, c<span class="op">+</span>d<span class="op">-</span>kappa, c<span class="op">+</span>d, <span class="dv">1-1</span><span class="op">/</span>tau) </span>
<span id="cb4-21">  }</span>
<span id="cb4-22">}</span>
<span id="cb4-23">Ksampler &lt;-<span class="st"> </span><span class="cf">function</span>(n, c, d, kappa, tau){</span>
<span id="cb4-24">  dist &lt;-<span class="st"> </span><span class="kw">unuran.discr.new</span>(</span>
<span id="cb4-25">    <span class="dt">pmf =</span> <span class="cf">function</span>(k) <span class="kw">pmf_unnormalized</span>(k, c, d, kappa, tau),</span>
<span id="cb4-26">    <span class="dt">lb =</span> <span class="dv">0</span>, <span class="dt">ub=</span> <span class="ot">Inf</span>, <span class="dt">sum =</span> <span class="kw">NormalizingConstant</span>(c, d, kappa, tau)</span>
<span id="cb4-27">  )</span>
<span id="cb4-28">  unuran &lt;-<span class="st"> </span><span class="kw">unuran.new</span>(dist, <span class="dt">method=</span><span class="st">"dgt"</span>) </span>
<span id="cb4-29">  <span class="kw">ur</span>(unuran, n)</span>
<span id="cb4-30">}</span>
<span id="cb4-31">rB3 &lt;-<span class="st"> </span><span class="cf">function</span>(n, c, d, kappa, tau){</span>
<span id="cb4-32">  <span class="kw">stopifnot</span>(c <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, d <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>, tau <span class="op">&gt;</span><span class="st"> </span><span class="dv">0</span>)</span>
<span id="cb4-33">  <span class="cf">if</span>(tau <span class="op">==</span><span class="st"> </span><span class="dv">1</span> <span class="op">||</span><span class="st"> </span>kappa <span class="op">==</span><span class="st"> </span>c<span class="op">+</span>d){</span>
<span id="cb4-34">    <span class="kw">rbetaprime</span>(n, c, d, <span class="dv">1</span>)</span>
<span id="cb4-35">  }<span class="cf">else</span> <span class="cf">if</span>(kappa <span class="op">==</span><span class="st"> </span><span class="dv">0</span>){</span>
<span id="cb4-36">    <span class="kw">rbetaprime</span>(n, c, d, tau)</span>
<span id="cb4-37">  }<span class="cf">else</span>{</span>
<span id="cb4-38">    K &lt;-<span class="st"> </span><span class="kw">Ksampler</span>(n, c, d, kappa, tau)</span>
<span id="cb4-39">    <span class="cf">if</span>(tau <span class="op">&lt;</span><span class="st"> </span><span class="dv">1</span>){</span>
<span id="cb4-40">      <span class="kw">rbetaprime</span>(n, c, d <span class="op">+</span><span class="st"> </span>K, <span class="dv">1</span>)</span>
<span id="cb4-41">    }<span class="cf">else</span>{</span>
<span id="cb4-42">      <span class="kw">rbetaprime</span>(n, c <span class="op">+</span><span class="st"> </span>K, d, <span class="dv">1</span>)</span>
<span id="cb4-43">    }</span>
<span id="cb4-44">  }</span>
<span id="cb4-45">}</span></code></pre>
      </div>
      <p>Let’s check. The density:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb5-1">c &lt;-<span class="st"> </span><span class="dv">2</span>; d &lt;-<span class="st"> </span><span class="dv">3</span>; kappa &lt;-<span class="st"> </span><span class="dv">4</span>; tau &lt;-<span class="st"> </span><span class="dv">5</span></span>
<span id="cb5-2">nsims &lt;-<span class="st"> </span><span class="dv">1000000</span></span>
<span id="cb5-3">sims &lt;-<span class="st"> </span><span class="kw">rB3</span>(nsims, c, d, kappa, tau)</span>
<span id="cb5-4"><span class="kw">plot</span>(<span class="kw">density</span>(sims, <span class="dt">from =</span> <span class="dv">0</span>, <span class="dt">to =</span> <span class="kw">quantile</span>(sims, <span class="fl">0.95</span>)))</span>
<span id="cb5-5"><span class="kw">curve</span>(<span class="kw">dB3</span>(x, c, d, kappa, tau), <span class="dt">add =</span> <span class="ot">TRUE</span>, <span class="dt">col =</span> <span class="st">"red"</span>, </span>
<span id="cb5-6">      <span class="dt">lty =</span> <span class="st">"dashed"</span>, <span class="dt">lwd =</span> <span class="dv">2</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Beta3-density-1.png"
        />
      </p>
      <p>The cumulative distribution function:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb6-1">q &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="fl">0.1</span>, <span class="dv">4</span>, <span class="dt">length.out =</span> <span class="dv">10</span>)[<span class="op">-</span><span class="dv">6</span>]</span>
<span id="cb6-2">cdfValues &lt;-<span class="st"> </span><span class="kw">sapply</span>(q, <span class="cf">function</span>(x) <span class="kw">pB3</span>(x, c, d, kappa, tau))</span>
<span id="cb6-3">empirical_cdf &lt;-<span class="st"> </span><span class="kw">ecdf</span>(sims)</span>
<span id="cb6-4"><span class="kw">plot</span>(empirical_cdf, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">4</span>))</span>
<span id="cb6-5"><span class="kw">points</span>(q, cdfValues, <span class="dt">pch=</span><span class="dv">19</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Beta3-cdf-1.png"
        />
      </p>
      <p>
        I’ve removed the sixth value of the vector <code>q</code> because there
        is a crash of <code>appellf1</code> for this value:
      </p>
      <div class="sourceCode" id="cb7">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb7-1">q &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="fl">0.1</span>, <span class="dv">4</span>, <span class="dt">length.out =</span> <span class="dv">10</span>)</span>
<span id="cb7-2"><span class="kw">pB3</span>(q[<span class="dv">6</span>], c, d, kappa, tau)</span>
<span id="cb7-3"><span class="co">## Error in appell::appellf1(c, kappa, c + d - kappa, c + 1, -q, -q/tau, : f1conv: Computation not possible</span></span></code></pre>
      </div>
      <p>It works with the option <code>userflag = 1</code>:</p>
      <div class="sourceCode" id="cb8">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb8-1"><span class="kw">pB3</span>(q[<span class="dv">6</span>], c, d, kappa, tau, <span class="dt">userflag =</span> <span class="dv">1</span>)</span>
<span id="cb8-2"><span class="co">## [1] 0.849321</span></span></code></pre>
      </div>
      <p>
        Finally perhaps the option <code>userflag = 1</code> is a better default
        value:
      </p>
      <div class="sourceCode" id="cb9">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb9-1">cdfValues &lt;-<span class="st"> </span><span class="kw">sapply</span>(q, <span class="cf">function</span>(x){</span>
<span id="cb9-2">  <span class="kw">pB3</span>(x, c, d, kappa, tau, <span class="dt">userflag =</span> <span class="dv">1</span>)</span>
<span id="cb9-3">})</span>
<span id="cb9-4"><span class="kw">plot</span>(empirical_cdf, <span class="dt">xlim =</span> <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">4</span>))</span>
<span id="cb9-5"><span class="kw">points</span>(q, cdfValues, <span class="dt">pch=</span><span class="dv">19</span>)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/Beta3-cdfbis-1.png"
        />
      </p>
      <h1 id="application-to-the-bayesian-binomial-model">
        Application to the Bayesian binomial model
      </h1>
      <p>
        Consider the binomial statistical model parameterized by the odds ratio
        <span class="math inline">\(\phi\)</span>:
        <span class="math display"
          >\[ L(\phi \mid x) \propto \frac{\phi^x}{(1+\phi)^n}. \]</span
        >
        Take a
        <span class="math inline">\(\mathcal{B}_3(c,d,\kappa,\tau)\)</span>
        prior distribution on <span class="math inline">\(\phi\)</span>:
        <span class="math display"
          >\[ \pi(\phi) \propto \frac{\phi^{c-1}(1+\phi)^{-\kappa}}
          {\left(1+\frac{\phi}{\tau}\right)^{c+d-\kappa}} \]</span
        >
        Then the posterior distribution on
        <span class="math inline">\(\phi\)</span> is
        <span class="math inline"
          >\(\mathcal{B}_3(c+x,d+n-x,\kappa+n,\tau)\)</span
        >.
      </p>
      <h1 id="application-to-the-bayesian-two-poisson-samples-model">
        Application to the Bayesian “two Poisson samples” model
      </h1>
      <p>
        Consider the statistical model given by two independent observations
        <span class="math display"
          >\[ x \sim \mathcal{P}(\lambda S), \quad y\sim\mathcal{P}(\mu T)
          \]</span
        >
        where <span class="math inline">\(S\)</span> and
        <span class="math inline">\(T\)</span> are known “sample sizes”. We
        parametrize the model by <span class="math inline">\(\mu\)</span> and
        <span class="math inline">\(\phi := \frac{\lambda}{\mu}\)</span>.
      </p>
      <p>
        Assigning a Gamma prior distribution
        <span class="math inline">\(\mathcal{G}{B}(a,b)\)</span> on
        <span class="math inline">\(\mu\)</span>, it is not difficult to get
        <span class="math display"
          >\[ (\mu \mid \phi,x,y) \sim\mathcal{G}(a+x+y, b + \phi S + T).
          \]</span
        >
        In their paper
        <em
          >A Bayesian framework for the ratio of two Poisson rates in the
          context of vaccine efficacy trials</em
        >
        (2011), Laurent &amp; Legrand derived the marginal likelihood on
        <span class="math inline">\(\phi\)</span> in the case of the
        semi-conjuguate family of prior distributions. Their result holds as
        long as <span class="math inline">\(\mu\)</span> and
        <span class="math inline">\(\phi\)</span> are independent under the
        prior distribution, and this result is
        <span class="math display"
          >\[ \widetilde{L}(\phi \mid x,y) \propto
          \frac{\phi^x}{{(1+\rho\phi)}^{a+x+y}} \]</span
        >
        where <span class="math inline">\(\rho = \frac{S}{T+b}\)</span>.
      </p>
      <p>
        Now, let’s assign a
        <span class="math inline">\(\mathcal{B}'(c,d,\tau)\)</span> prior
        distribution on <span class="math inline">\(\phi\)</span>. Then the
        posterior distribution on <span class="math inline">\(\phi\)</span> is
        given by
        <span class="math display"
          >\[ \pi(\phi \mid x,y) \propto \pi(\phi) \widetilde{L}(\phi \mid x,y)
          \propto \frac{\phi^{c+x-1}(1+\rho\phi)^{-(a+x+y)}}
          {\left(1+\frac{\phi}{\tau}\right)^{c+d}}, \]</span
        >
        and by noting that
        <span class="math inline"
          >\(\frac{\phi}{\tau} = \frac{\rho\phi}{\rho\tau}\)</span
        >, we recognize the scaled
        <span class="math inline">\(\mathcal{B}_3\)</span> distribution
        <span class="math display"
          >\[ (\phi \mid x,y) \sim \frac{1}{\rho} \times \mathcal{B}_3(c+x,
          a+d+y, a+x+y, \rho\tau). \]</span
        >
        In particular, if
        <span class="math inline"
          >\(\tau = \frac{1}{\rho} = \frac{T+b}{S}\)</span
        >, then we find
        <span class="math display"
          >\[ (\phi \mid x,y) \sim \mathcal{B}_2(c+x, a+d+y, \tau), \]</span
        >
        and this is the situation of the semi-conjugate family studied by
        Laurent &amp; Legrand.
      </p>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Mon, 22 Jul 2019 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/Beta3.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Drawing nested Steiner chains</title>
      <link>https://laustep.github.io/stlahblog/posts/SteinerChains.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>This is a Steiner chain with its enveloping cyclide:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SteinerChain0.png"
        />
      </p>
      <p>And these are nested Steiner chains:</p>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SteinerChain.png"
        />
      </p>
      <h1 id="with-r">With R</h1>
      <p>
        We will include the cyclides in the plot. We firstly write a function
        returning a mesh of a cyclide. It is obtained by applying an inversion
        to the mesh of a torus.
      </p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(rgl)</span>
<span id="cb1-2"></span>
<span id="cb1-3">torusMesh &lt;-<span class="st"> </span><span class="cf">function</span>(R, r, S, s, arc, ...){</span>
<span id="cb1-4">  vertices &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> S<span class="op">*</span>s)</span>
<span id="cb1-5">  Normals &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_real_</span>, <span class="dt">nrow =</span> 3L, <span class="dt">ncol =</span> S<span class="op">*</span>s)</span>
<span id="cb1-6">  full &lt;-<span class="st"> </span>arc <span class="op">==</span><span class="st"> </span><span class="dv">2</span><span class="op">*</span>pi</span>
<span id="cb1-7">  SS &lt;-<span class="st"> </span><span class="kw">ifelse</span>(full, S, S<span class="dv">-1</span>)</span>
<span id="cb1-8">  indices &lt;-<span class="st"> </span><span class="kw">matrix</span>(<span class="ot">NA_integer_</span>, <span class="dt">nrow =</span> 4L, <span class="dt">ncol =</span> SS<span class="op">*</span>s)</span>
<span id="cb1-9">  u_ &lt;-<span class="st"> </span><span class="cf">if</span>(full){</span>
<span id="cb1-10">    <span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> S<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb1-11">  }<span class="cf">else</span>{</span>
<span id="cb1-12">    <span class="kw">seq</span>(<span class="dv">0</span>, arc, <span class="dt">length.out =</span> S)</span>
<span id="cb1-13">  }</span>
<span id="cb1-14">  v_ &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">2</span><span class="op">*</span>pi, <span class="dt">length.out =</span> s<span class="op">+</span><span class="dv">1</span>)[<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb1-15">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>S){</span>
<span id="cb1-16">    cos_ui &lt;-<span class="st"> </span><span class="kw">cos</span>(u_[i])</span>
<span id="cb1-17">    sin_ui &lt;-<span class="st"> </span><span class="kw">sin</span>(u_[i])</span>
<span id="cb1-18">    cx &lt;-<span class="st"> </span>R <span class="op">*</span><span class="st"> </span>cos_ui</span>
<span id="cb1-19">    cy &lt;-<span class="st"> </span>R <span class="op">*</span><span class="st"> </span>sin_ui</span>
<span id="cb1-20">    <span class="cf">for</span>(j <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>s){</span>
<span id="cb1-21">      rcos_vj &lt;-<span class="st"> </span>r<span class="op">*</span><span class="kw">cos</span>(v_[j])</span>
<span id="cb1-22">      n &lt;-<span class="st"> </span><span class="kw">c</span>(rcos_vj<span class="op">*</span>cos_ui, rcos_vj<span class="op">*</span>sin_ui, r<span class="op">*</span><span class="kw">sin</span>(v_[j]))</span>
<span id="cb1-23">      Normals[, (i<span class="dv">-1</span>)<span class="op">*</span>s<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="op">-</span>n</span>
<span id="cb1-24">      vertices[, (i<span class="dv">-1</span>)<span class="op">*</span>s<span class="op">+</span>j] &lt;-<span class="st"> </span><span class="kw">c</span>(cx,cy,<span class="dv">0</span>) <span class="op">+</span><span class="st"> </span>n </span>
<span id="cb1-25">    }</span>
<span id="cb1-26">  }</span>
<span id="cb1-27">  <span class="co"># quads</span></span>
<span id="cb1-28">  s &lt;-<span class="st"> </span><span class="kw">as.integer</span>(s)</span>
<span id="cb1-29">  <span class="cf">for</span>(i <span class="cf">in</span> 1L<span class="op">:</span>SS){</span>
<span id="cb1-30">    ip1 &lt;-<span class="st"> </span><span class="kw">ifelse</span>(i<span class="op">==</span>S, 1L, i<span class="op">+</span>1L)</span>
<span id="cb1-31">    <span class="cf">for</span>(j <span class="cf">in</span> 1L<span class="op">:</span>s){</span>
<span id="cb1-32">      jp1 &lt;-<span class="st"> </span><span class="kw">ifelse</span>(j<span class="op">==</span>s, 1L, j<span class="op">+</span>1L)</span>
<span id="cb1-33">      indices[,(i<span class="dv">-1</span>)<span class="op">*</span>s<span class="op">+</span>j] &lt;-<span class="st"> </span></span>
<span id="cb1-34"><span class="st">        </span><span class="kw">c</span>((i<span class="op">-</span>1L)<span class="op">*</span>s<span class="op">+</span>j, (i<span class="op">-</span>1L)<span class="op">*</span>s<span class="op">+</span>jp1, (ip1<span class="op">-</span>1L)<span class="op">*</span>s<span class="op">+</span>jp1, (ip1<span class="op">-</span>1L)<span class="op">*</span>s<span class="op">+</span>j)   </span>
<span id="cb1-35">    }</span>
<span id="cb1-36">  }</span>
<span id="cb1-37">  <span class="kw">qmesh3d</span>(</span>
<span id="cb1-38">    <span class="dt">vertices =</span> vertices,</span>
<span id="cb1-39">    <span class="dt">indices =</span> indices,</span>
<span id="cb1-40">    <span class="dt">homogeneous =</span> <span class="ot">FALSE</span>,</span>
<span id="cb1-41">    <span class="dt">material =</span> <span class="kw">list</span>(...),</span>
<span id="cb1-42">    <span class="dt">normals =</span> <span class="kw">t</span>(Normals)</span>
<span id="cb1-43">  )</span>
<span id="cb1-44">}</span>
<span id="cb1-45"></span>
<span id="cb1-46"><span class="co"># only for mu&gt;c (ring cyclide)</span></span>
<span id="cb1-47">cyclideMesh &lt;-<span class="st"> </span><span class="cf">function</span>(mu, a, c, <span class="dt">S=</span><span class="dv">128</span>, <span class="dt">s=</span><span class="dv">64</span>, <span class="dt">arc=</span><span class="dv">2</span><span class="op">*</span>pi, ...){</span>
<span id="cb1-48">  b &lt;-<span class="st"> </span><span class="kw">sqrt</span>(a<span class="op">^</span><span class="dv">2</span><span class="op">-</span>c<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb1-49">  bb &lt;-<span class="st"> </span>b<span class="op">*</span><span class="kw">sqrt</span>(mu<span class="op">^</span><span class="dv">2</span><span class="op">-</span>c<span class="op">^</span><span class="dv">2</span>)</span>
<span id="cb1-50">  omega &lt;-<span class="st"> </span>(a<span class="op">*</span>mu <span class="op">+</span><span class="st"> </span>bb)<span class="op">/</span>c</span>
<span id="cb1-51">  Omega &lt;-<span class="st"> </span><span class="kw">c</span>(omega,<span class="dv">0</span>,<span class="dv">0</span>)</span>
<span id="cb1-52">  inversion &lt;-<span class="st"> </span><span class="cf">function</span>(M){</span>
<span id="cb1-53">    Omega <span class="op">+</span><span class="st"> </span><span class="dv">1</span><span class="op">/</span><span class="kw">c</span>(<span class="kw">crossprod</span>(M<span class="op">-</span>Omega)) <span class="op">*</span><span class="st"> </span>(M<span class="op">-</span>Omega)</span>
<span id="cb1-54">  }</span>
<span id="cb1-55">  d &lt;-<span class="st"> </span>(a<span class="op">-</span>c)<span class="op">*</span>(mu<span class="op">-</span>c)<span class="op">+</span>bb</span>
<span id="cb1-56">  r &lt;-<span class="st"> </span>c<span class="op">*</span>c<span class="op">*</span>(mu<span class="op">-</span>c) <span class="op">/</span><span class="st"> </span>((a<span class="op">+</span>c)<span class="op">*</span>(mu<span class="op">-</span>c)<span class="op">+</span>bb) <span class="op">/</span><span class="st"> </span>d</span>
<span id="cb1-57">  R &lt;-<span class="st"> </span>c<span class="op">*</span>c<span class="op">*</span>(a<span class="op">-</span>c) <span class="op">/</span><span class="st"> </span>((a<span class="op">-</span>c)<span class="op">*</span>(mu<span class="op">+</span>c)<span class="op">+</span>bb) <span class="op">/</span><span class="st"> </span>d</span>
<span id="cb1-58">  bb2 &lt;-<span class="st"> </span>b<span class="op">*</span>b<span class="op">*</span>(mu<span class="op">*</span>mu<span class="op">-</span>c<span class="op">*</span>c)</span>
<span id="cb1-59">  denb1 &lt;-<span class="st"> </span>c<span class="op">*</span>(a<span class="op">*</span>c<span class="op">-</span>mu<span class="op">*</span>c<span class="op">+</span>c<span class="op">*</span>c<span class="op">-</span>a<span class="op">*</span>mu<span class="op">-</span>bb)</span>
<span id="cb1-60">  b1 &lt;-<span class="st"> </span>(a<span class="op">*</span>mu<span class="op">*</span>(c<span class="op">-</span>mu)<span class="op">*</span>(a<span class="op">+</span>c)<span class="op">-</span>bb2<span class="op">+</span>c<span class="op">*</span>c<span class="op">+</span>bb<span class="op">*</span>(c<span class="op">*</span>(a<span class="op">-</span>mu<span class="op">+</span>c)<span class="op">-</span><span class="dv">2</span><span class="op">*</span>a<span class="op">*</span>mu))<span class="op">/</span>denb1</span>
<span id="cb1-61">  denb2 &lt;-<span class="st"> </span>c<span class="op">*</span>(a<span class="op">*</span>c<span class="op">-</span>mu<span class="op">*</span>c<span class="op">-</span>c<span class="op">*</span>c<span class="op">+</span>a<span class="op">*</span>mu<span class="op">+</span>bb)</span>
<span id="cb1-62">  b2 &lt;-<span class="st"> </span>(a<span class="op">*</span>mu<span class="op">*</span>(c<span class="op">+</span>mu)<span class="op">*</span>(a<span class="op">-</span>c)<span class="op">+</span>bb2<span class="op">-</span>c<span class="op">*</span>c<span class="op">+</span>bb<span class="op">*</span>(c<span class="op">*</span>(a<span class="op">-</span>mu<span class="op">-</span>c)<span class="op">+</span><span class="dv">2</span><span class="op">*</span>a<span class="op">*</span>mu))<span class="op">/</span>denb2</span>
<span id="cb1-63">  omegaT &lt;-<span class="st"> </span>(b1<span class="op">+</span>b2)<span class="op">/</span><span class="dv">2</span></span>
<span id="cb1-64">  tmesh &lt;-<span class="st"> </span><span class="kw">torusMesh</span>(R, r, S, s, arc, ...)</span>
<span id="cb1-65">  tmesh<span class="op">$</span>normals &lt;-<span class="st"> </span></span>
<span id="cb1-66"><span class="st">    </span><span class="kw">apply</span>(tmesh<span class="op">$</span>normals <span class="op">+</span><span class="st"> </span>tmesh<span class="op">$</span>vb[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,] <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(omegaT,<span class="dv">0</span>,<span class="dv">0</span>), <span class="dv">2</span>, inversion)</span>
<span id="cb1-67">  tmesh<span class="op">$</span>vb[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,] &lt;-<span class="st"> </span><span class="kw">apply</span>(tmesh<span class="op">$</span>vb[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,] <span class="op">+</span><span class="st"> </span><span class="kw">c</span>(omegaT,<span class="dv">0</span>,<span class="dv">0</span>), <span class="dv">2</span>, inversion)</span>
<span id="cb1-68">  tmesh<span class="op">$</span>normals &lt;-<span class="st"> </span>tmesh<span class="op">$</span>vb[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,] <span class="op">-</span><span class="st"> </span>tmesh<span class="op">$</span>normals  </span>
<span id="cb1-69">  tmesh</span>
<span id="cb1-70">}</span></code></pre>
      </div>
      <p>Now here is the code which plots the nested Steiner chains:</p>
      <div class="sourceCode" id="cb2">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb2-1"><span class="co"># make a smooth unit sphere</span></span>
<span id="cb2-2">unitSphere &lt;-<span class="st"> </span><span class="kw">subdivision3d</span>(<span class="kw">icosahedron3d</span>(), <span class="dt">depth=</span><span class="dv">4</span>)</span>
<span id="cb2-3">unitSphere<span class="op">$</span>vb[<span class="dv">4</span>,] &lt;-<span class="st"> </span></span>
<span id="cb2-4"><span class="st">  </span><span class="kw">apply</span>(unitSphere<span class="op">$</span>vb[<span class="dv">1</span><span class="op">:</span><span class="dv">3</span>,], <span class="dv">2</span>, <span class="cf">function</span>(x) <span class="kw">sqrt</span>(<span class="kw">sum</span>(x<span class="op">^</span><span class="dv">2</span>)))</span>
<span id="cb2-5">unitSphere<span class="op">$</span>normals &lt;-<span class="st"> </span>unitSphere<span class="op">$</span>vb</span>
<span id="cb2-6"><span class="co"># draw a sphere in the x-y plane</span></span>
<span id="cb2-7">drawSphere &lt;-<span class="st"> </span><span class="cf">function</span>(x, y, radius, ...){</span>
<span id="cb2-8">  <span class="kw">shade3d</span>(</span>
<span id="cb2-9">    <span class="kw">translate3d</span>(</span>
<span id="cb2-10">      <span class="kw">scale3d</span>(unitSphere, radius, radius, radius), </span>
<span id="cb2-11">      x, y, <span class="dv">0</span>), </span>
<span id="cb2-12">    ...)</span>
<span id="cb2-13">}</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co"># draw a cyclide translated by (x,y,0)</span></span>
<span id="cb2-16">drawCyclide &lt;-<span class="st"> </span><span class="cf">function</span>(mu, a, c, x, y, ...){</span>
<span id="cb2-17">  mesh &lt;-<span class="st"> </span><span class="kw">cyclideMesh</span>(mu, a, c)</span>
<span id="cb2-18">  <span class="kw">shade3d</span>(<span class="kw">translate3d</span>(mesh, x, y, <span class="dv">0</span>), ...)</span>
<span id="cb2-19">}</span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="co"># image of circle (center, radius) by the inversion </span></span>
<span id="cb2-22"><span class="co">#   with center c and power k</span></span>
<span id="cb2-23">iotaCircle &lt;-<span class="st"> </span><span class="cf">function</span>(c, k, center, radius){</span>
<span id="cb2-24">  r &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">abs</span>(k)) </span>
<span id="cb2-25">  z1 &lt;-<span class="st"> </span><span class="kw">sign</span>(k) <span class="op">*</span><span class="st"> </span>(center<span class="op">-</span>c)<span class="op">/</span>r </span>
<span id="cb2-26">  D1 &lt;-<span class="st"> </span>(radius<span class="op">/</span>r)<span class="op">^</span><span class="dv">2</span> <span class="op">-</span><span class="st"> </span><span class="kw">c</span>(<span class="kw">crossprod</span>(z1))</span>
<span id="cb2-27">  z2 &lt;-<span class="st"> </span><span class="op">-</span>z1<span class="op">/</span>D1</span>
<span id="cb2-28">  R2 &lt;-<span class="st"> </span><span class="kw">sqrt</span>(<span class="kw">c</span>(<span class="kw">crossprod</span>(z2)) <span class="op">+</span><span class="st"> </span><span class="dv">1</span><span class="op">/</span>D1)</span>
<span id="cb2-29">  <span class="kw">list</span>(<span class="dt">center =</span> r<span class="op">*</span>z2<span class="op">+</span>c, <span class="dt">radius =</span> r<span class="op">*</span>R2)</span>
<span id="cb2-30">}</span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="co"># n: vector, the numbers of spheres at each step</span></span>
<span id="cb2-33"><span class="co"># -1 &lt; phi &lt; 1, phi != 0</span></span>
<span id="cb2-34">steiner &lt;-<span class="st"> </span><span class="cf">function</span>(n, phi, <span class="dt">color=</span><span class="st">"red"</span>, <span class="dt">shift=</span><span class="dv">0</span>, </span>
<span id="cb2-35">                    <span class="dt">Center=</span><span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>), <span class="dt">radius=</span><span class="dv">2</span>, <span class="dt">epsilon =</span> <span class="fl">0.005</span>){</span>
<span id="cb2-36">  depth &lt;-<span class="st"> </span><span class="kw">length</span>(n)</span>
<span id="cb2-37">  invphi &lt;-<span class="st"> </span><span class="dv">1</span><span class="op">/</span>phi </span>
<span id="cb2-38">  I &lt;-<span class="st"> </span><span class="kw">c</span>(radius<span class="op">*</span>invphi, <span class="dv">0</span>) <span class="op">+</span><span class="st"> </span>Center</span>
<span id="cb2-39">  k &lt;-<span class="st"> </span>radius<span class="op">*</span>radius<span class="op">*</span>(<span class="dv">1</span><span class="op">-</span>invphi<span class="op">*</span>invphi)</span>
<span id="cb2-40">  m &lt;-<span class="st"> </span>n[<span class="dv">1</span>]</span>
<span id="cb2-41">  sine &lt;-<span class="st"> </span><span class="kw">sin</span>(pi<span class="op">/</span>m)</span>
<span id="cb2-42">  Coef &lt;-<span class="st"> </span><span class="dv">1</span><span class="op">/</span>(<span class="dv">1</span><span class="op">+</span>sine)</span>
<span id="cb2-43">  O1x &lt;-<span class="st"> </span><span class="dv">2</span><span class="op">*</span>radius<span class="op">*</span>invphi</span>
<span id="cb2-44">  CRadius &lt;-<span class="st"> </span>Coef<span class="op">*</span>radius</span>
<span id="cb2-45">  CSide &lt;-<span class="st"> </span>CRadius<span class="op">*</span>sine</span>
<span id="cb2-46">  <span class="cf">if</span>(depth <span class="op">==</span><span class="st"> </span><span class="dv">1</span>){</span>
<span id="cb2-47">    circle &lt;-<span class="st"> </span><span class="kw">iotaCircle</span>(I<span class="op">-</span>Center, k, <span class="kw">c</span>(<span class="dv">0</span>,<span class="dv">0</span>), CRadius <span class="op">-</span><span class="st"> </span>CSide)</span>
<span id="cb2-48">    mu &lt;-<span class="st"> </span>(radius <span class="op">-</span><span class="st"> </span>circle<span class="op">$</span>radius)<span class="op">/</span><span class="dv">2</span>;</span>
<span id="cb2-49">    a &lt;-<span class="st"> </span>(radius <span class="op">+</span><span class="st"> </span>circle<span class="op">$</span>radius)<span class="op">/</span><span class="dv">2</span>;</span>
<span id="cb2-50">    c &lt;-<span class="st"> </span>(circle<span class="op">$</span>center[<span class="dv">1</span>] <span class="op">-</span><span class="st"> </span>O1x)<span class="op">/</span><span class="dv">2</span>;</span>
<span id="cb2-51">    pt &lt;-<span class="st"> </span>Center <span class="op">+</span><span class="st"> </span>circle<span class="op">$</span>center<span class="op">/</span><span class="dv">2</span>;</span>
<span id="cb2-52">    <span class="kw">drawCyclide</span>(mu, a, c, pt[<span class="dv">1</span>]<span class="op">-</span>O1x<span class="op">/</span><span class="dv">2</span>, pt[<span class="dv">2</span>], </span>
<span id="cb2-53">                <span class="dt">color =</span> <span class="st">"yellow"</span>, <span class="dt">alpha =</span> <span class="fl">0.2</span>)</span>
<span id="cb2-54">  }</span>
<span id="cb2-55">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span>m){</span>
<span id="cb2-56">    beta &lt;-<span class="st"> </span>(i<span class="op">+</span>shift)<span class="op">*</span><span class="dv">2</span><span class="op">*</span>pi<span class="op">/</span>m </span>
<span id="cb2-57">    pti &lt;-<span class="st"> </span><span class="kw">c</span>(CRadius<span class="op">*</span><span class="kw">cos</span>(beta), CRadius<span class="op">*</span><span class="kw">sin</span>(beta)) <span class="op">+</span><span class="st"> </span>Center</span>
<span id="cb2-58">    cc &lt;-<span class="st"> </span><span class="kw">iotaCircle</span>(I, k, pti, CSide)</span>
<span id="cb2-59">    center &lt;-<span class="st"> </span>cc<span class="op">$</span>center <span class="op">-</span><span class="st"> </span><span class="kw">c</span>(O1x,<span class="dv">0</span>)</span>
<span id="cb2-60">    r &lt;-<span class="st"> </span>cc<span class="op">$</span>radius</span>
<span id="cb2-61">    <span class="cf">if</span>(depth <span class="op">==</span><span class="st"> </span><span class="dv">1</span>){</span>
<span id="cb2-62">      <span class="kw">drawSphere</span>(center[<span class="dv">1</span>], center[<span class="dv">2</span>], r<span class="op">-</span>epsilon, <span class="dt">color =</span> color)</span>
<span id="cb2-63">    }</span>
<span id="cb2-64">    <span class="cf">if</span>(depth<span class="op">&gt;</span><span class="dv">1</span>){</span>
<span id="cb2-65">      <span class="kw">steiner</span>(n[<span class="op">-</span><span class="dv">1</span>], phi, <span class="dt">color=</span>color, </span>
<span id="cb2-66">              <span class="dt">Center=</span>center, <span class="dt">radius=</span>r, <span class="dt">shift =</span> <span class="op">-</span>shift)</span>
<span id="cb2-67">    }</span>
<span id="cb2-68">  }</span>
<span id="cb2-69">  <span class="kw">return</span>(<span class="kw">invisible</span>())</span>
<span id="cb2-70">}</span>
<span id="cb2-71"></span>
<span id="cb2-72"><span class="co"># background color</span></span>
<span id="cb2-73">bgColor &lt;-<span class="st"> </span><span class="kw">rgb</span>(<span class="dv">54</span>, <span class="dv">57</span>, <span class="dv">64</span>, <span class="dt">maxColorValue =</span> <span class="dv">255</span>)</span>
<span id="cb2-74"></span>
<span id="cb2-75"><span class="co"># plot</span></span>
<span id="cb2-76"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>,<span class="dv">50</span>,<span class="dv">550</span>,<span class="dv">550</span>))</span>
<span id="cb2-77"><span class="kw">bg3d</span>(bgColor)</span>
<span id="cb2-78"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-40</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb2-79"><span class="kw">steiner</span>(<span class="dt">n =</span> <span class="kw">c</span>(<span class="dv">3</span>,<span class="dv">3</span>,<span class="dv">4</span>), <span class="dt">phi =</span> <span class="fl">0.3</span>, <span class="dt">color =</span> <span class="st">"#B12A90FF"</span>, <span class="dt">shift =</span> <span class="fl">0.25</span>)</span></code></pre>
      </div>
      <p>Here is how to make a gif animation the nested Steiner chains:</p>
      <div class="sourceCode" id="cb3">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb3-1"><span class="co"># "bounding box"</span></span>
<span id="cb3-2">bBox &lt;-<span class="st"> </span><span class="cf">function</span>(){</span>
<span id="cb3-3">  r &lt;-<span class="st"> </span><span class="dv">2</span></span>
<span id="cb3-4">  <span class="kw">lines3d</span>(</span>
<span id="cb3-5">    <span class="kw">rbind</span>(</span>
<span id="cb3-6">      <span class="kw">c</span>(r, r, <span class="dv">0</span>), <span class="kw">c</span>(<span class="op">-</span>r, r, <span class="dv">0</span>), <span class="kw">c</span>(<span class="op">-</span>r, <span class="op">-</span>r, <span class="dv">0</span>), <span class="kw">c</span>(r, <span class="op">-</span>r, <span class="dv">0</span>)</span>
<span id="cb3-7">    ),</span>
<span id="cb3-8">    <span class="dt">color =</span> bgColor, <span class="dt">alpha =</span> <span class="dv">0</span></span>
<span id="cb3-9">  )</span>
<span id="cb3-10">}</span>
<span id="cb3-11"></span>
<span id="cb3-12">shifts &lt;-<span class="st"> </span><span class="kw">seq</span>(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dt">length.out =</span> <span class="dv">46</span>)[<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb3-13"><span class="kw">open3d</span>(<span class="dt">windowRect =</span> <span class="kw">c</span>(<span class="dv">50</span>,<span class="dv">50</span>,<span class="dv">550</span>,<span class="dv">550</span>))</span>
<span id="cb3-14"><span class="kw">bg3d</span>(bgColor)</span>
<span id="cb3-15"><span class="kw">view3d</span>(<span class="dv">0</span>, <span class="dv">-40</span>, <span class="dt">zoom =</span> <span class="fl">0.75</span>)</span>
<span id="cb3-16"><span class="cf">for</span>(i <span class="cf">in</span> <span class="kw">seq_along</span>(shifts)){</span>
<span id="cb3-17">  <span class="kw">steiner</span>(<span class="dt">n =</span> <span class="kw">c</span>(<span class="dv">3</span>,<span class="dv">3</span>,<span class="dv">5</span>), <span class="dt">phi =</span> <span class="fl">0.3</span>, <span class="dt">color =</span> <span class="st">"#B12A90FF"</span>, </span>
<span id="cb3-18">          <span class="dt">shift =</span> shifts[i])</span>
<span id="cb3-19">  <span class="kw">bBox</span>()</span>
<span id="cb3-20">  <span class="kw">snapshot3d</span>(<span class="kw">sprintf</span>(<span class="st">"img-%03d.png"</span>, i))</span>
<span id="cb3-21">  <span class="kw">clear3d</span>()</span>
<span id="cb3-22">}</span>
<span id="cb3-23"></span>
<span id="cb3-24">pngs &lt;-<span class="st"> </span><span class="kw">list.files</span>(<span class="dt">pattern =</span> <span class="st">"^img-.*png$"</span>)</span>
<span id="cb3-25">gifski<span class="op">::</span><span class="kw">gifski</span>(pngs, <span class="st">"SteinerChain_R.gif"</span>, </span>
<span id="cb3-26">               <span class="dt">width =</span> <span class="dv">500</span>, <span class="dt">height =</span> <span class="dv">500</span>, <span class="dt">delay =</span> <span class="fl">0.04</span>)</span>
<span id="cb3-27"><span class="kw">file.remove</span>(pngs)</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SteinerChain_R.gif"
        />
      </p>
      <h1 id="with-pov-ray">With POV-Ray</h1>
      <div class="sourceCode" id="cb4">
        <pre
          class="sourceCode numberSource povray numberLines"
        ><code class="sourceCode povray"><span id="cb4-1"><span class="ot">#version</span> <span class="fl">3.7</span>;</span>
<span id="cb4-2"><span class="kw">global_settings</span> { <span class="kw">assumed_gamma</span> <span class="fl">1</span> }</span>
<span id="cb4-3"><span class="ot">#include</span> <span class="st">"colors.inc"</span></span>
<span id="cb4-4"><span class="ot">#include</span> <span class="st">"textures.inc"</span></span>
<span id="cb4-5"><span class="ot">#include</span> <span class="st">"glass.inc"</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co">// image of the circle (Center,Radius) by inversion pole c power k ---</span></span>
<span id="cb4-8"><span class="kw">#macro invertedCircle</span>(c, k, Center, Radius)</span>
<span id="cb4-9">  <span class="kw">#local r </span>= <span class="kw">sqrt</span>(<span class="kw">abs</span>(k));</span>
<span id="cb4-10">  <span class="kw">#local sign </span>= (k&gt;<span class="fl">0</span> ? <span class="fl">1</span> : <span class="fl">-1</span>);</span>
<span id="cb4-11">  <span class="kw">#local z1 </span>= sign * (Center-c)/r;</span>
<span id="cb4-12">  <span class="kw">#local D1 </span>= Radius*Radius/r/r - <span class="kw">vdot</span>(z1,z1);</span>
<span id="cb4-13">  <span class="kw">#local z2 </span>= -z1/D1;</span>
<span id="cb4-14">  <span class="kw">#local R2 </span>= <span class="kw">sqrt</span>(<span class="kw">vdot</span>(z2,z2) + <span class="fl">1</span>/D1);</span>
<span id="cb4-15">  <span class="kw">#local z3 </span>= r*z2+c;</span>
<span id="cb4-16">  &lt;z3.<span class="kw">x</span>, z3.<span class="kw">y</span>, r*R2&gt;</span>
<span id="cb4-17"><span class="ot">#end</span></span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co">// delete first element of an array ----------------------------------</span></span>
<span id="cb4-20"><span class="kw">#macro tail</span>(Array)</span>
<span id="cb4-21">  <span class="kw">#local l </span>= <span class="kw">dimension_size</span>(Array, <span class="fl">1</span>);</span>
<span id="cb4-22">  <span class="kw">#local out </span>= <span class="kw">array</span>[l<span class="fl">-1</span>];</span>
<span id="cb4-23">  #for(i, <span class="fl">0</span>, l<span class="fl">-2</span>)</span>
<span id="cb4-24">    <span class="kw">#local out</span>[i] = Array[i+<span class="fl">1</span>];</span>
<span id="cb4-25">  <span class="ot">#end</span></span>
<span id="cb4-26">  out</span>
<span id="cb4-27"><span class="ot">#end</span></span>
<span id="cb4-28"></span>
<span id="cb4-29"><span class="co">// main macro --------------------------------------------------------</span></span>
<span id="cb4-30"><span class="co">// n: array of integers &gt;1, the numbers of spheres at each step</span></span>
<span id="cb4-31"><span class="co">// phi: number -1 &lt; phi &lt; 1, phi /= 0 </span></span>
<span id="cb4-32"><span class="co">// shift: number 0 &lt;= shift &lt; 1</span></span>
<span id="cb4-33"><span class="kw">#macro Steiner3D</span>(n, phi, shift, Center, Radius, epsilon)</span>
<span id="cb4-34">  <span class="kw">#local Depth </span>= <span class="kw">dimension_size</span>(n, <span class="fl">1</span>);</span>
<span id="cb4-35">  <span class="kw">#local m </span>= n[<span class="fl">0</span>];</span>
<span id="cb4-36">  <span class="kw">#local sine </span>= <span class="kw">sin</span>(<span class="fl">pi</span>/m);</span>
<span id="cb4-37">  <span class="kw">#local Side </span>= Radius*sine; <span class="co">// side length of the m-gon </span></span>
<span id="cb4-38">  <span class="kw">#local Coef </span>= <span class="fl">1</span>/(<span class="fl">1</span>+sine); <span class="co">// Radius/(Radius+Side)</span></span>
<span id="cb4-39">  <span class="kw">#local CSide </span>= Coef*Side;</span>
<span id="cb4-40">  <span class="kw">#local CRadius </span>= Coef*Radius;</span>
<span id="cb4-41">  <span class="kw">#local invphi </span>= <span class="fl">1</span>/phi;</span>
<span id="cb4-42">  <span class="kw">#local I </span>= &lt;Radius*invphi,<span class="fl">0</span>&gt; + Center; <span class="co">// inversion pole</span></span>
<span id="cb4-43">  <span class="kw">#local k </span>= Radius*Radius*(<span class="fl">1</span>-invphi*invphi); <span class="co">// inversion power</span></span>
<span id="cb4-44">  <span class="kw">#local O1 </span>= &lt;<span class="fl">2</span>*invphi*Radius,<span class="fl">0</span>,<span class="fl">0</span>&gt;; <span class="co">// center of exterior sphere          </span></span>
<span id="cb4-45">  <span class="co">// -----------------------------------------------------------------</span></span>
<span id="cb4-46">  <span class="kw">union</span> { </span>
<span id="cb4-47">    <span class="co">// cyclides ------------------------------------------------------</span></span>
<span id="cb4-48">    <span class="ot">#if</span>(Depth=<span class="fl">1</span>)</span>
<span id="cb4-49">      <span class="kw">#local circle </span>= invertedCircle(I-Center, k, &lt;<span class="fl">0</span>,<span class="fl">0</span>&gt;, CRadius-CSide);</span>
<span id="cb4-50">      <span class="kw">#local r </span>= circle.<span class="kw">z</span>;</span>
<span id="cb4-51">      <span class="kw">#local center </span>= &lt;circle.<span class="kw">x</span>, circle.<span class="kw">y</span>&gt;;</span>
<span id="cb4-52">      <span class="kw">#local mu </span>= (Radius - r)/<span class="fl">2</span>;</span>
<span id="cb4-53">      <span class="kw">#local a </span>= (Radius + r)/<span class="fl">2</span>;</span>
<span id="cb4-54">      <span class="kw">#local c </span>= (circle.<span class="kw">x</span> - O1.<span class="kw">x</span>)/<span class="fl">2</span>;</span>
<span id="cb4-55">      <span class="kw">#local b </span>= <span class="kw">sqrt</span>(a*a-c*c);</span>
<span id="cb4-56">      <span class="kw">#local pt </span>= Center + center/<span class="fl">2</span>;</span>
<span id="cb4-57">      <span class="kw">#local O </span>= &lt;pt.<span class="kw">x</span> - O1.<span class="kw">x</span>/<span class="fl">2</span>, pt.<span class="kw">y</span>, <span class="fl">0</span>&gt;;</span>
<span id="cb4-58">      polynomial {<span class="fl">4</span> </span>
<span id="cb4-59">        xyz(<span class="fl">2</span>,<span class="fl">0</span>,<span class="fl">0</span>): <span class="fl">-2</span>*mu*mu+<span class="fl">2</span>*b*b<span class="fl">-4</span>*a*a,</span>
<span id="cb4-60">        xyz(<span class="fl">1</span>,<span class="fl">0</span>,<span class="fl">0</span>): <span class="fl">8</span>*a*c*mu,</span>
<span id="cb4-61">        xyz(<span class="fl">0</span>,<span class="fl">0</span>,<span class="fl">0</span>): <span class="fl">-4</span>*c*c*mu*mu+mu*mu*mu*mu+b*b*b*b<span class="fl">-2</span>*mu*mu*b*b,</span>
<span id="cb4-62">        xyz(<span class="fl">0</span>,<span class="fl">2</span>,<span class="fl">0</span>): <span class="fl">-2</span>*mu*mu<span class="fl">-2</span>*b*b,</span>
<span id="cb4-63">        xyz(<span class="fl">0</span>,<span class="fl">0</span>,<span class="fl">2</span>): <span class="fl">-2</span>*mu*mu+<span class="fl">2</span>*b*b,</span>
<span id="cb4-64">        xyz(<span class="fl">2</span>,<span class="fl">2</span>,<span class="fl">0</span>): <span class="fl">2</span>,</span>
<span id="cb4-65">        xyz(<span class="fl">2</span>,<span class="fl">0</span>,<span class="fl">2</span>): <span class="fl">2</span>,</span>
<span id="cb4-66">        xyz(<span class="fl">0</span>,<span class="fl">2</span>,<span class="fl">2</span>): <span class="fl">2</span>,</span>
<span id="cb4-67">        xyz(<span class="fl">4</span>,<span class="fl">0</span>,<span class="fl">0</span>): <span class="fl">1</span>,</span>
<span id="cb4-68">        xyz(<span class="fl">0</span>,<span class="fl">4</span>,<span class="fl">0</span>): <span class="fl">1</span>,</span>
<span id="cb4-69">        xyz(<span class="fl">0</span>,<span class="fl">0</span>,<span class="fl">4</span>): <span class="fl">1</span></span>
<span id="cb4-70">        <span class="kw">texture</span> { </span>
<span id="cb4-71">          Dark_Green_Glass </span>
<span id="cb4-72">          <span class="kw">finish</span> {</span>
<span id="cb4-73">            <span class="kw">reflection</span> <span class="fl">0</span></span>
<span id="cb4-74">          }</span>
<span id="cb4-75">        }</span>
<span id="cb4-76">        <span class="kw">translate</span> O</span>
<span id="cb4-77">      }</span>
<span id="cb4-78">    <span class="ot">#end</span></span>
<span id="cb4-79">    <span class="co">// spheres -------------------------------------------------------</span></span>
<span id="cb4-80">    <span class="kw">#local i</span>=<span class="fl">1</span>;</span>
<span id="cb4-81">    <span class="ot">#while</span>(i&lt;=m)</span>
<span id="cb4-82">      <span class="kw">#local beta </span>= <span class="fl">2</span>*(i+shift)*<span class="fl">pi</span>/m; </span>
<span id="cb4-83">      <span class="kw">#local pti </span>= &lt;CRadius*<span class="kw">cos</span>(beta), CRadius*<span class="kw">sin</span>(beta)&gt; + Center;</span>
<span id="cb4-84">      <span class="kw">#local circle </span>= invertedCircle(I, k, pti, CSide);</span>
<span id="cb4-85">      <span class="kw">#local center </span>= &lt;circle.<span class="kw">x</span>, circle.<span class="kw">y</span>, <span class="fl">0</span>&gt; - O1;</span>
<span id="cb4-86">      <span class="kw">#local r </span>= circle.<span class="kw">z</span>;</span>
<span id="cb4-87">      <span class="ot">#if</span>(Depth=<span class="fl">1</span>)</span>
<span id="cb4-88">        <span class="kw">sphere</span> {</span>
<span id="cb4-89">          center, r-epsilon</span>
<span id="cb4-90">          <span class="kw">texture</span> {</span>
<span id="cb4-91">            Chrome_Metal</span>
<span id="cb4-92">            <span class="kw">finish</span> {</span>
<span id="cb4-93">              <span class="kw">ambient</span> <span class="fl">0.05</span></span>
<span id="cb4-94">              <span class="kw">diffuse</span> <span class="fl">2</span></span>
<span id="cb4-95">              <span class="kw">reflection</span> <span class="fl">0</span></span>
<span id="cb4-96">              <span class="kw">brilliance</span> <span class="fl">1</span></span>
<span id="cb4-97">              <span class="kw">specular</span> <span class="fl">1.08</span></span>
<span id="cb4-98">              <span class="kw">roughness</span> <span class="fl">0.01</span></span>
<span id="cb4-99">            }</span>
<span id="cb4-100">          }</span>
<span id="cb4-101">        }</span>
<span id="cb4-102">      <span class="ot">#else</span></span>
<span id="cb4-103">        Steiner3D(tail(n), phi, -shift, center, r, epsilon)</span>
<span id="cb4-104">      <span class="ot">#end</span></span>
<span id="cb4-105">      <span class="kw">#local i </span>= i+<span class="fl">1</span>;</span>
<span id="cb4-106">    <span class="ot">#end</span></span>
<span id="cb4-107">  } <span class="co">// end of union</span></span>
<span id="cb4-108"><span class="ot">#end</span></span>
<span id="cb4-109"></span>
<span id="cb4-110"><span class="co">// ----------------------------- SCENE ---------------------------- //</span></span>
<span id="cb4-111"><span class="co">// sky ---------------------------------------------------------------</span></span>
<span id="cb4-112"><span class="kw">#declare D </span>= <span class="fl">.5</span>;</span>
<span id="cb4-113"><span class="kw">sky_sphere</span> {</span>
<span id="cb4-114">  <span class="kw">pigment</span> {</span>
<span id="cb4-115">    <span class="kw">crackle</span></span>
<span id="cb4-116">    <span class="kw">color_map</span> {</span>
<span id="cb4-117">      [<span class="kw">pow</span>(<span class="fl">0.5</span>, D) <span class="kw">color</span> Black]</span>
<span id="cb4-118">      [<span class="kw">pow</span>(<span class="fl">0.6</span>, D) <span class="kw">color</span> White*<span class="fl">10</span>]</span>
<span id="cb4-119">    }</span>
<span id="cb4-120">    <span class="kw">scale</span> <span class="fl">.005</span>/D</span>
<span id="cb4-121">  }</span>
<span id="cb4-122">}</span>
<span id="cb4-123"></span>
<span id="cb4-124"><span class="co">// ----------------------------- plot ----------------------------- //</span></span>
<span id="cb4-125"><span class="kw">#declare Center </span>= &lt;<span class="fl">0</span>,<span class="fl">0</span>&gt;; <span class="co">// arbitrary </span></span>
<span id="cb4-126"><span class="kw">#declare Radius </span>= <span class="fl">3</span>; <span class="co">// arbitrary &gt;0</span></span>
<span id="cb4-127"></span>
<span id="cb4-128"><span class="co">// camera and light source -------------------------------------------</span></span>
<span id="cb4-129"><span class="kw">camera</span> {</span>
<span id="cb4-130">  <span class="kw">location</span> &lt;<span class="fl">0</span>, <span class="fl">0</span>, <span class="fl">-12</span>&gt;</span>
<span id="cb4-131">  <span class="kw">look_at</span> &lt;Center.<span class="kw">x</span>, Center.<span class="kw">y</span>, <span class="fl">0</span>&gt;</span>
<span id="cb4-132">  <span class="kw">angle</span> <span class="fl">40</span></span>
<span id="cb4-133">  <span class="kw">rotate</span> &lt;<span class="fl">0</span>,<span class="fl">0</span>,<span class="fl">0</span>&gt;</span>
<span id="cb4-134">}</span>
<span id="cb4-135"><span class="kw">light_source</span> { &lt;<span class="fl">0</span>, <span class="fl">0</span>, <span class="fl">-60</span>&gt; White }</span>
<span id="cb4-136"></span>
<span id="cb4-137"><span class="co">//</span></span>
<span id="cb4-138"><span class="kw">#declare n </span>= <span class="kw">array</span>[<span class="fl">3</span>] {<span class="fl">3</span>,<span class="fl">4</span>,<span class="fl">6</span>};</span>
<span id="cb4-139"><span class="kw">#declare phi </span>= <span class="fl">0.3</span>;</span>
<span id="cb4-140"><span class="kw">#declare nframes </span>= <span class="fl">45</span>;</span>
<span id="cb4-141"><span class="kw">#declare shift </span>= <span class="kw">frame_number</span>/nframes; </span>
<span id="cb4-142"><span class="kw">object</span> {</span>
<span id="cb4-143">  Steiner3D(n, phi, shift, Center, Radius, <span class="fl">0.005</span>)</span>
<span id="cb4-144">  <span class="kw">rotate</span> &lt;<span class="fl">50</span>, <span class="fl">0</span>, <span class="fl">0</span>&gt;</span>
<span id="cb4-145">  <span class="kw">translate</span> &lt;<span class="fl">0</span>, <span class="fl">0</span>, <span class="fl">5</span>&gt;</span>
<span id="cb4-146">  <span class="kw">scale</span> <span class="fl">1.85</span></span>
<span id="cb4-147">}</span>
<span id="cb4-148"></span>
<span id="cb4-149"><span class="co">/* ini file ----------------------------------------------------------</span></span>
<span id="cb4-150"><span class="co">Antialias = On</span></span>
<span id="cb4-151"><span class="co">Antialias_Threshold = 0.3</span></span>
<span id="cb4-152"><span class="co">Antialias_Depth = 3</span></span>
<span id="cb4-153"><span class="co">Input_File_Name = SteinerChain.pov</span></span>
<span id="cb4-154"><span class="co">Initial_Frame = 1</span></span>
<span id="cb4-155"><span class="co">Final_Frame = 45</span></span>
<span id="cb4-156"><span class="co">Cyclic_Animation = on</span></span>
<span id="cb4-157"><span class="co">Pause_when_Done = off</span></span>
<span id="cb4-158"><span class="co">------------------------------------------------------------------- */</span></span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SteinerChain_POVRAY.gif"
        />
      </p>
      <p><br /></p>
      <p>We get a nice result when we map a picture to the spheres:</p>
      <div class="sourceCode" id="cb5">
        <pre
          class="sourceCode numberSource povray numberLines"
        ><code class="sourceCode povray"><span id="cb5-1"><span class="ot">#if</span>(Depth=<span class="fl">1</span>)</span>
<span id="cb5-2">  <span class="kw">sphere</span> {</span>
<span id="cb5-3">    center, r-epsilon</span>
<span id="cb5-4">    <span class="kw">pigment</span>{</span>
<span id="cb5-5">      <span class="kw">image_map</span> {</span>
<span id="cb5-6">        <span class="dt">png</span> <span class="st">"R-Ladies.png"</span></span>
<span id="cb5-7">        <span class="kw">interpolate</span> <span class="fl">2</span></span>
<span id="cb5-8">      }</span>
<span id="cb5-9">      <span class="kw">scale</span> <span class="fl">1.1</span>*<span class="kw">sqrt</span>(r)</span>
<span id="cb5-10">    }</span>
<span id="cb5-11">  }</span>
<span id="cb5-12"><span class="ot">#else</span></span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SteinerChain_POVRAY2.gif"
        />
      </p>
      <h1 id="with-asymptote">With Asymptote</h1>
      <p>This Asymptote program produces the frames of the animation:</p>
      <div class="sourceCode" id="cb6">
        <pre
          class="sourceCode numberSource cpp numberLines"
        ><code class="sourceCode cpp"><span id="cb6-1">settings.render = <span class="dv">4</span>;</span>
<span id="cb6-2">settings.outformat = <span class="st">"eps"</span>;</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co">// -------------------------------------------------------------------</span></span>
<span id="cb6-5"><span class="kw">import</span> solids;</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co">// files to create</span></span>
<span id="cb6-8">string[] files = {</span>
<span id="cb6-9">    <span class="st">"SC-000"</span>, <span class="st">"SC-001"</span>, <span class="st">"SC-002"</span>, <span class="st">"SC-003"</span>, <span class="st">"SC-004"</span>, <span class="st">"SC-005"</span>,</span>
<span id="cb6-10">    <span class="st">"SC-006"</span>, <span class="st">"SC-007"</span>, <span class="st">"SC-008"</span>, <span class="st">"SC-009"</span>, <span class="st">"SC-010"</span>, <span class="st">"SC-011"</span>,</span>
<span id="cb6-11">    <span class="st">"SC-012"</span>, <span class="st">"SC-013"</span>, <span class="st">"SC-014"</span>, <span class="st">"SC-015"</span>, <span class="st">"SC-016"</span>, <span class="st">"SC-017"</span>,</span>
<span id="cb6-12">    <span class="st">"SC-018"</span>, <span class="st">"SC-019"</span>, <span class="st">"SC-020"</span>, <span class="st">"SC-021"</span>, <span class="st">"SC-022"</span>, <span class="st">"SC-023"</span>,</span>
<span id="cb6-13">    <span class="st">"SC-024"</span>, <span class="st">"SC-025"</span>, <span class="st">"SC-026"</span>, <span class="st">"SC-027"</span>, <span class="st">"SC-028"</span>, <span class="st">"SC-029"</span>,</span>
<span id="cb6-14">    <span class="st">"SC-030"</span>, <span class="st">"SC-031"</span>, <span class="st">"SC-032"</span>, <span class="st">"SC-033"</span>, <span class="st">"SC-034"</span>, <span class="st">"SC-035"</span>,</span>
<span id="cb6-15">    <span class="st">"SC-036"</span>, <span class="st">"SC-037"</span>, <span class="st">"SC-038"</span>, <span class="st">"SC-039"</span>, <span class="st">"SC-040"</span>, <span class="st">"SC-041"</span>,</span>
<span id="cb6-16">    <span class="st">"SC-042"</span>, <span class="st">"SC-043"</span>, <span class="st">"SC-044"</span>};</span>
<span id="cb6-17"></span>
<span id="cb6-18"><span class="co">// camera and light --------------------------------------------------</span></span>
<span id="cb6-19">size(<span class="dv">10</span><span class="er">cm</span>);</span>
<span id="cb6-20">currentprojection = orthographic(<span class="dv">2</span>,<span class="dv">2</span>,<span class="dv">6</span>);</span>
<span id="cb6-21">currentlight = (<span class="dv">20</span>,<span class="dv">20</span>,<span class="dv">60</span>);</span>
<span id="cb6-22">currentlight.background = black;</span>
<span id="cb6-23">viewportmargin = (<span class="dv">10</span>,<span class="dv">10</span>);</span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="co">// image of the circle (Center,Radius) by inversion pole c power k ---</span></span>
<span id="cb6-26"><span class="kw">struct</span> Circle {</span>
<span id="cb6-27">  pair center;</span>
<span id="cb6-28">  real radius;</span>
<span id="cb6-29">}</span>
<span id="cb6-30">Circle invertedCircle(pair c, real k, pair Center, real Radius){</span>
<span id="cb6-31">    real r = sqrt(abs(k));</span>
<span id="cb6-32">    pair z1 = sgn(k) * (Center-c)/r;</span>
<span id="cb6-33">    real D1 = Radius*Radius/r/r - dot(z1,z1);</span>
<span id="cb6-34">    pair z2 = -z1/D1;</span>
<span id="cb6-35">    real R2 = sqrt(dot(z2,z2) + <span class="dv">1</span>/D1);</span>
<span id="cb6-36">    Circle out;</span>
<span id="cb6-37">    out.center = r*z2 + c;</span>
<span id="cb6-38">    out.radius = r*R2;</span>
<span id="cb6-39">    <span class="cf">return</span> out;</span>
<span id="cb6-40">}</span>
<span id="cb6-41"></span>
<span id="cb6-42"><span class="co">// -------------------------------------------------------------------</span></span>
<span id="cb6-43"><span class="kw">struct</span> Sphere {</span>
<span id="cb6-44">    triple center;</span>
<span id="cb6-45">    real radius;</span>
<span id="cb6-46">}</span>
<span id="cb6-47"></span>
<span id="cb6-48"><span class="co">// -------------------------------------------------------------------</span></span>
<span id="cb6-49"><span class="kw">struct</span> Cyclide {</span>
<span id="cb6-50">  real mu;</span>
<span id="cb6-51">  real a;</span>
<span id="cb6-52">  real c;</span>
<span id="cb6-53">  triple shift;</span>
<span id="cb6-54">}</span>
<span id="cb6-55"></span>
<span id="cb6-56"><span class="co">// -------------------------------------------------------------------</span></span>
<span id="cb6-57"><span class="co">// n: array of length depth, the numbers of spheres for each step</span></span>
<span id="cb6-58"><span class="co">// phi: number -1 &lt; phi &lt; 1, phi /= 0 </span></span>
<span id="cb6-59"><span class="co">// shift: number 0 &lt;= shift &lt; 1</span></span>
<span id="cb6-60"><span class="dt">void</span> Steiner3D(Sphere[] spheres, Cyclide[] cyclides, <span class="dt">int</span>[] n, real phi, </span>
<span id="cb6-61">                <span class="dt">int</span> depth, real shift, pair Center = (<span class="dv">0</span>,<span class="dv">0</span>), real Radius = <span class="dv">2</span>){</span>
<span id="cb6-62">    real m = n[<span class="dv">0</span>];</span>
<span id="cb6-63">    real sine = sin(pi/m);</span>
<span id="cb6-64">    real Side = Radius*sine; <span class="co">// side length of the m-gon </span></span>
<span id="cb6-65">    real Coef = <span class="dv">1</span>/(<span class="dv">1</span>+sine); <span class="co">// Radius/(Radius+Side)</span></span>
<span id="cb6-66">    real CSide = Coef*Side;</span>
<span id="cb6-67">    real CRadius = Coef*Radius;</span>
<span id="cb6-68">    real invphi = <span class="dv">1</span>/phi;</span>
<span id="cb6-69">    pair I = (Radius*invphi,<span class="dv">0</span>) + Center; <span class="co">// inversion pole</span></span>
<span id="cb6-70">    real k = Radius*Radius*(<span class="dv">1</span>-invphi*invphi); <span class="co">// inversion power</span></span>
<span id="cb6-71">    real O1x = <span class="dv">2</span>*invphi*Radius; <span class="co">// (O1x,0,0) center of exterior sphere </span></span>
<span id="cb6-72">    <span class="co">// -----------------------------------------------------------------</span></span>
<span id="cb6-73">    <span class="cf">if</span>(depth == <span class="dv">1</span>){</span>
<span id="cb6-74">        Cyclide newcyclide;</span>
<span id="cb6-75">        Circle circle = invertedCircle(I-Center, k, (<span class="dv">0</span>,<span class="dv">0</span>), CRadius-CSide);</span>
<span id="cb6-76">        newcyclide.mu = (Radius - circle.radius)/<span class="dv">2</span>;</span>
<span id="cb6-77">        newcyclide.a = (Radius + circle.radius)/<span class="dv">2</span>;</span>
<span id="cb6-78">        newcyclide.c = (circle.center.x - O1x)/<span class="dv">2</span>;</span>
<span id="cb6-79">        pair pt = Center + circle.center/<span class="dv">2</span>;</span>
<span id="cb6-80">        newcyclide.shift = (pt.x - O1x/<span class="dv">2</span>, pt.y, <span class="dv">0</span>);</span>
<span id="cb6-81">        cyclides.push(newcyclide);</span>
<span id="cb6-82">    } </span>
<span id="cb6-83">    <span class="co">// -----------------------------------------------------------------</span></span>
<span id="cb6-84">    <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; m; ++i){</span>
<span id="cb6-85">        real beta = <span class="dv">2</span>*(i+shift)*pi/m;</span>
<span id="cb6-86">        pair pti = (CRadius*cos(beta), CRadius*sin(beta)) + Center;</span>
<span id="cb6-87">        Circle circle = invertedCircle(I, k, pti, CSide);</span>
<span id="cb6-88">        pair center = (circle.center.x - O1x, circle.center.y);</span>
<span id="cb6-89">        real r = circle.radius;</span>
<span id="cb6-90">        <span class="cf">if</span>(depth == <span class="dv">1</span>){</span>
<span id="cb6-91">            Sphere newsphere;</span>
<span id="cb6-92">            newsphere.center = (center.x, center.y, <span class="dv">0</span>);</span>
<span id="cb6-93">            newsphere.radius = r;</span>
<span id="cb6-94">            spheres.push(newsphere);</span>
<span id="cb6-95">        }<span class="cf">else</span>{</span>
<span id="cb6-96">            Steiner3D(spheres, cyclides, n[<span class="dv">1</span>:], phi, depth-<span class="dv">1</span>, -shift, </span>
<span id="cb6-97">                center, r);</span>
<span id="cb6-98">        }</span>
<span id="cb6-99">    }</span>
<span id="cb6-100">}</span>
<span id="cb6-101"></span>
<span id="cb6-102"><span class="co">// -------------------------------------------------------------------</span></span>
<span id="cb6-103"><span class="dt">int</span>[] n = {<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>};</span>
<span id="cb6-104">real phi = <span class="fl">0.4</span>;</span>
<span id="cb6-105"><span class="dt">int</span> depth = n.length;</span>
<span id="cb6-106"></span>
<span id="cb6-107">path3 boundingbox = circle(c=O, r=<span class="fl">2.1</span>, normal=Z);</span>
<span id="cb6-108"></span>
<span id="cb6-109">real epsilon = <span class="fl">0.005</span>;</span>
<span id="cb6-110"></span>
<span id="cb6-111"><span class="cf">for</span>(<span class="dt">int</span> k = <span class="dv">0</span>; k &lt; files.length; ++k){</span>
<span id="cb6-112">    <span class="co">// compute spheres and cyclides ------------------------------------</span></span>
<span id="cb6-113">    Sphere[] spheres = <span class="kw">new</span> Sphere[<span class="dv">0</span>];</span>
<span id="cb6-114">    Cyclide[] cyclides = <span class="kw">new</span> Cyclide[<span class="dv">0</span>];</span>
<span id="cb6-115">    real shift = k/files.length;</span>
<span id="cb6-116">    Steiner3D(spheres, cyclides, n, phi, depth, shift);</span>
<span id="cb6-117">    <span class="co">//</span></span>
<span id="cb6-118">    picture pic;</span>
<span id="cb6-119">    draw(pic, boundingbox, black+opacity(<span class="dv">0</span>));</span>
<span id="cb6-120">    <span class="co">// draw the spheres ------------------------------------------------</span></span>
<span id="cb6-121">    <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; spheres.length; ++i){</span>
<span id="cb6-122">        Sphere s = spheres[i];</span>
<span id="cb6-123">        draw(pic, surface(sphere(s.center, s.radius-epsilon)), </span>
<span id="cb6-124">          rgb(<span class="st">"8c2981ff"</span>));</span>
<span id="cb6-125">    }</span>
<span id="cb6-126">    <span class="co">// draw the cyclides -----------------------------------------------</span></span>
<span id="cb6-127">    <span class="cf">for</span>(<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; cyclides.length; ++i){</span>
<span id="cb6-128">        Cyclide c = cyclides[i];</span>
<span id="cb6-129">        real b = sqrt(c.a*c.a-c.c*c.c);</span>
<span id="cb6-130">        triple F(pair uv){</span>
<span id="cb6-131">            real h = c.a-c.c*cos(uv.x)*cos(uv.y);</span>
<span id="cb6-132">            real x = (c.mu*(c.c-c.a*cos(uv.x)*cos(uv.y))+b*b*cos(uv.x))/h;</span>
<span id="cb6-133">            real y = (b*sin(uv.x)*(c.a-c.mu*cos(uv.y)))/h;</span>
<span id="cb6-134">            real z = b*sin(uv.y)*(c.c*cos(uv.x)-c.mu)/h;</span>
<span id="cb6-135">            <span class="cf">return</span> (x,y,z);</span>
<span id="cb6-136">        }</span>
<span id="cb6-137">        surface s = surface(F, (<span class="dv">0</span>,<span class="dv">0</span>), (<span class="dv">2</span><span class="er">pi</span>,<span class="dv">2</span><span class="er">pi</span>), <span class="dv">40</span>, <span class="dv">40</span>, Spline);</span>
<span id="cb6-138">        draw(pic, shift(c.shift)*s, yellow+opacity(<span class="fl">0.2</span>));</span>
<span id="cb6-139">    }</span>
<span id="cb6-140">    <span class="co">// -----------------------------------------------------------------</span></span>
<span id="cb6-141">    add(pic);</span>
<span id="cb6-142">    shipout(files[k], bbox(black, FillDraw(black)));</span>
<span id="cb6-143">    erase();</span>
<span id="cb6-144">}</span></code></pre>
      </div>
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/SteinerChain_Asymptote.gif"
        />
      </p>
      <h1 id="with-three.js">With three.js</h1>
      <p>
        Here is a variant with <code>three.js</code>. I replaced the spheres
        with “Barth polyedra”.
      </p>
      <iframe
        src="../frames/threejs_BarthPolyhedronSteiner.html"
        width="100%"
        height="500px"
        scrolling="no"
        frameborder="0"
      >
      </iframe>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Sat, 13 Jul 2019 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/SteinerChains.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
    <item>
      <title>Plotting the columns of a Datatable</title>
      <link>https://laustep.github.io/stlahblog/posts/PlotDatatableColumns.html</link>
      <description><![CDATA[<div class="container-fluid">
  <div class="main col-sm-12">
    <div class="content">
      <p>
        <img
          src="https://laustep.github.io/stlahblog/posts/figures/PlotDatatableColumns.gif"
        />
      </p>
      <p><br /></p>
      <p>Here is the code of this app:</p>
      <div class="sourceCode" id="cb1">
        <pre
          class="sourceCode numberSource r numberLines"
        ><code class="sourceCode r"><span id="cb1-1"><span class="kw">library</span>(shiny)</span>
<span id="cb1-2"><span class="kw">library</span>(shinyBS)</span>
<span id="cb1-3"><span class="kw">library</span>(DT)</span>
<span id="cb1-4"><span class="kw">library</span>(ggplot2)</span>
<span id="cb1-5"></span>
<span id="cb1-6">ui &lt;-<span class="st"> </span><span class="kw">fluidPage</span>(</span>
<span id="cb1-7">  <span class="kw">uiOutput</span>(<span class="st">"modals"</span>),</span>
<span id="cb1-8">  <span class="kw">DTOutput</span>(<span class="st">"table"</span>)</span>
<span id="cb1-9">)</span>
<span id="cb1-10"></span>
<span id="cb1-11">server &lt;-<span class="st"> </span><span class="cf">function</span>(input, output, session){</span>
<span id="cb1-12"></span>
<span id="cb1-13">  dat &lt;-<span class="st"> </span>iris</span>
<span id="cb1-14"></span>
<span id="cb1-15">  buttons &lt;-<span class="st"> </span><span class="kw">lapply</span>(<span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(dat), <span class="cf">function</span>(i){</span>
<span id="cb1-16">    <span class="kw">actionButton</span>(</span>
<span id="cb1-17">      <span class="kw">paste0</span>(<span class="st">"this_id_is_not_used"</span>,i),</span>
<span id="cb1-18">      <span class="st">"plot"</span>,</span>
<span id="cb1-19">      <span class="dt">class =</span> <span class="st">"btn-primary btn-sm"</span>,</span>
<span id="cb1-20">      <span class="dt">style =</span> <span class="st">"border-radius: 50%;"</span>, </span>
<span id="cb1-21">      <span class="dt">onclick =</span> <span class="kw">sprintf</span>(</span>
<span id="cb1-22">        <span class="st">"Shiny.setInputValue('button', %d, {priority:'event'});</span></span>
<span id="cb1-23"><span class="st">        $('#modal%d').modal('show');"</span>, i, i)</span>
<span id="cb1-24">    )</span>
<span id="cb1-25">  })</span>
<span id="cb1-26">  </span>
<span id="cb1-27">  output[[<span class="st">"table"</span>]] &lt;-<span class="st"> </span><span class="kw">renderDT</span>({</span>
<span id="cb1-28">    sketch &lt;-<span class="st"> </span>tags<span class="op">$</span><span class="kw">table</span>(</span>
<span id="cb1-29">      <span class="dt">class =</span> <span class="st">"row-border stripe hover compact"</span>,</span>
<span id="cb1-30">      <span class="kw">tableHeader</span>(<span class="kw">c</span>(<span class="st">""</span>, <span class="kw">names</span>(dat))),</span>
<span id="cb1-31">      <span class="kw">tableFooter</span>(<span class="kw">c</span>(<span class="st">""</span>, buttons))</span>
<span id="cb1-32">    )</span>
<span id="cb1-33">    <span class="kw">datatable</span>(</span>
<span id="cb1-34">      dat, <span class="dt">container =</span> sketch, </span>
<span id="cb1-35">      <span class="dt">options =</span> </span>
<span id="cb1-36">        <span class="kw">list</span>(</span>
<span id="cb1-37">          <span class="dt">columnDefs =</span> <span class="kw">list</span>(</span>
<span id="cb1-38">            <span class="kw">list</span>(</span>
<span id="cb1-39">              <span class="dt">className =</span> <span class="st">"dt-center"</span>,</span>
<span id="cb1-40">              <span class="dt">targets =</span> <span class="st">"_all"</span></span>
<span id="cb1-41">            )</span>
<span id="cb1-42">          )</span>
<span id="cb1-43">        )</span>
<span id="cb1-44">    )</span>
<span id="cb1-45">  })</span>
<span id="cb1-46"></span>
<span id="cb1-47">  <span class="co"># modals ####</span></span>
<span id="cb1-48">  output[[<span class="st">"modals"</span>]] &lt;-<span class="st"> </span><span class="kw">renderUI</span>({</span>
<span id="cb1-49">    <span class="kw">lapply</span>(<span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(dat), <span class="cf">function</span>(i){</span>
<span id="cb1-50">      <span class="kw">bsModal</span>(</span>
<span id="cb1-51">        <span class="dt">id =</span> <span class="kw">paste0</span>(<span class="st">"modal"</span>,i),</span>
<span id="cb1-52">        <span class="dt">title =</span> <span class="kw">names</span>(dat)[i],</span>
<span id="cb1-53">        <span class="dt">trigger =</span> <span class="kw">paste0</span>(<span class="st">"this_is_not_used"</span>,i),</span>
<span id="cb1-54">        <span class="cf">if</span>(<span class="kw">is.numeric</span>(dat[[i]]) <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">length</span>(<span class="kw">unique</span>(dat[[i]]))<span class="op">&gt;</span><span class="dv">19</span>){</span>
<span id="cb1-55">          <span class="kw">fluidRow</span>(</span>
<span id="cb1-56">            <span class="kw">column</span>(<span class="dv">5</span>, <span class="kw">radioButtons</span>(<span class="kw">paste0</span>(<span class="st">"radio"</span>,i), <span class="st">""</span>,</span>
<span id="cb1-57">                       <span class="kw">c</span>(<span class="st">"density"</span>, <span class="st">"histogram"</span>), <span class="dt">inline =</span> <span class="ot">TRUE</span>)),</span>
<span id="cb1-58">            <span class="kw">column</span>(<span class="dv">7</span>,</span>
<span id="cb1-59">                   <span class="kw">conditionalPanel</span>(</span>
<span id="cb1-60">                     <span class="dt">condition =</span> <span class="kw">sprintf</span>(<span class="st">"input.radio%d=='histogram'"</span>,i),</span>
<span id="cb1-61">                     <span class="kw">sliderInput</span>(<span class="kw">paste0</span>(<span class="st">"slider"</span>,i), <span class="st">"Number of bins"</span>,</span>
<span id="cb1-62">                                 <span class="dt">min =</span> <span class="dv">5</span>, <span class="dt">max =</span> <span class="dv">100</span>, <span class="dt">value =</span> <span class="dv">30</span>)</span>
<span id="cb1-63">                   ))</span>
<span id="cb1-64">          )</span>
<span id="cb1-65">        },</span>
<span id="cb1-66">        <span class="kw">plotOutput</span>(<span class="kw">paste0</span>(<span class="st">"plot"</span>,i))</span>
<span id="cb1-67">      )</span>
<span id="cb1-68">    })</span>
<span id="cb1-69">  })</span>
<span id="cb1-70">  </span>
<span id="cb1-71">  <span class="co"># plots in modals ####</span></span>
<span id="cb1-72">  <span class="cf">for</span>(i <span class="cf">in</span> <span class="dv">1</span><span class="op">:</span><span class="kw">ncol</span>(dat)){</span>
<span id="cb1-73">    <span class="kw">local</span>({</span>
<span id="cb1-74">      ii &lt;-<span class="st"> </span>i</span>
<span id="cb1-75">      output[[<span class="kw">paste0</span>(<span class="st">"plot"</span>,ii)]] &lt;-<span class="st"> </span><span class="kw">renderPlot</span>({</span>
<span id="cb1-76">        <span class="cf">if</span>(<span class="kw">is.numeric</span>(dat[[ii]]) <span class="op">&amp;&amp;</span><span class="st"> </span><span class="kw">length</span>(<span class="kw">unique</span>(dat[[ii]]))<span class="op">&gt;</span><span class="dv">19</span>){</span>
<span id="cb1-77">          <span class="cf">if</span>(input[[<span class="kw">paste0</span>(<span class="st">"radio"</span>,ii)]] <span class="op">==</span><span class="st"> "density"</span>){</span>
<span id="cb1-78">            <span class="kw">ggplot</span>(dat, <span class="kw">aes_string</span>(<span class="kw">names</span>(dat)[ii])) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-79"><span class="st">              </span><span class="kw">geom_density</span>(<span class="dt">fill =</span> <span class="st">"seashell"</span>, <span class="dt">color =</span> <span class="st">"seashell"</span>) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-80"><span class="st">              </span><span class="kw">stat_density</span>(<span class="dt">geom =</span> <span class="st">"line"</span>, <span class="dt">size =</span> <span class="dv">1</span>) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-81"><span class="st">              </span><span class="kw">theme_bw</span>() <span class="op">+</span><span class="st"> </span><span class="kw">theme</span>(<span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">16</span>))</span>
<span id="cb1-82">          }<span class="cf">else</span>{</span>
<span id="cb1-83">            <span class="kw">ggplot</span>(dat, <span class="kw">aes_string</span>(<span class="kw">names</span>(dat)[ii])) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-84"><span class="st">              </span><span class="kw">geom_histogram</span>(<span class="dt">bins =</span> input[[<span class="kw">paste0</span>(<span class="st">"slider"</span>,ii)]]) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-85"><span class="st">              </span><span class="kw">theme_bw</span>() <span class="op">+</span><span class="st"> </span><span class="kw">theme</span>(<span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">16</span>))</span>
<span id="cb1-86">          }</span>
<span id="cb1-87">        }<span class="cf">else</span>{</span>
<span id="cb1-88">          dat[[<span class="st">".x"</span>]] &lt;-<span class="st"> </span></span>
<span id="cb1-89"><span class="st">            </span><span class="kw">factor</span>(dat[[ii]], <span class="dt">levels =</span> <span class="kw">names</span>(<span class="kw">sort</span>(<span class="kw">table</span>(dat[[ii]]), </span>
<span id="cb1-90">                                                 <span class="dt">decreasing=</span><span class="ot">TRUE</span>)))</span>
<span id="cb1-91">          gg &lt;-<span class="st"> </span><span class="kw">ggplot</span>(dat, <span class="kw">aes</span>(.x)) <span class="op">+</span><span class="st"> </span><span class="kw">geom_bar</span>() <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-92"><span class="st">            </span><span class="kw">geom_text</span>(<span class="dt">stat=</span><span class="st">"count"</span>, <span class="kw">aes</span>(<span class="dt">label=</span>..count..), <span class="dt">vjust=</span><span class="op">-</span><span class="fl">0.5</span>) <span class="op">+</span><span class="st"> </span></span>
<span id="cb1-93"><span class="st">            </span><span class="kw">xlab</span>(<span class="kw">names</span>(dat)[ii]) <span class="op">+</span><span class="st"> </span><span class="kw">theme_bw</span>()</span>
<span id="cb1-94">          <span class="cf">if</span>(<span class="kw">max</span>(<span class="kw">nchar</span>(<span class="kw">levels</span>(dat<span class="op">$</span>.x)))<span class="op">*</span><span class="kw">nlevels</span>(dat<span class="op">$</span>.x)<span class="op">&gt;</span><span class="dv">40</span>){</span>
<span id="cb1-95">            gg &lt;-<span class="st"> </span>gg <span class="op">+</span><span class="st"> </span><span class="kw">theme</span>(<span class="dt">axis.text.x =</span> </span>
<span id="cb1-96">                               <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">12</span>, <span class="dt">angle =</span> <span class="dv">45</span>, </span>
<span id="cb1-97">                                            <span class="dt">vjust =</span> <span class="fl">0.5</span>, <span class="dt">hjust =</span> <span class="fl">0.5</span>))</span>
<span id="cb1-98">          }<span class="cf">else</span>{</span>
<span id="cb1-99">            gg &lt;-<span class="st"> </span>gg <span class="op">+</span><span class="st"> </span><span class="kw">theme</span>(<span class="dt">axis.text.x =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">12</span>))</span>
<span id="cb1-100">          }</span>
<span id="cb1-101">          gg <span class="op">+</span><span class="st"> </span><span class="kw">theme</span>(<span class="dt">axis.title =</span> <span class="kw">element_text</span>(<span class="dt">size =</span> <span class="dv">16</span>))</span>
<span id="cb1-102">        }</span>
<span id="cb1-103">      })</span>
<span id="cb1-104">    })</span>
<span id="cb1-105">  }</span>
<span id="cb1-106">  </span>
<span id="cb1-107">}</span>
<span id="cb1-108"></span>
<span id="cb1-109"><span class="kw">shinyApp</span>(ui, server)</span></code></pre>
      </div>
    </div>
  </div>
</div>
]]></description>
      <pubDate>Wed, 10 Jul 2019 00:00:00 UT</pubDate>
      <guid>https://laustep.github.io/stlahblog/posts/PlotDatatableColumns.html</guid>
      <dc:creator>Stéphane Laurent</dc:creator>
      <category>R</category>
    </item>
  </channel>
</rss>

